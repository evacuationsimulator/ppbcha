{"version":3,"sources":["webpack:///./node_modules/terriajs-cesium/Source/Scene/MaterialAppearance.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/DynamicGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/createWorldImagery.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Globe.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/GlobeFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/GlobeVS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/GroundAtmosphere.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/GlobeSurfaceShaderSet.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/GlobeSurfaceTileProvider.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/TerrainFillMesh.js","webpack:///./node_modules/terriajs-cesium/Source/Core/TileEdge.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ImageryLayerCollection.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/QuadtreePrimitive.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/QuadtreeOccluders.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/QuadtreeTile.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/TileReplacementQueue.js","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/waterNormalsSmall.jpg","webpack:///./node_modules/terriajs-cesium/Source/Scene/Moon.js","webpack:///./node_modules/terriajs-cesium/Source/Core/IauOrientationAxes.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Iau2000Orientation.js","webpack:///./node_modules/terriajs-cesium/Source/Core/IauOrientationParameters.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/EllipsoidPrimitive.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/EllipsoidFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/EllipsoidVS.js","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/moonSmall.jpg","webpack:///./node_modules/terriajs-cesium/Source/Scene/Scene.js","webpack:///./node_modules/terriajs-cesium/Source/Core/mergeSort.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Occluder.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/ComputeEngine.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/Context.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/ShaderCache.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/TextureCache.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/UniformState.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/BrdfLutGenerator.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/BrdfLutGeneratorFS.js","webpack:///./node_modules/terriajs-cesium/Source/Core/FrustumOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/DepthPlane.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/DepthPlaneFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/DepthPlaneVS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/DerivedCommand.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/DeviceOrientationCameraController.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Fog.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/FrameState.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/DepthViewPacked.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/PassThroughDepth.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/InvertClassification.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/JobScheduler.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PerformanceDisplay.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PickDepth.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PostProcessStageCollection.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PostProcessStageLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/AcesTonemappingStage.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/AmbientOcclusionGenerate.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/AmbientOcclusionModulate.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/BlackAndWhite.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/BloomComposite.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/Brightness.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/ContrastBias.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/DepthOfField.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/DepthView.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/EdgeDetection.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/FilmicTonemapping.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/FXAA.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/LensFlare.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/ModifiedReinhardTonemapping.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/NightVision.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/ReinhardTonemapping.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/Silhouette.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/Shaders/FXAA3_11.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/AutoExposure.js","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/LensFlare/DirtMask.jpg","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/LensFlare/StarBurst.jpg","webpack:///./node_modules/terriajs-cesium/Source/Scene/Tonemapper.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/SceneTransitioner.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ScreenSpaceCameraController.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/CameraEventAggregator.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ShadowMapShader.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/SunPostProcess.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/AdditiveBlend.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/BrightPass.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/View.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/FrustumCommands.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/OIT.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/AdjustTranslucentFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/CompositeOITFS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PickDepthFramebuffer.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PickFramebuffer.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/SkyAtmosphere.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SkyAtmosphereFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SkyAtmosphereVS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/SkyBox.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/loadCubeMap.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SkyBoxFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SkyBoxVS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Sun.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SunFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SunTextureFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/SunVS.js","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_mx.jpg","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_my.jpg","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_mz.jpg","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_px.jpg","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_py.jpg","webpack:///./node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_pz.jpg","webpack:///./node_modules/terriajs-cesium/Source/Scene/OrderedGroundPrimitiveCollection.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/BillboardVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GeometryVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/AllMaterialAppearanceFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/AllMaterialAppearanceVS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/BasicMaterialAppearanceFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/BasicMaterialAppearanceVS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/TexturedMaterialAppearanceFS.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/Appearances/TexturedMaterialAppearanceVS.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/BoxGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CorridorGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CylinderGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/EllipseGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/EllipsoidGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PlaneGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PlaneGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PlaneOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolygonGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolygonOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineVolumeGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CornerType.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/RectangleGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGroundGeometryColorBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGroundGeometryPerMaterialBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Core/RectangleCollisionChecker.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/rbush.js","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/quickselect.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticOutlineGeometryBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/WallGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallOutlineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/MaterialProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/LabelVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ModelVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PathVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PointVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineVisualizer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/PolylineGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGroundPolylinePerMaterialBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/PassState.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositeProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/TileSelectionResult.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/RenderbufferFormat.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/CompositePositionProperty.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ReferenceProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/QuadtreeTileLoadState.js","webpack:///./node_modules/terriajs-cesium/Source/Core/BoxGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/Camera.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/PassThrough.js","webpack:///./node_modules/terriajs-cesium/Source/Renderer/Renderbuffer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/GroundGeometryUpdater.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/ScaledPositionProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Visibility.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipsoidGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/MapMode2D.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PostProcessStageSampleMode.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PrimitiveCollection.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/heightReferenceOnEntityPropertyChanged.js","webpack:///./node_modules/terriajs-cesium/Source/Core/PolylineVolumeGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Widgets/CesiumWidget/CesiumWidget.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/GlobeSurfaceTile.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/TerrainState.js","webpack:///./node_modules/terriajs-cesium/Source/Core/Simon1994PlanetaryPositions.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/ViewportQuadVS.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/DebugCameraPrimitive.js","webpack:///./node_modules/terriajs-cesium/Source/Core/FrustumGeometry.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/GlobeDepth.js","webpack:///./node_modules/terriajs-cesium/Source/Shaders/PostProcessStages/GaussianBlur1D.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PostProcessStage.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PostProcessStageComposite.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/PostProcessStageTextureCache.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/CameraEventType.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/ShadowMap.js","webpack:///./node_modules/terriajs-cesium/Source/Scene/SceneFramebuffer.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/DataSourceDisplay.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/TerrainOffsetProperty.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CorridorGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CylinderGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/DynamicGeometryBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Core/EllipseGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/CoplanarPolygonGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGeometryColorBatch.js","webpack:///./node_modules/terriajs-cesium/Source/DataSources/StaticGeometryPerMaterialBatch.js","webpack:///./node_modules/terriajs-cesium/Source/Core/WallGeometryLibrary.js","webpack:///./node_modules/terriajs-cesium/Source/Core/ShowGeometryInstanceAttribute.js","webpack:///./node_modules/terriajs-cesium/Source/Core/DistanceDisplayConditionGeometryInstanceAttribute.js"],"names":["__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","undefined","defaultValue","defined","defineProperties","freezeObject","VertexFormat","AllMaterialAppearanceFS","AllMaterialAppearanceVS","BasicMaterialAppearanceFS","BasicMaterialAppearanceVS","TexturedMaterialAppearanceFS","TexturedMaterialAppearanceVS","Appearance","Material","MaterialAppearance","options","EMPTY_OBJECT","translucent","closed","materialSupport","MaterialSupport","TEXTURED","this","material","fromType","ColorType","_vertexShaderSource","vertexShaderSource","_fragmentShaderSource","fragmentShaderSource","_renderState","getDefaultRenderState","renderState","_closed","_materialSupport","_vertexFormat","vertexFormat","_flat","flat","_faceForward","faceForward","prototype","get","getFragmentShaderSource","isTranslucent","getRenderState","BASIC","POSITION_AND_NORMAL","POSITION_NORMAL_AND_ST","ALL","apply","exports","module","Check","Color","destroyObject","DeveloperError","DistanceDisplayCondition","Event","Iso8601","oneTimeWarning","ClassificationType","ShadowMode","ColorMaterialProperty","ConstantProperty","Entity","Property","defaultMaterial","WHITE","defaultShow","defaultFill","defaultOutline","defaultOutlineColor","BLACK","defaultShadows","DISABLED","defaultDistanceDisplayCondition","defaultClassificationType","BOTH","GeometryUpdater","entity","geometryPropertyName","_entity","_scene","scene","_fillEnabled","_isClosed","_onTerrain","_dynamic","_outlineEnabled","_geometryChanged","_showProperty","_materialProperty","_showOutlineProperty","_outlineColorProperty","_outlineWidth","_shadowsProperty","_distanceDisplayConditionProperty","_classificationTypeProperty","_options","geometryOptions","_geometryPropertyName","_id","id","_observedPropertyNames","observedPropertyNames","_supportsMaterialsforEntitiesOnTerrain","supportsMaterialsforEntitiesOnTerrain","fillEnabled","hasConstantFill","availability","isConstant","_fillProperty","fillMaterialProperty","outlineEnabled","hasConstantOutline","outlineColorProperty","outlineWidth","shadowsProperty","distanceDisplayConditionProperty","classificationTypeProperty","isDynamic","isClosed","onTerrain","geometryChanged","isOutlineVisible","time","visible","isAvailable","getValue","isFilled","createFillGeometryInstance","throwInstantiationError","createOutlineGeometryInstance","isDestroyed","destroy","_isHidden","geometry","show","MINIMUM_VALUE","_isOnTerrain","_getIsClosed","_isDynamic","_setStaticOptions","_onEntityPropertyChanged","propertyName","newValue","oldValue","indexOf","fillProperty","fill","outlineProperty","outline","raiseEvent","outlineColor","shadows","distanceDisplayCondition","classificationType","geometryOutlines","createDynamicUpdater","primitives","groundPrimitives","constructor","DynamicGeometryUpdater","BoundingSphere","GroundPrimitive","PerInstanceColorAppearance","Primitive","BoundingSphereState","MaterialProperty","geometryUpdater","orderedGroundPrimitives","_primitives","_orderedGroundPrimitives","_primitive","_outlinePrimitive","_geometryUpdater","_material","isShowing","getValueOrDefault","_setOptions","update","remove","removeAndDestroy","appearance","isColorAppearance","VERTEX_FORMAT","add","geometryInstances","asynchronous","getValueOrUndefined","zIndex","fillInstance","attributes","color","value","outlineInstance","lineWidth","clampLineWidth","getBoundingSphere","result","primitive","outlinePrimitive","ready","getGeometryInstanceAttributes","boundingSphere","clone","DONE","PENDING","FAILED","IonImageryProvider","IonWorldImageryStyle","style","AERIAL","assetId","buildModuleUrl","Cartesian3","Cartographic","Ellipsoid","EllipsoidTerrainProvider","IntersectionTests","Ray","Rectangle","Resource","ShaderSource","Texture","GlobeFS","GlobeVS","GroundAtmosphere","when","GlobeSurfaceShaderSet","GlobeSurfaceTileProvider","ImageryLayerCollection","ImagerySplitDirection","QuadtreePrimitive","SceneMode","TileSelectionResult","Globe","ellipsoid","WGS84","terrainProvider","imageryLayerCollection","_ellipsoid","_imageryLayerCollection","_surfaceShaderSet","_surface","tileProvider","imageryLayers","surfaceShaderSet","_terrainProvider","_terrainProviderChanged","makeShadersDirty","_oceanNormalMapResourceDirty","_oceanNormalMapResource","url","maximumScreenSpaceError","tileCacheSize","loadingDescendantLimit","preloadAncestors","preloadSiblings","fillHighlightColor","enableLighting","showGroundAtmosphere","lightingFadeOutDistance","lightingFadeInDistance","nightFadeOutDistance","nightFadeInDistance","showWaterEffect","depthTestAgainstTerrain","RECEIVE_ONLY","splitDirection","NONE","atmosphereHueShift","atmosphereSaturationShift","atmosphereBrightnessShift","_oceanNormalMap","_zoomedOutOceanSpecularIntensity","globe","defines","requireNormals","shaderSource","match","fragmentSources","requestVertexNormals","_tileProvider","uniformMap","push","_uniforms","baseVertexShaderSource","sources","baseFragmentShaderSource","createComparePickTileFunction","rayOrigin","a","b","distanceSquaredTo","data","pickBoundingSphere","imageryLayersUpdatedEvent","tilesLoaded","_tileLoadQueueHigh","length","_tileLoadQueueMedium","_tileLoadQueueLow","baseColor","set","clippingPlanes","cartographicLimitRectangle","MAX_VALUE","oceanNormalMapUrl","terrainProviderChanged","tileLoadProgressEvent","scratchArray","scratchSphereIntersectionResult","start","stop","pickWorldCoordinates","ray","mode","projection","mapProjection","sphereIntersections","tile","i","intersection","tilesToRender","_tilesToRender","surfaceTile","boundingVolume","SCENE3D","fromRectangleWithHeights2D","rectangle","tileBoundingRegion","minimumHeight","maximumHeight","fromElements","center","z","x","y","renderedMesh","boundingSphere3D","boundingSphereIntersection","raySphere","sort","origin","pick","pickTriangle","cartoScratch","carto","unproject","cartographicToCartesian","scratchGetHeightCartesian","scratchGetHeightIntersection","scratchGetHeightCartographic","scratchGetHeightRay","tileIfContainsCartographic","cartographic","contains","getHeight","levelZeroTiles","_levelZeroTiles","_lastSelectionResult","REFINED","southwestChild","southeastChild","northwestChild","northeastChild","tilingScheme","cartesian","fromRadians","longitude","latitude","surfaceNormal","geodeticSurfaceNormal","direction","getSurfaceNormalIntersectionWithZAxis","magnitude","Math","min","vectorToMinimumPoint","multiplyByScalar","abs","subtract","cartesianToCartographic","height","frameState","passes","render","beginFrame","surface","hasWaterMask","oceanNormalMapResource","that","fetchImage","image","context","source","pass","zoomedOutOceanSpecularIntensity","oceanNormalMap","hueShift","saturationShift","brightnessShift","endFrame","call","TerrainQuantization","ShaderProgram","getClippingFunction","GlobeSurfaceShader","numberOfDayTextures","flags","shaderProgram","clippingShaderState","_shadersByTexturesFlags","getShaderProgram","applyBrightness","applyContrast","applyHue","applySaturation","applyGamma","applyAlpha","applySplit","showReflectiveOcean","showOceanWaves","perFragmentGroundAtmosphere","hasVertexNormals","useWebMercatorProjection","enableFog","enableClippingPlanes","clippedByBoundaries","splitTerrain","hasImageryLayerCutout","colorCorrect","highlightFillTile","colorToAlpha","quantization","quantizationDefine","terrainEncoding","encoding","BITS12","vertexLogDepth","vertexLogDepthDefine","vertexArray","terrainData","_createdByUpsampling","cartographicLimitRectangleFlag","cartographicLimitRectangleDefine","imageryCutoutFlag","imageryCutoutDefine","sceneMode","currentClippingShaderState","clippingPlanesState","surfaceShader","shadersByFlags","vs","fs","unshift","computeDayColor","positionMode","SCENE2D","COLUMBUS_VIEW","MORPHING","getPositionMode","get2DYPositionFraction","shader","fromCache","attributeLocations","getAttributeLocations","shadersByTexturesFlags","textureCount","hasOwnProperty","BoxOutlineGeometry","Cartesian2","Cartesian4","ColorGeometryInstanceAttribute","combine","GeometryInstance","GeometryPipeline","IndexDatatype","Intersect","CesiumMath","Matrix4","OrientedBoundingBox","OrthographicFrustum","PrimitiveType","SphereOutlineGeometry","TerrainMesh","Visibility","WebMercatorProjection","Buffer","BufferUsage","ContextLimits","DrawCommand","Pass","RenderState","VertexArray","BlendingState","ImageryState","TileBoundingRegion","ClippingPlaneCollection","DepthFunction","GlobeSurfaceTile","ImageryLayer","QuadtreeTileLoadState","TerrainFillMesh","TerrainState","_quadtree","_imageryLayers","_blendRenderState","_errorEvent","layerAdded","addEventListener","_onLayerAdded","layerRemoved","_onLayerRemoved","layerMoved","_onLayerMoved","layerShownOrHidden","_onLayerShownOrHidden","_imageryLayersUpdatedEvent","_layerOrderChanged","_tilesToRenderByTextureCount","_drawCommands","_uniformMaps","_usedDrawCommands","_vertexArraysToDestroy","_debug","wireframe","boundingSphereTile","_baseColor","_firstPassInitialColor","_clippingPlanes","_hasLoadedTilesThisFrame","_hasFillTilesThisFrame","sortTileImageryByLayerIndex","aImagery","loadingImagery","readyImagery","bImagery","imageryLayer","_layerIndex","fromColor","quadtree","imageryProvider","errorEvent","invalidateAllTiles","setOwner","_update","initialize","queueReprojectionCommands","forEachLoadedTile","imagery","creditDisplay","credit","addCredit","len","updateCredits","vertexArraysToDestroy","j","_freeVertexArray","beginUpdate","tilesToRenderByTextureCount","tiles","enabled","endUpdate","cull","depthTest","func","LESS","LESS_OR_EQUAL","blending","ALPHA_BLEND","updateFillTiles","textureCountIndex","textureCountLength","tileIndex","tileLength","addDrawCommandsForTile","updateForPick","drawCommands","commandList","cancelReprojections","getLevelMaximumGeometricError","level","loadTile","terrainStateBefore","terrainOnly","boundingVolumeSourceTile","CULLED_BUT_NEEDED","terrainState","processStateMachine","computeTileVisibility","occluders","boundingSphereScratch","rectangleIntersectionScratch","splitCartographicLimitRectangleScratch","rectangleCenterScratch","clipRectangleAntimeridian","tileRectangle","west","east","splitRectangle","PI","distance","computeDistanceToTile","_distance","fog","density","PARTIAL","cullingVolume","orientedBoundingBox","clippedCartographicLimitRectangle","areaLimitIntersection","simpleIntersection","equals","union","INTERSECTING","planeIntersection","computeIntersectionWithBoundingVolume","isClipped","INSIDE","OUTSIDE","computeVisibility","ortho3D","camera","frustum","occludeePointInScaledSpace","isScaledSpacePointVisible","canRefine","getTileDataAvailable","readyImageryScratch","canRenderTraversalStack","canRenderWithoutLosingDetail","terrainReady","initialImageryState","READY","tileImagery","isReady","state","INVALID","layerIndex","lastFrame","_lastSelectionFrameNumber","stack","descendant","pop","lastFrameSelectionResult","_lastSelectionResultFrame","RENDERED","descendantSurface","descendantImagery","descendantTileImagery","descendantLoadingImagery","descendantIsReady","descendantLayerIndex","tileDirectionScratch","computeTileLoadPriority","obb","cameraPosition","positionWC","cameraDirection","directionWC","tileDirection","EPSILON5","divideByScalar","dot","modifiedModelViewScratch","modifiedModelViewProjectionScratch","tileRectangleScratch","localizedCartographicLimitRectangleScratch","rtcScratch","centerEyeScratch","southwestScratch","northeastScratch","showTileThisFrame","readyTextureCount","tileImageryCollection","alpha","tileSet","debug","tilesRendered","texturesRendered","cornerPositionsScratch","heightSource","computeBoundingVolumes","mesh","_minimumHeight","_maximumHeight","terrainExaggeration","Number","NaN","ancestor","parent","ancestorSurfaceTile","ancestorMesh","ancestorTerrainData","updateTileBoundingRegion","width","PI_OVER_TWO","fromRectangle","ellipsoidalOccluder","_occluders","cornerPositions","south","north","computeHorizonCullingPoint","computeOccludeePoint","max","cameraHeight","positionCartographic","distanceToCamera","layer","index","tileImageryUpdatedEvent","_reload","_imageryCache","_loadedCallbacks","startIndex","tileImageriesToFree","insertionPoint","_createTileImagerySkeletons","endIndex","freeResources","splice","getTileReadyCallback","LOADING","renderable","numDestroyed","newIndex","oldIndex","getDebugOrientedBoundingBox","getDebugBoundingSphere","debugDestroyPrimitive","scratchClippingPlaneMatrix","createTileUniformMap","globeSurfaceTileProvider","u_initialColor","properties","initialColor","u_fillHighlightColor","u_zoomedOutOceanSpecularIntensity","u_oceanNormalMap","u_lightingFadeDistance","lightingFadeDistance","u_nightFadeDistance","nightFadeDistance","u_center3D","center3D","u_tileRectangle","u_modifiedModelView","viewMatrix","uniformState","view","centerEye","multiplyByPoint","rtc","setTranslation","u_modifiedModelViewProjection","projectionMatrix","multiply","u_dayTextures","dayTextures","u_dayTextureTranslationAndScale","dayTextureTranslationAndScale","u_dayTextureTexCoordsRectangle","dayTextureTexCoordsRectangle","u_dayTextureUseWebMercatorT","dayTextureUseWebMercatorT","u_dayTextureAlpha","dayTextureAlpha","u_dayTextureBrightness","dayTextureBrightness","u_dayTextureContrast","dayTextureContrast","u_dayTextureHue","dayTextureHue","u_dayTextureSaturation","dayTextureSaturation","u_dayTextureOneOverGamma","dayTextureOneOverGamma","u_dayIntensity","dayIntensity","u_southAndNorthLatitude","southAndNorthLatitude","u_southMercatorYAndOneOverHeight","southMercatorYAndOneOverHeight","u_waterMask","waterMask","u_waterMaskTranslationAndScale","waterMaskTranslationAndScale","u_minMaxHeight","minMaxHeight","u_scaleAndBias","scaleAndBias","u_dayTextureSplit","dayTextureSplit","u_dayTextureCutoutRectangles","dayTextureCutoutRectangles","u_clippingPlanes","texture","defaultTexture","u_cartographicLimitRectangle","localizedCartographicLimitRectangle","u_clippingPlanesMatrix","modelMatrix","IDENTITY","u_clippingPlanesEdgeStyle","clippingPlanesEdgeColor","clippingPlanesEdgeWidth","u_minimumBrightness","minimumBrightness","u_terrainSplitDirection","u_hsbShift","hsbShift","u_colorsToAlpha","colorsToAlpha","modifiedModelView","createWireframeVertexArrayIfNecessary","provider","wireframeVertexArray","terrainMesh","indices","primitiveType","TRIANGLES","toWireframe","wireframeIndices","wireframeIndexBuffer","createIndexBuffer","typedArray","usage","STATIC_DRAW","indexDatatype","fromSizeInBytes","BYTES_PER_ELEMENT","_attributes","indexBuffer","createWireframeVertexArray","previousVolume","instanceOBB","fromDimensions","dimensions","instanceSphere","radius","createDebugPrimitive","instance","fromRotationTranslation","halfAxes","sphere","fromTranslation","multiplyByUniformScale","otherPassesInitialColor","surfaceShaderSetOptionsScratch","credits","tileCredits","tileCreditIndex","tileCreditLength","maxTextures","maximumTextureImageUnits","waterMaskTexture","castShadows","receiveShadows","equalsEpsilon","EPSILON7","cameraDistance","fadeOutDistance","maximumRadius","shadowState","shadowsEnabled","southLatitude","northLatitude","southMercatorY","oneOverMercatorHeight","southwest","project","northeast","w","epsilon","pow","widthEpsilon","heightEpsilon","geodeticLatitudeToMercatorAngle","surfaceShaderSetOptions","imageryIndex","imageryLen","firstPassRenderState","otherPassesRenderState","command","owner","RED","uniformMapProperties","cartographicTileRectangle","inverseTileWidth","inverseTileHeight","applyFog","EPSILON3","applyCutout","applyColorToAlpha","useWebMercatorT","textureWebMercator","textureTranslationAndScale","_calculateTextureTranslationAndScale","textureCoordinateRectangle","brightness","DEFAULT_BRIGHTNESS","contrast","DEFAULT_CONTRAST","hue","DEFAULT_HUE","saturation","DEFAULT_SATURATION","gamma","DEFAULT_GAMMA","dayTextureCutoutRectangle","ZERO","cutoutRectangle","hasColorToAlpha","colorToAlphaThreshold","red","green","blue","creditIndex","creditLength","matrix","clippingPlanesEnabled","edgeColor","edgeWidth","GLOBE","LINES","dirty","AttributeCompression","binarySearch","HeightmapTerrainData","Queue","TileEdge","TerrainEncoding","frameLastUpdated","westMeshes","westTiles","southMeshes","southTiles","eastMeshes","eastTiles","northMeshes","northTiles","southwestMesh","southwestTile","southeastMesh","southeastTile","northwestMesh","northwestTile","northeastMesh","northeastTile","changedThisFrame","visitedFrame","enqueuedFrame","createFillMesh","referenceCount","traversalQueueScratch","visitRenderedTiles","sourceTile","startTile","currentFrameNumber","tileEdge","downOnly","traversalQueue","wasKicked","originalResult","CULLED","NORTHWEST","NORTHEAST","SOUTHWEST","SOUTHEAST","WEST","EAST","SOUTH","NORTH","destinationTile","frameNumber","destinationSurfaceTile","enqueue","sourceMesh","edgeMeshes","edgeTiles","existingTile","existingRectangle","destinationFill","sourceFill","sourceRectangle","destinationRectangle","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals","propagateEdge","visitTile","renderedTiles","lastSelectionFrameNumber","clear","renderedTile","dequeue","tileToWest","findTileToWest","tileToSouth","findTileToSouth","tileToEast","findTileToEast","tileToNorth","findTileToNorth","tileToNorthwest","tileToSouthwest","tileToNortheast","tileToSoutheast","cartographicScratch","centerCartographicScratch","cartesianScratch","normalScratch","octEncodedNormalScratch","uvScratch2","uvScratch","HeightAndNormal","encodedNormal","fillMissingCorner","u","v","corner","adjacentCorner1","adjacentCorner2","oppositeCorner","vertex","getVertexWithHeightAtCorner","heightRangeScratch","swVertexScratch","seVertexScratch","nwVertexScratch","neVertexScratch","heightmapBuffer","Uint8Array","nwCorner","getCorner","swCorner","seCorner","neCorner","southwestHeight","southeastHeight","northwestHeight","northeastHeight","middleHeight","geometricError","minCutThroughRadius","maxTileWidth","acos","buffer","structure","heightOffset","_createMeshSync","centerCartographic","meshes","maxVertexCount","eastIndicesNorthToSouth","northIndicesWestToEast","westIndicesSouthToNorth","southIndicesEastToWest","heightRange","stride","getStride","Float32Array","nextIndex","northwestIndex","southwestIndex","addEdge","addVertexWithComputedPosition","southeastIndex","northeastIndex","centerWebMercatorT","geodeticSurfaceNormalCartographic","centerEncodedNormal","octEncode","centerIndex","encode","vertexCount","indexCount","indexDataBytes","Uint16Array","indexOut","fromOrientedBoundingBox","_createVertexArrayForMesh","processImagery","oldTexture","waterSourceTile","_findAncestorTileWithTerrainData","_computeWaterMaskTranslationAndScale","webMercatorT","lerp","position","uv","sourceRectangleScratch","transformTextureCoordinates","targetTile","coordinates","targetRectangle","getNumberOfXTilesAtLevel","TWO_PI","sourceWidth","umin","umax","sourceHeight","vmin","vmax","encodedNormalScratch","getVertexFromTileAtCorner","sourceIndex","sourceEncoding","sourceVertices","vertices","decodeHeight","getOctEncodedNormal","normal","encodedNormalScratch2","cartesianScratch2","terrainFillMesh","cornerTile","cornerMesh","previousEdgeTiles","previousEdgeMeshes","nextEdgeTiles","nextEdgeMeshes","getCornerFromEdge","meshIsUsable","getClosestHeightToCorner","previousMeshes","previousTiles","previousEdge","nextMeshes","nextTiles","nextEdge","height1","getNearestHeightOnEdge","height2","addEdgeMesh","edgeTile","edgeMesh","lastU","lastV","compareU","decodeTextureCoordinates","targetStride","hasWebMercatorT","uOrV","nearlyEdgeU","nearlyEdgeV","decodePosition","isNext","edge","meshStart","meshEnd","meshStep","meshIndex","edgeVertices","increasing","vertexIndexIndex","vertexIndex","targetUv","textureCoordinate","previousIndex","interpolateU","ratio","previousUv","nextUv","encodedNormal1","encodedNormal2","normal1","octDecode","normal2","normalize","getInterpolatedVertexAtCorner","_layers","getLayerIndex","layers","swapLayers","collection","arr","clamp","temp","addImageryProvider","removeAll","raise","lower","raiseToTop","lowerToBottom","applicableRectangleScratch","pickImageryLayerFeatures","pickedPosition","pickedTile","pickedLocation","textureIndex","imageryTiles","promises","terrainImagery","pickFeatures","applicableRectangle","promise","all","results","features","resultIndex","featureIndex","feature","layersShownOrHidden","isBaseLayer","_isBaseLayer","_show","getTimestamp","OrthographicOffCenterFrustum","QuadtreeOccluders","QuadtreeTile","TileReplacementQueue","enableDebugOutput","maxDepth","maxDepthVisited","tilesVisited","tilesCulled","tilesWaitingForChildren","lastMaxDepth","lastMaxDepthVisited","lastTilesVisited","lastTilesCulled","lastTilesRendered","lastTilesWaitingForChildren","suspendLodUpdate","_tileReplacementQueue","_loadQueueTimeSlice","_tilesInvalidated","_addHeightCallbacks","_removeHeightCallbacks","_tileToUpdateHeights","_lastTileIndex","_updateHeightsTimeSlice","_cameraPositionCartographic","_cameraReferenceFrameOriginCartographic","_tileLoadProgressEvent","_lastTileLoadQueueLength","clearTileLoadQueue","comparisonPoint","tileFunction","head","START","replacementNext","forEachRenderedTile","updateHeight","callback","object","positionOnEllipsoidSurface","removeFunc","addedCallbacks","replacementQueue","tail","count","customData","customDataLength","markStartOfRenderFrame","createLevelZeroTiles","numberOfRootTiles","rootTraversalDetails","Array","TraversalDetails","compareDistanceToPoint","customDataAdded","customDataRemoved","_updateCustomData","cameraFrameOrigin","getTranslation","transform","cameraOriginScratch","markTileRendered","visitIfVisible","queueTileLoad","selectTilesForRendering","createRenderCommandsForSelectedTiles","tileLoadQueueHigh","tileLoadQueueMedium","tileLoadQueueLow","trimTiles","endTime","didSomeLoading","processSinglePriorityLoadQueue","processTileLoadQueue","tryNextFrame","tilesToUpdateHeights","startTime","timeSlice","timeSliceMax","scratchRay","scratchPosition","scratchCartographic","UNIT_X","child","children","childrenLength","tileDataAvailable","parentTile","isChildAvailable","shift","selectionResult","updateHeights","currentLoadQueueLength","afterRender","bind","reduce","console","log","updateTileLoadProgress","centerScratch","alon","alat","blon","blat","queue","needsLoading","_loadPriority","allAreRenderable","anyWereRenderedLastFrame","notYetRenderableCount","TraversalQuadDetails","southeast","northwest","traversalQuadsByLevel","ancestorMeetsSse","traversalDetails","meetsSse","_offCenterFrustum","drawingBufferWidth","drawingBufferHeight","maxGeometricError","pixelSize","top","bottom","right","left","error","sse","pixelRatio","screenSpaceError2D","sseDenominator","screenSpaceError","oneRenderedLastFrame","twoCulledOrNotVisited","threeCompletelyLoaded","addTileToRenderList","upsampledFromParent","firstRenderedDescendantIndex","loadIndexLow","loadIndexMedium","loadIndexHigh","tilesToUpdateHeightsIndex","quadDetails","southwestDetails","southeastDetails","northwestDetails","northeastDetails","visitVisibleChildrenNearToFar","queuedForLoad","renderList","workTile","KICKED","kick","wasRenderedLastFrame","containsNeededPosition","sortByLoadPriority","loadQueue","EllipsoidalOccluder","_tilingScheme","_x","_y","_level","_parent","_rectangle","tileXYToRectangle","_southwestChild","_southeastChild","_northwestChild","_northeastChild","replacementPrevious","_customData","_frameUpdated","freeTile","numberOfLevelZeroTilesX","numberOfLevelZeroTilesY","getNumberOfYTilesAtLevel","added","removed","filter","parentCustomData","eligibleForUnloading","findLevelZeroTile","xTiles","westOfParent","eastOfParent","southOfParent","northOfParent","_lastBeforeStartOfFrame","tileReplacementQueue","item","previous","next","maximumTiles","tileToTrim","keepTrimming","p","IauOrientationAxes","Matrix3","Simon1994PlanetaryPositions","Transforms","EllipsoidPrimitive","Moon","textureUrl","MOON","onlySunLighting","_ellipsoidPrimitive","radii","ImageType","depthTestEnabled","_owner","_axes","icrfToFixed","rotationScratch","translationScratch","scratchCommandList","ellipsoidPrimitive","uniforms","date","computeIcrfToFixedMatrix","computeTemeToPseudoFixedMatrix","rotation","evaluate","transpose","translation","computeMoonPositionInEarthInertialFrame","multiplyByVector","savedCommandList","Iau2000Orientation","JulianDate","Quaternion","computeFunction","ComputeMoon","_computeFunction","xAxisScratch","yAxisScratch","zAxisScratch","rotMtxScratch","quatScratch","now","alphaDeltaW","precMtx","delta","xAxis","cos","sin","cosDec","zAxis","yAxis","cross","computeRotationMatrix","rightAscension","declination","rot","zeroToTwoPi","quat","fromAxisAngle","UNIT_Z","rotMtx","fromQuaternion","conjugate","IauOrientationParameters","TimeConstants","c1","c2","c3","c4","c6","c7","c9","dateTT","addSeconds","d","totalDays","T","DAYS_PER_JULIAN_CENTURY","E1","RADIANS_PER_DEGREE","E2","E3","E4","E5","E6","E7","E8","E9","E10","E11","E12","E13","sinE1","sinE2","sinE3","sinE4","sinE5","sinE6","sinE7","sinE8","sinE9","sinE10","sinE11","sinE12","sinE13","cosE1","cosE2","cosE3","cosE4","cosE5","cosE6","cosE7","cosE8","cosE9","cosE10","cosE11","cosE12","cosE13","rotationRate","BoxGeometry","EllipsoidFS","EllipsoidVS","CullFace","_center","_radii","_oneOverEllipsoidRadiiSquared","_boundingSphere","_modelMatrix","_computedModelMatrix","_translucent","debugShowBoundingVolume","_onlySunLighting","_depthTestEnabled","_useLogDepth","_sp","_rs","_va","_pickSP","_pickId","_colorCommand","_pickCommand","pickOnly","u_radii","u_oneOverEllipsoidRadiiSquared","_pickUniforms","czm_pickColor","logDepthExtension","translucencyChanged","face","FRONT","depthMask","fragmentDepth","cache","ellipsoidPrimitive_vertexArray","createGeometry","POSITION_ONLY","fromGeometry","bufferUsage","interleave","getVertexArray","boundingSphereDirty","r","multiplyByTranslation","maximumComponent","materialChanged","lightingChanged","useLogDepth","useLogDepthChanged","colorCommand","replaceCache","executeInClosestFrustum","TRANSLUCENT","OPAQUE","pickCommand","createPickId","pickColorQualifier","ApproximateTerrainHeights","BoundingRectangle","createGuid","CullingVolume","EllipsoidGeometry","GeographicProjection","mergeSort","Occluder","PerspectiveFrustum","PerspectiveOffCenterFrustum","PixelFormat","RequestScheduler","ShowGeometryInstanceAttribute","TaskProcessor","ClearCommand","ComputeEngine","Context","Framebuffer","PixelDatatype","BrdfLutGenerator","Camera","Cesium3DTileFeature","Cesium3DTilePass","Cesium3DTilePassState","Cesium3DTileset","CreditDisplay","DebugCameraPrimitive","DepthPlane","DerivedCommand","DeviceOrientationCameraController","Fog","FrameState","GlobeDepth","InvertClassification","JobScheduler","MapMode2D","OctahedralProjectedCubeMap","PerformanceDisplay","PickDepth","PostProcessStageCollection","PrimitiveCollection","SceneTransforms","SceneTransitioner","ScreenSpaceCameraController","ShadowMap","StencilConstants","SunPostProcess","TweenCollection","View","requestRenderAfterFrame","requestRender","MostDetailedRayPick","tilesets","deferred","defer","Scene","canvas","contextOptions","creditContainer","creditViewport","hasCreditContainer","document","createElement","parentNode","appendChild","_jobScheduler","_frameState","scene3DOnly","_removeCreditContainer","_creditContainer","_canvas","_context","_computeEngine","_globe","_groundPrimitives","_mostDetailedRayPicks","_logDepthBuffer","_logDepthBufferDirty","_tweens","_shaderFrameCount","_sunPostProcess","_computeCommandList","_overlayCommandList","_useOIT","orderIndependentTranslucency","_executeOITFunction","_depthPlane","_clearColorCommand","stencil","_depthClearCommand","depth","_stencilClearCommand","_classificationStencilClearCommand","stencilMask","CLASSIFICATION_MASK","_depthOnlyRenderStateCache","_pickRenderStateCache","_transitioner","_preUpdate","_postUpdate","_renderError","_preRender","_postRender","_pickPositionCache","_pickPositionCacheDirty","_minimumDisableDepthTestDistance","rethrowRenderErrors","completeMorphOnUserInput","morphStart","morphComplete","skyBox","skyAtmosphere","sun","sunBloom","_sunBloom","moon","backgroundColor","_mode","_mapProjection","morphTime","farToNearRatio","logarithmicDepthFarToNearRatio","nearToFarDistance2D","debugCommandFilter","debugShowCommands","debugShowFrustums","debugShowFramesPerSecond","debugShowGlobeDepth","debugShowDepthFrustum","debugShowFrustumPlanes","_debugShowFrustumPlanes","_debugFrustumPlanes","useDepthPicking","pickTranslucentDepth","cameraEventWaitTime","_sunCamera","shadowMap","lightCamera","invertClassification","invertClassificationColor","_actualInvertClassificationColor","_invertClassificationColor","_invertClassification","focalLength","eyeSeparation","postProcessStages","_brdfLutGenerator","_terrainExaggeration","_performanceDisplay","_debugVolume","_screenSpaceCameraController","_mapMode2D","mapMode2D","INFINITE_SCROLL","_environmentState","skyBoxCommand","skyAtmosphereCommand","sunDrawCommand","sunComputeCommand","moonCommand","isSunVisible","isMoonVisible","isReadyForAtmosphere","isSkyAtmosphereVisible","clearGlobeDepth","useDepthPlane","renderTranslucentDepthForPick","originalFramebuffer","useGlobeDepthFramebuffer","useOIT","useInvertClassification","usePostProcess","usePostProcessSelected","useWebVR","_useWebVR","_cameraVR","_aspectRatioVR","requestRenderMode","_renderRequested","maximumRenderTimeChange","_lastRenderTime","_frameRateMonitor","_removeRequestListenerCallback","requestCompletedEvent","_removeTaskProcessorListenerCallback","taskCompletedEvent","_removeGlobeCallbacks","viewport","near","far","pickOffscreenViewport","pickOffscreenCamera","aspectRatio","_pickOffscreenView","preloadFlightCamera","preloadFlightCullingVolume","pickOffscreenDefaultWidth","_defaultView","_view","_hdr","_hdrDirty","highDynamicRange","_sunColor","sphericalHarmonicCoefficients","specularEnvironmentMaps","_specularEnvironmentMapAtlas","updateFrameNumber","updateFrameState","initializeFrame","updateDerivedCommands","shadowsDirty","oit","lightShadowMaps","lightShadowsEnabled","derivedCommands","pickId","picking","createPickDerivedCommand","createDepthOnlyDerivedCommand","originalCommand","hdr","createHdrCommand","createReceiveDerivedCommand","isSupported","createDerivedCommands","receiveCommand","maximumAliasedLineWidth","maximumCubeMapSize","pickPositionSupported","depthTexture","sampleHeightSupported","clampToHeightSupported","invertClassificationSupported","removeGlobeCallbacks","updateGlobeListeners","screenSpaceCameraController","tweens","preUpdate","postUpdate","renderError","preRender","postRender","lastRenderTime","debugFrustumStatistics","morphTo2D","morphTo3D","morphToColumbusView","frustumCommandsList","numberOfFrustums","container","visibility","_deviceOrientationCameraController","xOffset","imagerySplitPosition","minimumDisableDepthTestDistance","logarithmicDepthBuffer","updateFrustums","colorBufferFloat","colorBufferHalfFloat","highDynamicRangeSupported","sunColor","opaqueFrustumNearOffset","getCompressedTextureFormatSupported","format","s3tc","pvrtc","etc1","lastDirtyTime","useHdr","hasLogDepthDerivedCommands","logDepth","hasHdrCommands","hasDerivedCommands","needsLogDepthDerivedCommands","needsHdrCommands","needsDerivedCommands","shadowMaps","createCastDerivedCommand","createLogDepthCommand","scratchOccluder","mostDetailedPreloadTilesetPassState","MOST_DETAILED_PRELOAD","mostDetailedPickTilesetPassState","MOST_DETAILED_PICK","renderTilesetPassState","RENDER","pickTilesetPassState","PICK","preloadTilesetPassState","PRELOAD","preloadFlightTilesetPassState","PRELOAD_FLIGHT","requestRenderModeDeferCheckPassState","REQUEST_RENDER_MODE_DEFER_CHECK","scratchOccluderBoundingSphere","clearPasses","postProcess","offscreen","brdfLutGenerator","environmentMap","_cubeMap","computeCullingVolume","upWC","occluder","minimumRadius","fromBoundingSphere","getOccluder","specularEnvironmentMapsMaximumLOD","maximumMipmapLevel","isTranslucencySupported","tilesetPassState","scratchCullingVolume","executeDebugCommand","passState","debugCommand","shallowClone","sp","targets","map","replaceMain","re","exec","newMain","_debugColor","fromRandom","c","debugOverlappingFrustums","g","vertexAttributes","createDebugFragmentShaderProgram","execute","isVisible","occlude","isOccluded","transformFrom2D","executeCommand","debugFramebuffer","FLAT_VERTEX_FORMAT","framebuffer","depthOnlyCommand","executeIdCommand","backToFront","frontToBack","EPSILON12","executeTranslucentCommandsBackToFront","executeFunction","commands","unclassifiedCommand","executeTranslucentCommandsFrontToBack","getDebugGlobeDepth","globeDepths","debugGlobeDepths","globeDepth","getPickDepth","pickDepths","pickDepth","inverseTransformation","scratchPerspectiveFrustum","scratchPerspectiveOffCenterFrustum","scratchOrthographicFrustum","scratchOrthographicOffCenterFrustum","executeCommands","us","updateCamera","fov","infiniteProjectionMatrix","updateFrustum","updatePass","ENVIRONMENT","executeTranslucentCommands","environmentState","sceneFramebuffer","getFramebuffer","copy","clearDepth","clearStencil","clearClassificationStencil","depthPlane","height2D","numFrustums","frustumCommands","fb","stencilBuffer","executeCopyDepth","TERRAIN_CLASSIFICATION","CESIUM_3D_TILE","executeUpdateDepth","CESIUM_3D_TILE_CLASSIFICATION","opaqueClassificationFramebuffer","_fbo","CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW","executeClassified","executeUnclassified","depthStencilTexture","getIdFramebuffer","executeComputeCommands","COMPUTE","insertShadowCastCommands","shadowVolume","shadowMapCullingVolume","isPointLight","numberOfPasses","k","wasVisible","cascadeVolume","executeShadowMapCastCommands","shadowMapLength","outOfView","numberOfCommands","castCommands","scratchEyeTranslation","updateAndExecuteCommands","updateAndClearFramebuffers","updateAndRenderPrimitives","createPotentiallyVisibleSet","savedCamera","fo","eyeTranslation","offset","executeWebVRCommands","ROTATE","executeCommandsInViewport","originalViewport","scratch2DViewport","maxCartographic","scratch2DViewportCartographic","maxCoord","scratch2DViewportMaxCoord","scratch2DViewportSavedPosition","scratch2DViewportCameraTransform","_setTransform","viewportTransformation","computeViewportTransformation","scratch2DViewportTransform","eyePoint","sign","scratch2DViewportEyePoint","windowCoordinates","pointToGLWindowCoordinates","scratch2DViewportWindowCoords","floor","viewportX","viewportWidth","execute2DViewportCommands","firstViewport","updateEnvironment","renderPass","offscreenPass","setDynamicAtmosphereColor","sunCommands","drawCommand","computeCommand","planes","envMaps","envMapAtlas","updateOnChange","updateDebugFrustumPlanes","fromLightSource","updateShadowMaps","clearColor","depthFramebuffer","ambientOcclusion","fxaa","bloom","hasSelected","previousFramebuffer","resolveFramebuffers","defaultFramebuffer","globeFramebuffer","idFramebuffer","inputFramebuffer","colorTexture","getColorTexture","idTexture","executeCopyColor","executeDebugGlobeDepth","debugShowPickDepth","executeDebugPickDepth","prePassesUpdate","resetBudgets","postPassesUpdate","shaderCache","destroyReleasedShaderPrograms","textureCache","destroyReleasedTextures","_updateCameraChanged","scratchBackgroundColor","negate","sunDirectionWC","blendingEnabled","scissorTest","OVERLAY","executeOverlayCommands","tryAndCatchError","functionToExecute","newFrame","cameraChanged","checkForCameraUpdates","shouldRender","difference","secondsDifference","incrementWrap","updateMostDetailedRayPicks","updatePreloadPass","updatePreloadFlightPass","updateRequestRenderModeDeferCheckPass","renderedThisFrame","performanceContainer","className","performanceDisplay","_performanceContainer","throttled","removeChild","updateDebugShowFramesPerSecond","functions","callAfterRenderFunctions","forceRender","minimumAliasedLineWidth","orthoPickingFrustum","scratchOrigin","scratchDirection","scratchPixelSize","scratchPickVolumeMatrix4","perspPickingFrustum","getPickCullingVolume","drawingBufferPosition","up","getPixelDimensions","ortho","getPickOrthographicCullingVolume","tanPhi","tan","fovy","tanTheta","xDir","yDir","pickWidth","pickHeight","offCenter","getPickPerspectiveCullingVolume","rectangleWidth","rectangleHeight","scratchRectangle","scratchColorZero","windowPosition","transformWindowToDrawingBuffer","disableThisFrame","pickFramebuffer","begin","end","pickPositionWorldCoordinates","cacheKey","toString","pickDepthFramebuffer","getDepth","renderedFrustum","drawingBufferToWgs84Coordinates","scratchPickPositionCartographic","drillPick","limit","pickCallback","pickedPrimitives","pickedAttributes","pickedFeatures","pickedResult","exclude","hasShowAttribute","toValue","updateForPass","hasCurrentFlight","pickPosition","cart","element","scratchRight","scratchUp","updateOffscreenCameraFromRay","orthogonalAxis","mostOrthogonalAxis","updateMostDetailedRayPick","rayPick","tilesetsLength","tileset","resolve","rayPicks","launchMostDetailedRayPick","objectsToExclude","getTilesets","then","isExcluded","getRayIntersections","requirePosition","mostDetailed","getPoint","getRayIntersection","pickFromRay","drillPickFromRay","deferPromiseUntilPostRender","removeCallback","pickFromRayMostDetailed","slice","drillPickFromRayMostDetailed","scratchSurfacePosition","scratchSurfaceNormal","scratchSurfaceRay","getRayForSampleHeight","_defaultMaxTerrainHeight","surfacePosition","toCartesian","surfaceRay","getRayForClampToHeight","fromCartesian","getHeightFromCartesian","sampleHeightMostDetailed","pickResult","clampToHeightMostDetailed","sampleHeight","clampToHeight","positions","heights","cartesians","clampedCartesians","cartesianToCanvasCoordinates","wgs84ToWindowCoordinates","completeMorph","duration","_debugSphere","leftScratchArray","rightScratchArray","array","compare","userDefinedObject","middle","leftLength","rightLength","leftElement","rightElement","merge","comparator","scratchLength","ceil","occluderBoundingSphere","_occluderPosition","_occluderRadius","_horizonDistance","_horizonPlaneNormal","_horizonPlanePosition","_cameraPosition","scratchCartesian3","horizonDistance","horizonPlaneNormal","horizonPlanePosition","cameraToOccluderVec","invCameraToOccluderDistance","magnitudeSquared","occluderRadiusSqrd","sqrt","nearPlaneDistance","tempVecScratch","isPointVisible","occludee","tempVec","occludeePositionScratch","isBoundingSphereVisible","occludeePosition","occludeeRadius","tempVecMagnitudeSquared","occluderRadiusSquared","occludeeRadiusSquared","tempScratch","occludeeBS","FULL","occluderToOccludeeDistSqrd","cameraToOccludeeDistSqrd","occludeePointScratch","occludeePos","occluderPosition","occluderRadius","numPositions","occluderPlaneNormal","occluderPlaneD","aRotationVector","_anyRotationVector","_horizonToPlaneNormalDotProduct","tempDot","computeOccludeePointFromRectangleScratch","computeOccludeePointFromRectangle","subsample","bs","fromPoints","ellipsoidCenter","tempVec0Scratch","tempVec0","majorAxis","tempVec1","UNIT_Y","posDirectionScratch","_rotationVector","anyRotationVector","positionDirection","crossProduct","EPSILON13","posScratch1","occluerPosScratch","posScratch2","horizonPlanePosScratch","occluderBS","pos","positionToOccluder","occluderToPositionDistanceSquared","horizonDistanceSquared","horizonPlaneDistance","horizonCrossDistance","horizonCrossDirection","dot0","dot1","ViewportQuadVS","renderStateScratch","drawCommandScratch","clearCommandScratch","preExecute","outputTexture","getViewportQuadVertexArray","textureCoordinates","createViewportQuadShader","colorTextures","destroyAttachments","createFramebuffer","createRenderState","clearCommand","persists","postExecute","ComponentDatatype","Geometry","GeometryAttribute","RuntimeError","WebGLConstants","CubeMap","PassState","ShaderCache","TextureCache","UniformState","throwOnError","gl","glFunc","glFuncArguments","getError","NO_ERROR","message","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","errorToString","name","createErrorMessage","makeGetterSetter","logFunction","getExtension","names","extension","WebGLRenderingContext","allowTextureFilterAnisotropic","webglOptions","webgl","glContext","requestWebgl2","WebGL2RenderingContext","webgl2","getWebGLStub","getContext","_originalGLContext","_gl","_webgl2","validateFramebuffer","validateShaderProgram","logShaderCompilation","_throwOnWebGLError","_shaderCache","_textureCache","_stencilBits","getParameter","STENCIL_BITS","_maximumCombinedTextureImageUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","_maximumCubeMapSize","MAX_CUBE_MAP_TEXTURE_SIZE","_maximumFragmentUniformVectors","MAX_FRAGMENT_UNIFORM_VECTORS","_maximumTextureImageUnits","MAX_TEXTURE_IMAGE_UNITS","_maximumRenderbufferSize","MAX_RENDERBUFFER_SIZE","_maximumTextureSize","MAX_TEXTURE_SIZE","_maximumVaryingVectors","MAX_VARYING_VECTORS","_maximumVertexAttributes","MAX_VERTEX_ATTRIBS","_maximumVertexTextureImageUnits","MAX_VERTEX_TEXTURE_IMAGE_UNITS","_maximumVertexUniformVectors","MAX_VERTEX_UNIFORM_VECTORS","aliasedLineWidthRange","ALIASED_LINE_WIDTH_RANGE","_minimumAliasedLineWidth","_maximumAliasedLineWidth","aliasedPointSizeRange","ALIASED_POINT_SIZE_RANGE","_minimumAliasedPointSize","_maximumAliasedPointSize","maximumViewportDimensions","MAX_VIEWPORT_DIMS","_maximumViewportWidth","_maximumViewportHeight","highpFloat","getShaderPrecisionFormat","FRAGMENT_SHADER","HIGH_FLOAT","_highpFloatSupported","precision","highpInt","HIGH_INT","_highpIntSupported","rangeMax","_antialias","getContextAttributes","antialias","_standardDerivatives","_blendMinmax","_elementIndexUint","_depthTexture","_fragDepth","_debugShaders","_textureFloat","_textureHalfFloat","_textureFloatLinear","_textureHalfFloatLinear","_colorBufferFloat","_colorBufferHalfFloat","_s3tc","_pvrtc","_etc1","glCreateVertexArray","glBindVertexArray","glDeleteVertexArray","glDrawElementsInstanced","glDrawArraysInstanced","glVertexAttribDivisor","glDrawBuffers","vertexArrayObject","instancedArrays","drawBuffers","textureFilterAnisotropic","_textureFilterAnisotropic","_maximumTextureFilterAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","createVertexArray","vao","bindVertexArray","deleteVertexArray","type","instanceCount","drawElementsInstanced","first","drawArraysInstanced","divisor","vertexAttribDivisor","buffers","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","drawElementsInstancedANGLE","drawArraysInstancedANGLE","vertexAttribDivisorANGLE","drawBuffersWEBGL","_vertexArrayObject","_instancedArrays","_drawBuffers","_maximumDrawBuffers","MAX_DRAW_BUFFERS","_maximumColorAttachments","MAX_COLOR_ATTACHMENTS","_clearColor","_clearDepth","_clearStencil","ps","rs","_defaultPassState","_defaultRenderState","_defaultTexture","_defaultCubeMap","_us","_currentRenderState","_currentPassState","_currentFramebuffer","_maxFrameTextureUnitIndex","_vertexAttribDivisors","_previousDrawInstanced","_pickObjects","_nextPickColor","Uint32Array","scratchBackBufferArray","defaultFramebufferMarker","applyRenderState","previousRenderState","previousPassState","partialApply","bindFramebuffer","_bind","_getActiveColorAttachments","FRAMEBUFFER","stencilBits","standardDerivatives","blendMinmax","elementIndexUint","floatingPointTexture","halfFloatingPointTexture","textureFloatLinear","textureHalfFloatLinear","debugShaders","throwOnWebGLError","wrapFunction","property","arguments","glWrapper","Function","Object","defineProperty","wrapGL","arrayBufferView","flipY","defaultCubeMap","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","BACK","defaultClearCommand","bitmask","s","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","draw","_framebuffer","_shaderProgram","_uniformMap","maximumTextureUnitIndex","beginDraw","_primitiveType","va","_vertexArray","_offset","_count","model","_setUniforms","bytesPerIndex","numberOfIndices","drawElements","numberOfVertices","drawArrays","_unBind","continueDraw","useProgram","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","readPixels","readState","pixelDatatype","UNSIGNED_BYTE","numberOfColorAttachments","pixels","createTypedArray","RGBA","viewportQuadAttributeLocations","PickId","pickObjects","key","viewportQuad_vertexArray","componentDatatype","FLOAT","componentsPerAttribute","values","createViewportQuadCommand","overrides","getObjectByPickColor","pickColor","toRgba","fromRgba","propertyValue","_shaders","_numberOfShaders","_shadersToRelease","destroyShader","cachedShader","derivedKeywords","keyword","finalDestroy","numberOfShaders","replaceShaderProgram","vertexShaderText","createCombinedVertexShader","fragmentShaderText","createCombinedFragmentShader","JSON","stringify","_cachedShader","replaceDerivedShaderProgram","derivedKeyword","cachedDerivedShader","createDerivedShaderProgram","getDerivedShaderProgram","derivedShaderProgram","derivedCachedShader","shadersToRelease","releaseShaderProgram","shaders","_textures","_numberOfTextures","_texturesToRelease","numberOfTextures","getTexture","cachedTexture","addTexture","texturesToRelease","textures","EncodedCartesian3","Sampler","globeDepthTexture","_viewport","_viewportCartesian4","_viewportDirty","_viewportOrthographicMatrix","_viewportTransformation","_model","_inverseView","_projection","_infiniteProjection","_entireFrustum","_currentFrustum","_frustumPlanes","_log2FarDistance","_log2FarPlusOne","_log2NearDistance","_temeToPseudoFixed","_view3DDirty","_view3D","_inverseView3DDirty","_inverseView3D","_inverseModelDirty","_inverseModel","_inverseTransposeModelDirty","_inverseTransposeModel","_viewRotation","_inverseViewRotation","_viewRotation3D","_inverseViewRotation3D","_inverseProjectionDirty","_inverseProjection","_modelViewDirty","_modelView","_modelView3DDirty","_modelView3D","_modelViewRelativeToEyeDirty","_modelViewRelativeToEye","_inverseModelViewDirty","_inverseModelView","_inverseModelView3DDirty","_inverseModelView3D","_viewProjectionDirty","_viewProjection","_inverseViewProjectionDirty","_inverseViewProjection","_modelViewProjectionDirty","_modelViewProjection","_inverseModelViewProjectionDirty","_inverseModelViewProjection","_modelViewProjectionRelativeToEyeDirty","_modelViewProjectionRelativeToEye","_modelViewInfiniteProjectionDirty","_modelViewInfiniteProjection","_normalDirty","_normal","_normal3DDirty","_normal3D","_inverseNormalDirty","_inverseNormal","_inverseNormal3DDirty","_inverseNormal3D","_encodedCameraPositionMCDirty","_encodedCameraPositionMC","_sunPositionWC","_sunPositionColumbusView","_sunDirectionWC","_sunDirectionEC","_moonDirectionEC","_pass","_cameraDirection","_cameraRight","_cameraUp","_frustum2DWidth","_eyeHeight2D","_resolutionScale","_orthographicIn3D","_backgroundColor","_brdfLut","_environmentMap","_sphericalHarmonicCoefficients","_specularEnvironmentMaps","_specularEnvironmentMapsDimensions","_specularEnvironmentMapsMaximumLOD","_fogDensity","_imagerySplitPosition","_pixelSizePerMeter","_geometricToleranceOverMeter","vc","viewportCartesian4","viewportOrthographic","cleanViewport","inverseModel","inverse","inverseTransposeModel","m","getRotation","view3D","updateView3D","viewRotation","viewRotation3D","inverseView","inverseView3D","updateInverseView3D","inverseViewRotation","inverseViewRotation3D","inverseProjection","infiniteProjection","modelView","multiplyTransformation","modelView3D","modelViewRelativeToEye","mv","mvRte","cleanModelViewRelativeToEye","inverseModelView","inverseModelView3D","viewProjection","inverseViewProjection","modelViewProjection","inverseModelViewProjection","modelViewProjectionRelativeToEye","modelViewInfiniteProjection","cleanNormal","normal3D","cleanNormal3D","inverseNormal","inverseNormal3D","entireFrustum","currentFrustum","frustumPlanes","log2FarDistance","log2FarPlusOne","log2NearDistance","eyeHeight2D","sunPositionWC","sunPositionColumbusView","sunDirectionEC","moonDirectionEC","encodedCameraPositionMCHigh","cleanEncodedCameraPositionMC","high","encodedCameraPositionMCLow","low","temeToPseudoFixedMatrix","resolutionScale","fogDensity","geometricToleranceOverMeter","brdfLut","specularEnvironmentMapsDimensions","orthographicIn3D","transformMatrix","sunCartographicScratch","setInverseView","inverseViewMatrix","rightWC","setCamera","setInfiniteProjection","log2","EMPTY_ARRAY","computeOrthographicOffCenter","clientWidth","computeSunPositionInEarthInertialFrame","sunCartographic","setSunAndMoonDirections","pixelSizePerMeter","POSITIVE_INFINITY","cameraPositionMC","view2Dto3DPScratch","view2Dto3DRScratch","view2Dto3DUScratch","view2Dto3DDScratch","view2Dto3DCartographicScratch","view2Dto3DCartesian3Scratch","view2Dto3DMatrix4Scratch","position2D","direction2D","right2D","up2D","frustum2DWidth","position3D","enuToFixed","eastNorthUpToFixedFrame","multiplyByPointAsVector","view2Dto3D","TextureMagnificationFilter","TextureMinificationFilter","TextureWrap","BrdfLutGeneratorFS","_colorTexture","_drawCommand","generator","pixelFormat","sampler","wrapS","CLAMP_TO_EDGE","wrapT","minificationFilter","NEAREST","magnificationFilter","createCommand","FrustumGeometry","GeometryAttributes","PERSPECTIVE","ORTHOGRAPHIC","FrustumOutlineGeometry","frustumType","frustumPackedLength","orientation","drawNearPlane","_drawNearPlane","packedLength","_frustumType","_frustum","_origin","_orientation","_workerName","pack","startingIndex","scratchPackPerspective","scratchPackOrthographic","scratchPackQuaternion","scratchPackorigin","unpack","frustumResult","frustumGeometry","Float64Array","_computeNearFarPlanes","DOUBLE","numberOfPlanes","fromVertices","FeatureDetection","DepthPlaneFS","DepthPlaneVS","_command","depthQuadScratch","supportsTypedArrays","scratchCartesian1","scratchCartesian2","scratchCartesian4","colorMask","depthQuad","q","multiplyComponents","oneOverRadii","qMagnitude","qUnit","eUnit","nUnit","wMagnitude","scalar","eastOffset","northOffset","upperLeft","lowerLeft","upperRight","lowerRight","computeDepthQuad","getAttribute","vertexBuffer","copyFromArrayView","DYNAMIC_DRAW","fragDepthRegex","discardRegex","shaderProgramId","_attributeLocations","writesDepthOrDiscards","test","usesLogDepth","getDepthOnlyShaderProgram","depthOnlyState","getState","getDepthOnlyRenderState","writeLogDepthRegex","vertexlogDepthRegex","extensionRegex","writesLogDepth","addExtension","logSource","getLogDepthShaderProgram","newSources","getPickShaderProgram","pickState","getPickRenderState","getHdrShaderProgram","_lastAlpha","_lastBeta","_lastGamma","_alpha","_beta","_gamma","e","toRadians","beta","window","_removeListener","removeEventListener","scratchQuaternion1","scratchQuaternion2","scratchMatrix3","bQuat","gQuat","rotQuat","aQuat","rotate","screenSpaceErrorFactor","heightsTable","densityTable","tableStartDensity","tableEndDensity","tableLastIndex","scratchPositionNormal","findInterval","t","startDensity","positionNormal","jobScheduler","getMorphTime","nearPlane","farPlane","closestObjectSize","frustumSplits","PassThrough","StencilFunction","StencilOperation","_previousFramebuffer","_texture","_classifiedTexture","_depthStencilTexture","_fboClassified","_rsUnclassified","_rsClassified","_unclassifiedCommand","_classifiedCommand","_translucentCommand","_clearCommand","classifiedTexture","rsUnclassified","stencilTest","frontFunction","EQUAL","frontOperation","fail","KEEP","zFail","zPass","backFunction","NEVER","reference","mask","rsClassified","NOT_EQUAL","rsDefault","setCesium3DTileBit","CESIUM_3D_TILE_MASK","previousFramebufferChanged","depthStencilRenderbuffer","textureChanged","LINEAR","DEPTH_STENCIL","UNSIGNED_INT_24_8","_rsDefault","unclassifiedFSSource","classifiedFSSource","JobType","JobTypeBudget","total","_total","usedThisFrame","stolenFromMeThisFrame","starvedThisFrame","starvedLastFrame","budgets","jobBudgets","NUMBER_OF_JOB_TYPES","TEXTURE","PROGRAM","BUFFER","totalBudget","executedThisFrame","_totalBudget","_totalUsedThisFrame","_budgets","_executedThisFrame","budget","job","jobType","stolenBudget","progressThisFrame","getElement","_container","display","fpsElement","_fpsText","createTextNode","msElement","_msText","_lastFpsSampleTime","_lastMsSampleTime","_fpsFrameCount","_msFrameCount","_throttled","throttledElement","_throttledText","nodeValue","updateDisplay","fpsElapsedTime","fps","msElapsedTime","ms","toFixed","_textureToCopy","_copyDepthCommand","_debugPickDepthViewportCommand","destroyTextures","destroyFramebuffers","createFramebuffers","createTextures","u_texture","updateFramebuffers","updateCopyCommands","scratchPackedDepth","packedDepthScale","packedDepth","arraySlice","PostProcessStageLibrary","PostProcessStageTextureCache","Tonemapper","stackScratch","createFXAAStage","ao","createAmbientOcclusionStage","createBloomStage","_autoExposureEnabled","_autoExposure","createAutoExposureStage","_tonemapping","_tonemapper","tonemapper","ACES","tonemapping","stageNames","stage","_stages","_activeStages","_previousActiveStages","_randomTexture","randomTexture","_ao","_bloom","_fxaa","_lastLength","_aoEnabled","_bloomEnabled","_tonemappingEnabled","_fxaaEnabled","_stagesRemoved","_textureCacheDirty","_stageNames","removeStages","newStages","stages","_index","getOutputTexture","inputPreviousStageTexture","readyAndEnabled","selected","useAutoExposure","REINHARD","createReinhardTonemappingStage","MODIFIED_REINHARD","createModifiedReinhardTonemappingStage","FILMIC","createFilmicTonemappingStage","createAcesTonemappingStage","autoexposure","autoExposure","currentStage","getStageByName","previousActiveStages","activeStages","_isSupported","activeStagesChanged","aoEnabled","bloomEnabled","tonemappingEnabled","fxaaEnabled","updateDependencies","random","RGB","REPEAT","stageName","autoExposureEnabled","initialTexture","lastTexture","_copyColorCommand","deprecationWarning","AcesTonemapping","AmbientOcclusionGenerate","AmbientOcclusionModulate","BlackAndWhite","BloomComposite","Brightness","ContrastBias","DepthOfField","DepthView","EdgeDetection","FilmicTonemapping","FXAA","GaussianBlur1D","LensFlare","ModifiedReinhardTonemapping","NightVision","ReinhardTonemapping","Silhouette","FXAA3_11","AutoExposure","PostProcessStage","PostProcessStageComposite","PostProcessStageSampleMode","createBlur","blurShader","blurX","fragmentShader","sigma","stepSize","sampleMode","blurY","blurXUniforms","blurYUniforms","createBlurStage","createDepthOfFieldStage","blur","dof","focalDistance","blurTexture","isDepthOfFieldSupported","createEdgeDetectionStage","isEdgeDetectionSupported","createSilhouetteStage","edgeDetectionStages","edgeDetection","compositeUniforms","fsDecl","fsLoop","edgeComposite","getSilhouetteEdgeDetection","silhouetteProcess","silhouetteTexture","isSilhouetteSupported","contrastBias","generateComposite","bloomComposite","glowOnly","bloomTexture","generate","intensity","bias","lengthCap","frustumLength","generateAndBlur","ambientOcclusionModulate","ambientOcclusionOnly","ambientOcclusionTexture","blurStepSize","isAmbientOcclusionSupported","fxaaFS","white","createBlackAndWhiteStage","gradations","createBrightnessStage","createNightVisionStage","createDepthViewStage","createLensFlareStage","dirtTexture","starTexture","distortion","ghostDispersal","haloWidth","earthRadius","_ready","_name","_logDepthChanged","_framebuffers","_previousLuminance","_commands","_minMaxLuminance","_enabled","minimumLuminance","maximumLuminance","framebuffers","destroyCommands","createUniformMap","colorTextureDimensions","minMaxLuminance","previousLuminance","getShaderSource","_width","_height","HALF_FLOAT","createCommands","validate","EasingFunction","ScreenSpaceEventHandler","ScreenSpaceEventType","_currentTweens","_morphHandler","_morphCancelled","_completeMorph","_morphToOrthographic","_previousMode","transitioner","startPos","scratchCVTo2DStartPos","startDir","scratchCVTo2DStartDir","startUp","scratchCVTo2DStartUp","endDir","scratchCVTo2DEndDir","endUp","scratchCVTo2DEndUp","endPos","scratchCVTo2DEndPos","scratchCVTo2DRay","TRANSFORM_2D","pickPos","scratchCVTo2DPickPos","TRANSFORM_2D_INVERSE","scratchCVTo2DFrustum","camera2D","scratchCVTo2DCamera","complete","complete2DCallback","createMorphHandler","tween","easingFunction","QUARTIC_OUT","startObject","stopObject","columbusViewMorph","_adjustOrthographicFrustum","morphPerspectiveToOrthographic","morphFromColumbusViewTo2D","scratch3DTo2DCamera","scratch3DTo2DCartographic","scratch3DTo2DRay","rayDirection","surfacePoint","scaleToGeodeticSurface","scratch3DTo2DSurfacePoint","toENU","scratch3DTo2DToENU","pickedPos","scratch3DTo2DPickPosition","endCamera","scratch3DTo2DEndCamera","morphFrom3DToColumbusView","morphFrom3DTo2D","scratchToCVPosition","scratchToCVDirection","scratchToCVUp","scratchToCVPosition2D","scratchToCVDirection2D","scratchToCVUp2D","scratchToCVSurfacePosition","scratchToCVCartographic","scratchToCVToENU","scratchToCVFrustumPerspective","scratchToCVFrustumOrthographic","scratchToCVCamera","cameraCV","destroyMorphHandler","_previousModeMode","wasMorphing","completeColumbusViewCallback","scratch3DToCVEndPos","scratch3DToCVEndDir","scratch3DToCVEndUp","morph","scratch3DToCVStartPos","scratch3DToCVStartDir","scratch3DToCVStartUp","morphOrthographicToPerspective","morphFrom2DToColumbusView","scratchCVTo3DCamera","scratch2DTo3DFrustumPersp","completeMorphFunction","cancelFlight","setInputAction","LEFT_DOWN","MIDDLE_DOWN","RIGHT_DOWN","WHEEL","cancelTween","camera3D","fromDegrees","getColumbusViewTo3DCamera","scratch2DTo3DFrustumOrtho","complete3DCallback","morphFromColumbusViewTo3D","flyTo","destination","morphFrom2DTo3D","scratchCVTo3DCartographic","scratchCVTo3DSurfacePoint","scratchCVTo3DFromENU","positionCarto","fromENU","scratchCVTo3DStartPos","scratchCVTo3DStartDir","scratchCVTo3DStartUp","scratchCVTo3DEndPos","scratchCVTo3DEndDir","scratchCVTo3DEndUp","addMorphTimeAnimations","startPosition","endPosition","startFOV","endFOV","startValue","stopValue","addProperty","HeadingPitchRoll","isArray","KeyboardEventModifier","Plane","CameraEventAggregator","CameraEventType","enableInputs","enableTranslate","enableZoom","enableRotate","enableTilt","enableLook","inertiaSpin","inertiaTranslate","inertiaZoom","maximumMovementRatio","bounceAnimationTime","minimumZoomDistance","maximumZoomDistance","translateEventTypes","LEFT_DRAG","zoomEventTypes","RIGHT_DRAG","PINCH","rotateEventTypes","tiltEventTypes","MIDDLE_DRAG","eventType","modifier","CTRL","lookEventTypes","SHIFT","minimumPickingTerrainHeight","_minimumPickingTerrainHeight","minimumCollisionTerrainHeight","_minimumCollisionTerrainHeight","minimumTrackBallHeight","_minimumTrackBallHeight","enableCollisionDetection","_aggregator","_lastInertiaSpinMovement","_lastInertiaZoomMovement","_lastInertiaTranslateMovement","_lastInertiaTiltMovement","_tween","_horizontalRotationAxis","_tiltCenterMousePosition","_tiltCenter","_rotateMousePosition","_rotateStartPosition","_strafeStartPosition","_zoomMouseStart","_zoomWorldPosition","_useZoomWorldPosition","_tiltCVOffMap","_looking","_rotating","_strafing","_zoomingOnVector","_rotatingZoom","_maxCoord","_zoomFactor","_rotateFactor","_rotateRateRangeAdjustment","_maximumRotateRate","_minimumRotateRate","_minimumZoomRate","_maximumZoomRate","inertiaMaxClickTimeThreshold","maintainInertia","aggregator","decayCoef","action","lastMovementName","movementState","motion","active","movement","ts","getButtonPressTime","tr","getButtonReleaseTime","threshold","getTime","Date","fromNow","coefficient","tau","exp","decay","lastMovement","getLastMovement","EPSILON14","isNaN","isButtonDown","getStartMousePosition","scratchEventTypeArray","reactToInput","controller","eventTypes","inertiaConstant","inertiaStateName","isMoving","getMovement","scratchZoomPickRay","scratchPickCartesian","scratchZoomOffset","scratchZoomDirection","scratchCenterPixel","scratchCenterPosition","scratchPickNormal","scratchZoomAxis","scratchCameraPositionNormal","scratchTargetNormal","scratchCameraPosition","scratchCameraUpNormal","scratchCameraRightNormal","scratchForwardNormal","scratchPositionToTarget","scratchPositionToTargetNormal","scratchPan","scratchCenterMovement","scratchCenter","scratchCartesian","scratchCartesianTwo","scratchCartesianThree","scratchZoomViewOptions","handleZoom","zoomFactor","distanceMeasure","unitPositionDotDirection","percentage","minHeight","maxHeight","zoomRate","rangeWindowRatio","clientHeight","heading","pitch","roll","zoomIn","sameStartPosition","zoomingOnVector","rotatingZoom","getPickRay","pickGlobe","zoomOnVector","worldPosition","savedX","getMagnitude","move","cameraPositionNormal","centerPixel","centerPosition","target","targetNormal","forward","positionToTarget","positionToTargetNormal","alphaDot","targetDistance","remainingDistance","positionToTargetDistance","asin","pMid","cMid","setView","pickedNormal","dotProduct","angle","acosClamped","axis","zoomMouseStart","translate2DStart","translate2DEnd","scratchTranslateP0","translate2D","zoom2D","twist2DStart","twist2DEnd","twist2D","angleAndHeight","rotateRate","phiWindowRatio","deltaPhi","twistRight","singleAxisTwist2D","startTheta","endTheta","theta","pickGlobeScratchRay","scratchDepthIntersection","scratchRayIntersection","mousePosition","depthIntersection","rayIntersection","translateCVStartRay","translateCVEndRay","translateCVStartPos","translateCVEndPos","translatCVDifference","translateCVOrigin","translateCVPlane","translateCVStartMouse","translateCVEndMouse","translateCV","_translateMousePosition","_strafeMousePosition","look3D","strafe","globePos","startMouse","endMouse","startRay","plane","fromPointNormal","startPlanePos","rayPlane","endRay","endPlanePos","diff","mag","EPSILON6","rotateCVWindowPos","rotateCVWindowRay","rotateCVCenter","rotateCVVerticalCenter","rotateCVTransform","rotateCVVerticalTransform","rotateCVOrigin","rotateCVPlane","rotateCVCartesian3","rotateCVCart","rotateCVOldTransform","rotateCVQuaternion","rotateCVMatrix","tilt3DCartesian3","rotateCV","onMap","normalDotDirection","oldGlobe","oldEllipsoid","UNIT_SPHERE","oldTransform","rotate3D","rotateCVOnPlane","verticalCenter","verticalTransform","constrainedAxis","tangent","oldConstrainedAxis","originalPosition","_adjustHeightForTerrain","worldToCameraCoordinatesPoint","magSqrd","angleBetween","quaternion","rotateCVOnTerrain","zoomCVWindowPos","zoomCVWindowRay","zoomCVIntersection","zoomCV","scratchStrafeRay","scratchStrafePlane","scratchStrafeIntersection","scratchStrafeDirection","scratchMousePos","mouseStartPosition","spin3DPick","scratchRadii","scratchEllipsoid","scratchLookUp","spin3D","mousePos","pan3D","fromCartesian3","pickEllipsoid","rotateOnlyVertical","rotateOnlyHorizontal","oldAxis","rho","thetaWindowRatio","deltaTheta","rotateRight","rotateUp","pan3DP0","UNIT_W","pan3DP1","pan3DTemp0","pan3DTemp1","pan3DTemp2","pan3DTemp3","pan3DStartMousePosition","pan3DEndMousePosition","startMousePosition","endMousePosition","p0","p1","worldToCameraCoordinates","basis0","basis1","basis2","startRho","startDot","startRej","endRho","endDot","endRej","startPhi","endPhi","EPSILON2","planeNormal","side0","side1","zoom3DUnitPosition","zoom3DCartographic","zoom3D","unitPosition","tilt3DWindowPos","tilt3DRay","tilt3DCenter","tilt3DVerticalCenter","tilt3DTransform","tilt3DVerticalTransform","tilt3DOldTransform","tilt3DQuaternion","tilt3DMatrix","tilt3DCart","tilt3DLookUp","tilt3D","_tiltOnEllipsoid","tilt3DOnEllipsoidCartographic","rayEllipsoid","grazingAltitudeLocation","grazingAltitudeCart","tilt3DOnEllipsoid","newEllipsoid","tilt3DOnTerrain","look3DStartPos","look3DEndPos","look3DStartRay","look3DEndRay","look3DNegativeRot","look3DTan","rotationAxis","horizontalRotationAxis","look","lookLeft","negativeRotationAxis","northParallel","southParallel","angleToAxis","EPSILON4","lookUp","rotatable2D","anyButtonDown","createCorrectPositionTween","updateCV","update3D","reset","getKey","listenToPinch","isDown","_isDown","eventStartPosition","_eventStartPosition","pressTime","_pressTime","releaseTime","_releaseTime","_movement","prevAngle","_eventHandler","event","_buttonsDown","position1","position2","PINCH_START","PINCH_END","mouseMovement","pinchMovement","TwoPI","PINCH_MOVE","listenToWheel","arcLength","listenMouseButtonDownUp","down","_lastMovement","valid","LEFT_UP","RIGHT_UP","MIDDLE_UP","cloneMouseMovement","listenMouseMove","typeName","_currentMousePosition","MOUSE_MOVE","modifierName","currentMousePosition","wheelMoved","ALT","ShadowMapShader","getShadowCastShaderKeyword","isTerrain","usesDepthTexture","isOpaque","createShadowCastVertexShader","positionVaryingName","findPositionVarying","hasPositionVarying","createShadowCastFragmentShader","opaque","fsSource","getShadowReceiveShaderKeyword","hasTerrainNormal","_usesDepthTexture","_polygonOffsetSupported","_isPointLight","_isSpotLight","_numberOfCascades","debugCascadeColors","softShadows","createShadowReceiveVertexShader","createShadowReceiveFragmentShader","normalVaryingName","findNormalVarying","hasNormalVarying","polygonOffsetSupported","isSpotLight","hasCascades","_pointBias","_terrainBias","_primitiveBias","normalShading","normalShadingSmooth","normalOffset","AdditiveBlend","BrightPass","SceneFramebuffer","_sceneFramebuffer","textureScale","forcePowerOfTwo","brightPass","avgLuminance","_delta","_sigma","_blurStep","step","_uCenter","_uRadius","colorTexture2","sunPositionECScratch","sunPositionWCScratch","sizeScratch","postProcessMatrix4Scratch","sunPosition","viewProjectionMatrix","sunPositionEC","SOLAR_RADIUS","limbWC","sunSize","size","firstStage","downSampleWidth","downSampleHeight","downSampleViewport","scissorRectangle","updateSunPosition","Interval","FrustumCommands","OIT","PickDepthFramebuffer","PickFramebuffer","_cameraClone","_cameraStartFired","_cameraMovedTime","scratchPosition0","scratchPosition1","cameraEqual","camera0","camera1","is2D","curNear","curFar","insertIntoBin","cf","commandsInFrustums","totalCommands","cameraClone","EPSILON15","moveEnd","moveStart","distances","computeList","overlayList","NUMBER_OF_PASSES","n","undefBV","shadowNear","shadowFar","shadowClosestObjectSize","computePlaneDistances","MAXIMUM_DISTANCE","EPSILON8","numPasses","AdjustTranslucentFS","CompositeOITFS","BlendEquation","BlendFunction","_translucentMultipassSupport","_translucentMRTSupport","extensionsSupported","_opaqueFBO","_opaqueTexture","_accumulationTexture","_translucentFBO","_alphaFBO","_adjustTranslucentFBO","_adjustAlphaFBO","_opaqueClearCommand","_translucentMRTClearCommand","_translucentMultipassClearCommand","_alphaClearCommand","_translucentRenderStateCache","_alphaRenderStateCache","_compositeCommand","_adjustTranslucentCommand","_adjustAlphaCommand","_useScissorTest","_scissorRectangle","_useHDR","_revealageTexture","destroyResources","useHDR","accumulationTexture","updateTextures","completeFBO","FRAMEBUFFER_COMPLETE","supported","status","translucentComplete","alphaComplete","adjustTranslucentComplete","adjustAlphaComplete","u_opaque","u_accumulation","u_revealage","u_bgColor","u_depthTexture","useScissorTest","updateScissor","translucentMRTBlend","equationRgb","ADD","equationAlpha","functionSourceRgb","ONE","functionDestinationRgb","functionSourceAlpha","functionDestinationAlpha","ONE_MINUS_SOURCE_ALPHA","translucentColorBlend","translucentAlphaBlend","getTranslucentRenderState","translucentBlending","translucentState","mrtShaderSource","colorShaderSource","alphaShaderSource","getTranslucentShaderProgram","replace","translucentShader","translucentRenderState","colorShader","colorRenderState","alphaShader","alphaRenderState","translucentCommand","getTranslucentMRTShaderProgram","alphaCommand","getTranslucentColorShaderProgram","getTranslucentColorRenderState","getTranslucentAlphaShaderProgram","getTranslucentAlphaRenderState","executeTranslucentCommandsSortedMRT","executeTranslucentCommandsSortedMultipass","Renderbuffer","RenderbufferFormat","_passState","createResources","_fb","screenSpaceRectangle","colorScratch","halfWidth","halfHeight","dx","dy","byteToFloat","SkyAtmosphereFS","SkyAtmosphereVS","SkyAtmosphere","_spSkyFromSpace","_spSkyFromAtmosphere","_spSkyFromSpaceColorCorrect","_spSkyFromAtmosphereColorCorrect","_splitDirection","_hueSaturationBrightness","cameraAndRadiiAndDynamicAtmosphereColor","_cameraAndRadiiAndDynamicAtmosphereColor","u_cameraAndRadiiAndDynamicAtmosphereColor","u_splitDirection","slicePartitions","stackPartitions","createAttributeLocations","useColorCorrect","contextColorCorrect","vsColorCorrect","fsColorCorrect","loadCubeMap","SkyBoxFS","SkyBoxVS","SkyBox","_sources","_useHdr","cubeMap","u_cubeMap","urls","flipOptions","preferImageBitmap","facePromises","createIfNeeded","images","ComputeCommand","SunFS","SunTextureFS","SunVS","Sun","_boundingVolume","_boundingVolume2D","_drawingBufferWidth","_drawingBufferHeight","_radiusTS","_size","glowFactor","_glowFactorDirty","u_size","_glowFactor","scratchPositionWC","scratchLimbWC","scratchPositionEC","_glowLengthTS","u_radiusTS","directions","createVertexBuffer","UNSIGNED_SHORT","sunPositionCV","boundingVolume2D","computeActualWgs84Position","dist","projMatrix","positionEC","positionCC","clipToGLWindowCoordinates","limbCC","OrderedGroundPrimitiveCollection","_length","_collections","_collectionsArray","destroyPrimitives","_zIndex","doNotDestroy","collections","AssociativeArray","NearFarScalar","HeightReference","HorizontalOrigin","VerticalOrigin","defaultColor","defaultEyeOffset","defaultHeightReference","defaultPixelOffset","defaultAlignedAxis","defaultHorizontalOrigin","CENTER","defaultVerticalOrigin","positionScratch","eyeOffsetScratch","pixelOffsetScratch","scaleByDistanceScratch","translucencyByDistanceScratch","pixelOffsetScaleByDistanceScratch","boundingRectangleScratch","distanceDisplayConditionScratch","EntityData","billboard","textureValue","BillboardVisualizer","entityCluster","entityCollection","collectionChanged","_onCollectionChanged","_cluster","_entityCollection","_items","returnPrimitive","cluster","removeBillboard","items","billboardGraphics","_billboard","_position","_image","_clusterDirty","getBillboard","_color","eyeOffset","_eyeOffset","heightReference","_heightReference","pixelOffset","_pixelOffset","scale","_scale","_rotation","alignedAxis","_alignedAxis","horizontalOrigin","_horizontalOrigin","verticalOrigin","_verticalOrigin","scaleByDistance","_scaleByDistance","translucencyByDistance","_translucencyByDistance","pixelOffsetScaleByDistance","_pixelOffsetScaleByDistance","sizeInMeters","_sizeInMeters","_distanceDisplayCondition","disableDepthTestDistance","_disableDepthTestDistance","subRegion","_imageSubRegion","setImageSubRegion","_imageId","_clampedPosition","entities","changed","EventHelper","BoxGeometryUpdater","CorridorGeometryUpdater","CylinderGeometryUpdater","DynamicGeometryBatch","EllipseGeometryUpdater","EllipsoidGeometryUpdater","PlaneGeometryUpdater","PolygonGeometryUpdater","PolylineVolumeGeometryUpdater","RectangleGeometryUpdater","StaticGeometryColorBatch","StaticGeometryPerMaterialBatch","StaticGroundGeometryColorBatch","StaticGroundGeometryPerMaterialBatch","StaticOutlineGeometryBatch","WallGeometryUpdater","emptyArray","geometryUpdaters","GeometryUpdaterSet","updaters","eventHelper","updater","_removeEntitySubscription","definitionChanged","GeometryVisualizer","_addedObjects","_removedObjects","_changedObjects","numberOfShadowModes","NUMBER_OF_SHADOW_MODES","_outlineBatches","_closedColorBatches","_closedMaterialBatches","_openColorBatches","_openMaterialBatches","numberOfClassificationTypes","NUMBER_OF_CLASSIFICATION_TYPES","groundColorBatches","groundMaterialBatches","_groundColorBatches","_groundMaterialBatches","_dynamicBatch","_batches","concat","_subscriptions","_updaterSets","forEach","updaterSet","addedObjects","removedObjects","changedObjects","_removeUpdater","_insertUpdaterIntoBatch","_onGeometryChanged","isUpdated","batches","getBoundingSphereArrayScratch","getBoundingSphereBoundingSphereScratch","boundingSpheres","tmp","batchesLength","fromBoundingSpheres","removeAllPrimitives","subscriptions","updaterSets","terrainOffsetProperty","DistanceDisplayConditionGeometryInstanceAttribute","GeometryOffsetAttribute","OffsetGeometryInstanceAttribute","heightReferenceOnEntityPropertyChanged","defaultOffset","offsetScratch","scratchColor","BoxGeometryOptions","offsetAttribute","box","DynamicBoxGeometryUpdater","create","_terrainOffsetProperty","currentColor","fromDistanceDisplayCondition","computeModelMatrixForHeightReference","_computeCenter","CorridorGeometry","CorridorOutlineGeometry","GroundGeometryUpdater","CorridorGeometryOptions","cornerType","extrudedHeight","granularity","corridor","DynamicCorridorGeometryUpdater","heightValue","heightReferenceValue","extrudedHeightValue","extrudedHeightReferenceValue","extrudedHeightReference","computeGeometryOffsetAttribute","getGeometryHeight","getGeometryExtrudedHeight","CLAMP_TO_GROUND","getMinimumMaximumHeights","computeRectangle","minimumTerrainHeight","arrayFill","arrayRemoveDuplicates","CornerType","CorridorGeometryLibrary","PolygonPipeline","cartesian1","cartesian2","cartesian3","cartesian4","cartesian5","cartesian6","scratch1","scratch2","scaleToSurface","addNormals","attr","front","back","normals","tangents","bitangents","addAttribute","bitangent","computedPositions","corners","endPositions","computedLefts","lefts","computedNormals","leftCount","rightCount","indicesLength","leftSide","leftPositions","rightPositions","endPositionLength","addEndPositions","UL","LL","UR","LR","rightPos","leftPos","finalPositions","halfLength","firstEndPositions","fromArray","rightNormal","leftNormal","posIndex","compIndex","rightEdge","leftEdge","pivot","l","outsidePoint","previousPoint","nextPoint","lastEndPositions","st","rightSt","leftSt","stIndex","halfEndPos","addWallPositions","wallPositions","computePositionsExtruded","params","topVertexFormat","computePositions","newPositions","extrudedPositions","scaleToGeodeticHeight","topNormals","topBitangents","threeSize","twoSize","sixSize","topPosition","bottomPosition","previousPosition","attrIndex","attrIndexOffset","topTangents","topSt","extrudedAttributes","extrudeNormals","extrudeDirection","applyOffset","TOP","applyOffsetValue","iLength","newIndices","v0","v1","v2","computeOffsetPoints","offsetDirection","minLat","minLon","maxLat","maxLon","lat","lon","scratchCartesianOffset","scratchCartesianEnds","scratchCartographicMin","scratchCartographicMax","cleanPositions","NEGATIVE_INFINITY","ROUNDED","last","_positions","DEFAULT","_extrudedHeight","_cornerType","_granularity","_shadowVolume","_offsetAttribute","scratchVertexFormat","scratchOptions","corridorGeometry","extrude","saveAttributes","createShadowVolume","minHeightFunc","maxHeightFunc","textureCoordinateRotationPoints","wallIndices","BEVELED","corridorOutlineGeometry","offsetValue","CylinderGeometry","CylinderOutlineGeometry","CylinderGeometryOptions","topRadius","bottomRadius","slices","numberOfVerticalLines","cylinder","DynamicCylinderGeometryUpdater","CylinderGeometryLibrary","radiusScratch","bitangentScratch","tangentScratch","_topRadius","_bottomRadius","_slices","unitCylinderGeometry","cylinderGeometry","twoSlices","threeSlices","numVertices","computeNormal","computeTangent","normalIndex","tangentIndex","bitangentIndex","atan2","normalScale","numIndices","textureCoordIndex","rad","getUnitCylinder","_numberOfVerticalLines","numSide","numSideLines","round","EllipseGeometry","EllipseOutlineGeometry","EllipseGeometryOptions","semiMajorAxis","semiMinorAxis","stRotation","ellipse","DynamicEllipseGeometryUpdater","EllipseGeometryLibrary","texCoordScratch","textureMatrixScratch","tangentMatrixScratch","quaternionScratch","scratchNormal","scratchTangent","scratchBitangent","projectedCenterScratch","scratchMinTexCoord","scratchMaxTexCoord","computeTopBottomAttributes","projectedCenter","geodeticNormal","textureMatrix","tangentMatrix","minTexCoord","maxTexCoord","bottomOffset","stOffset","i1","i2","rotatedPoint","projectedPoint","raisePositionsToHeight","topIndices","numPts","prevIndex","numInterior","positionIndex","indicesIndex","boundingSphereCenter","topBoundingSphere","bottomBoundingSphere","computeExtrudedEllipse","scaledNormal","cep","computeEllipsePositions","outerPositions","topBottomAttributes","posLength","topBottomIndices","topBottomGeo","wallAttributes","extrudedPosition","computeWallAttributes","computeWallIndices","wallGeo","geo","combineInstances","positionsFlat","positionsCount","fromCartesianArray","_semiMajorAxis","_semiMinorAxis","_stRotation","_textureCoordinateRotationPoints","ellipseGeometry","computeEllipse","boundingRectangle","maxI","EllipsoidOutlineGeometry","radiiScratch","unitSphere","EllipsoidGeometryOptions","subdivisions","DynamicEllipsoidGeometryUpdater","_outlineAttributes","_lastSceneMode","_lastShow","_lastOutlineShow","_lastOutlineWidth","_lastOutlineColor","_lastOffset","skipModelMatrix","modelMatrixResult","showFill","showOutline","getValueOrClonedDefault","in3D","_lastDistanceDisplayCondition","outlineAttributes","multiplyByScale","PlaneGeometry","PlaneOutlineGeometry","PlaneGeometryOptions","DynamicPlaneGeometryUpdater","distanceDisplayConditionAttribute","planeGraphics","computeModelMatrix","createPrimitiveMatrix","isColorMaterial","scratchAxis","scratchAxis2","scratchTranslation","scratchScale","scratchQuaternion","transformedNormal","rotationMatrix","setColumn","fromRotationMatrix","fromTranslationQuaternionRotationScale","planeGeometry","texCoords","ArcType","CoplanarPolygonGeometry","CoplanarPolygonOutlineGeometry","EllipsoidTangentPlane","PolygonGeometry","PolygonOutlineGeometry","scratch2DPositions","cart2Scratch","PolygonGeometryOptions","polygonHierarchy","perPositionHeight","closeTop","closeBottom","arcType","polygon","DyanmicPolygonGeometryUpdater","hierarchy","tangentPlane","positions2D","projectPointsOntoPlane","area","centroid2D","p2","f","sum","projectPointOntoEllipsoid","perPositionHeightProperty","perPositionHeightEnabled","hierarchyValue","perPositionHeightValue","GEODESIC","isExtruded","CoplanarPolygonGeometryLibrary","PolygonGeometryLibrary","scratchBR","stScratch","textureCoordinatesOrigin","axis1Scratch","axis2Scratch","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","projectPointTo2D","triangulate","holes","tangentRotation","stOrigin","flatPositions","stx","sty","_polygonHierarchy","computeHierarchyPackedLength","fromPositions","packPolygonHierarchy","unpackPolygonHierarchy","polygonGeometry","axis1","axis2","computeProjectTo2DArguments","projectPoints","createProjectPointsTo2DFunction","projectPoint","createProjectPointTo2DFunction","polygonsFromHierarchy","polygons","outerRing","computeBoundingRectangle","geometries","geometryInstance","createGeometryFromPositions","validOutline","polygonOutlinesFromHierarchy","EllipsoidGeodesic","EllipsoidRhumbLine","Matrix2","WindingOrder","scratchCarto1","scratchCarto2","adjustPosHeightsForNormal","p1Carto","p2Carto","scratchBoundingRectangle","p1Scratch","p2Scratch","scratchPerPosNormal","scratchPerPosTangent","scratchPerPosBitangent","appendTextureCoordinatesOrigin","appendTextureCoordinatesCartesian2","appendTextureCoordinatesCartesian3","appendTextureCoordinatesQuaternion","appendTextureCoordinatesMatrix3","computeAttributes","wall","recomputeNormal","tangentRotationMatrix","_plane","bottomOffset2","projectPointOntoPlane","attrIndex1","attrIndex2","EPSILON10","startCartographicScratch","endCartographicScratch","idlCross","westOverIDL","eastOverIDL","ellipsoidGeodesic","RHUMB","swap","inverseChordLength","chordLength","positionsLength","endCartographic","startCartographic","setEndPoints","interpolateAndGrowRectangle","interpolatedCartographicScratch","segmentLength","surfaceDistance","numPoints","subsegmentDistance","interpolationDistance","interpolatedCartographic","interpolateUsingSurfaceDistance","lonAdjusted","createGeometryFromPositionsExtrudedPositions","createGeometryFromPositionsExtruded","geos","walls","topGeo","edgePoints","topBottomPositions","ilength","i0","topAndBottom","windingOrder","computeWindingOrder2D","CLOCKWISE","reverse","computeWallGeometry","hole","COUNTER_CLOCKWISE","perPositionHeightExtrude","h","_closeTop","_closeBottom","_perPositionHeight","_perPositionHeightExtrude","_arcType","dummyOptions","splitGeometry","scaleToGeodeticHeightExtruded","createGeometryFromPositionsPositions","createGeometryFromPositionsSubdivided","minDistance","subdividedPositions","subdivideLineCount","subdivideRhumbLineCount","tempPositions","subdivideLine","subdivideRhumbLine","tempPositionsLength","indicesSize","cornersLength","PolylineVolumeGeometry","PolylineVolumeOutlineGeometry","PolylineVolumeGeometryOptions","polylinePositions","shapePositions","polylineVolume","DynamicPolylineVolumeGeometryUpdater","shape","PolylineVolumeGeometryLibrary","_shape","numComponents","brScratch","polylineVolumeGeometry","shape2D","removeDuplicatesFromShape","combinedPositions","ll","ul","ur","lr","shapeLength","firstEndIndices","indicesCount","lengthSt","heightSt","stindex","endOffset","computeTangentAndBitangent","polylineVolumeOutlineGeometry","shapeCount","firstOffset","secondOffset","MITERED","RectangleGeometry","RectangleOutlineGeometry","scratchCenterRect","scratchCarto","RectangleGeometryOptions","DynamicRectangleGeometryUpdater","rect","Batch","createPrimitive","waitingOnCreate","oldPrimitive","updatersWithAttributes","showsUpdated","itemsToRemove","isDirty","unsubscribe","_classificationType","removedCount","colorProperty","fillColor","_lastColor","newColor","toBytes","updateShows","batch","batchKey","batchesArray","batchCount","oldBatch","itemsToMoveLength","newBatch","batchesArrayCopy","batchesCopyCount","RectangleCollisionChecker","ShadowVolumeAppearance","appearanceType","materialProperty","usingSphericalTextureCoordinates","invalidated","removeMaterialSubscription","onMaterialChanged","rectangleCollisionCheck","_appearanceType","overlapping","collides","isMaterial","updaterMaterial","insert","shouldUseSphericalCoordinates","updatersLength","rbush","_tree","RectangleWithId","minX","minY","maxX","maxY","idCompare","fromRectangleAndId","withId","removalScratch","collisionScratch","quickselect","maxEntries","_maxEntries","_minEntries","_initFormat","findItem","equalsFn","calcBBox","node","toBBox","distBBox","destNode","createNode","Infinity","extend","leaf","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","intersects","multiSelect","mid","_all","search","bbox","childBBox","nodesToSearch","load","_build","_splitRoot","tmpNode","_insert","goingUp","path","indexes","_condense","compareMinX","compareMinY","toJSON","fromJSON","N","M","right2","right3","N2","N1","_chooseSubtree","targetNode","enlargement","minArea","minEnlargement","isNode","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","bbox1","bbox2","overlap","minOverlap","_allDistMargin","leftBBox","rightBBox","margin","siblings","compareArr","join","defaultCompare","quickselectStep","sd","newLeft","newRight","_shadows","_solidBatches","_translucentBatches","offsetProperty","solidBatches","solidBatchesLength","translucentBatches","translucentBatchesLength","needUpdate","solidsToMoveLength","translucentToMoveLength","solidBatch","translucentBatch","WallGeometry","WallOutlineGeometry","WallGeometryOptions","minimumHeights","maximumHeights","DynamicWallGeometryUpdater","WallGeometryLibrary","scratchCartesian3Position1","scratchCartesian3Position2","scratchCartesian3Position3","scratchCartesian3Position4","scratchCartesian3Position5","_minimumHeights","_maximumHeights","fromConstantHeights","minHeights","maxHeights","doMin","doMax","wallGeometry","bottomPositions","topPositions","numCorners","ds","i3","nextPosition","nextTop","groundPosition","scalednextPosition","scaledGroundPosition","edgeIndex","pl","pr","getType","LabelStyle","defaultStyle","FILL","defaultFillColor","defaultBackgroundColor","defaultBackgroundPadding","fillColorScratch","outlineColorScratch","backgroundColorScratch","backgroundPaddingScratch","label","LabelVisualizer","removeLabel","text","labelGraphics","_label","_text","updateClamping","getLabel","font","_font","_style","_fillColor","_outlineColor","showBackground","_showBackground","backgroundPadding","_backgroundPadding","_updateClamping","Axis","ColorBlendMode","Model","ModelAnimationLoop","ENABLED","defaultSilhouetteColor","defaultColorBlendMode","HIGHLIGHT","defaultImageBasedLightingFactor","defaultUpAxis","Y","modelMatrixScratch","nodeMatrixScratch","ModelVisualizer","_modelHash","_entitiesToVisualize","removeModel","visualizer","modelHash","modelData","modelPrimitive","clearNodeTransformationsArticulationsScratch","nodeTransformationsScratch","articulationsScratch","checkModelLoad","readyPromise","otherwise","loadFail","resource","modelGraphics","_uri","fromGltf","incrementallyLoadTextures","_incrementallyLoadTextures","animationsRunning","minimumPixelSize","_minimumPixelSize","maximumScale","_maximumScale","silhouetteColor","_silhouetteColor","silhouetteSize","_silhouetteSize","colorBlendMode","_colorBlendMode","colorBlendAmount","_colorBlendAmount","clampAnimations","_clampAnimations","imageBasedLightingFactor","_imageBasedLightingFactor","lightColor","_lightColor","_upAxis","_forwardAxis","runAnimations","_runAnimations","activeAnimations","addAll","loop","nodeTransformations","_nodeTransformations","nodeNames","keys","nodeIndex","nodeLength","nodeName","nodeTransformation","modelNode","getNode","transformationMatrix","fromTranslationRotationScale","originalMatrix","anyArticulationUpdated","articulations","_articulations","articulationStageKeys","numKeys","articulationStageValue","setArticulationStage","applyArticulations","_clampedModelMatrix","_heightChanged","ReferenceFrame","TimeInterval","PolylineCollection","CompositePositionProperty","ConstantPositionProperty","ReferenceProperty","SampledPositionProperty","ScaledPositionProperty","TimeIntervalCollectionPositionProperty","scratchTimeInterval","subSampleCompositePropertyScratch","subSampleIntervalPropertyScratch","polyline","reallySubSample","updateTime","referenceFrame","maximumStep","resolvedProperty","times","getValueInReferenceFrame","sampleStepsToTake","sampleStepsTaken","sampleStepSize","steppedOnNow","current","loopStop","sampling","secondsUntilNext","subSampleSampledProperty","_property","_times","intervals","interval","intersect","isEmpty","intervalStart","intervalStop","sampleStart","sampleStop","subSampleCompositeProperty","isStartIncluded","isStopIncluded","subSampleIntervalProperty","subSampleConstantProperty","subSampleGenericProperty","subSample","toFixedScratch","PolylineUpdater","_unusedIndexes","_polylineCollection","_referenceFrame","PathVisualizer","_updaters","INERTIAL","updateObject","pathGraphics","_path","positionProperty","showProperty","leadTime","_leadTime","trailTime","_trailTime","_availability","hasAvailability","hasLeadTime","hasTrailTime","unusedIndexes","resolution","_resolution","removeObject","lastUpdater","frameToVisualize","FIXED","currentUpdater","_subSample","createBillboardPointCallback","pointPrimitive","PointVisualizer","removePoint","pointGraphics","_point","needsRedraw","_pixelSize","newOutlineColor","newOutlineWidth","newPixelSize","centerAlpha","cssColor","toCssColorString","cssOutlineColor","textureId","setImage","PolylineColorAppearance","PolylineMaterialAppearance","PolylineGeometryUpdater","StaticGroundPolylinePerMaterialBatch","removeUpdater","insertUpdaterIntoBatch","clampToGround","_groundBatches","multiplier","depthFailMaterialProperty","_colorBatches","_materialBatches","PolylineVisualizer","GroundPolylineGeometry","PolylineGeometry","PolylinePipeline","GroundPolylinePrimitive","defaultZIndex","polylineCollections","GeometryOptions","GroundGeometryOptions","_entitySubscription","_depthFailMaterialProperty","_geometryOptions","_groundGeometryOptions","_clampToGround","_supportsPolylinesOnTerrain","supportsPolylinesOnTerrain","depthFailColor","positionsProperty","depthFailMaterial","groundGeometryOptions","generateCartesianArcOptions","_line","_groundPolylinePrimitive","getLine","dynamicGeometryUpdater","sceneId","polylineCollection","line","extractHeights","generateCartesianArc","groundPolylinePrimitive","GeometryType","scratchInterpolateColorsArray","interpolateColors","color0","color1","colors","r0","g0","b0","a0","r1","g1","b1","a1","redPerVertex","greenPerVertex","bluePerVertex","alphaPerVertex","colorsPerVertex","_colors","_colorsPerVertex","scratchPrevPosition","scratchNextPosition","polylineGeometry","subdivisionSize","numberOfPointsFunction","numberOfPoints","numberOfPointsRhumbLine","colorLength","newColors","newColorIndex","c0","numColors","interpolatedColors","interpolatedColorsLength","generateCartesianRhumbArc","prevPositions","nextPositions","expandAndWidth","finalColors","expandAndWidthIndex","colorIndex","endK","floatToByte","prevPosition","geometryType","POLYLINES","_asynchronous","resultColor","TimeIntervalCollection","CompositeProperty","_eventHelper","_definitionChanged","_intervals","changedEvent","_intervalsChanged","innerProperty","findDataForIntervalContainingDate","other","subscribeAll","RENDERED_AND_KICKED","REFINED_AND_KICKED","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX8","renderbufferFormat","_composite","_raiseDefinitionChanged","targetProperty","_targetProperty","_resolveProperty","entityIsResolved","_resolveEntity","targetEntity","_targetCollection","getById","_targetId","_onTargetEntityDefinitionChanged","_targetEntity","resolveEntity","_targetPropertyNames","targetCollection","targetId","targetPropertyNames","fromString","referenceString","identifier","inIdentifier","isEscaped","token","charAt","otherNames","diffScratch","minimum","maximum","_minimum","_maximum","fromAxisAlignedBoundingBox","boundingBox","unitBoxGeometry","scratchMin","scratchMax","boxGeometry","getUnitBox","HeadingPitchRange","CameraFlightPath","_transform","_invTransform","_actualTransform","_actualInvTransform","_transformChanged","_positionWC","_positionCartographic","_oldPositionWC","positionWCDeltaMagnitude","positionWCDeltaMagnitudeLastFrame","timeSinceMoved","_lastMovedTimestamp","_direction","_directionWC","_up","_upWC","_right","_rightWC","defaultMoveAmount","defaultLookAmount","defaultRotateAmount","defaultZoomAmount","maximumZoomFactor","_moveStart","_moveEnd","_changed","_changedPosition","_changedDirection","_changedFrustum","percentageChanged","_viewMatrix","_invViewMatrix","updateViewMatrix","_modeChanged","_max2Dfrustum","_suspendTerrainAdjustment","rectangleCameraPosition3D","DEFAULT_VIEW_RECTANGLE","DEFAULT_VIEW_FACTOR","computeView","DEFAULT_OFFSET","PI_OVER_FOUR","_currentFlight","updateCameraDeltas","numberOfListeners","dirPercentage","dirAngle","heightPercentage","areaPercentage","lastPosition","lastFrustum","x0","x1","x2","x3","y0","y1","y2","y3","leftX","rightX","bottomY","topY","areaRef","scratchAdjustHeightTransform","scratchAdjustHeightCartographic","heightUpdated","scratchCartesian3Projection","scratchCartesian4Origin","scratchCartesian4NewOrigin","scratchCartesian4NewXAxis","scratchCartesian4NewYAxis","scratchCartesian4NewZAxis","updateMembers","heightChanged","positionChanged","directionChanged","upChanged","rightChanged","transformChanged","basisTo2D","convertTransformForColumbusView","getColumn","projectedPosition","newOrigin","newZAxis","newXAxis","newYAxis","convertTransformFor2D","positionENU","det","invUpMag","w0","getHeading","getPitch","getRoll","scratchHPRMatrix1","scratchHPRMatrix2","inverseTransform","clampMove2D","globeFinishedUpdating","setTransformPosition","setTransformUp","setTransformDirection","scratchAdjustOrtghographicFrustumMousePosition","zooming","depthDistance","rayDistance","scratchSetViewCartesian","scratchSetViewTransform1","scratchSetViewTransform2","scratchSetViewQuaternion","scratchSetViewMatrix3","scratchSetViewCartographic","scratchToHPRDirection","scratchToHPRUp","scratchToHPRRight","directionUpToHeadingPitchRoll","invTransform","scratchSetViewOptions","convert","endTransform","scratchHpr","getRectangleCameraCoordinates","hpr","currentTransform","localTransform","fromHeadingPitchRoll","rotMat","setView3D","setView2D","setViewCV","pitchScratch","maxProjectedX","maxProjectedY","flyHome","maxRadii","worldToCameraCoordinatesVector","cameraToWorldCoordinates","cameraToWorldCoordinatesPoint","cameraToWorldCoordinatesVector","moveScratch","amount","moveForward","moveBackward","moveUp","moveDown","moveRight","moveLeft","lookRight","lookDown","lookScratchQuaternion","lookScratchMatrix","turnAngle","twistLeft","rotateScratchQuaternion","rotateScratchMatrix","rotateDown","rotateVertical","rotateVertScratchP","rotateVertScratchA","rotateVertScratchTan","rotateVertScratchNegate","rotateHorizontal","newTop","newBottom","maxBottom","maxRight","rotateLeft","zoomOut","scratchLookAtMatrix4","lookAt","lookAtTransform","scratchLookAtHeadingPitchRangeOffset","scratchLookAtHeadingPitchRangeQuaternion1","scratchLookAtHeadingPitchRangeQuaternion2","scratchHeadingPitchRangeMatrix3","offsetFromHeadingPitchRange","range","pitchQuat","headingQuat","rotMatrix","cartesianOffset","viewRectangle3DEllipsoidGeodesic","viewRectangle3DCartographic1","viewRectangle3DCartographic2","viewRectangle3DNorthEast","viewRectangle3DSouthWest","viewRectangle3DNorthWest","viewRectangle3DSouthEast","viewRectangle3DNorthCenter","viewRectangle3DSouthCenter","viewRectangle3DCenter","viewRectangle3DEquator","defaultRF","computeD","upOrRight","tanThetaOrPhi","cameraRF","northCartographic","southCartographic","interpolateUsingFraction","northEast","northWest","northCenter","southCenter","southEast","southWest","rightScalar","topScalar","heightRatio","equatorCartographic","equatorPosition","viewRectangleCVCartographic","viewRectangleCVNorthEast","viewRectangleCVSouthWest","viewRectangle2DCartographic","viewRectangle2DNorthEast","viewRectangle2DSouthWest","rectangleCameraPositionColumbusView","rectangleCameraPosition2D","pickEllipsoid3DRay","pickEllipsoid2DRay","pickEllipsoidCVRay","pickEllipsoid3D","pickMap2D","pickMapColumbusView","pickPerspCenter","pickPerspXDir","pickPerspYDir","nearCenter","getPickRayPerspective","getPickRayOrthographic","scratchToCenter","scratchProj","distanceToBoundingSphere","toCenter","proj","getPixelSize","posScratch","scratchCartesian3Subtract","createAnimationCV","distToC","dWidth","dHeight","mapWidth","mapHeight","translateX","translateY","newPosition","EXPONENTIAL_OUT","interp","createAnimationTemplateCV","scratchFlyToDestination","newOptions","cancel","setViewOptions","isRectangle","flightTween","pitchAdjustHeight","flyOverLongitude","flyOverLongitudeWeight","createTween","MINIMUM_ZOOM","adjustBoundingSphereOffset","minimumZoom","maximumZoom","distanceToBoundingSphere2D","distanceToBoundingSphere3D","viewBoundingSphere","scratchflyToBoundingSphereTransform","scratchflyToBoundingSphereDestination","scratchflyToBoundingSphereDirection","scratchflyToBoundingSphereUp","scratchflyToBoundingSphereRight","scratchFlyToBoundingSphereCart4","scratchFlyToBoundingSphereQuaternion","scratchFlyToBoundingSphereMatrix3","flyToBoundingSphere","scene2D","rotateQuat","fromCartesian4","scratchCartesian3_1","scratchCartesian3_2","scratchCartesian3_3","scratchCartesian3_4","horizonPoints","scratchPickCartesian2","scratchRectCartesian","cartoArray","addToResult","computedHorizonQuad","computeViewRectangle","successfulPickCount","computeHorizonQuad","fromCartographicArray","lastLon","EPSILON9","switchToPerspectiveFrustum","switchToOrthographicFrustum","maximumRenderbufferSize","_format","_renderbuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","_getRenderbuffer","deleteRenderbuffer","CallbackProperty","TerrainOffsetProperty","geometryZIndex","heightReferenceProperty","extrudedHeightReferenceProperty","geometryHeightReference","geometryExtrudedHeightReference","RELATIVE_TO_GROUND","_value","_removeSubscription","setValue","scratchNormalST","defaultRadii","_stackPartitions","_slicePartitions","unitEllipsoidGeometry","ellipsoidGeometry","cosTheta","sinTheta","phi","sinPhi","xSinPhi","ySinPhi","zCosPhi","topOffset","normalST","fromEllipsoid","getUnitEllipsoid","_guid","getPrimitiveIndex","compositePrimitive","hasIndex","external","_external","_composites","scratch2Array","scratchCartesian5","scratchCartesian6","scratchCartesian7","scratchCartesian8","scratchCartesian9","subdivideHeights","points","h0","h1","heightPerVertex","nextScratch","prevScratch","rotationZ","scaleMatrix","westScratch","finalPosScratch","heightCartesian","addPosition","xScalar","repeat","finalPosition","prev","computeRotationAngle","fromRotationZ","addPositions","centers","convertShapeTo3D","yOffset","quaterion","startPointScratch","computeRoundCorner","startPoint","endPoint","leftIsOutside","duplicatePoints","cleanedPositions","angleIsGreaterThanPi","backward","scratchForwardProjection","scratchBackwardProjection","shapeForSides","point","convertShapeTo3DDuplicate","shapeForEnds","ends","cornerDirection","subdividedHeights","forwardProjection","backwardProjection","generateArc","Clock","formatError","requestAnimationFrame","createWorldImagery","getDefaultSkyBoxUrl","suffix","configureSceneResolution","widget","devicePixelRatio","configureCanvasSize","_canvasWidth","_canvasHeight","_canRender","_lastDevicePixelRatio","configureCameraFrustum","CesiumWidget","supportsImageRenderingPixelated","_supportsImageRenderingPixelated","imageRendering","imageRenderingValue","oncontextmenu","onselectstart","innerCreditContainer","showRenderLoopErrors","_element","_creditViewport","_innerCreditContainer","_renderLoopRunning","_showRenderLoopErrors","_forceResize","_clock","clock","terrainShadows","_screenSpaceEventHandler","_useDefaultRenderLoop","useDefaultRenderLoop","_targetFrameRate","targetFrameRate","showErrorPanel","screenSpaceEventHandler","lastFrameTime","frameTime","resize","startRenderLoop","title","overlay","content","errorHeader","errorPanelScroller","resizeCallback","errorMessage","innerHTML","errorDetails","errorMessageDetails","buttonPanel","okButton","setAttribute","onclick","forceResize","_lastWidth","currentTime","tick","Request","RequestState","RequestType","TileProviderError","UNLOADED","getPosition","positionCart","shouldRemoveTile","RECEIVING","TRANSFORMING","TRANSITIONING","scratchV0","scratchV1","scratchV2","scratchResult","cullBackFaces","rayTriangle","imageryList","freeVertexArray","available","parentSurfaceTile","prepareNewTile","parentReady","canUpsample","sourceData","sourceX","sourceY","sourceLevel","terrainDataPromise","upsample","RECEIVED","success","request","failure","CANCELLED","_requestError","handleError","doRequest","throttle","throttleByServer","TERRAIN","requestPromise","requestTileGeometry","meshPromise","createMesh","TRANSFORMED","waterMaskData","tile_waterMaskData","allWaterTexture","LUMINANCE","getContextWaterMaskData","waterMaskLength","textureSize","createWaterMaskTextureIfNeeded","processTerrainStateMachine","wasAlreadyRenderable","isTerrainDoneLoading","wasCreatedByUpsampling","isImageryDoneLoading","callbacks","newCallbacks","layerId","skipLoading","isUpsampledOnly","isRenderable","isDoneLoading","PLACEHOLDER","thisTileDoneLoading","getAttributes","indexBuffers","vertexArrayDestroyable","sourceTileRectangle","tileWidth","tileHeight","scaleX","scaleY","TimeStandard","TdtMinusTai","J2000d","taiToTdb","days","epoch","TAI","MetersPerKilometer","RadiansPerDegree","RadiansPerArcSecond","RADIANS_PER_ARCSECOND","perifocalToEquatorial","elementsToCartesian","semimajorAxis","eccentricity","inclination","longitudeOfPerigee","longitudeOfNode","meanLongitude","radiusOfPeriapsis","argumentOfPeriapsis","rightAscensionOfAscendingNode","trueAnomaly","meanAnomaly","eccentricAnomaly","revs","trueAnomalyX","trueAnomalyY","eccentricAnomalyToTrueAnomaly","iterationValue","maxIterationCount","keplerEqConvergence","NRfunction","dNRfunction","meanAnomalyToEccentricAnomaly","meanAnomalyToTrueAnomaly","tolerance","chooseOrbit","cosap","sinap","cosi","sini","cosraan","sinraan","perifocalToCartesianMatrix","semilatus","costheta","sintheta","semiMajorAxis0","meanLongitude0","meanLongitude1","p1u","p2u","p3u","p4u","p5u","p6u","p7u","p8u","Ca1","Ca2","Ca3","Ca4","Ca5","Ca6","Ca7","Ca8","Sa1","Sa2","Sa3","Sa4","Sa5","Sa6","Sa7","Sa8","q1u","q2u","q3u","q4u","q5u","q6u","q7u","q8u","Cl1","Cl2","Cl3","Cl4","Cl5","Cl6","Cl7","Cl8","Sl1","Sl2","Sl3","Sl4","Sl5","Sl6","Sl7","Sl8","scratchDate","computeSimonMoon","dayNumber","secondsOfDay","SECONDS_PER_DAY","t2","t3","t4","inclinationConstant","inclinationSecPart","longitudeOfPerigeeConstant","longitudeOfPerigeeSecPart","longitudeOfNodeConstant","longitudeOfNodeSecPart","meanLongitudeConstant","meanLongitudeSecPart","D","lprime","psi","twoD","fourD","sixD","twol","threel","fourl","twoF","twoPsi","threePsi","perigeeAndMean","factor","moonEarthMassRatio","axesTransformation","julianDate","computeSimonEarthMoonBarycenter","computeSimonEarth","_camera","CYAN","_updateOnChange","_outlinePrimitives","_planesPrimitives","scratchRotation","scratchOrientation","scratchPerspective","scratchPerspectiveOffCenter","scratchOrthographic","scratchOrthographicOffCenter","scratchSplits","planesPrimitives","outlinePrimitives","cameraFrustum","fromAlpha","pickPrimitive","scratchRotationMatrix","scratchViewMatrix","scratchInverseMatrix","scratchXDirection","scratchYDirection","scratchZDirection","scratchNegativeX","scratchNegativeY","scratchNegativeZ","frustumCornersNDC","scratchFrustumCorners","xDirection","yDirection","zDirection","fac","subarray","indexOffset","DepthViewPacked","PassThroughDepth","_globeDepthTexture","_tempGlobeDepthTexture","_tempCopyDepthTexture","_copyDepthFramebuffer","_tempCopyDepthFramebuffer","_updateDepthFramebuffer","_tempCopyDepthCommand","_updateDepthCommand","_rsUpdate","_debugGlobeDepthViewportCommand","destroyUpdateDepthResources","depthTextureToCopy","createUpdateDepthResources","_fragmentShader","_textureScale","_forcePowerOfTwo","_sampleMode","_pixelFormat","_pixelDatatype","_idTexture","_actualUniforms","_dirtyUniforms","_texturesToCreate","_texturePromise","_selectedIdTexture","_selected","_selectedShadow","_parentSelected","_parentSelectedShadow","_combinedSelected","_combinedSelectedShadow","_selectedLength","_parentSelectedLength","_selectedDirty","parentSelected","depthTextureRegex","getUniformValueGetterAndSetter","currentValue","HTMLCanvasElement","HTMLImageElement","HTMLVideoElement","ImageData","actualUniforms","actualValue","getUniformMapFunction","getUniformMapDimensionsFunction","createLoadImageFunction","createStageOutputTextureFunction","releaseResources","parentLength","isSelectedTextureDirty","textureLength","pickIds","empty","ids","pickIdsLength","createSelectedTexture","newUniforms","depthTextureDimensions","czm_idTexture","czm_selectedIdTexture","czm_selectedIdTextureStep","texturesToCreate","textureToCreate","dirtyUniforms","stageNameUrlOrImage","stageWithName","updateUniformTextures","createDrawCommand","minFilter","magFilter","_sampler","createSampler","_inputPreviousStageTexture","postProcessStageCollection","_collection","_stageNameToFramebuffer","_updateDependencies","getLastStageName","getStageDependencies","dependencies","previousName","stageDependencies","uniformNames","getOwnPropertyNames","uniformNamesLength","dependent","getCompositeDependencies","composite","originalDependency","inSeries","currentName","currentDependencies","stagesLength","foundConflict","getDependencies","needsCheckDimensionsUpdate","dimensionsChanged","textureWidth","textureHeight","isPowerOfTwo","nextPowerOfTwo","_softShadows","_normalOffset","darkness","_darkness","maximumDistance","_outOfView","_outOfViewPrevious","_needsUpdate","isInternetExplorer","isEdge","isChrome","isFirefox","isWindows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","normalOffsetScale","depthBias","_depthAttachment","_colorAttachment","_shadowMapMatrix","_shadowMapTexture","_lightDirectionEC","_lightPositionEC","_lightCamera","_shadowMapCamera","ShadowMapCamera","_shadowMapCullingVolume","_sceneCamera","_pointLightRadius","pointLightRadius","_cascadesEnabled","cascadesEnabled","numberOfCascades","_fitNearFar","_maximumCascadeDistances","_textureSize","_cascadeSplits","_cascadeMatrices","_cascadeDistances","_passes","ShadowPass","debugShow","debugFreezeFrame","_debugFreezeFrame","_debugCascadeColors","_debugLightFrustum","_debugCameraFrustum","_debugCascadeFrustums","_debugShadowViewCommand","_primitiveRenderState","_terrainRenderState","_pointRenderState","createRenderStates","_clearPassState","textureOffsets","units","destroyFramebuffer","depthRenderbuffer","faces","createFramebufferCube","createFramebufferDepth","createFramebufferColor","updateFramebuffer","checkFramebuffer","clearFramebuffer","shadowPass","debugCreateRenderStates","faceViewport","maximumTextureSize","biasX","biasY","scratchViewport","updateDebugShadowViewCommand","screenWidth","screenHeight","shadowMap_texture","shadowMap_textureCube","createDebugShadowViewCommand","scratchMatrix","debugOutlineColors","GREEN","BLUE","MAGENTA","applyDebugSettings","enterFreezeFrame","YELLOW","uniformScale","createDebugPointLight","scaleBiasMatrix","getViewProjection","scratchFrustum","scratchCascadeDistances","scratchLightView","ups","rights","scratchBoundingSphere","updateCameras","sceneCamera","shadowMapCamera","lightDirection","darknessAmount","frustumRadius","frustumCenter","checkVisibility","computeOmnidirectional","lightDir","lightUp","lightRight","lightPosition","lightView","cameraToLight","minimumByComponent","maximumByComponent","translationMatrix","fitShadowMapToScene","cameraNear","cameraFar","lambda","clampCascadeDistances","cascadeDistances","splits","logScale","split","shadowFrustum","cascadeSubFrustum","shadowViewProjection","shadowMapMatrix","cascadeCamera","cascadeMatrix","computeCascades","scratchTexelStepSize","combineUniforms","mapUniforms","shadowMap_matrix","shadowMap_cascadeSplits","shadowMap_cascadeMatrices","shadowMap_lightDirectionEC","shadowMap_lightPositionEC","shadowMap_cascadeDistances","shadowMap_texelSizeDepthBiasAndNormalShadingSmooth","texelStepSize","combinedUniforms1","shadowMap_normalOffsetScaleDistanceMaxDistanceAndDarkness","combinedUniforms2","oldShaderId","castShader","castRenderState","castUniformMap","castVS","castFS","lightShadowMapsEnabled","receiveShader","receiveUniformMap","castShadowsDirty","receiveShaderCastShadows","shaderDirty","receiveShaderProgramId","receiveVS","receiveFS","castShaderProgramId","_depthStencilRenderbuffer","_idFramebuffer","_idClearColor","post","_depthStencilIdTexture","_depthStencilIdRenderbuffer","CustomDataSource","DataSourceDisplay","_displayID","initializeTerrainHeights","dataSourceCollection","dataSourceAdded","_onDataSourceAdded","dataSourceRemoved","_onDataSourceRemoved","dataSourceMoved","_onDataSourceMoved","_dataSourceCollection","_visualizersCallback","visualizersCallback","defaultVisualizersCallback","primitivesAdded","removeDefaultDataSoureListener","removeDataSourceCollectionListener","defaultDataSource","_defaultDataSource","addPrimitives","_removeDefaultDataSoureListener","_removeDataSourceCollectionListener","dataSource","dataSources","initialized","visualizers","vLength","_visualizersByDisplayID","allowPartial","_visualizers","visualizersLength","displayPrimitives","displayGroundPrimitives","clustering","_initialize","_extrudedHeightReference","_positionProperty","_cartographicPosition","_terrainHeight","_removeCallbackFunc","_removeEventListener","_removeModeListener","cartographicPosition","clampedPosition","scratch3","scratch4","scaleArray2","cartesian7","cartesian8","cartesian9","cartesian10","cornerPoint","computeMiteredCorner","leftCornerDirection","lastPoint","addShiftedPositions","calculatedPositions","scaledLeft","scaledRight","rightIndex","leftIndex","attribute","previousPos","calculatedLefts","calculatedNormals","firstEndCap","midpoint","addEndCaps","topZ","bottomZ","twoSlice","tbIndex","bottomX","topX","_dynamicUpdaters","dynamicUpdater","rotAxis","unitQuat","pointOnEllipsoid","northVec","eastVec","aSqr","ab","bSqr","unitPos","azimuth","cosThetaSquared","sinThetaSquared","unitPosScratch","eastVecScratch","northVecScratch","addFillPositions","addEdgePositions","interiorPosition","reflectedPosition","outerPositionsLength","outerRightIndex","outerLeftIndex","scratchIntersectionPoint","scratchXAxis","scratchYAxis","scratchZAxis","obbScratch","projectTo2D","xMag","yMag","zMag","centerResult","planeAxis1Result","planeAxis2Result","planeAxis1","planeAxis2","positionResults","depthFailAppearanceType","_solidItems","_translucentItems","_depthFailAppearanceType","removeItem","moveItems","itemsMoved","updateItems","depthFailAppearance","depthFailColorProperty","depthColor","_lastDepthFailColor","solidsMoved","translucentsMoved","updaterDepthFailMaterial","latLonEquals","scratchCartographic1","scratchCartographic2","positionsArrayScratch","heightsArrayScratch","generateArcOptionsScratch","duplicateCorners","o","topHeights","bottomHeights","hasBottomHeights","hasTopHeights","hasAllZeroHeights","cleanedTopHeights","cleanedBottomHeights","removeDuplicates","generateArcOptions","generateArcPositions","generateArcHeights"],"mappings":"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EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,IACAA,EAAA,MACAA,EAAA,MACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,KACAA,EAAA,YA+3IPC,KA93IIF,EAAA,SACLojD,EACAC,EACA/4C,EACAq1C,EACAhiC,EACAjQ,EACAC,EACApK,EACAC,EACAqa,EACAylC,EACAC,EACApjD,EACAC,EACAC,EACAoD,EACAC,EACA8/C,EACA5/C,EACA6/C,EACA1lC,EACAC,EACAE,EACAi8B,EACAh8B,EACAC,EACAslC,EACAC,EACArlC,EACAytB,EACA6X,EACAC,EACAC,EACA/1C,EACAg2C,EACAC,EACAC,EACA3L,EACA4L,EACAC,EACAC,EACAtlC,EACAC,EACAslC,EACArlC,EACAslC,EACArlC,EACAxF,EACAvL,EACAC,EACAI,EACAg2C,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAj7C,GACAk7C,GACAC,GACAl7C,GACAm7C,GACA/2C,GACAg3C,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACA,aAEA,IAAAC,GAAA,SAAA/gD,GACA,kBACAA,EAAA8S,WAAAw5B,YAAA5/B,KAAA,WACA1M,EAAAghD,oBAKA,SAAAC,GAAAxyC,EAAA6X,EAAA46B,GACAhlD,KAAAuS,MACAvS,KAAAoqB,QACApqB,KAAAglD,WACAhlD,KAAAqL,OAAA,EACArL,KAAAilD,SAAAl4C,EAAAm4C,QACAllD,KAAA2pC,QAAA3pC,KAAAilD,SAAAtb,QA0EA,SAAAwb,GAAA1lD,GAEA,IAAA2lD,GADA3lD,EAAAd,EAAAc,EAAAd,EAAAe,eACA0lD,OACAC,EAAA5lD,EAAA4lD,eACAC,EAAA7lD,EAAA6lD,gBACAC,EAAA9lD,EAAA8lD,eAGAC,EAAA5mD,EAAA0mD,GACAhuC,E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EAAA,IACAA,EAAA,KACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,KACAA,EAAA,GACAA,EAAA,GACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IACAA,EAAA,IACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IACAA,EAAA,KACAA,EAAA,YA6iDPC,KA5iDIF,EAAA,SACLqjD,EACA/4C,EACAoT,EACAC,EACAjQ,EACAkQ,EACAjQ,EACAX,EACAxJ,EACAqa,EACAC,EACAylC,EACApjD,EACAC,EACAC,EACAoD,EACAC,EACA0uF,EACAr0E,EACAG,EACAC,EACAC,EACA2tB,EACA6X,EACAE,EACA1J,EACA57B,EACA2yD,EACAjtB,EACAplC,EACAsyD,EACAryD,EACAslC,EACArlC,EACAqyD,EACA/sB,EACAoxE,EACAC,EACA12G,EACA4kE,EACA11E,EACAmhF,EACAC,EACAC,EACAhrC,EACA1E,EACAgF,EACAt6C,EACAC,EACAw/G,GACA,aA+BA,SAAAjkE,EAAA/kD,GAGA,IAAA6X,GAFA7X,EAAAd,EAAAc,EAAAd,EAAAe,eAEA4X,QAIAtX,KAAAgnG,SAAAroG,EAAAc,EAAAqiB,SAAA,GACA9hB,KAAA62L,aAAAl4L,EAAAc,EAAAoqH,aAAA,GACA7pH,KAAA82L,cAAAn4L,EAAAc,EAAAkrH,cAAA,GACA3qH,KAAA24B,OAAA,EAQA34B,KAAAq+D,gBAAA1/D,EAAAc,EAAA4+D,iBAAA,GAQAr+D,KAAA+2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","file":"5.TerriaMap.js","sourcesContent":["define([\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/freezeObject',\n        '../Core/VertexFormat',\n        '../Shaders/Appearances/AllMaterialAppearanceFS',\n        '../Shaders/Appearances/AllMaterialAppearanceVS',\n        '../Shaders/Appearances/BasicMaterialAppearanceFS',\n        '../Shaders/Appearances/BasicMaterialAppearanceVS',\n        '../Shaders/Appearances/TexturedMaterialAppearanceFS',\n        '../Shaders/Appearances/TexturedMaterialAppearanceVS',\n        './Appearance',\n        './Material'\n    ], function(\n        defaultValue,\n        defined,\n        defineProperties,\n        freezeObject,\n        VertexFormat,\n        AllMaterialAppearanceFS,\n        AllMaterialAppearanceVS,\n        BasicMaterialAppearanceFS,\n        BasicMaterialAppearanceVS,\n        TexturedMaterialAppearanceFS,\n        TexturedMaterialAppearanceVS,\n        Appearance,\n        Material) {\n    'use strict';\n\n    /**\n     * An appearance for arbitrary geometry (as opposed to {@link EllipsoidSurfaceAppearance}, for example)\n     * that supports shading with materials.\n     *\n     * @alias MaterialAppearance\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.flat=false] When <code>true</code>, flat shading is used in the fragment shader, which means lighting is not taking into account.\n     * @param {Boolean} [options.faceForward=!options.closed] When <code>true</code>, the fragment shader flips the surface normal as needed to ensure that the normal faces the viewer to avoid dark spots.  This is useful when both sides of a geometry should be shaded like {@link WallGeometry}.\n     * @param {Boolean} [options.translucent=true] When <code>true</code>, the geometry is expected to appear translucent so {@link MaterialAppearance#renderState} has alpha blending enabled.\n     * @param {Boolean} [options.closed=false] When <code>true</code>, the geometry is expected to be closed so {@link MaterialAppearance#renderState} has backface culling enabled.\n     * @param {MaterialAppearance.MaterialSupport} [options.materialSupport=MaterialAppearance.MaterialSupport.TEXTURED] The type of materials that will be supported.\n     * @param {Material} [options.material=Material.ColorType] The material used to determine the fragment color.\n     * @param {String} [options.vertexShaderSource] Optional GLSL vertex shader source to override the default vertex shader.\n     * @param {String} [options.fragmentShaderSource] Optional GLSL fragment shader source to override the default fragment shader.\n     * @param {RenderState} [options.renderState] Optional render state to override the default render state.\n     *\n     * @see {@link https://github.com/AnalyticalGraphicsInc/cesium/wiki/Fabric|Fabric}\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Materials.html|Cesium Sandcastle Material Appearance Demo}\n     *\n     * @example\n     * var primitive = new Cesium.Primitive({\n     *   geometryInstances : new Cesium.GeometryInstance({\n     *     geometry : new Cesium.WallGeometry({\n            materialSupport :  Cesium.MaterialAppearance.MaterialSupport.BASIC.vertexFormat,\n     *       // ...\n     *     })\n     *   }),\n     *   appearance : new Cesium.MaterialAppearance({\n     *     material : Cesium.Material.fromType('Color'),\n     *     faceForward : true\n     *   })\n     *\n     * });\n     */\n    function MaterialAppearance(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var translucent = defaultValue(options.translucent, true);\n        var closed = defaultValue(options.closed, false);\n        var materialSupport = defaultValue(options.materialSupport, MaterialAppearance.MaterialSupport.TEXTURED);\n\n        /**\n         * The material used to determine the fragment color.  Unlike other {@link MaterialAppearance}\n         * properties, this is not read-only, so an appearance's material can change on the fly.\n         *\n         * @type Material\n         *\n         * @default {@link Material.ColorType}\n         *\n         * @see {@link https://github.com/AnalyticalGraphicsInc/cesium/wiki/Fabric|Fabric}\n         */\n        this.material = (defined(options.material)) ? options.material : Material.fromType(Material.ColorType);\n\n        /**\n         * When <code>true</code>, the geometry is expected to appear translucent.\n         *\n         * @type {Boolean}\n         *\n         * @default true\n         */\n        this.translucent = translucent;\n\n        this._vertexShaderSource = defaultValue(options.vertexShaderSource, materialSupport.vertexShaderSource);\n        this._fragmentShaderSource = defaultValue(options.fragmentShaderSource, materialSupport.fragmentShaderSource);\n        this._renderState = Appearance.getDefaultRenderState(translucent, closed, options.renderState);\n        this._closed = closed;\n\n        // Non-derived members\n\n        this._materialSupport = materialSupport;\n        this._vertexFormat = materialSupport.vertexFormat;\n        this._flat = defaultValue(options.flat, false);\n        this._faceForward = defaultValue(options.faceForward, !closed);\n    }\n\n    defineProperties(MaterialAppearance.prototype, {\n        /**\n         * The GLSL source code for the vertex shader.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        vertexShaderSource : {\n            get : function() {\n                return this._vertexShaderSource;\n            }\n        },\n\n        /**\n         * The GLSL source code for the fragment shader.  The full fragment shader\n         * source is built procedurally taking into account {@link MaterialAppearance#material},\n         * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n         * Use {@link MaterialAppearance#getFragmentShaderSource} to get the full source.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {String}\n         * @readonly\n         */\n        fragmentShaderSource : {\n            get : function() {\n                return this._fragmentShaderSource;\n            }\n        },\n\n        /**\n         * The WebGL fixed-function state to use when rendering the geometry.\n         * <p>\n         * The render state can be explicitly defined when constructing a {@link MaterialAppearance}\n         * instance, or it is set implicitly via {@link MaterialAppearance#translucent}\n         * and {@link MaterialAppearance#closed}.\n         * </p>\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Object}\n         * @readonly\n         */\n        renderState : {\n            get : function() {\n                return this._renderState;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the geometry is expected to be closed so\n         * {@link MaterialAppearance#renderState} has backface culling enabled.\n         * If the viewer enters the geometry, it will not be visible.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        closed : {\n            get : function() {\n                return this._closed;\n            }\n        },\n\n        /**\n         * The type of materials supported by this instance.  This impacts the required\n         * {@link VertexFormat} and the complexity of the vertex and fragment shaders.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {MaterialAppearance.MaterialSupport}\n         * @readonly\n         *\n         * @default {@link MaterialAppearance.MaterialSupport.TEXTURED}\n         */\n        materialSupport : {\n            get : function() {\n                return this._materialSupport;\n            }\n        },\n\n        /**\n         * The {@link VertexFormat} that this appearance instance is compatible with.\n         * A geometry can have more vertex attributes and still be compatible - at a\n         * potential performance cost - but it can't have less.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type VertexFormat\n         * @readonly\n         *\n         * @default {@link MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat}\n         */\n        vertexFormat : {\n            get : function() {\n                return this._vertexFormat;\n            }\n        },\n\n        /**\n         * When <code>true</code>, flat shading is used in the fragment shader,\n         * which means lighting is not taking into account.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        flat : {\n            get : function() {\n                return this._flat;\n            }\n        },\n\n        /**\n         * When <code>true</code>, the fragment shader flips the surface normal\n         * as needed to ensure that the normal faces the viewer to avoid\n         * dark spots.  This is useful when both sides of a geometry should be\n         * shaded like {@link WallGeometry}.\n         *\n         * @memberof MaterialAppearance.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default true\n         */\n        faceForward : {\n            get : function() {\n                return this._faceForward;\n            }\n        }\n    });\n\n    /**\n     * Procedurally creates the full GLSL fragment shader source.  For {@link MaterialAppearance},\n     * this is derived from {@link MaterialAppearance#fragmentShaderSource}, {@link MaterialAppearance#material},\n     * {@link MaterialAppearance#flat}, and {@link MaterialAppearance#faceForward}.\n     *\n     * @function\n     *\n     * @returns {String} The full GLSL fragment shader source.\n     */\n    MaterialAppearance.prototype.getFragmentShaderSource = Appearance.prototype.getFragmentShaderSource;\n\n    /**\n     * Determines if the geometry is translucent based on {@link MaterialAppearance#translucent} and {@link Material#isTranslucent}.\n     *\n     * @function\n     *\n     * @returns {Boolean} <code>true</code> if the appearance is translucent.\n     */\n    MaterialAppearance.prototype.isTranslucent = Appearance.prototype.isTranslucent;\n\n    /**\n     * Creates a render state.  This is not the final render state instance; instead,\n     * it can contain a subset of render state properties identical to the render state\n     * created in the context.\n     *\n     * @function\n     *\n     * @returns {Object} The render state.\n     */\n    MaterialAppearance.prototype.getRenderState = Appearance.prototype.getRenderState;\n\n    /**\n     * Determines the type of {@link Material} that is supported by a\n     * {@link MaterialAppearance} instance.  This is a trade-off between\n     * flexibility (a wide array of materials) and memory/performance\n     * (required vertex format and GLSL shader complexity.\n     * @exports MaterialAppearance.MaterialSupport\n     */\n    MaterialAppearance.MaterialSupport = {\n        /**\n         * Only basic materials, which require just <code>position</code> and\n         * <code>normal</code> vertex attributes, are supported.\n         *\n         * @constant\n         */\n        BASIC : freezeObject({\n            vertexFormat : VertexFormat.POSITION_AND_NORMAL,\n            vertexShaderSource : BasicMaterialAppearanceVS,\n            fragmentShaderSource : BasicMaterialAppearanceFS\n        }),\n        /**\n         * Materials with textures, which require <code>position</code>,\n         * <code>normal</code>, and <code>st</code> vertex attributes,\n         * are supported.  The vast majority of materials fall into this category.\n         *\n         * @constant\n         */\n        TEXTURED : freezeObject({\n            vertexFormat : VertexFormat.POSITION_NORMAL_AND_ST,\n            vertexShaderSource : TexturedMaterialAppearanceVS,\n            fragmentShaderSource : TexturedMaterialAppearanceFS\n        }),\n        /**\n         * All materials, including those that work in tangent space, are supported.\n         * This requires <code>position</code>, <code>normal</code>, <code>st</code>,\n         * <code>tangent</code>, and <code>bitangent</code> vertex attributes.\n         *\n         * @constant\n         */\n        ALL : freezeObject({\n            vertexFormat : VertexFormat.ALL,\n            vertexShaderSource : AllMaterialAppearanceVS,\n            fragmentShaderSource : AllMaterialAppearanceFS\n        })\n    };\n\n    return MaterialAppearance;\n});\n","define([\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayCondition',\n        '../Core/Event',\n        '../Core/Iso8601',\n        '../Core/oneTimeWarning',\n        '../Scene/ClassificationType',\n        '../Scene/ShadowMode',\n        './ColorMaterialProperty',\n        './ConstantProperty',\n        './Entity',\n        './Property'\n    ], function(\n        Check,\n        Color,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        DistanceDisplayCondition,\n        Event,\n        Iso8601,\n        oneTimeWarning,\n        ClassificationType,\n        ShadowMode,\n        ColorMaterialProperty,\n        ConstantProperty,\n        Entity,\n        Property) {\n    'use strict';\n\n    var defaultMaterial = new ColorMaterialProperty(Color.WHITE);\n    var defaultShow = new ConstantProperty(true);\n    var defaultFill = new ConstantProperty(true);\n    var defaultOutline = new ConstantProperty(false);\n    var defaultOutlineColor = new ConstantProperty(Color.BLACK);\n    var defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\n    var defaultDistanceDisplayCondition = new ConstantProperty(new DistanceDisplayCondition());\n    var defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n    /**\n     * An abstract class for updating geometry entites.\n     * @alias GeometryUpdater\n     * @constructor\n     *\n     * @param {Object} options An object with the following properties:\n     * @param {Entity} options.entity The entity containing the geometry to be visualized.\n     * @param {Scene} options.scene The scene where visualization is taking place.\n     * @param {Object} options.geometryOptions Options for the geometry\n     * @param {String} options.geometryPropertyName The geometry property name\n     * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n     */\n    function GeometryUpdater(options) {\n        \n\n        var entity = options.entity;\n        var geometryPropertyName = options.geometryPropertyName;\n\n        this._entity = entity;\n        this._scene = options.scene;\n        this._fillEnabled = false;\n        this._isClosed = false;\n        this._onTerrain = false;\n        this._dynamic = false;\n        this._outlineEnabled = false;\n        this._geometryChanged = new Event();\n        this._showProperty = undefined;\n        this._materialProperty = undefined;\n        this._showOutlineProperty = undefined;\n        this._outlineColorProperty = undefined;\n        this._outlineWidth = 1.0;\n        this._shadowsProperty = undefined;\n        this._distanceDisplayConditionProperty = undefined;\n        this._classificationTypeProperty = undefined;\n        this._options = options.geometryOptions;\n        this._geometryPropertyName = geometryPropertyName;\n        this._id = geometryPropertyName + '-' + entity.id;\n        this._observedPropertyNames = options.observedPropertyNames;\n        this._supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(options.scene);\n    }\n\n    defineProperties(GeometryUpdater.prototype, {\n        /**\n         * Gets the unique ID associated with this updater\n         * @memberof GeometryUpdater.prototype\n         * @type {String}\n         * @readonly\n         */\n        id : {\n            get : function() {\n                return this._id;\n            }\n        },\n        /**\n         * Gets the entity associated with this geometry.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Entity}\n         * @readonly\n         */\n        entity : {\n            get : function() {\n                return this._entity;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has a fill component.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        fillEnabled : {\n            get : function() {\n                return this._fillEnabled;\n            }\n        },\n        /**\n         * Gets a value indicating if fill visibility varies with simulation time.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantFill : {\n            get : function() {\n                return !this._fillEnabled ||\n                       (!defined(this._entity.availability) &&\n                        Property.isConstant(this._showProperty) &&\n                        Property.isConstant(this._fillProperty));\n            }\n        },\n        /**\n         * Gets the material property used to fill the geometry.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {MaterialProperty}\n         * @readonly\n         */\n        fillMaterialProperty : {\n            get : function() {\n                return this._materialProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has an outline component.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        outlineEnabled : {\n            get : function() {\n                return this._outlineEnabled;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has an outline component.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantOutline : {\n            get : function() {\n                return !this._outlineEnabled ||\n                       (!defined(this._entity.availability) &&\n                        Property.isConstant(this._showProperty) &&\n                        Property.isConstant(this._showOutlineProperty));\n            }\n        },\n        /**\n         * Gets the {@link Color} property for the geometry outline.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        outlineColorProperty : {\n            get : function() {\n                return this._outlineColorProperty;\n            }\n        },\n        /**\n         * Gets the constant with of the geometry outline, in pixels.\n         * This value is only valid if isDynamic is false.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        outlineWidth : {\n            get : function() {\n                return this._outlineWidth;\n            }\n        },\n        /**\n         * Gets the property specifying whether the geometry\n         * casts or receives shadows from each light source.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        shadowsProperty : {\n            get : function() {\n                return this._shadowsProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        distanceDisplayConditionProperty : {\n            get : function() {\n                return this._distanceDisplayConditionProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        classificationTypeProperty : {\n            get : function() {\n                return this._classificationTypeProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is time-varying.\n         * If true, all visualization is delegated to the {@link DynamicGeometryUpdater}\n         * returned by GeometryUpdater#createDynamicUpdater.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isDynamic : {\n            get : function() {\n                return this._dynamic;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is closed.\n         * This property is only valid for static geometry.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isClosed : {\n            get : function() {\n                return this._isClosed;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry should be drawn on terrain.\n         * @memberof EllipseGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        onTerrain : {\n            get : function() {\n                return this._onTerrain;\n            }\n        },\n        /**\n         * Gets an event that is raised whenever the public properties\n         * of this updater change.\n         * @memberof GeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        geometryChanged : {\n            get : function() {\n                return this._geometryChanged;\n            }\n        }\n    });\n\n    /**\n     * Checks if the geometry is outlined at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n     */\n    GeometryUpdater.prototype.isOutlineVisible = function(time) {\n        var entity = this._entity;\n        var visible = this._outlineEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time);\n        return defaultValue(visible, false);\n    };\n\n    /**\n     * Checks if the geometry is filled at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n     */\n    GeometryUpdater.prototype.isFilled = function(time) {\n        var entity = this._entity;\n        var visible = this._fillEnabled && entity.isAvailable(time) && this._showProperty.getValue(time) && this._fillProperty.getValue(time);\n        return defaultValue(visible, false);\n    };\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @function\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    GeometryUpdater.prototype.createFillGeometryInstance = DeveloperError.throwInstantiationError;\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @function\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    GeometryUpdater.prototype.createOutlineGeometryInstance = DeveloperError.throwInstantiationError;\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    GeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    GeometryUpdater.prototype.destroy = function() {\n        destroyObject(this);\n    };\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._isHidden = function(entity, geometry) {\n        var show = geometry.show;\n        return defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE);\n    };\n\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._isOnTerrain = function(entity, geometry) {\n        return false;\n    };\n\n    /**\n     * @param {GeometryOptions} options\n     * @private\n     */\n    GeometryUpdater.prototype._getIsClosed = function(options) {\n        return true;\n    };\n\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._isDynamic = DeveloperError.throwInstantiationError;\n\n    /**\n     * @param {Entity} entity\n     * @param {Object} geometry\n     * @private\n     */\n    GeometryUpdater.prototype._setStaticOptions = DeveloperError.throwInstantiationError;\n\n    /**\n     * @param {Entity} entity\n     * @param {String} propertyName\n     * @param {*} newValue\n     * @param {*} oldValue\n     * @private\n     */\n    GeometryUpdater.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n            return;\n        }\n\n        var geometry = this._entity[this._geometryPropertyName];\n\n        if (!defined(geometry)) {\n            if (this._fillEnabled || this._outlineEnabled) {\n                this._fillEnabled = false;\n                this._outlineEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var fillProperty = geometry.fill;\n        var fillEnabled = defined(fillProperty) && fillProperty.isConstant ? fillProperty.getValue(Iso8601.MINIMUM_VALUE) : true;\n\n        var outlineProperty = geometry.outline;\n        var outlineEnabled = defined(outlineProperty);\n        if (outlineEnabled && outlineProperty.isConstant) {\n            outlineEnabled = outlineProperty.getValue(Iso8601.MINIMUM_VALUE);\n        }\n\n        if (!fillEnabled && !outlineEnabled) {\n            if (this._fillEnabled || this._outlineEnabled) {\n                this._fillEnabled = false;\n                this._outlineEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var show = geometry.show;\n        if (this._isHidden(entity, geometry)) {\n            if (this._fillEnabled || this._outlineEnabled) {\n                this._fillEnabled = false;\n                this._outlineEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        this._materialProperty = defaultValue(geometry.material, defaultMaterial);\n        this._fillProperty = defaultValue(fillProperty, defaultFill);\n        this._showProperty = defaultValue(show, defaultShow);\n        this._showOutlineProperty = defaultValue(geometry.outline, defaultOutline);\n        this._outlineColorProperty = outlineEnabled ? defaultValue(geometry.outlineColor, defaultOutlineColor) : undefined;\n        this._shadowsProperty = defaultValue(geometry.shadows, defaultShadows);\n        this._distanceDisplayConditionProperty = defaultValue(geometry.distanceDisplayCondition, defaultDistanceDisplayCondition);\n        this._classificationTypeProperty = defaultValue(geometry.classificationType, defaultClassificationType);\n\n        this._fillEnabled = fillEnabled;\n\n        var onTerrain = this._isOnTerrain(entity, geometry) &&\n            (this._supportsMaterialsforEntitiesOnTerrain || this._materialProperty instanceof ColorMaterialProperty);\n\n        if (outlineEnabled && onTerrain) {\n            oneTimeWarning(oneTimeWarning.geometryOutlines);\n            outlineEnabled = false;\n        }\n\n        this._onTerrain = onTerrain;\n        this._outlineEnabled = outlineEnabled;\n\n        if (this._isDynamic(entity, geometry)) {\n            if (!this._dynamic) {\n                this._dynamic = true;\n                this._geometryChanged.raiseEvent(this);\n            }\n        } else {\n            this._setStaticOptions(entity, geometry);\n            this._isClosed = this._getIsClosed(this._options);\n            var outlineWidth = geometry.outlineWidth;\n            this._outlineWidth = defined(outlineWidth) ? outlineWidth.getValue(Iso8601.MINIMUM_VALUE) : 1.0;\n            this._dynamic = false;\n            this._geometryChanged.raiseEvent(this);\n        }\n    };\n\n    /**\n     * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n     *\n     * @param {PrimitiveCollection} primitives The primitive collection to use.\n     * @param {PrimitiveCollection} [groundPrimitives] The primitive collection to use for ground primitives.\n     *\n     * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n     *\n     * @exception {DeveloperError} This instance does not represent dynamic geometry.\n     */\n    GeometryUpdater.prototype.createDynamicUpdater = function(primitives, groundPrimitives) {\n        \n\n        return new this.constructor.DynamicGeometryUpdater(this, primitives, groundPrimitives);\n    };\n\n    return GeometryUpdater;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/Check',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Scene/GroundPrimitive',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        '../Scene/Primitive',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        BoundingSphere,\n        Check,\n        defined,\n        destroyObject,\n        DeveloperError,\n        GroundPrimitive,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        Primitive,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    /**\n     * Defines the interface for a dynamic geometry updater.  A DynamicGeometryUpdater\n     * is responsible for handling visualization of a specific type of geometry\n     * that needs to be recomputed based on simulation time.\n     * This object is never used directly by client code, but is instead created by\n     * {@link GeometryUpdater} implementations which contain dynamic geometry.\n     *\n     * This type defines an interface and cannot be instantiated directly.\n     *\n     * @alias DynamicGeometryUpdater\n     * @constructor\n     * @private\n     */\n    function DynamicGeometryUpdater(geometryUpdater, primitives, orderedGroundPrimitives) {\n        \n\n        this._primitives = primitives;\n        this._orderedGroundPrimitives = orderedGroundPrimitives;\n        this._primitive = undefined;\n        this._outlinePrimitive = undefined;\n        this._geometryUpdater = geometryUpdater;\n        this._options = geometryUpdater._options;\n        this._entity = geometryUpdater._entity;\n        this._material = undefined;\n    }\n\n    DynamicGeometryUpdater.prototype._isHidden = function(entity, geometry, time) {\n        return !entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(geometry.show, time, true);\n    };\n\n    DynamicGeometryUpdater.prototype._setOptions = DeveloperError.throwInstantiationError;\n\n    /**\n     * Updates the geometry to the specified time.\n     * @memberof DynamicGeometryUpdater\n     * @function\n     *\n     * @param {JulianDate} time The current time.\n     */\n    DynamicGeometryUpdater.prototype.update = function(time) {\n        \n\n        var geometryUpdater = this._geometryUpdater;\n        var onTerrain = geometryUpdater._onTerrain;\n\n        var primitives = this._primitives;\n        var orderedGroundPrimitives = this._orderedGroundPrimitives;\n        if (onTerrain) {\n            orderedGroundPrimitives.remove(this._primitive);\n        } else {\n            primitives.removeAndDestroy(this._primitive);\n            primitives.removeAndDestroy(this._outlinePrimitive);\n            this._outlinePrimitive = undefined;\n        }\n        this._primitive = undefined;\n\n        var entity = this._entity;\n        var geometry = entity[this._geometryUpdater._geometryPropertyName];\n        this._setOptions(entity, geometry, time);\n        if (this._isHidden(entity, geometry, time)) {\n            return;\n        }\n\n        var shadows = this._geometryUpdater.shadowsProperty.getValue(time);\n        var options = this._options;\n        if (!defined(geometry.fill) || geometry.fill.getValue(time)) {\n            var fillMaterialProperty = geometryUpdater.fillMaterialProperty;\n            var isColorAppearance = fillMaterialProperty instanceof ColorMaterialProperty;\n            var appearance;\n            var closed = geometryUpdater._getIsClosed(options);\n            if (isColorAppearance) {\n                appearance = new PerInstanceColorAppearance({\n                    closed: closed,\n                    flat : onTerrain && !geometryUpdater._supportsMaterialsforEntitiesOnTerrain\n                });\n            } else {\n                var material = MaterialProperty.getValue(time, fillMaterialProperty, this._material);\n                this._material = material;\n                appearance = new MaterialAppearance({\n                    material : material,\n                    translucent : material.isTranslucent(),\n                    closed : closed\n                });\n            }\n\n            if (onTerrain) {\n                options.vertexFormat = PerInstanceColorAppearance.VERTEX_FORMAT;\n                this._primitive = orderedGroundPrimitives.add(new GroundPrimitive({\n                    geometryInstances : this._geometryUpdater.createFillGeometryInstance(time),\n                    appearance : appearance,\n                    asynchronous : false,\n                    shadows : shadows,\n                    classificationType : this._geometryUpdater.classificationTypeProperty.getValue(time)\n                }), Property.getValueOrUndefined(this._geometryUpdater.zIndex, time));\n            } else {\n                options.vertexFormat = appearance.vertexFormat;\n\n                var fillInstance = this._geometryUpdater.createFillGeometryInstance(time);\n\n                if (isColorAppearance) {\n                    appearance.translucent = fillInstance.attributes.color.value[3] !== 255;\n                }\n\n                this._primitive = primitives.add(new Primitive({\n                    geometryInstances : fillInstance,\n                    appearance : appearance,\n                    asynchronous : false,\n                    shadows : shadows\n                }));\n            }\n        }\n\n        if (!onTerrain && defined(geometry.outline) && geometry.outline.getValue(time)) {\n            var outlineInstance = this._geometryUpdater.createOutlineGeometryInstance(time);\n            var outlineWidth = Property.getValueOrDefault(geometry.outlineWidth, time, 1.0);\n\n            this._outlinePrimitive = primitives.add(new Primitive({\n                geometryInstances : outlineInstance,\n                appearance : new PerInstanceColorAppearance({\n                    flat : true,\n                    translucent : outlineInstance.attributes.color.value[3] !== 255,\n                    renderState : {\n                        lineWidth : geometryUpdater._scene.clampLineWidth(outlineWidth)\n                    }\n                }),\n                asynchronous : false,\n                shadows : shadows\n            }));\n        }\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     * @function\n     *\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    DynamicGeometryUpdater.prototype.getBoundingSphere = function(result) {\n        \n        var entity = this._entity;\n        var primitive = this._primitive;\n        var outlinePrimitive = this._outlinePrimitive;\n\n        var attributes;\n\n        //Outline and Fill geometries have the same bounding sphere, so just use whichever one is defined and ready\n        if (defined(primitive) && primitive.show && primitive.ready) {\n            attributes = primitive.getGeometryInstanceAttributes(entity);\n            if (defined(attributes) && defined(attributes.boundingSphere)) {\n                BoundingSphere.clone(attributes.boundingSphere, result);\n                return BoundingSphereState.DONE;\n            }\n        }\n\n        if (defined(outlinePrimitive) && outlinePrimitive.show && outlinePrimitive.ready) {\n            attributes = outlinePrimitive.getGeometryInstanceAttributes(entity);\n            if (defined(attributes) && defined(attributes.boundingSphere)) {\n                BoundingSphere.clone(attributes.boundingSphere, result);\n                return BoundingSphereState.DONE;\n            }\n        }\n\n        if ((defined(primitive) && !primitive.ready) || (defined(outlinePrimitive) && !outlinePrimitive.ready)) {\n            return BoundingSphereState.PENDING;\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * @memberof DynamicGeometryUpdater\n     * @function\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    DynamicGeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     * @memberof DynamicGeometryUpdater\n     * @function\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    DynamicGeometryUpdater.prototype.destroy = function() {\n        var primitives = this._primitives;\n        var orderedGroundPrimitives = this._orderedGroundPrimitives;\n        if (this._geometryUpdater._onTerrain) {\n            orderedGroundPrimitives.remove(this._primitive);\n        } else {\n            primitives.removeAndDestroy(this._primitive);\n        }\n        primitives.removeAndDestroy(this._outlinePrimitive);\n        destroyObject(this);\n    };\n\n    return DynamicGeometryUpdater;\n});\n","define([\n    './IonImageryProvider',\n    './IonWorldImageryStyle',\n    '../Core/defaultValue'\n], function(\n    IonImageryProvider,\n    IonWorldImageryStyle,\n    defaultValue) {\n'use strict';\n\n    /**\n     * Creates an {@link IonImageryProvider} instance for ion's default global base imagery layer, currently Bing Maps.\n     *\n     * @exports createWorldImagery\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {IonWorldImageryStyle} [options.style=IonWorldImageryStyle] The style of base imagery, only AERIAL, AERIAL_WITH_LABELS, and ROAD are currently supported.\n     * @returns {IonImageryProvider}\n     *\n     * @see Ion\n     *\n     * @example\n     * // Create Cesium World Terrain with default settings\n     * var viewer = new Cesium.Viewer('cesiumContainer', {\n     *     imageryProvider : Cesium.createWorldImagery();\n     * });\n     *\n     * @example\n     * // Create Cesium World Terrain with water and normals.\n     * var viewer = new Cesium.Viewer('cesiumContainer', {\n     *     imageryProvider : Cesium.createWorldImagery({\n     *         style: Cesium.IonWorldImageryStyle.AERIAL_WITH_LABELS\n     *     })\n     * });\n     *\n     */\n    function createWorldImagery(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var style = defaultValue(options.style, IonWorldImageryStyle.AERIAL);\n        return new IonImageryProvider({\n            assetId: style\n        });\n    }\n\n    return createWorldImagery;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/buildModuleUrl',\n        '../Core/Cartesian3',\n        '../Core/Cartographic',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Ellipsoid',\n        '../Core/EllipsoidTerrainProvider',\n        '../Core/Event',\n        '../Core/IntersectionTests',\n        '../Core/Ray',\n        '../Core/Rectangle',\n        '../Core/Resource',\n        '../Renderer/ShaderSource',\n        '../Renderer/Texture',\n        '../Shaders/GlobeFS',\n        '../Shaders/GlobeVS',\n        '../Shaders/GroundAtmosphere',\n        '../ThirdParty/when',\n        './GlobeSurfaceShaderSet',\n        './GlobeSurfaceTileProvider',\n        './ImageryLayerCollection',\n        './ImagerySplitDirection',\n        './QuadtreePrimitive',\n        './SceneMode',\n        './ShadowMode',\n        './TileSelectionResult'\n    ], function(\n        BoundingSphere,\n        buildModuleUrl,\n        Cartesian3,\n        Cartographic,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        Ellipsoid,\n        EllipsoidTerrainProvider,\n        Event,\n        IntersectionTests,\n        Ray,\n        Rectangle,\n        Resource,\n        ShaderSource,\n        Texture,\n        GlobeFS,\n        GlobeVS,\n        GroundAtmosphere,\n        when,\n        GlobeSurfaceShaderSet,\n        GlobeSurfaceTileProvider,\n        ImageryLayerCollection,\n        ImagerySplitDirection,\n        QuadtreePrimitive,\n        SceneMode,\n        ShadowMode,\n        TileSelectionResult) {\n    'use strict';\n\n    /**\n     * The globe rendered in the scene, including its terrain ({@link Globe#terrainProvider})\n     * and imagery layers ({@link Globe#imageryLayers}).  Access the globe using {@link Scene#globe}.\n     *\n     * @alias Globe\n     * @constructor\n     *\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] Determines the size and shape of the\n     * globe.\n     */\n    function Globe(ellipsoid) {\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n        var terrainProvider = new EllipsoidTerrainProvider({\n            ellipsoid : ellipsoid\n        });\n        var imageryLayerCollection = new ImageryLayerCollection();\n\n        this._ellipsoid = ellipsoid;\n        this._imageryLayerCollection = imageryLayerCollection;\n\n        this._surfaceShaderSet = new GlobeSurfaceShaderSet();\n        this._material = undefined;\n\n        this._surface = new QuadtreePrimitive({\n            tileProvider : new GlobeSurfaceTileProvider({\n                terrainProvider : terrainProvider,\n                imageryLayers : imageryLayerCollection,\n                surfaceShaderSet : this._surfaceShaderSet\n            })\n        });\n\n        this._terrainProvider = terrainProvider;\n        this._terrainProviderChanged = new Event();\n\n        makeShadersDirty(this);\n\n        /**\n         * Determines if the globe will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = true;\n\n        this._oceanNormalMapResourceDirty = true;\n        this._oceanNormalMapResource = new Resource({\n            url: require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/waterNormalsSmall.jpg')\n        });\n\n        /**\n         * The maximum screen-space error used to drive level-of-detail refinement.  Higher\n         * values will provide better performance but lower visual quality.\n         *\n         * @type {Number}\n         * @default 2\n         */\n        this.maximumScreenSpaceError = 2;\n\n        /**\n         * The size of the terrain tile cache, expressed as a number of tiles.  Any additional\n         * tiles beyond this number will be freed, as long as they aren't needed for rendering\n         * this frame.  A larger number will consume more memory but will show detail faster\n         * when, for example, zooming out and then back in.\n         *\n         * @type {Number}\n         * @default 100\n         */\n        this.tileCacheSize = 100;\n\n        /**\n         * Gets or sets the number of loading descendant tiles that is considered \"too many\".\n         * If a tile has too many loading descendants, that tile will be loaded and rendered before any of\n         * its descendants are loaded and rendered. This means more feedback for the user that something\n         * is happening at the cost of a longer overall load time. Setting this to 0 will cause each\n         * tile level to be loaded successively, significantly increasing load time. Setting it to a large\n         * number (e.g. 1000) will minimize the number of tiles that are loaded but tend to make\n         * detail appear all at once after a long wait.\n         * @type {Number}\n         * @default 20\n         */\n        this.loadingDescendantLimit = 20;\n\n        /**\n         * Gets or sets a value indicating whether the ancestors of rendered tiles should be preloaded.\n         * Setting this to true optimizes the zoom-out experience and provides more detail in\n         * newly-exposed areas when panning. The down side is that it requires loading more tiles.\n         * @type {Boolean}\n         * @default true\n         */\n        this.preloadAncestors = true;\n\n        /**\n         * Gets or sets a value indicating whether the siblings of rendered tiles should be preloaded.\n         * Setting this to true causes tiles with the same parent as a rendered tile to be loaded, even\n         * if they are culled. Setting this to true may provide a better panning experience at the\n         * cost of loading more tiles.\n         * @type {Boolean}\n         * @default false\n         */\n        this.preloadSiblings = false;\n\n        /**\n         * The color to use to highlight terrain fill tiles. If undefined, fill tiles are not\n         * highlighted at all. The alpha value is used to alpha blend with the tile's\n         * actual color. Because terrain fill tiles do not represent the actual terrain surface,\n         * it may be useful in some applications to indicate visually that they are not to be trusted.\n         * @type {Color}\n         * @default undefined\n         */\n        this.fillHighlightColor = undefined;\n\n        /**\n         * Enable lighting the globe with the sun as a light source.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.enableLighting = false;\n\n        /**\n         * Enable the ground atmosphere, which is drawn over the globe when viewed from a distance between <code>lightingFadeInDistance</code> and <code>lightingFadeOutDistance</code>.\n         *\n         * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Ground%20Atmosphere.html|Ground atmosphere demo in Sandcastle}\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.showGroundAtmosphere = true;\n\n        /**\n         * The distance where everything becomes lit. This only takes effect\n         * when <code>enableLighting</code> or <code>showGroundAtmosphere</code> is <code>true</code>.\n         *\n         * @type {Number}\n         * @default 10000000.0\n         */\n        this.lightingFadeOutDistance = 1.0e7;\n\n        /**\n         * The distance where lighting resumes. This only takes effect\n         * when <code>enableLighting</code> or <code>showGroundAtmosphere</code> is <code>true</code>.\n         *\n         * @type {Number}\n         * @default 20000000.0\n         */\n        this.lightingFadeInDistance = 2.0e7;\n\n        /**\n         * The distance where the darkness of night from the ground atmosphere fades out to a lit ground atmosphere.\n         * This only takes effect when <code>showGroundAtmosphere</code> and <code>enableLighting</code> are <code>true</code>.\n         *\n         * @type {Number}\n         * @default 10000000.0\n         */\n        this.nightFadeOutDistance = 1.0e7;\n\n        /**\n         * The distance where the darkness of night from the ground atmosphere fades in to an unlit ground atmosphere.\n         * This only takes effect when <code>showGroundAtmosphere</code> and <code>enableLighting</code> are <code>true</code>.\n         *\n         * @type {Number}\n         * @default 50000000.0\n         */\n        this.nightFadeInDistance = 5.0e7;\n\n        /**\n         * True if an animated wave effect should be shown in areas of the globe\n         * covered by water; otherwise, false.  This property is ignored if the\n         * <code>terrainProvider</code> does not provide a water mask.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.showWaterEffect = true;\n\n        /**\n         * True if primitives such as billboards, polylines, labels, etc. should be depth-tested\n         * against the terrain surface, or false if such primitives should always be drawn on top\n         * of terrain unless they're on the opposite side of the globe.  The disadvantage of depth\n         * testing primitives against terrain is that slight numerical noise or terrain level-of-detail\n         * switched can sometimes make a primitive that should be on the surface disappear underneath it.\n         *\n         * @type {Boolean}\n         * @default false\n         *\n         */\n        this.depthTestAgainstTerrain = false;\n\n        /**\n         * Determines whether the globe casts or receives shadows from each light source. Setting the globe\n         * to cast shadows may impact performance since the terrain is rendered again from the light's perspective.\n         * Currently only terrain that is in view casts shadows. By default the globe does not cast shadows.\n         *\n         * @type {ShadowMode}\n         * @default ShadowMode.RECEIVE_ONLY\n         */\n        this.shadows = ShadowMode.RECEIVE_ONLY;\n\n        /**\n         * The {@link ImagerySplitDirection} to apply, showing the terrain only on\n         * the left or right of the splitter control.\n         *\n         * @type {ImagerySplitDirection}\n         * @default {@link ImagerySplitDirection.NONE}\n         */\n        this.splitDirection = ImagerySplitDirection.NONE;\n\n        /**\n         * The hue shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n         * A hue shift of 1.0 indicates a complete rotation of the hues available.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.atmosphereHueShift = 0.0;\n\n        /**\n         * The saturation shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n         * A saturation shift of -1.0 is monochrome.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.atmosphereSaturationShift = 0.0;\n\n        /**\n         * The brightness shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n         * A brightness shift of -1.0 is complete darkness, which will let space show through.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.atmosphereBrightnessShift = 0.0;\n\n        this._oceanNormalMap = undefined;\n        this._zoomedOutOceanSpecularIntensity = undefined;\n    }\n\n    defineProperties(Globe.prototype, {\n        /**\n         * Gets an ellipsoid describing the shape of this globe.\n         * @memberof Globe.prototype\n         * @type {Ellipsoid}\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        },\n        /**\n         * Gets the collection of image layers that will be rendered on this globe.\n         * @memberof Globe.prototype\n         * @type {ImageryLayerCollection}\n         */\n        imageryLayers : {\n            get : function() {\n                return this._imageryLayerCollection;\n            }\n        },\n        /**\n         * Gets an event that's raised when an imagery layer is added, shown, hidden, moved, or removed.\n         *\n         * @memberof Globe.prototype\n         * @type {Event}\n         * @readonly\n         */\n        imageryLayersUpdatedEvent : {\n            get : function() {\n                return this._surface.tileProvider.imageryLayersUpdatedEvent;\n            }\n        },\n        /**\n         * Returns <code>true</code> when the tile load queue is empty, <code>false</code> otherwise.  When the load queue is empty,\n         * all terrain and imagery for the current view have been loaded.\n         * @memberof Globe.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        tilesLoaded: {\n            get: function() {\n                if (!defined(this._surface)) {\n                    return true;\n                }\n                return (this._surface.tileProvider.ready && this._surface._tileLoadQueueHigh.length === 0 && this._surface._tileLoadQueueMedium.length === 0 && this._surface._tileLoadQueueLow.length === 0);\n            }\n        },\n        /**\n         * Gets or sets the color of the globe when no imagery is available.\n         * @memberof Globe.prototype\n         * @type {Color}\n         */\n        baseColor : {\n            get : function() {\n                return this._surface.tileProvider.baseColor;\n            },\n            set : function(value) {\n                this._surface.tileProvider.baseColor = value;\n            }\n        },\n        /**\n         * A property specifying a {@link ClippingPlaneCollection} used to selectively disable rendering on the outside of each plane.\n         *\n         * @memberof Globe.prototype\n         * @type {ClippingPlaneCollection}\n         */\n        clippingPlanes : {\n            get : function() {\n                return this._surface.tileProvider.clippingPlanes;\n            },\n            set : function(value) {\n                this._surface.tileProvider.clippingPlanes = value;\n            }\n        },\n        /**\n         * A property specifying a {@link Rectangle} used to limit globe rendering to a cartographic area.\n         * Defaults to the maximum extent of cartographic coordinates.\n         *\n         * @member Globe.prototype\n         * @type {Rectangle}\n         * @default Rectangle.MAX_VALUE\n         */\n        cartographicLimitRectangle : {\n            get : function() {\n                return this._surface.tileProvider.cartographicLimitRectangle;\n            },\n            set : function(value) {\n                if (!defined(value)) {\n                    value = Rectangle.clone(Rectangle.MAX_VALUE);\n                }\n                this._surface.tileProvider.cartographicLimitRectangle = value;\n            }\n        },\n        /**\n         * The normal map to use for rendering waves in the ocean.  Setting this property will\n         * only have an effect if the configured terrain provider includes a water mask.\n         * @memberof Globe.prototype\n         * @type {String}\n         * @default require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/waterNormalsSmall.jpg')\n         */\n        oceanNormalMapUrl: {\n            get: function() {\n                return this._oceanNormalMapResource.url;\n            },\n            set: function(value) {\n                this._oceanNormalMapResource.url = value;\n                this._oceanNormalMapResourceDirty = true;\n            }\n        },\n        /**\n         * The terrain provider providing surface geometry for this globe.\n         * @type {TerrainProvider}\n         *\n         * @memberof Globe.prototype\n         * @type {TerrainProvider}\n         *\n         */\n        terrainProvider : {\n            get : function() {\n                return this._terrainProvider;\n            },\n            set : function(value) {\n                if (value !== this._terrainProvider) {\n                    this._terrainProvider = value;\n                    this._terrainProviderChanged.raiseEvent(value);\n                    if (defined(this._material)) {\n                        makeShadersDirty(this);\n                    }\n                }\n            }\n        },\n        /**\n         * Gets an event that's raised when the terrain provider is changed\n         *\n         * @memberof Globe.prototype\n         * @type {Event}\n         * @readonly\n         */\n        terrainProviderChanged : {\n            get: function() {\n                return this._terrainProviderChanged;\n            }\n        },\n        /**\n         * Gets an event that's raised when the length of the tile load queue has changed since the last render frame.  When the load queue is empty,\n         * all terrain and imagery for the current view have been loaded.  The event passes the new length of the tile load queue.\n         *\n         * @memberof Globe.prototype\n         * @type {Event}\n         */\n        tileLoadProgressEvent : {\n            get: function() {\n                return this._surface.tileLoadProgressEvent;\n            }\n        },\n\n        /**\n         * Gets or sets the material appearance of the Globe.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n         * {@link https://github.com/AnalyticalGraphicsInc/cesium/wiki/Fabric|Fabric}.\n         * @memberof Globe.prototype\n         * @type {Material}\n         */\n        material: {\n            get: function() {\n                return this._material;\n            },\n            set: function(material) {\n                if (this._material !== material) {\n                    this._material = material;\n                    makeShadersDirty(this);\n                }\n            }\n        }\n    });\n\n    function makeShadersDirty(globe) {\n        var defines = [];\n\n        var requireNormals = defined(globe._material) && (globe._material.shaderSource.match(/slope/) || globe._material.shaderSource.match('normalEC'));\n\n        var fragmentSources = [GroundAtmosphere];\n        if (defined(globe._material) && (!requireNormals || globe._terrainProvider.requestVertexNormals)) {\n            fragmentSources.push(globe._material.shaderSource);\n            defines.push('APPLY_MATERIAL');\n            globe._surface._tileProvider.uniformMap = globe._material._uniforms;\n        } else {\n            globe._surface._tileProvider.uniformMap = undefined;\n        }\n        fragmentSources.push(GlobeFS);\n\n        globe._surfaceShaderSet.baseVertexShaderSource = new ShaderSource({\n            sources : [GroundAtmosphere, GlobeVS],\n            defines : defines\n        });\n\n        globe._surfaceShaderSet.baseFragmentShaderSource = new ShaderSource({\n            sources : fragmentSources,\n            defines : defines\n        });\n        globe._surfaceShaderSet.material = globe._material;\n    }\n\n    function createComparePickTileFunction(rayOrigin) {\n        return function(a, b) {\n            var aDist = BoundingSphere.distanceSquaredTo(a.data.pickBoundingSphere, rayOrigin);\n            var bDist = BoundingSphere.distanceSquaredTo(b.data.pickBoundingSphere, rayOrigin);\n\n            return aDist - bDist;\n        };\n    }\n\n    var scratchArray = [];\n    var scratchSphereIntersectionResult = {\n        start : 0.0,\n        stop : 0.0\n    };\n\n    /**\n     * Find an intersection between a ray and the globe surface that was rendered. The ray must be given in world coordinates.\n     *\n     * @param {Ray} ray The ray to test for intersection.\n     * @param {Scene} scene The scene.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.  The returned position is in projected coordinates for 2D and Columbus View.\n     *\n     * @private\n     */\n    Globe.prototype.pickWorldCoordinates = function(ray, scene, result) {\n        \n\n        var mode = scene.mode;\n        var projection = scene.mapProjection;\n\n        var sphereIntersections = scratchArray;\n        sphereIntersections.length = 0;\n\n        var tilesToRender = this._surface._tilesToRender;\n        var length = tilesToRender.length;\n\n        var tile;\n        var i;\n\n        for (i = 0; i < length; ++i) {\n            tile = tilesToRender[i];\n            var surfaceTile = tile.data;\n\n            if (!defined(surfaceTile)) {\n                continue;\n            }\n\n            var boundingVolume = surfaceTile.pickBoundingSphere;\n            if (mode !== SceneMode.SCENE3D) {\n                surfaceTile.pickBoundingSphere = boundingVolume = BoundingSphere.fromRectangleWithHeights2D(tile.rectangle, projection, surfaceTile.tileBoundingRegion.minimumHeight, surfaceTile.tileBoundingRegion.maximumHeight, boundingVolume);\n                Cartesian3.fromElements(boundingVolume.center.z, boundingVolume.center.x, boundingVolume.center.y, boundingVolume.center);\n            } else if (defined(surfaceTile.renderedMesh)) {\n                BoundingSphere.clone(surfaceTile.renderedMesh.boundingSphere3D, boundingVolume);\n            } else {\n                // So wait how did we render this thing then? It shouldn't be possible to get here.\n                continue;\n            }\n\n            var boundingSphereIntersection = IntersectionTests.raySphere(ray, boundingVolume, scratchSphereIntersectionResult);\n            if (defined(boundingSphereIntersection)) {\n                sphereIntersections.push(tile);\n            }\n        }\n\n        sphereIntersections.sort(createComparePickTileFunction(ray.origin));\n\n        var intersection;\n        length = sphereIntersections.length;\n        for (i = 0; i < length; ++i) {\n            intersection = sphereIntersections[i].data.pick(ray, scene.mode, scene.mapProjection, true, result);\n            if (defined(intersection)) {\n                break;\n            }\n        }\n\n        return intersection;\n    };\n\n    /**\n     * Find an intersection between a ray and the globe surface that was rendered. The ray must be given in world coordinates.\n     *\n     * @param {Ray} ray The ray to test for intersection.\n     * @param {Scene} scene The scene.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {IntersectedTriangle|undefined} The intersection or <code>undefined</code> if none was found.\n     *\n     * @example\n     * // find intersection of ray through a pixel and the globe\n     * var ray = scene.camera.getPickRay(windowCoordinates);\n     * var intersection = globe.pick(ray, scene);\n     */\n    Globe.prototype.pickTriangle = function(ray, scene, result) {\n        \n\n        var mode = scene.mode;\n        var projection = scene.mapProjection;\n\n        var sphereIntersections = scratchArray;\n        sphereIntersections.length = 0;\n\n        var tilesToRender = this._surface._tilesToRender;\n        var length = tilesToRender.length;\n\n        var tile;\n        var i;\n\n        for (i = 0; i < length; ++i) {\n            tile = tilesToRender[i];\n            var surfaceTile = tile.data;\n\n            if (!defined(surfaceTile)) {\n                continue;\n            }\n\n            var boundingVolume = surfaceTile.pickBoundingSphere;\n            if (mode !== SceneMode.SCENE3D) {\n                BoundingSphere.fromRectangleWithHeights2D(tile.rectangle, projection, surfaceTile.minimumHeight, surfaceTile.maximumHeight, boundingVolume);\n                Cartesian3.fromElements(boundingVolume.center.z, boundingVolume.center.x, boundingVolume.center.y, boundingVolume.center);\n            } else {\n                BoundingSphere.clone(surfaceTile.boundingSphere3D, boundingVolume);\n            }\n\n            var boundingSphereIntersection = IntersectionTests.raySphere(ray, boundingVolume, scratchSphereIntersectionResult);\n            if (defined(boundingSphereIntersection)) {\n                sphereIntersections.push(tile);\n            }\n        }\n\n        sphereIntersections.sort(createComparePickTileFunction(ray.origin));\n\n        var intersection;\n        length = sphereIntersections.length;\n        for (i = 0; i < length; ++i) {\n            intersection = sphereIntersections[i].data.pickTriangle(ray, scene.mode, scene.mapProjection, true, result);\n            if (defined(intersection)) {\n                intersection.tile = sphereIntersections[i];\n                break;\n            }\n        }\n\n        return intersection;\n    };\n\n    var cartoScratch = new Cartographic();\n    /**\n     * Find an intersection between a ray and the globe surface that was rendered. The ray must be given in world coordinates.\n     *\n     * @param {Ray} ray The ray to test for intersection.\n     * @param {Scene} scene The scene.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3|undefined} The intersection or <code>undefined</code> if none was found.\n     *\n     * @example\n     * // find intersection of ray through a pixel and the globe\n     * var ray = viewer.camera.getPickRay(windowCoordinates);\n     * var intersection = globe.pick(ray, scene);\n     */\n    Globe.prototype.pick = function(ray, scene, result) {\n        result = this.pickWorldCoordinates(ray, scene, result);\n        if (defined(result) && scene.mode !== SceneMode.SCENE3D) {\n            result = Cartesian3.fromElements(result.y, result.z, result.x, result);\n            var carto = scene.mapProjection.unproject(result, cartoScratch);\n            result = scene.globe.ellipsoid.cartographicToCartesian(carto, result);\n        }\n\n        return result;\n    };\n\n    var scratchGetHeightCartesian = new Cartesian3();\n    var scratchGetHeightIntersection = new Cartesian3();\n    var scratchGetHeightCartographic = new Cartographic();\n    var scratchGetHeightRay = new Ray();\n\n    function tileIfContainsCartographic(tile, cartographic) {\n        return Rectangle.contains(tile.rectangle, cartographic) ? tile : undefined;\n    }\n\n    /**\n     * Get the height of the surface at a given cartographic.\n     *\n     * @param {Cartographic} cartographic The cartographic for which to find the height.\n     * @returns {Number|undefined} The height of the cartographic or undefined if it could not be found.\n     */\n    Globe.prototype.getHeight = function(cartographic) {\n        \n\n        var levelZeroTiles = this._surface._levelZeroTiles;\n        if (!defined(levelZeroTiles)) {\n            return;\n        }\n\n        var tile;\n        var i;\n\n        var length = levelZeroTiles.length;\n        for (i = 0; i < length; ++i) {\n            tile = levelZeroTiles[i];\n            if (Rectangle.contains(tile.rectangle, cartographic)) {\n                break;\n            }\n        }\n\n        if (i >= length) {\n            return undefined;\n        }\n\n        while (tile._lastSelectionResult === TileSelectionResult.REFINED) {\n            tile = tileIfContainsCartographic(tile.southwestChild, cartographic) ||\n                   tileIfContainsCartographic(tile.southeastChild, cartographic) ||\n                   tileIfContainsCartographic(tile.northwestChild, cartographic) ||\n                   tile.northeastChild;\n        }\n\n        // This tile was either rendered or culled.\n        // It is sometimes useful to get a height from a culled tile,\n        // e.g. when we're getting a height in order to place a billboard\n        // on terrain, and the camera is looking at that same billboard.\n        // The culled tile must have a valid mesh, though.\n        if (!defined(tile.data) || !defined(tile.data.renderedMesh)) {\n            // Tile was not rendered (culled).\n            return undefined;\n        }\n\n        var ellipsoid = this._surface._tileProvider.tilingScheme.ellipsoid;\n\n        //cartesian has to be on the ellipsoid surface for `ellipsoid.geodeticSurfaceNormal`\n        var cartesian = Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, 0.0, ellipsoid, scratchGetHeightCartesian);\n\n        var ray = scratchGetHeightRay;\n        var surfaceNormal = ellipsoid.geodeticSurfaceNormal(cartesian, ray.direction);\n\n        // Try to find the intersection point between the surface normal and z-axis.\n        // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n        var rayOrigin = ellipsoid.getSurfaceNormalIntersectionWithZAxis(cartesian, 11500.0, ray.origin);\n\n        // Theoretically, not with Earth datums, the intersection point can be outside the ellipsoid\n        if (!defined(rayOrigin)) {\n            // intersection point is outside the ellipsoid, try other value\n            // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n            var minimumHeight;\n            if (defined(tile.data.tileBoundingRegion)) {\n                minimumHeight = tile.data.tileBoundingRegion.minimumHeight;\n            }\n            var magnitude = Math.min(defaultValue(minimumHeight, 0.0), -11500.0);\n\n            // multiply by the *positive* value of the magnitude\n            var vectorToMinimumPoint = Cartesian3.multiplyByScalar(surfaceNormal, Math.abs(magnitude) + 1, scratchGetHeightIntersection);\n            Cartesian3.subtract(cartesian, vectorToMinimumPoint, ray.origin);\n        }\n\n        var intersection = tile.data.pick(ray, undefined, undefined, false, scratchGetHeightIntersection);\n        if (!defined(intersection)) {\n            return undefined;\n        }\n\n        return ellipsoid.cartesianToCartographic(intersection, scratchGetHeightCartographic).height;\n    };\n\n    /**\n     * @private\n     */\n    Globe.prototype.update = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        if (frameState.passes.render) {\n            this._surface.update(frameState);\n        }\n    };\n\n    /**\n     * @private\n     */\n    Globe.prototype.beginFrame = function(frameState) {\n        var surface = this._surface;\n        var tileProvider = surface.tileProvider;\n        var terrainProvider = this.terrainProvider;\n        var hasWaterMask = this.showWaterEffect && terrainProvider.ready && terrainProvider.hasWaterMask;\n\n        if (hasWaterMask && this._oceanNormalMapResourceDirty) {\n            // url changed, load new normal map asynchronously\n            this._oceanNormalMapResourceDirty = false;\n            var oceanNormalMapResource = this._oceanNormalMapResource;\n            var oceanNormalMapUrl =  oceanNormalMapResource.url;\n            if (defined(oceanNormalMapUrl)) {\n                var that = this;\n                when(oceanNormalMapResource.fetchImage(), function(image) {\n                    if (oceanNormalMapUrl !== that._oceanNormalMapResource.url) {\n                        // url changed while we were loading\n                        return;\n                    }\n\n                    that._oceanNormalMap = that._oceanNormalMap && that._oceanNormalMap.destroy();\n                    that._oceanNormalMap = new Texture({\n                        context : frameState.context,\n                        source : image\n                    });\n                });\n            } else {\n                this._oceanNormalMap = this._oceanNormalMap && this._oceanNormalMap.destroy();\n            }\n        }\n\n        var pass = frameState.passes;\n        var mode = frameState.mode;\n\n        if (pass.render) {\n            if (this.showGroundAtmosphere) {\n                this._zoomedOutOceanSpecularIntensity = 0.4;\n            } else {\n                this._zoomedOutOceanSpecularIntensity = 0.5;\n            }\n\n            surface.maximumScreenSpaceError = this.maximumScreenSpaceError;\n            surface.tileCacheSize = this.tileCacheSize;\n            surface.loadingDescendantLimit = this.loadingDescendantLimit;\n            surface.preloadAncestors = this.preloadAncestors;\n            surface.preloadSiblings = this.preloadSiblings;\n\n            tileProvider.terrainProvider = this.terrainProvider;\n            tileProvider.lightingFadeOutDistance = this.lightingFadeOutDistance;\n            tileProvider.lightingFadeInDistance = this.lightingFadeInDistance;\n            tileProvider.nightFadeOutDistance = this.nightFadeOutDistance;\n            tileProvider.nightFadeInDistance = this.nightFadeInDistance;\n            tileProvider.zoomedOutOceanSpecularIntensity = mode === SceneMode.SCENE3D ? this._zoomedOutOceanSpecularIntensity : 0.0;\n            tileProvider.hasWaterMask = hasWaterMask;\n            tileProvider.oceanNormalMap = this._oceanNormalMap;\n            tileProvider.enableLighting = this.enableLighting;\n            tileProvider.showGroundAtmosphere = this.showGroundAtmosphere;\n            tileProvider.shadows = this.shadows;\n            tileProvider.splitDirection = this.splitDirection;\n            tileProvider.hueShift = this.atmosphereHueShift;\n            tileProvider.saturationShift = this.atmosphereSaturationShift;\n            tileProvider.brightnessShift = this.atmosphereBrightnessShift;\n            tileProvider.fillHighlightColor = this.fillHighlightColor;\n\n            surface.beginFrame(frameState);\n        }\n    };\n\n    /**\n     * @private\n     */\n    Globe.prototype.render = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        if (defined(this._material)) {\n            this._material.update(frameState.context);\n        }\n\n        this._surface.render(frameState);\n    };\n\n    /**\n     * @private\n     */\n    Globe.prototype.endFrame = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        if (frameState.passes.render) {\n            this._surface.endFrame(frameState);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see Globe#destroy\n     */\n    Globe.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * globe = globe && globe.destroy();\n     *\n     * @see Globe#isDestroyed\n     */\n    Globe.prototype.destroy = function() {\n        this._surfaceShaderSet = this._surfaceShaderSet && this._surfaceShaderSet.destroy();\n        this._surface = this._surface && this._surface.destroy();\n        this._oceanNormalMap = this._oceanNormalMap && this._oceanNormalMap.destroy();\n        return destroyObject(this);\n    };\n\n    return Globe;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform vec4 u_initialColor;\\n\\\n\\n\\\n#if TEXTURE_UNITS > 0\\n\\\nuniform sampler2D u_dayTextures[TEXTURE_UNITS];\\n\\\nuniform vec4 u_dayTextureTranslationAndScale[TEXTURE_UNITS];\\n\\\nuniform bool u_dayTextureUseWebMercatorT[TEXTURE_UNITS];\\n\\\n\\n\\\n#ifdef APPLY_ALPHA\\n\\\nuniform float u_dayTextureAlpha[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SPLIT\\n\\\nuniform float u_dayTextureSplit[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_BRIGHTNESS\\n\\\nuniform float u_dayTextureBrightness[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_CONTRAST\\n\\\nuniform float u_dayTextureContrast[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_HUE\\n\\\nuniform float u_dayTextureHue[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SATURATION\\n\\\nuniform float u_dayTextureSaturation[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_GAMMA\\n\\\nuniform float u_dayTextureOneOverGamma[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_IMAGERY_CUTOUT\\n\\\nuniform vec4 u_dayTextureCutoutRectangles[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_COLOR_TO_ALPHA\\n\\\nuniform vec4 u_colorsToAlpha[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 u_dayTextureTexCoordsRectangle[TEXTURE_UNITS];\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SHOW_REFLECTIVE_OCEAN\\n\\\nuniform sampler2D u_waterMask;\\n\\\nuniform vec4 u_waterMaskTranslationAndScale;\\n\\\nuniform float u_zoomedOutOceanSpecularIntensity;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SHOW_OCEAN_WAVES\\n\\\nuniform sampler2D u_oceanNormalMap;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(ENABLE_DAYNIGHT_SHADING) || defined(GROUND_ATMOSPHERE)\\n\\\nuniform vec2 u_lightingFadeDistance;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef TILE_LIMIT_RECTANGLE\\n\\\nuniform vec4 u_cartographicLimitRectangle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef GROUND_ATMOSPHERE\\n\\\nuniform vec2 u_nightFadeDistance;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_CLIPPING_PLANES\\n\\\nuniform sampler2D u_clippingPlanes;\\n\\\nuniform mat4 u_clippingPlanesMatrix;\\n\\\nuniform vec4 u_clippingPlanesEdgeStyle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SPLIT_TERRAIN\\n\\\nuniform float u_terrainSplitDirection;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) && (defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING)) || defined(GROUND_ATMOSPHERE)\\n\\\nuniform float u_minimumBrightness;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HIGHLIGHT_FILL_TILE\\n\\\nuniform vec4 u_fillHighlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_textureCoordinates;\\n\\\nvarying vec3 v_normalMC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\nvarying float v_height;\\n\\\nvarying float v_slope;\\n\\\nvarying float v_aspect;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\\n\\\nvarying float v_distance;\\n\\\nvarying vec3 v_fogRayleighColor;\\n\\\nvarying vec3 v_fogMieColor;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef GROUND_ATMOSPHERE\\n\\\nvarying vec3 v_rayleighColor;\\n\\\nvarying vec3 v_mieColor;\\n\\\n#endif\\n\\\n\\n\\\nvec4 sampleAndBlend(\\n\\\n    vec4 previousColor,\\n\\\n    sampler2D textureToSample,\\n\\\n    vec2 tileTextureCoordinates,\\n\\\n    vec4 textureCoordinateRectangle,\\n\\\n    vec4 textureCoordinateTranslationAndScale,\\n\\\n    float textureAlpha,\\n\\\n    float textureBrightness,\\n\\\n    float textureContrast,\\n\\\n    float textureHue,\\n\\\n    float textureSaturation,\\n\\\n    float textureOneOverGamma,\\n\\\n    float split,\\n\\\n    vec4 colorToAlpha)\\n\\\n{\\n\\\n    // This crazy step stuff sets the alpha to 0.0 if this following condition is true:\\n\\\n    //    tileTextureCoordinates.s < textureCoordinateRectangle.s ||\\n\\\n    //    tileTextureCoordinates.s > textureCoordinateRectangle.p ||\\n\\\n    //    tileTextureCoordinates.t < textureCoordinateRectangle.t ||\\n\\\n    //    tileTextureCoordinates.t > textureCoordinateRectangle.q\\n\\\n    // In other words, the alpha is zero if the fragment is outside the rectangle\\n\\\n    // covered by this texture.  Would an actual 'if' yield better performance?\\n\\\n    vec2 alphaMultiplier = step(textureCoordinateRectangle.st, tileTextureCoordinates);\\n\\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\n\\\n\\n\\\n    alphaMultiplier = step(vec2(0.0), textureCoordinateRectangle.pq - tileTextureCoordinates);\\n\\\n    textureAlpha = textureAlpha * alphaMultiplier.x * alphaMultiplier.y;\\n\\\n\\n\\\n    vec2 translation = textureCoordinateTranslationAndScale.xy;\\n\\\n    vec2 scale = textureCoordinateTranslationAndScale.zw;\\n\\\n    vec2 textureCoordinates = tileTextureCoordinates * scale + translation;\\n\\\n    vec4 value = texture2D(textureToSample, textureCoordinates);\\n\\\n    vec3 color = value.rgb;\\n\\\n    float alpha = value.a;\\n\\\n\\n\\\n#ifdef APPLY_COLOR_TO_ALPHA\\n\\\n    vec3 colorDiff = abs(color.rgb - colorToAlpha.rgb);\\n\\\n    colorDiff.r = max(max(colorDiff.r, colorDiff.g), colorDiff.b);\\n\\\n    alpha = czm_branchFreeTernary(colorDiff.r < colorToAlpha.a, 0.0, alpha);\\n\\\n#endif\\n\\\n\\n\\\n#if !defined(APPLY_GAMMA)\\n\\\n    vec4 tempColor = czm_gammaCorrect(vec4(color, alpha));\\n\\\n    color = tempColor.rgb;\\n\\\n    alpha = tempColor.a;\\n\\\n#else\\n\\\n    color = pow(color, vec3(textureOneOverGamma));\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SPLIT\\n\\\n    float splitPosition = czm_imagerySplitPosition;\\n\\\n    // Split to the left\\n\\\n    if (split < 0.0 && gl_FragCoord.x > splitPosition) {\\n\\\n       alpha = 0.0;\\n\\\n    }\\n\\\n    // Split to the right\\n\\\n    else if (split > 0.0 && gl_FragCoord.x < splitPosition) {\\n\\\n       alpha = 0.0;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_BRIGHTNESS\\n\\\n    color = mix(vec3(0.0), color, textureBrightness);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_CONTRAST\\n\\\n    color = mix(vec3(0.5), color, textureContrast);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_HUE\\n\\\n    color = czm_hue(color, textureHue);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_SATURATION\\n\\\n    color = czm_saturation(color, textureSaturation);\\n\\\n#endif\\n\\\n\\n\\\n    float sourceAlpha = alpha * textureAlpha;\\n\\\n    float outAlpha = mix(previousColor.a, 1.0, sourceAlpha);\\n\\\n    outAlpha += sign(outAlpha) - 1.0;\\n\\\n\\n\\\n    vec3 outColor = mix(previousColor.rgb * previousColor.a, color, sourceAlpha) / outAlpha;\\n\\\n\\n\\\n    // When rendering imagery for a tile in multiple passes,\\n\\\n    // some GPU/WebGL implementation combinations will not blend fragments in\\n\\\n    // additional passes correctly if their computation includes an unmasked\\n\\\n    // divide-by-zero operation,\\n\\\n    // even if it's not in the output or if the output has alpha zero.\\n\\\n    //\\n\\\n    // For example, without sanitization for outAlpha,\\n\\\n    // this renders without artifacts:\\n\\\n    //   if (outAlpha == 0.0) { outColor = vec3(0.0); }\\n\\\n    //\\n\\\n    // but using czm_branchFreeTernary will cause portions of the tile that are\\n\\\n    // alpha-zero in the additional pass to render as black instead of blending\\n\\\n    // with the previous pass:\\n\\\n    //   outColor = czm_branchFreeTernary(outAlpha == 0.0, vec3(0.0), outColor);\\n\\\n    //\\n\\\n    // So instead, sanitize against divide-by-zero,\\n\\\n    // store this state on the sign of outAlpha, and correct on return.\\n\\\n\\n\\\n    return vec4(outColor, max(outAlpha, 0.0));\\n\\\n}\\n\\\n\\n\\\nvec3 colorCorrect(vec3 rgb) {\\n\\\n#ifdef COLOR_CORRECT\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n    // Perform hsb shift\\n\\\n    hsb.x += u_hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\\n\\\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    rgb = czm_HSBToRGB(hsb);\\n\\\n#endif\\n\\\n    return rgb;\\n\\\n}\\n\\\n\\n\\\nvec4 computeDayColor(vec4 initialColor, vec3 textureCoordinates);\\n\\\nvec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float specularMapValue, float fade);\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n#ifdef TILE_LIMIT_RECTANGLE\\n\\\n    if (v_textureCoordinates.x < u_cartographicLimitRectangle.x || u_cartographicLimitRectangle.z < v_textureCoordinates.x ||\\n\\\n        v_textureCoordinates.y < u_cartographicLimitRectangle.y || u_cartographicLimitRectangle.w < v_textureCoordinates.y)\\n\\\n        {\\n\\\n            discard;\\n\\\n        }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SPLIT_TERRAIN\\n\\\n    float splitPosition = czm_imagerySplitPosition;\\n\\\n    if (u_terrainSplitDirection < 0.0 && gl_FragCoord.x > splitPosition) {\\n\\\n        discard;\\n\\\n    } else if (u_terrainSplitDirection > 0.0 && gl_FragCoord.x < splitPosition) {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_CLIPPING_PLANES\\n\\\n    float clipDistance = clip(gl_FragCoord, u_clippingPlanes, u_clippingPlanesMatrix);\\n\\\n#endif\\n\\\n\\n\\\n    // The clamp below works around an apparent bug in Chrome Canary v23.0.1241.0\\n\\\n    // where the fragment shader sees textures coordinates < 0.0 and > 1.0 for the\\n\\\n    // fragments on the edges of tiles even though the vertex shader is outputting\\n\\\n    // coordinates strictly in the 0-1 range.\\n\\\n    vec4 color = computeDayColor(u_initialColor, clamp(v_textureCoordinates, 0.0, 1.0));\\n\\\n\\n\\\n#ifdef SHOW_TILE_BOUNDARIES\\n\\\n    if (v_textureCoordinates.x < (1.0/256.0) || v_textureCoordinates.x > (255.0/256.0) ||\\n\\\n        v_textureCoordinates.y < (1.0/256.0) || v_textureCoordinates.y > (255.0/256.0))\\n\\\n    {\\n\\\n        color = vec4(1.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#if defined(SHOW_REFLECTIVE_OCEAN) || defined(ENABLE_DAYNIGHT_SHADING) || defined(HDR)\\n\\\n    vec3 normalMC = czm_geodeticSurfaceNormal(v_positionMC, vec3(0.0), vec3(1.0));   // normalized surface normal in model coordinates\\n\\\n    vec3 normalEC = czm_normal3D * normalMC;                                         // normalized surface normal in eye coordiantes\\n\\\n#endif\\n\\\n\\n\\\n#if defined(ENABLE_DAYNIGHT_SHADING) || defined(GROUND_ATMOSPHERE)\\n\\\n    float cameraDist;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        cameraDist = max(czm_frustumPlanes.x - czm_frustumPlanes.y, czm_frustumPlanes.w - czm_frustumPlanes.z) * 0.5;\\n\\\n    }\\n\\\n    else if (czm_sceneMode == czm_sceneModeColumbusView)\\n\\\n    {\\n\\\n        cameraDist = -czm_view[3].z;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        cameraDist = length(czm_view[3]);\\n\\\n    }\\n\\\n    float fadeOutDist = u_lightingFadeDistance.x;\\n\\\n    float fadeInDist = u_lightingFadeDistance.y;\\n\\\n    if (czm_sceneMode != czm_sceneMode3D) {\\n\\\n        vec3 radii = czm_ellipsoidRadii;\\n\\\n        float maxRadii = max(radii.x, max(radii.y, radii.z));\\n\\\n        fadeOutDist -= maxRadii;\\n\\\n        fadeInDist -= maxRadii;\\n\\\n    }\\n\\\n    float fade = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\\n\\\n#else\\n\\\n    float fade = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SHOW_REFLECTIVE_OCEAN\\n\\\n    vec2 waterMaskTranslation = u_waterMaskTranslationAndScale.xy;\\n\\\n    vec2 waterMaskScale = u_waterMaskTranslationAndScale.zw;\\n\\\n    vec2 waterMaskTextureCoordinates = v_textureCoordinates.xy * waterMaskScale + waterMaskTranslation;\\n\\\n    waterMaskTextureCoordinates.y = 1.0 - waterMaskTextureCoordinates.y;\\n\\\n\\n\\\n    float mask = texture2D(u_waterMask, waterMaskTextureCoordinates).r;\\n\\\n\\n\\\n    if (mask > 0.0)\\n\\\n    {\\n\\\n        mat3 enuToEye = czm_eastNorthUpToEyeCoordinates(v_positionMC, normalEC);\\n\\\n\\n\\\n        vec2 ellipsoidTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC);\\n\\\n        vec2 ellipsoidFlippedTextureCoordinates = czm_ellipsoidWgs84TextureCoordinates(normalMC.zyx);\\n\\\n\\n\\\n        vec2 textureCoordinates = mix(ellipsoidTextureCoordinates, ellipsoidFlippedTextureCoordinates, czm_morphTime * smoothstep(0.9, 0.95, normalMC.z));\\n\\\n\\n\\\n        color = computeWaterColor(v_positionEC, textureCoordinates, enuToEye, color, mask, fade);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.st = v_textureCoordinates.st;\\n\\\n    materialInput.normalEC = normalize(v_normalEC);\\n\\\n    materialInput.slope = v_slope;\\n\\\n    materialInput.height = v_height;\\n\\\n    materialInput.aspect = v_aspect;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n    color.xyz = mix(color.xyz, material.diffuse, material.alpha);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_VERTEX_LIGHTING\\n\\\n    float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalize(v_normalEC)) * 0.9 + 0.3, 0.0, 1.0);\\n\\\n    vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\\n\\\n#elif defined(ENABLE_DAYNIGHT_SHADING)\\n\\\n    float diffuseIntensity = clamp(czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * 5.0 + 0.3, 0.0, 1.0);\\n\\\n    diffuseIntensity = mix(1.0, diffuseIntensity, fade);\\n\\\n    vec4 finalColor = vec4(color.rgb * diffuseIntensity, color.a);\\n\\\n#else\\n\\\n    vec4 finalColor = color;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ENABLE_CLIPPING_PLANES\\n\\\n    vec4 clippingPlanesEdgeColor = vec4(1.0);\\n\\\n    clippingPlanesEdgeColor.rgb = u_clippingPlanesEdgeStyle.rgb;\\n\\\n    float clippingPlanesEdgeWidth = u_clippingPlanesEdgeStyle.a;\\n\\\n\\n\\\n    if (clipDistance < clippingPlanesEdgeWidth)\\n\\\n    {\\n\\\n        finalColor = clippingPlanesEdgeColor;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HIGHLIGHT_FILL_TILE\\n\\\n    finalColor = vec4(mix(finalColor.rgb, u_fillHighlightColor.rgb, u_fillHighlightColor.a), finalColor.a);\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\\n\\\n    vec3 fogColor = colorCorrect(v_fogMieColor) + finalColor.rgb * colorCorrect(v_fogRayleighColor);\\n\\\n#ifndef HDR\\n\\\n    const float fExposure = 2.0;\\n\\\n    fogColor = vec3(1.0) - exp(-fExposure * fogColor);\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FOG\\n\\\n#if defined(ENABLE_VERTEX_LIGHTING) || defined(ENABLE_DAYNIGHT_SHADING)\\n\\\n    float darken = clamp(dot(normalize(czm_viewerPositionWC), normalize(czm_sunPositionWC)), u_minimumBrightness, 1.0);\\n\\\n    fogColor *= darken;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HDR\\n\\\n    const float modifier = 0.15;\\n\\\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor, modifier), finalColor.a);\\n\\\n#else\\n\\\n    finalColor = vec4(czm_fog(v_distance, finalColor.rgb, fogColor), finalColor.a);\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n#ifdef GROUND_ATMOSPHERE\\n\\\n    if (czm_sceneMode != czm_sceneMode3D)\\n\\\n    {\\n\\\n        gl_FragColor = finalColor;\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n#if defined(PER_FRAGMENT_GROUND_ATMOSPHERE) && (defined(ENABLE_DAYNIGHT_SHADING) || defined(ENABLE_VERTEX_LIGHTING))\\n\\\n    float mpp = czm_metersPerPixel(vec4(0.0, 0.0, -czm_currentFrustum.x, 1.0));\\n\\\n    vec2 xy = gl_FragCoord.xy / czm_viewport.zw * 2.0 - vec2(1.0);\\n\\\n    xy *= czm_viewport.zw * mpp * 0.5;\\n\\\n\\n\\\n    vec3 direction = normalize(vec3(xy, -czm_currentFrustum.x));\\n\\\n    czm_ray ray = czm_ray(vec3(0.0), direction);\\n\\\n\\n\\\n    vec3 ellipsoid_center = czm_view[3].xyz;\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\\n\\\n\\n\\\n    vec3 ellipsoidPosition = czm_pointAlongRay(ray, intersection.start);\\n\\\n    ellipsoidPosition = (czm_inverseView * vec4(ellipsoidPosition, 1.0)).xyz;\\n\\\n    AtmosphereColor atmosColor = computeGroundAtmosphereFromSpace(ellipsoidPosition, true);\\n\\\n\\n\\\n    vec3 groundAtmosphereColor = colorCorrect(atmosColor.mie) + finalColor.rgb * colorCorrect(atmosColor.rayleigh);\\n\\\n#ifndef HDR\\n\\\n    groundAtmosphereColor = vec3(1.0) - exp(-fExposure * groundAtmosphereColor);\\n\\\n#endif\\n\\\n\\n\\\n    fadeInDist = u_nightFadeDistance.x;\\n\\\n    fadeOutDist = u_nightFadeDistance.y;\\n\\\n\\n\\\n    float sunlitAtmosphereIntensity = clamp((cameraDist - fadeOutDist) / (fadeInDist - fadeOutDist), 0.0, 1.0);\\n\\\n\\n\\\n#ifdef HDR\\n\\\n    // Some tweaking to make HDR look better\\n\\\n    sunlitAtmosphereIntensity = max(sunlitAtmosphereIntensity * sunlitAtmosphereIntensity, 0.03);\\n\\\n#endif\\n\\\n\\n\\\n    groundAtmosphereColor = mix(groundAtmosphereColor, fogColor, sunlitAtmosphereIntensity);\\n\\\n#else\\n\\\n    vec3 groundAtmosphereColor = fogColor;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef HDR\\n\\\n    // Some tweaking to make HDR look better\\n\\\n    groundAtmosphereColor = czm_saturation(groundAtmosphereColor, 1.6);\\n\\\n#endif\\n\\\n\\n\\\n    finalColor = vec4(mix(finalColor.rgb, groundAtmosphereColor, fade), finalColor.a);\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragColor = finalColor;\\n\\\n}\\n\\\n\\n\\\n#ifdef SHOW_REFLECTIVE_OCEAN\\n\\\n\\n\\\nfloat waveFade(float edge0, float edge1, float x)\\n\\\n{\\n\\\n    float y = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n\\\n    return pow(1.0 - y, 5.0);\\n\\\n}\\n\\\n\\n\\\nfloat linearFade(float edge0, float edge1, float x)\\n\\\n{\\n\\\n    return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\\n\\\n}\\n\\\n\\n\\\n// Based on water rendering by Jonas Wagner:\\n\\\n// http://29a.ch/2012/7/19/webgl-terrain-rendering-water-fog\\n\\\n\\n\\\n// low altitude wave settings\\n\\\nconst float oceanFrequencyLowAltitude = 825000.0;\\n\\\nconst float oceanAnimationSpeedLowAltitude = 0.004;\\n\\\nconst float oceanOneOverAmplitudeLowAltitude = 1.0 / 2.0;\\n\\\nconst float oceanSpecularIntensity = 0.5;\\n\\\n\\n\\\n// high altitude wave settings\\n\\\nconst float oceanFrequencyHighAltitude = 125000.0;\\n\\\nconst float oceanAnimationSpeedHighAltitude = 0.008;\\n\\\nconst float oceanOneOverAmplitudeHighAltitude = 1.0 / 2.0;\\n\\\n\\n\\\nvec4 computeWaterColor(vec3 positionEyeCoordinates, vec2 textureCoordinates, mat3 enuToEye, vec4 imageryColor, float maskValue, float fade)\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -positionEyeCoordinates;\\n\\\n    float positionToEyeECLength = length(positionToEyeEC);\\n\\\n\\n\\\n    // The double normalize below works around a bug in Firefox on Android devices.\\n\\\n    vec3 normalizedpositionToEyeEC = normalize(normalize(positionToEyeEC));\\n\\\n\\n\\\n    // Fade out the waves as the camera moves far from the surface.\\n\\\n    float waveIntensity = waveFade(70000.0, 1000000.0, positionToEyeECLength);\\n\\\n\\n\\\n#ifdef SHOW_OCEAN_WAVES\\n\\\n    // high altitude waves\\n\\\n    float time = czm_frameNumber * oceanAnimationSpeedHighAltitude;\\n\\\n    vec4 noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyHighAltitude, time, 0.0);\\n\\\n    vec3 normalTangentSpaceHighAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeHighAltitude);\\n\\\n\\n\\\n    // low altitude waves\\n\\\n    time = czm_frameNumber * oceanAnimationSpeedLowAltitude;\\n\\\n    noise = czm_getWaterNoise(u_oceanNormalMap, textureCoordinates * oceanFrequencyLowAltitude, time, 0.0);\\n\\\n    vec3 normalTangentSpaceLowAltitude = vec3(noise.xy, noise.z * oceanOneOverAmplitudeLowAltitude);\\n\\\n\\n\\\n    // blend the 2 wave layers based on distance to surface\\n\\\n    float highAltitudeFade = linearFade(0.0, 60000.0, positionToEyeECLength);\\n\\\n    float lowAltitudeFade = 1.0 - linearFade(20000.0, 60000.0, positionToEyeECLength);\\n\\\n    vec3 normalTangentSpace =\\n\\\n        (highAltitudeFade * normalTangentSpaceHighAltitude) +\\n\\\n        (lowAltitudeFade * normalTangentSpaceLowAltitude);\\n\\\n    normalTangentSpace = normalize(normalTangentSpace);\\n\\\n\\n\\\n    // fade out the normal perturbation as we move farther from the water surface\\n\\\n    normalTangentSpace.xy *= waveIntensity;\\n\\\n    normalTangentSpace = normalize(normalTangentSpace);\\n\\\n#else\\n\\\n    vec3 normalTangentSpace = vec3(0.0, 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    vec3 normalEC = enuToEye * normalTangentSpace;\\n\\\n\\n\\\n    const vec3 waveHighlightColor = vec3(0.3, 0.45, 0.6);\\n\\\n\\n\\\n    // Use diffuse light to highlight the waves\\n\\\n    float diffuseIntensity = czm_getLambertDiffuse(czm_sunDirectionEC, normalEC) * maskValue;\\n\\\n    vec3 diffuseHighlight = waveHighlightColor * diffuseIntensity * (1.0 - fade);\\n\\\n\\n\\\n#ifdef SHOW_OCEAN_WAVES\\n\\\n    // Where diffuse light is low or non-existent, use wave highlights based solely on\\n\\\n    // the wave bumpiness and no particular light direction.\\n\\\n    float tsPerturbationRatio = normalTangentSpace.z;\\n\\\n    vec3 nonDiffuseHighlight = mix(waveHighlightColor * 5.0 * (1.0 - tsPerturbationRatio), vec3(0.0), diffuseIntensity);\\n\\\n#else\\n\\\n    vec3 nonDiffuseHighlight = vec3(0.0);\\n\\\n#endif\\n\\\n\\n\\\n    // Add specular highlights in 3D, and in all modes when zoomed in.\\n\\\n    float specularIntensity = czm_getSpecular(czm_sunDirectionEC, normalizedpositionToEyeEC, normalEC, 10.0) + 0.25 * czm_getSpecular(czm_moonDirectionEC, normalizedpositionToEyeEC, normalEC, 10.0);\\n\\\n    float surfaceReflectance = mix(0.0, mix(u_zoomedOutOceanSpecularIntensity, oceanSpecularIntensity, waveIntensity), maskValue);\\n\\\n    float specular = specularIntensity * surfaceReflectance;\\n\\\n\\n\\\n#ifdef HDR\\n\\\n    specular *= 1.4;\\n\\\n\\n\\\n    float e = 0.2;\\n\\\n    float d = 3.3;\\n\\\n    float c = 1.7;\\n\\\n\\n\\\n    vec3 color = imageryColor.rgb + (c * (vec3(e) + imageryColor.rgb * d) * (diffuseHighlight + nonDiffuseHighlight + specular));\\n\\\n#else\\n\\\n    vec3 color = imageryColor.rgb + diffuseHighlight + nonDiffuseHighlight + specular;\\n\\\n#endif\\n\\\n\\n\\\n    return vec4(color, imageryColor.a);\\n\\\n}\\n\\\n\\n\\\n#endif // #ifdef SHOW_REFLECTIVE_OCEAN\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"#ifdef QUANTIZATION_BITS12\\n\\\nattribute vec4 compressed0;\\n\\\nattribute float compressed1;\\n\\\n#else\\n\\\nattribute vec4 position3DAndHeight;\\n\\\nattribute vec4 textureCoordAndEncodedNormals;\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_center3D;\\n\\\nuniform mat4 u_modifiedModelView;\\n\\\nuniform mat4 u_modifiedModelViewProjection;\\n\\\nuniform vec4 u_tileRectangle;\\n\\\n\\n\\\n// Uniforms for 2D Mercator projection\\n\\\nuniform vec2 u_southAndNorthLatitude;\\n\\\nuniform vec2 u_southMercatorYAndOneOverHeight;\\n\\\n\\n\\\nvarying vec3 v_positionMC;\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvarying vec3 v_textureCoordinates;\\n\\\nvarying vec3 v_normalMC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\nvarying float v_slope;\\n\\\nvarying float v_aspect;\\n\\\nvarying float v_height;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\\n\\\nvarying float v_distance;\\n\\\nvarying vec3 v_fogMieColor;\\n\\\nvarying vec3 v_fogRayleighColor;\\n\\\n#endif\\n\\\n\\n\\\n// These functions are generated at runtime.\\n\\\nvec4 getPosition(vec3 position, float height, vec2 textureCoordinates);\\n\\\nfloat get2DYPositionFraction(vec2 textureCoordinates);\\n\\\n\\n\\\nvec4 getPosition3DMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    return u_modifiedModelViewProjection * vec4(position, 1.0);\\n\\\n}\\n\\\n\\n\\\nfloat get2DMercatorYPositionFraction(vec2 textureCoordinates)\\n\\\n{\\n\\\n    // The width of a tile at level 11, in radians and assuming a single root tile, is\\n\\\n    //   2.0 * czm_pi / pow(2.0, 11.0)\\n\\\n    // We want to just linearly interpolate the 2D position from the texture coordinates\\n\\\n    // when we're at this level or higher.  The constant below is the expression\\n\\\n    // above evaluated and then rounded up at the 4th significant digit.\\n\\\n    const float maxTileWidth = 0.003068;\\n\\\n    float positionFraction = textureCoordinates.y;\\n\\\n    float southLatitude = u_southAndNorthLatitude.x;\\n\\\n    float northLatitude = u_southAndNorthLatitude.y;\\n\\\n    if (northLatitude - southLatitude > maxTileWidth)\\n\\\n    {\\n\\\n        float southMercatorY = u_southMercatorYAndOneOverHeight.x;\\n\\\n        float oneOverMercatorHeight = u_southMercatorYAndOneOverHeight.y;\\n\\\n\\n\\\n        float currentLatitude = mix(southLatitude, northLatitude, textureCoordinates.y);\\n\\\n        currentLatitude = clamp(currentLatitude, -czm_webMercatorMaxLatitude, czm_webMercatorMaxLatitude);\\n\\\n        positionFraction = czm_latitudeToWebMercatorFraction(currentLatitude, southMercatorY, oneOverMercatorHeight);\\n\\\n    }\\n\\\n    return positionFraction;\\n\\\n}\\n\\\n\\n\\\nfloat get2DGeographicYPositionFraction(vec2 textureCoordinates)\\n\\\n{\\n\\\n    return textureCoordinates.y;\\n\\\n}\\n\\\n\\n\\\nvec4 getPositionPlanarEarth(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    float yPositionFraction = get2DYPositionFraction(textureCoordinates);\\n\\\n    vec4 rtcPosition2D = vec4(height, mix(u_tileRectangle.st, u_tileRectangle.pq, vec2(textureCoordinates.x, yPositionFraction)), 1.0);\\n\\\n    return u_modifiedModelViewProjection * rtcPosition2D;\\n\\\n}\\n\\\n\\n\\\nvec4 getPosition2DMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    return getPositionPlanarEarth(position, 0.0, textureCoordinates);\\n\\\n}\\n\\\n\\n\\\nvec4 getPositionColumbusViewMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    return getPositionPlanarEarth(position, height, textureCoordinates);\\n\\\n}\\n\\\n\\n\\\nvec4 getPositionMorphingMode(vec3 position, float height, vec2 textureCoordinates)\\n\\\n{\\n\\\n    // We do not do RTC while morphing, so there is potential for jitter.\\n\\\n    // This is unlikely to be noticeable, though.\\n\\\n    vec3 position3DWC = position + u_center3D;\\n\\\n    float yPositionFraction = get2DYPositionFraction(textureCoordinates);\\n\\\n    vec4 position2DWC = vec4(height, mix(u_tileRectangle.st, u_tileRectangle.pq, vec2(textureCoordinates.x, yPositionFraction)), 1.0);\\n\\\n    vec4 morphPosition = czm_columbusViewMorph(position2DWC, vec4(position3DWC, 1.0), czm_morphTime);\\n\\\n    return czm_modelViewProjection * morphPosition;\\n\\\n}\\n\\\n\\n\\\n#ifdef QUANTIZATION_BITS12\\n\\\nuniform vec2 u_minMaxHeight;\\n\\\nuniform mat4 u_scaleAndBias;\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n#ifdef QUANTIZATION_BITS12\\n\\\n    vec2 xy = czm_decompressTextureCoordinates(compressed0.x);\\n\\\n    vec2 zh = czm_decompressTextureCoordinates(compressed0.y);\\n\\\n    vec3 position = vec3(xy, zh.x);\\n\\\n    float height = zh.y;\\n\\\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressed0.z);\\n\\\n\\n\\\n    height = height * (u_minMaxHeight.y - u_minMaxHeight.x) + u_minMaxHeight.x;\\n\\\n    position = (u_scaleAndBias * vec4(position, 1.0)).xyz;\\n\\\n\\n\\\n#if (defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL)) && defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = czm_decompressTextureCoordinates(compressed0.w).x;\\n\\\n    float encodedNormal = compressed1;\\n\\\n#elif defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = czm_decompressTextureCoordinates(compressed0.w).x;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#elif defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL)\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = compressed0.w;\\n\\\n#else\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n#else\\n\\\n    // A single float per element\\n\\\n    vec3 position = position3DAndHeight.xyz;\\n\\\n    float height = position3DAndHeight.w;\\n\\\n    vec2 textureCoordinates = textureCoordAndEncodedNormals.xy;\\n\\\n\\n\\\n#if (defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)) && defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = textureCoordAndEncodedNormals.z;\\n\\\n    float encodedNormal = textureCoordAndEncodedNormals.w;\\n\\\n#elif defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = textureCoordAndEncodedNormals.z;\\n\\\n#elif defined(INCLUDE_WEB_MERCATOR_Y)\\n\\\n    float webMercatorT = textureCoordAndEncodedNormals.z;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#else\\n\\\n    float webMercatorT = textureCoordinates.y;\\n\\\n    float encodedNormal = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n    vec3 position3DWC = position + u_center3D;\\n\\\n    gl_Position = getPosition(position, height, textureCoordinates);\\n\\\n\\n\\\n    v_textureCoordinates = vec3(textureCoordinates, webMercatorT);\\n\\\n\\n\\\n#if defined(ENABLE_VERTEX_LIGHTING) || defined(GENERATE_POSITION_AND_NORMAL) || defined(APPLY_MATERIAL)\\n\\\n    v_positionEC = (u_modifiedModelView * vec4(position, 1.0)).xyz;\\n\\\n    v_positionMC = position3DWC;  // position in model coordinates\\n\\\n    vec3 normalMC = czm_octDecode(encodedNormal);\\n\\\n    v_normalMC = normalMC;\\n\\\n    v_normalEC = czm_normal3D * v_normalMC;\\n\\\n#elif defined(SHOW_REFLECTIVE_OCEAN) || defined(ENABLE_DAYNIGHT_SHADING) || defined(GENERATE_POSITION) || defined(HDR)\\n\\\n    v_positionEC = (u_modifiedModelView * vec4(position, 1.0)).xyz;\\n\\\n    v_positionMC = position3DWC;  // position in model coordinates\\n\\\n#endif\\n\\\n\\n\\\n#if defined(FOG) || defined(GROUND_ATMOSPHERE)\\n\\\n    AtmosphereColor atmosFogColor = computeGroundAtmosphereFromSpace(position3DWC, false);\\n\\\n    v_fogMieColor = atmosFogColor.mie;\\n\\\n    v_fogRayleighColor = atmosFogColor.rayleigh;\\n\\\n    v_distance = length((czm_modelView3D * vec4(position3DWC, 1.0)).xyz);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef APPLY_MATERIAL\\n\\\n    float northPoleZ = czm_ellipsoidRadii.z;\\n\\\n    vec3 northPolePositionMC = vec3(0.0, 0.0, northPoleZ);\\n\\\n    vec3 ellipsoidNormal = normalize(v_positionMC); // For a sphere this is correct, but not generally for an ellipsoid.\\n\\\n    vec3 vectorEastMC = normalize(cross(northPolePositionMC - v_positionMC, ellipsoidNormal));\\n\\\n    float dotProd = abs(dot(ellipsoidNormal, v_normalMC));\\n\\\n    v_slope = acos(dotProd);\\n\\\n    vec3 normalRejected = ellipsoidNormal * dotProd;\\n\\\n    vec3 normalProjected = v_normalMC - normalRejected;\\n\\\n    vec3 aspectVector = normalize(normalProjected);\\n\\\n    v_aspect = acos(dot(aspectVector, vectorEastMC));\\n\\\n    float determ = dot(cross(vectorEastMC, aspectVector), ellipsoidNormal);\\n\\\n    v_aspect = czm_branchFreeTernary(determ < 0.0, 2.0 * czm_pi - v_aspect, v_aspect);\\n\\\n    v_height = height;\\n\\\n#endif\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"/*!\\n\\\n * Atmosphere code:\\n\\\n *\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Analytical Graphics, Inc.\\n\\\n */\\n\\\n\\n\\\n // Atmosphere:\\n\\\n //   Code:  http://sponeil.net/\\n\\\n //   GPU Gems 2 Article:  http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\nconst float fInnerRadius = 6378137.0;\\n\\\nconst float fOuterRadius = 6378137.0 * 1.025;\\n\\\nconst float fOuterRadius2 = fOuterRadius * fOuterRadius;\\n\\\n\\n\\\nconst float Kr = 0.0025;\\n\\\nconst float Km = 0.0015;\\n\\\nconst float ESun = 15.0;\\n\\\n\\n\\\nconst float fKrESun = Kr * ESun;\\n\\\nconst float fKmESun = Km * ESun;\\n\\\nconst float fKr4PI = Kr * 4.0 * czm_pi;\\n\\\nconst float fKm4PI = Km * 4.0 * czm_pi;\\n\\\n\\n\\\nconst float fScale = 1.0 / (fOuterRadius - fInnerRadius);\\n\\\nconst float fScaleDepth = 0.25;\\n\\\nconst float fScaleOverScaleDepth = fScale / fScaleDepth;\\n\\\n\\n\\\nstruct AtmosphereColor\\n\\\n{\\n\\\n    vec3 mie;\\n\\\n    vec3 rayleigh;\\n\\\n};\\n\\\n\\n\\\nconst int nSamples = 2;\\n\\\nconst float fSamples = 2.0;\\n\\\n\\n\\\nfloat scale(float fCos)\\n\\\n{\\n\\\n    float x = 1.0 - fCos;\\n\\\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\n\\\n}\\n\\\n\\n\\\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool useSunLighting)\\n\\\n{\\n\\\n\tvec3 v3InvWavelength = vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\\n\\\n\\n\\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\n\\\n    vec3 v3Ray = v3Pos - czm_viewerPositionWC;\\n\\\n    float fFar = length(v3Ray);\\n\\\n    v3Ray /= fFar;\\n\\\n\\n\\\n    float fCameraHeight = length(czm_viewerPositionWC);\\n\\\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\\n\\\n\\n\\\n    // This next line is an ANGLE workaround. It is equivalent to B = 2.0 * dot(czm_viewerPositionWC, v3Ray),\\n\\\n    // which is what it should be, but there are problems at the poles.\\n\\\n    float B = 2.0 * length(czm_viewerPositionWC) * dot(normalize(czm_viewerPositionWC), v3Ray);\\n\\\n    float C = fCameraHeight2 - fOuterRadius2;\\n\\\n    float fDet = max(0.0, B*B - 4.0 * C);\\n\\\n    float fNear = 0.5 * (-B - sqrt(fDet));\\n\\\n\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    vec3 v3Start = czm_viewerPositionWC + v3Ray * fNear;\\n\\\n    fFar -= fNear;\\n\\\n    float fDepth = exp((fInnerRadius - fOuterRadius) / fScaleDepth);\\n\\\n\\n\\\n    // The light angle based on the sun position would be:\\n\\\n    //    dot(czm_sunDirectionWC, v3Pos) / length(v3Pos);\\n\\\n    // When we want the atmosphere to be uniform over the globe so it is set to 1.0.\\n\\\n\\n\\\n    float fLightAngle = czm_branchFreeTernary(useSunLighting, dot(czm_sunDirectionWC, v3Pos) / length(v3Pos), 1.0);\\n\\\n    float fCameraAngle = dot(-v3Ray, v3Pos) / length(v3Pos);\\n\\\n    float fCameraScale = scale(fCameraAngle);\\n\\\n    float fLightScale = scale(fLightAngle);\\n\\\n    float fCameraOffset = fDepth*fCameraScale;\\n\\\n    float fTemp = (fLightScale + fCameraScale);\\n\\\n\\n\\\n    // Initialize the scattering loop variables\\n\\\n    float fSampleLength = fFar / fSamples;\\n\\\n    float fScaledLength = fSampleLength * fScale;\\n\\\n    vec3 v3SampleRay = v3Ray * fSampleLength;\\n\\\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\\n\\\n\\n\\\n    // Now loop through the sample rays\\n\\\n    vec3 v3FrontColor = vec3(0.0);\\n\\\n    vec3 v3Attenuate = vec3(0.0);\\n\\\n    for(int i=0; i<nSamples; i++)\\n\\\n    {\\n\\\n        float fHeight = length(v3SamplePoint);\\n\\\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\\n\\\n        float fScatter = fDepth*fTemp - fCameraOffset;\\n\\\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\\n\\\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\\n\\\n        v3SamplePoint += v3SampleRay;\\n\\\n    }\\n\\\n\\n\\\n    AtmosphereColor color;\\n\\\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\\n\\\n    color.rayleigh = v3Attenuate; // Calculate the attenuation factor for the ground\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\";\n});","define([\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/TerrainQuantization',\n        '../Renderer/ShaderProgram',\n        './getClippingFunction',\n        './SceneMode'\n    ], function(\n        defined,\n        destroyObject,\n        TerrainQuantization,\n        ShaderProgram,\n        getClippingFunction,\n        SceneMode) {\n    'use strict';\n\n    function GlobeSurfaceShader(numberOfDayTextures, flags, material, shaderProgram, clippingShaderState) {\n        this.numberOfDayTextures = numberOfDayTextures;\n        this.flags = flags;\n        this.material = material;\n        this.shaderProgram = shaderProgram;\n        this.clippingShaderState = clippingShaderState;\n    }\n\n    /**\n     * Manages the shaders used to shade the surface of a {@link Globe}.\n     *\n     * @alias GlobeSurfaceShaderSet\n     * @private\n     */\n    function GlobeSurfaceShaderSet() {\n        this.baseVertexShaderSource = undefined;\n        this.baseFragmentShaderSource = undefined;\n\n        this._shadersByTexturesFlags = [];\n\n        this.material = undefined;\n    }\n\n    function getPositionMode(sceneMode) {\n        var getPosition3DMode = 'vec4 getPosition(vec3 position, float height, vec2 textureCoordinates) { return getPosition3DMode(position, height, textureCoordinates); }';\n        var getPositionColumbusViewAnd2DMode = 'vec4 getPosition(vec3 position, float height, vec2 textureCoordinates) { return getPositionColumbusViewMode(position, height, textureCoordinates); }';\n        var getPositionMorphingMode = 'vec4 getPosition(vec3 position, float height, vec2 textureCoordinates) { return getPositionMorphingMode(position, height, textureCoordinates); }';\n\n        var positionMode;\n\n        switch (sceneMode) {\n        case SceneMode.SCENE3D:\n            positionMode = getPosition3DMode;\n            break;\n        case SceneMode.SCENE2D:\n        case SceneMode.COLUMBUS_VIEW:\n            positionMode = getPositionColumbusViewAnd2DMode;\n            break;\n        case SceneMode.MORPHING:\n            positionMode = getPositionMorphingMode;\n            break;\n        }\n\n        return positionMode;\n    }\n\n    function get2DYPositionFraction(useWebMercatorProjection) {\n        var get2DYPositionFractionGeographicProjection = 'float get2DYPositionFraction(vec2 textureCoordinates) { return get2DGeographicYPositionFraction(textureCoordinates); }';\n        var get2DYPositionFractionMercatorProjection = 'float get2DYPositionFraction(vec2 textureCoordinates) { return get2DMercatorYPositionFraction(textureCoordinates); }';\n        return useWebMercatorProjection ? get2DYPositionFractionMercatorProjection : get2DYPositionFractionGeographicProjection;\n    }\n\n    GlobeSurfaceShaderSet.prototype.getShaderProgram = function(options) {\n        var frameState = options.frameState;\n        var surfaceTile = options.surfaceTile;\n        var numberOfDayTextures = options.numberOfDayTextures;\n        var applyBrightness = options.applyBrightness;\n        var applyContrast = options.applyContrast;\n        var applyHue = options.applyHue;\n        var applySaturation = options.applySaturation;\n        var applyGamma = options.applyGamma;\n        var applyAlpha = options.applyAlpha;\n        var applySplit = options.applySplit;\n        var showReflectiveOcean = options.showReflectiveOcean;\n        var showOceanWaves = options.showOceanWaves;\n        var enableLighting = options.enableLighting;\n        var showGroundAtmosphere = options.showGroundAtmosphere;\n        var perFragmentGroundAtmosphere = options.perFragmentGroundAtmosphere;\n        var hasVertexNormals = options.hasVertexNormals;\n        var useWebMercatorProjection = options.useWebMercatorProjection;\n        var enableFog = options.enableFog;\n        var enableClippingPlanes = options.enableClippingPlanes;\n        var clippingPlanes = options.clippingPlanes;\n        var clippedByBoundaries = options.clippedByBoundaries;\n        var splitTerrain = options.splitTerrain;\n        var hasImageryLayerCutout = options.hasImageryLayerCutout;\n        var colorCorrect = options.colorCorrect;\n        var highlightFillTile = options.highlightFillTile;\n        var colorToAlpha = options.colorToAlpha;\n\n        var quantization = 0;\n        var quantizationDefine = '';\n\n        var mesh = surfaceTile.renderedMesh;\n        var terrainEncoding = mesh.encoding;\n        var quantizationMode = terrainEncoding.quantization;\n        if (quantizationMode === TerrainQuantization.BITS12) {\n            quantization = 1;\n            quantizationDefine = 'QUANTIZATION_BITS12';\n        }\n\n        var vertexLogDepth = 0;\n        var vertexLogDepthDefine = '';\n        if (!defined(surfaceTile.vertexArray) || !defined(surfaceTile.terrainData) || surfaceTile.terrainData._createdByUpsampling) {\n            vertexLogDepth = 1;\n            vertexLogDepthDefine = 'DISABLE_GL_POSITION_LOG_DEPTH';\n        }\n\n        var cartographicLimitRectangleFlag = 0;\n        var cartographicLimitRectangleDefine = '';\n        if (clippedByBoundaries) {\n            cartographicLimitRectangleFlag = 1;\n            cartographicLimitRectangleDefine = 'TILE_LIMIT_RECTANGLE';\n        }\n\n        var imageryCutoutFlag = 0;\n        var imageryCutoutDefine = '';\n        if (hasImageryLayerCutout) {\n            imageryCutoutFlag = 1;\n            imageryCutoutDefine = 'APPLY_IMAGERY_CUTOUT';\n        }\n\n        var sceneMode = frameState.mode;\n        var flags = sceneMode |\n                    (applyBrightness << 2) |\n                    (applyContrast << 3) |\n                    (applyHue << 4) |\n                    (applySaturation << 5) |\n                    (applyGamma << 6) |\n                    (applyAlpha << 7) |\n                    (showReflectiveOcean << 8) |\n                    (showOceanWaves << 9) |\n                    (enableLighting << 10) |\n                    (showGroundAtmosphere << 11) |\n                    (perFragmentGroundAtmosphere << 12) |\n                    (hasVertexNormals << 13) |\n                    (useWebMercatorProjection << 14) |\n                    (enableFog << 15) |\n                    (quantization << 16) |\n                    (applySplit << 17) |\n                    (enableClippingPlanes << 18) |\n                    (vertexLogDepth << 19) |\n                    (cartographicLimitRectangleFlag << 20) |\n                    (imageryCutoutFlag << 21) |\n                    (colorCorrect << 22) |\n                    (highlightFillTile << 23) |\n                    (colorToAlpha << 24) |\n                    (splitTerrain << 25);\n\n        var currentClippingShaderState = 0;\n        if (defined(clippingPlanes) && clippingPlanes.length > 0) {\n            currentClippingShaderState = enableClippingPlanes ? clippingPlanes.clippingPlanesState : 0;\n        }\n        var surfaceShader = surfaceTile.surfaceShader;\n        if (defined(surfaceShader) &&\n            surfaceShader.numberOfDayTextures === numberOfDayTextures &&\n            surfaceShader.flags === flags &&\n            surfaceShader.material === this.material &&\n            surfaceShader.clippingShaderState === currentClippingShaderState) {\n\n            return surfaceShader.shaderProgram;\n        }\n\n        // New tile, or tile changed number of textures, flags, or clipping planes\n        var shadersByFlags = this._shadersByTexturesFlags[numberOfDayTextures];\n        if (!defined(shadersByFlags)) {\n            shadersByFlags = this._shadersByTexturesFlags[numberOfDayTextures] = [];\n        }\n\n        surfaceShader = shadersByFlags[flags];\n        if (!defined(surfaceShader) || surfaceShader.material !== this.material || surfaceShader.clippingShaderState !== currentClippingShaderState) {\n            // Cache miss - we've never seen this combination of numberOfDayTextures and flags before.\n            var vs = this.baseVertexShaderSource.clone();\n            var fs = this.baseFragmentShaderSource.clone();\n\n            if (currentClippingShaderState !== 0) {\n                fs.sources.unshift(getClippingFunction(clippingPlanes, frameState.context)); // Need to go before GlobeFS\n            }\n\n            vs.defines.push(quantizationDefine, vertexLogDepthDefine);\n            fs.defines.push('TEXTURE_UNITS ' + numberOfDayTextures, cartographicLimitRectangleDefine, imageryCutoutDefine);\n\n            if (applyBrightness) {\n                fs.defines.push('APPLY_BRIGHTNESS');\n            }\n            if (applyContrast) {\n                fs.defines.push('APPLY_CONTRAST');\n            }\n            if (applyHue) {\n                fs.defines.push('APPLY_HUE');\n            }\n            if (applySaturation) {\n                fs.defines.push('APPLY_SATURATION');\n            }\n            if (applyGamma) {\n                fs.defines.push('APPLY_GAMMA');\n            }\n            if (applyAlpha) {\n                fs.defines.push('APPLY_ALPHA');\n            }\n            if (showReflectiveOcean) {\n                fs.defines.push('SHOW_REFLECTIVE_OCEAN');\n                vs.defines.push('SHOW_REFLECTIVE_OCEAN');\n            }\n            if (showOceanWaves) {\n                fs.defines.push('SHOW_OCEAN_WAVES');\n            }\n            if (colorToAlpha) {\n                fs.defines.push('APPLY_COLOR_TO_ALPHA');\n            }\n\n            if (enableLighting) {\n                if (hasVertexNormals) {\n                    vs.defines.push('ENABLE_VERTEX_LIGHTING');\n                    fs.defines.push('ENABLE_VERTEX_LIGHTING');\n                } else {\n                    vs.defines.push('ENABLE_DAYNIGHT_SHADING');\n                    fs.defines.push('ENABLE_DAYNIGHT_SHADING');\n                }\n            }\n\n            if (showGroundAtmosphere) {\n                vs.defines.push('GROUND_ATMOSPHERE');\n                fs.defines.push('GROUND_ATMOSPHERE');\n                if (perFragmentGroundAtmosphere) {\n                    fs.defines.push('PER_FRAGMENT_GROUND_ATMOSPHERE');\n                }\n            }\n\n            vs.defines.push('INCLUDE_WEB_MERCATOR_Y');\n            fs.defines.push('INCLUDE_WEB_MERCATOR_Y');\n\n            if (enableFog) {\n                vs.defines.push('FOG');\n                fs.defines.push('FOG');\n            }\n\n            if (applySplit) {\n                fs.defines.push('APPLY_SPLIT');\n            }\n\n            if (enableClippingPlanes) {\n                fs.defines.push('ENABLE_CLIPPING_PLANES');\n            }\n\n            if (splitTerrain) {\n                fs.defines.push('SPLIT_TERRAIN');\n            }\n\n            if (colorCorrect) {\n                fs.defines.push('COLOR_CORRECT');\n            }\n\n            if (highlightFillTile) {\n                fs.defines.push('HIGHLIGHT_FILL_TILE');\n            }\n\n            var computeDayColor = '\\\n    vec4 computeDayColor(vec4 initialColor, vec3 textureCoordinates)\\n\\\n    {\\n\\\n        vec4 color = initialColor;\\n';\n\n        if (hasImageryLayerCutout) {\n            computeDayColor += '\\\n        vec4 cutoutAndColorResult;\\n\\\n        bool texelUnclipped;\\n';\n        }\n\n            for (var i = 0; i < numberOfDayTextures; ++i) {\n                if (hasImageryLayerCutout) {\n                    computeDayColor += '\\\n        cutoutAndColorResult = u_dayTextureCutoutRectangles[' + i + '];\\n\\\n        texelUnclipped = v_textureCoordinates.x < cutoutAndColorResult.x || cutoutAndColorResult.z < v_textureCoordinates.x || v_textureCoordinates.y < cutoutAndColorResult.y || cutoutAndColorResult.w < v_textureCoordinates.y;\\n\\\n        cutoutAndColorResult = sampleAndBlend(\\n';\n                } else {\n                    computeDayColor += '\\\n        color = sampleAndBlend(\\n';\n                }\n        computeDayColor += '\\\n            color,\\n\\\n            u_dayTextures[' + i + '],\\n\\\n            u_dayTextureUseWebMercatorT[' + i + '] ? textureCoordinates.xz : textureCoordinates.xy,\\n\\\n            u_dayTextureTexCoordsRectangle[' + i + '],\\n\\\n            u_dayTextureTranslationAndScale[' + i + '],\\n\\\n            ' + (applyAlpha ? 'u_dayTextureAlpha[' + i + ']' : '1.0') + ',\\n\\\n            ' + (applyBrightness ? 'u_dayTextureBrightness[' + i + ']' : '0.0') + ',\\n\\\n            ' + (applyContrast ? 'u_dayTextureContrast[' + i + ']' : '0.0') + ',\\n\\\n            ' + (applyHue ? 'u_dayTextureHue[' + i + ']' : '0.0') + ',\\n\\\n            ' + (applySaturation ? 'u_dayTextureSaturation[' + i + ']' : '0.0') + ',\\n\\\n            ' + (applyGamma ? 'u_dayTextureOneOverGamma[' + i + ']' : '0.0') + ',\\n\\\n            ' + (applySplit ? 'u_dayTextureSplit[' + i + ']' : '0.0') + ',\\n\\\n            ' + (colorToAlpha ? 'u_colorsToAlpha[' + i + ']' : 'vec4(0.0)') + '\\n\\\n        );\\n';\n                if (hasImageryLayerCutout) {\n                    computeDayColor += '\\\n        color = czm_branchFreeTernary(texelUnclipped, cutoutAndColorResult, color);\\n';\n                }\n            }\n\n            computeDayColor += '\\\n        return color;\\n\\\n    }';\n\n            fs.sources.push(computeDayColor);\n\n            vs.sources.push(getPositionMode(sceneMode));\n            vs.sources.push(get2DYPositionFraction(useWebMercatorProjection));\n\n            var shader = ShaderProgram.fromCache({\n                context : frameState.context,\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs,\n                attributeLocations : terrainEncoding.getAttributeLocations()\n            });\n\n            surfaceShader = shadersByFlags[flags] = new GlobeSurfaceShader(numberOfDayTextures, flags, this.material, shader, currentClippingShaderState);\n        }\n\n        surfaceTile.surfaceShader = surfaceShader;\n        return surfaceShader.shaderProgram;\n    };\n\n    GlobeSurfaceShaderSet.prototype.destroy = function() {\n        var flags;\n        var shader;\n\n        var shadersByTexturesFlags = this._shadersByTexturesFlags;\n        for (var textureCount in shadersByTexturesFlags) {\n            if (shadersByTexturesFlags.hasOwnProperty(textureCount)) {\n                var shadersByFlags = shadersByTexturesFlags[textureCount];\n                if (!defined(shadersByFlags)) {\n                    continue;\n                }\n\n                for (flags in shadersByFlags) {\n                    if (shadersByFlags.hasOwnProperty(flags)) {\n                        shader = shadersByFlags[flags];\n                        if (defined(shader)) {\n                            shader.shaderProgram.destroy();\n                        }\n                    }\n                }\n            }\n        }\n\n        return destroyObject(this);\n    };\n\n    return GlobeSurfaceShaderSet;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/BoxOutlineGeometry',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/Cartographic',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/combine',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Event',\n        '../Core/GeometryInstance',\n        '../Core/GeometryPipeline',\n        '../Core/IndexDatatype',\n        '../Core/Intersect',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/OrientedBoundingBox',\n        '../Core/OrthographicFrustum',\n        '../Core/PrimitiveType',\n        '../Core/Rectangle',\n        '../Core/SphereOutlineGeometry',\n        '../Core/TerrainMesh',\n        '../Core/TerrainQuantization',\n        '../Core/Visibility',\n        '../Core/WebMercatorProjection',\n        '../Renderer/Buffer',\n        '../Renderer/BufferUsage',\n        '../Renderer/ContextLimits',\n        '../Renderer/DrawCommand',\n        '../Renderer/Pass',\n        '../Renderer/RenderState',\n        '../Renderer/VertexArray',\n        './BlendingState',\n        './ImageryState',\n        './TileBoundingRegion',\n        './TileSelectionResult',\n        './ClippingPlaneCollection',\n        './DepthFunction',\n        './GlobeSurfaceTile',\n        './ImagerySplitDirection',\n        './ImageryLayer',\n        './PerInstanceColorAppearance',\n        './Primitive',\n        './QuadtreeTileLoadState',\n        './SceneMode',\n        './ShadowMode',\n        './TerrainFillMesh',\n        './TerrainState'\n    ], function(\n        BoundingSphere,\n        BoxOutlineGeometry,\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        Color,\n        ColorGeometryInstanceAttribute,\n        combine,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        Event,\n        GeometryInstance,\n        GeometryPipeline,\n        IndexDatatype,\n        Intersect,\n        CesiumMath,\n        Matrix4,\n        OrientedBoundingBox,\n        OrthographicFrustum,\n        PrimitiveType,\n        Rectangle,\n        SphereOutlineGeometry,\n        TerrainMesh,\n        TerrainQuantization,\n        Visibility,\n        WebMercatorProjection,\n        Buffer,\n        BufferUsage,\n        ContextLimits,\n        DrawCommand,\n        Pass,\n        RenderState,\n        VertexArray,\n        BlendingState,\n        ImageryState,\n        TileBoundingRegion,\n        TileSelectionResult,\n        ClippingPlaneCollection,\n        DepthFunction,\n        GlobeSurfaceTile,\n        ImagerySplitDirection,\n        ImageryLayer,\n        PerInstanceColorAppearance,\n        Primitive,\n        QuadtreeTileLoadState,\n        SceneMode,\n        ShadowMode,\n        TerrainFillMesh,\n        TerrainState) {\n    'use strict';\n\n    /**\n     * Provides quadtree tiles representing the surface of the globe.  This type is intended to be used\n     * with {@link QuadtreePrimitive}.\n     *\n     * @alias GlobeSurfaceTileProvider\n     * @constructor\n     *\n     * @param {TerrainProvider} options.terrainProvider The terrain provider that describes the surface geometry.\n     * @param {ImageryLayerCollection} option.imageryLayers The collection of imagery layers describing the shading of the surface.\n     * @param {GlobeSurfaceShaderSet} options.surfaceShaderSet The set of shaders used to render the surface.\n     *\n     * @private\n     */\n    function GlobeSurfaceTileProvider(options) {\n        \n\n        this.lightingFadeOutDistance = 6500000.0;\n        this.lightingFadeInDistance = 9000000.0;\n        this.hasWaterMask = false;\n        this.oceanNormalMap = undefined;\n        this.zoomedOutOceanSpecularIntensity = 0.5;\n        this.enableLighting = false;\n        this.showGroundAtmosphere = false;\n        this.shadows = ShadowMode.RECEIVE_ONLY;\n        this.splitDirection = ImagerySplitDirection.NONE;\n\n        /**\n         * The color to use to highlight terrain fill tiles. If undefined, fill tiles are not\n         * highlighted at all. The alpha value is used to alpha blend with the tile's\n         * actual color. Because terrain fill tiles do not represent the actual terrain surface,\n         * it may be useful in some applications to indicate visually that they are not to be trusted.\n         * @type {Color}\n         * @default undefined\n         */\n        this.fillHighlightColor = undefined;\n\n        this.hueShift = 0.0;\n        this.saturationShift = 0.0;\n        this.brightnessShift = 0.0;\n\n        this._quadtree = undefined;\n        this._terrainProvider = options.terrainProvider;\n        this._imageryLayers = options.imageryLayers;\n        this._surfaceShaderSet = options.surfaceShaderSet;\n\n        this._renderState = undefined;\n        this._blendRenderState = undefined;\n\n        this._errorEvent = new Event();\n\n        this._imageryLayers.layerAdded.addEventListener(GlobeSurfaceTileProvider.prototype._onLayerAdded, this);\n        this._imageryLayers.layerRemoved.addEventListener(GlobeSurfaceTileProvider.prototype._onLayerRemoved, this);\n        this._imageryLayers.layerMoved.addEventListener(GlobeSurfaceTileProvider.prototype._onLayerMoved, this);\n        this._imageryLayers.layerShownOrHidden.addEventListener(GlobeSurfaceTileProvider.prototype._onLayerShownOrHidden, this);\n        this._imageryLayersUpdatedEvent = new Event();\n\n        this._layerOrderChanged = false;\n\n        this._tilesToRenderByTextureCount = [];\n        this._drawCommands = [];\n        this._uniformMaps = [];\n        this._usedDrawCommands = 0;\n\n        this._vertexArraysToDestroy = [];\n\n        this._debug = {\n            wireframe : false,\n            boundingSphereTile : undefined\n        };\n\n        this._baseColor = undefined;\n        this._firstPassInitialColor = undefined;\n        this.baseColor = new Color(0.0, 0.0, 0.5, 1.0);\n\n        /**\n         * A property specifying a {@link ClippingPlaneCollection} used to selectively disable rendering on the outside of each plane.\n         * @type {ClippingPlaneCollection}\n         * @private\n         */\n        this._clippingPlanes = undefined;\n\n        /**\n         * A property specifying a {@link Rectangle} used to selectively limit terrain and imagery rendering.\n         * @type {Rectangle}\n         */\n        this.cartographicLimitRectangle = Rectangle.clone(Rectangle.MAX_VALUE);\n\n        this._hasLoadedTilesThisFrame = false;\n        this._hasFillTilesThisFrame = false;\n    }\n\n    defineProperties(GlobeSurfaceTileProvider.prototype, {\n        /**\n         * Gets or sets the color of the globe when no imagery is available.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {Color}\n         */\n        baseColor : {\n            get : function() {\n                return this._baseColor;\n            },\n            set : function(value) {\n                \n\n                this._baseColor = value;\n                this._firstPassInitialColor = Cartesian4.fromColor(value, this._firstPassInitialColor);\n            }\n        },\n        /**\n         * Gets or sets the {@link QuadtreePrimitive} for which this provider is\n         * providing tiles.  This property may be undefined if the provider is not yet associated\n         * with a {@link QuadtreePrimitive}.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {QuadtreePrimitive}\n         */\n        quadtree : {\n            get : function() {\n                return this._quadtree;\n            },\n            set : function(value) {\n                \n\n                this._quadtree = value;\n            }\n        },\n\n        /**\n         * Gets a value indicating whether or not the provider is ready for use.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {Boolean}\n         */\n        ready : {\n            get : function() {\n                return this._terrainProvider.ready && (this._imageryLayers.length === 0 || this._imageryLayers.get(0).imageryProvider.ready);\n            }\n        },\n\n        /**\n         * Gets the tiling scheme used by the provider.  This property should\n         * not be accessed before {@link GlobeSurfaceTileProvider#ready} returns true.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {TilingScheme}\n         */\n        tilingScheme : {\n            get : function() {\n                return this._terrainProvider.tilingScheme;\n            }\n        },\n\n        /**\n         * Gets an event that is raised when the geometry provider encounters an asynchronous error.  By subscribing\n         * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\n         * are passed an instance of {@link TileProviderError}.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {Event}\n         */\n        errorEvent : {\n            get : function() {\n                return this._errorEvent;\n            }\n        },\n\n        /**\n         * Gets an event that is raised when an imagery layer is added, shown, hidden, moved, or removed.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {Event}\n         */\n        imageryLayersUpdatedEvent : {\n            get : function() {\n                return this._imageryLayersUpdatedEvent;\n            }\n        },\n\n        /**\n         * Gets or sets the terrain provider that describes the surface geometry.\n         * @memberof GlobeSurfaceTileProvider.prototype\n         * @type {TerrainProvider}\n         */\n        terrainProvider : {\n            get : function() {\n                return this._terrainProvider;\n            },\n            set : function(terrainProvider) {\n                if (this._terrainProvider === terrainProvider) {\n                    return;\n                }\n\n                \n\n                this._terrainProvider = terrainProvider;\n\n                if (defined(this._quadtree)) {\n                    this._quadtree.invalidateAllTiles();\n                }\n            }\n        },\n        /**\n         * The {@link ClippingPlaneCollection} used to selectively disable rendering the tileset.\n         *\n         * @type {ClippingPlaneCollection}\n         *\n         * @private\n         */\n        clippingPlanes : {\n            get : function() {\n                return this._clippingPlanes;\n            },\n            set : function(value) {\n                ClippingPlaneCollection.setOwner(value, this, '_clippingPlanes');\n            }\n        }\n    });\n\n    function sortTileImageryByLayerIndex(a, b) {\n        var aImagery = a.loadingImagery;\n        if (!defined(aImagery)) {\n            aImagery = a.readyImagery;\n        }\n\n        var bImagery = b.loadingImagery;\n        if (!defined(bImagery)) {\n            bImagery = b.readyImagery;\n        }\n\n        return aImagery.imageryLayer._layerIndex - bImagery.imageryLayer._layerIndex;\n    }\n\n     /**\n     * Make updates to the tile provider that are not involved in rendering. Called before the render update cycle.\n     */\n    GlobeSurfaceTileProvider.prototype.update = function(frameState) {\n        // update collection: imagery indices, base layers, raise layer show/hide event\n        this._imageryLayers._update();\n    };\n\n    function updateCredits(surface, frameState) {\n        var creditDisplay = frameState.creditDisplay;\n        if (surface._terrainProvider.ready && defined(surface._terrainProvider.credit)) {\n            creditDisplay.addCredit(surface._terrainProvider.credit);\n        }\n\n        var imageryLayers = surface._imageryLayers;\n        for (var i = 0, len = imageryLayers.length; i < len; ++i) {\n            var imageryProvider = imageryLayers.get(i).imageryProvider;\n            if (imageryProvider.ready && defined(imageryProvider.credit)) {\n                creditDisplay.addCredit(imageryProvider.credit);\n            }\n        }\n    }\n\n    /**\n     * Called at the beginning of each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n     * @param {FrameState} frameState The frame state.\n     */\n    GlobeSurfaceTileProvider.prototype.initialize = function(frameState) {\n        // update each layer for texture reprojection.\n        this._imageryLayers.queueReprojectionCommands(frameState);\n\n        if (this._layerOrderChanged) {\n            this._layerOrderChanged = false;\n\n            // Sort the TileImagery instances in each tile by the layer index.\n            this._quadtree.forEachLoadedTile(function(tile) {\n                tile.data.imagery.sort(sortTileImageryByLayerIndex);\n            });\n        }\n\n        // Add credits for terrain and imagery providers.\n        updateCredits(this, frameState);\n\n        var vertexArraysToDestroy = this._vertexArraysToDestroy;\n        var length = vertexArraysToDestroy.length;\n        for (var j = 0; j < length; ++j) {\n            GlobeSurfaceTile._freeVertexArray(vertexArraysToDestroy[j]);\n        }\n        vertexArraysToDestroy.length = 0;\n    };\n\n    /**\n     * Called at the beginning of the update cycle for each render frame, before {@link QuadtreeTileProvider#showTileThisFrame}\n     * or any other functions.\n     *\n     * @param {FrameState} frameState The frame state.\n     */\n    GlobeSurfaceTileProvider.prototype.beginUpdate = function(frameState) {\n        var tilesToRenderByTextureCount = this._tilesToRenderByTextureCount;\n        for (var i = 0, len = tilesToRenderByTextureCount.length; i < len; ++i) {\n            var tiles = tilesToRenderByTextureCount[i];\n            if (defined(tiles)) {\n                tiles.length = 0;\n            }\n        }\n        // update clipping planes\n        var clippingPlanes = this._clippingPlanes;\n        if (defined(clippingPlanes) && clippingPlanes.enabled) {\n            clippingPlanes.update(frameState);\n        }\n        this._usedDrawCommands = 0;\n\n        this._hasLoadedTilesThisFrame = false;\n        this._hasFillTilesThisFrame = false;\n    };\n\n    /**\n     * Called at the end of the update cycle for each render frame, after {@link QuadtreeTileProvider#showTileThisFrame}\n     * and any other functions.\n     *\n     * @param {FrameState} frameState The frame state.\n     */\n    GlobeSurfaceTileProvider.prototype.endUpdate = function(frameState) {\n        if (!defined(this._renderState)) {\n            this._renderState = RenderState.fromCache({ // Write color and depth\n                cull : {\n                    enabled : true\n                },\n                depthTest : {\n                    enabled : true,\n                    func : DepthFunction.LESS\n                }\n            });\n\n            this._blendRenderState = RenderState.fromCache({ // Write color and depth\n                cull : {\n                    enabled : true\n                },\n                depthTest : {\n                    enabled : true,\n                    func : DepthFunction.LESS_OR_EQUAL\n                },\n                blending : BlendingState.ALPHA_BLEND\n            });\n        }\n\n        // If this frame has a mix of loaded and fill tiles, we need to propagate\n        // loaded heights to the fill tiles.\n        if (this._hasFillTilesThisFrame && this._hasLoadedTilesThisFrame) {\n            TerrainFillMesh.updateFillTiles(this, this._quadtree._tilesToRender, frameState, this._vertexArraysToDestroy);\n        }\n\n        // Add the tile render commands to the command list, sorted by texture count.\n        var tilesToRenderByTextureCount = this._tilesToRenderByTextureCount;\n        for (var textureCountIndex = 0, textureCountLength = tilesToRenderByTextureCount.length; textureCountIndex < textureCountLength; ++textureCountIndex) {\n            var tilesToRender = tilesToRenderByTextureCount[textureCountIndex];\n            if (!defined(tilesToRender)) {\n                continue;\n            }\n\n            for (var tileIndex = 0, tileLength = tilesToRender.length; tileIndex < tileLength; ++tileIndex) {\n                addDrawCommandsForTile(this, tilesToRender[tileIndex], frameState);\n            }\n        }\n    };\n\n    /**\n     * Adds draw commands for tiles rendered in the previous frame for a pick pass.\n     *\n     * @param {FrameState} frameState The frame state.\n     */\n    GlobeSurfaceTileProvider.prototype.updateForPick = function(frameState) {\n        // Add the tile pick commands from the tiles drawn last frame.\n        var drawCommands = this._drawCommands;\n        for (var i = 0, length = this._usedDrawCommands; i < length; ++i) {\n            frameState.commandList.push(drawCommands[i]);\n        }\n    };\n\n    /**\n     * Cancels any imagery re-projections in the queue.\n     */\n    GlobeSurfaceTileProvider.prototype.cancelReprojections = function() {\n        this._imageryLayers.cancelReprojections();\n    };\n\n    /**\n     * Gets the maximum geometric error allowed in a tile at a given level, in meters.  This function should not be\n     * called before {@link GlobeSurfaceTileProvider#ready} returns true.\n     *\n     * @param {Number} level The tile level for which to get the maximum geometric error.\n     * @returns {Number} The maximum geometric error in meters.\n     */\n    GlobeSurfaceTileProvider.prototype.getLevelMaximumGeometricError = function(level) {\n        return this._terrainProvider.getLevelMaximumGeometricError(level);\n    };\n\n    /**\n     * Loads, or continues loading, a given tile.  This function will continue to be called\n     * until {@link QuadtreeTile#state} is no longer {@link QuadtreeTileLoadState#LOADING}.  This function should\n     * not be called before {@link GlobeSurfaceTileProvider#ready} returns true.\n     *\n     * @param {FrameState} frameState The frame state.\n     * @param {QuadtreeTile} tile The tile to load.\n     *\n     * @exception {DeveloperError} <code>loadTile</code> must not be called before the tile provider is ready.\n     */\n    GlobeSurfaceTileProvider.prototype.loadTile = function(frameState, tile) {\n        // We don't want to load imagery until we're certain that the terrain tiles are actually visible.\n        // So if our bounding volume isn't accurate because it came from another tile, load terrain only\n        // initially. If we load some terrain and suddenly have a more accurate bounding volume and the\n        // tile is _still_ visible, give the tile a chance to load imagery immediately rather than\n        // waiting for next frame.\n\n        var surfaceTile = tile.data;\n        var terrainOnly = true;\n        var terrainStateBefore;\n        if (defined(surfaceTile)) {\n            terrainOnly = surfaceTile.boundingVolumeSourceTile !== tile || tile._lastSelectionResult === TileSelectionResult.CULLED_BUT_NEEDED;\n            terrainStateBefore = surfaceTile.terrainState;\n        }\n\n        GlobeSurfaceTile.processStateMachine(tile, frameState, this.terrainProvider, this._imageryLayers, this._vertexArraysToDestroy, terrainOnly);\n\n        surfaceTile = tile.data;\n        if (terrainOnly && terrainStateBefore !== tile.data.terrainState) {\n            // Terrain state changed. If:\n            // a) The tile is visible, and\n            // b) The bounding volume is accurate (updated as a side effect of computing visibility)\n            // Then we'll load imagery, too.\n            if (this.computeTileVisibility(tile, frameState, this.quadtree.occluders) && surfaceTile.boundingVolumeSourceTile === tile) {\n                terrainOnly = false;\n                GlobeSurfaceTile.processStateMachine(tile, frameState, this.terrainProvider, this._imageryLayers, this._vertexArraysToDestroy, terrainOnly);\n            }\n        }\n    };\n\n    var boundingSphereScratch = new BoundingSphere();\n    var rectangleIntersectionScratch = new Rectangle();\n    var splitCartographicLimitRectangleScratch = new Rectangle();\n    var rectangleCenterScratch = new Cartographic();\n\n    // cartographicLimitRectangle may span the IDL, but tiles never will.\n    function clipRectangleAntimeridian(tileRectangle, cartographicLimitRectangle) {\n        if (cartographicLimitRectangle.west < cartographicLimitRectangle.east) {\n            return cartographicLimitRectangle;\n        }\n        var splitRectangle = Rectangle.clone(cartographicLimitRectangle, splitCartographicLimitRectangleScratch);\n        var tileCenter = Rectangle.center(tileRectangle, rectangleCenterScratch);\n        if (tileCenter.longitude > 0.0) {\n            splitRectangle.east = CesiumMath.PI;\n        } else {\n            splitRectangle.west = -CesiumMath.PI;\n        }\n        return splitRectangle;\n    }\n\n    /**\n     * Determines the visibility of a given tile.  The tile may be fully visible, partially visible, or not\n     * visible at all.  Tiles that are renderable and are at least partially visible will be shown by a call\n     * to {@link GlobeSurfaceTileProvider#showTileThisFrame}.\n     *\n     * @param {QuadtreeTile} tile The tile instance.\n     * @param {FrameState} frameState The state information about the current frame.\n     * @param {QuadtreeOccluders} occluders The objects that may occlude this tile.\n     *\n     * @returns {Visibility} The visibility of the tile.\n     */\n    GlobeSurfaceTileProvider.prototype.computeTileVisibility = function(tile, frameState, occluders) {\n        var distance = this.computeDistanceToTile(tile, frameState);\n        tile._distance = distance;\n\n        if (frameState.fog.enabled) {\n            if (CesiumMath.fog(distance, frameState.fog.density) >= 1.0) {\n                // Tile is completely in fog so return that it is not visible.\n                return Visibility.NONE;\n            }\n        }\n\n        var surfaceTile = tile.data;\n        var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n\n        if (surfaceTile.boundingVolumeSourceTile === undefined) {\n            // We have no idea where this tile is, so let's just call it partially visible.\n            return Visibility.PARTIAL;\n        }\n\n        var cullingVolume = frameState.cullingVolume;\n        var boundingVolume = surfaceTile.orientedBoundingBox;\n\n        if (!defined(boundingVolume) && defined(surfaceTile.renderedMesh)) {\n            boundingVolume = surfaceTile.renderedMesh.boundingSphere3D;\n        }\n\n        // Check if the tile is outside the limit area in cartographic space\n        surfaceTile.clippedByBoundaries = false;\n        var clippedCartographicLimitRectangle = clipRectangleAntimeridian(tile.rectangle, this.cartographicLimitRectangle);\n        var areaLimitIntersection = Rectangle.simpleIntersection(clippedCartographicLimitRectangle, tile.rectangle, rectangleIntersectionScratch);\n        if (!defined(areaLimitIntersection)) {\n            return Visibility.NONE;\n        }\n        if (!Rectangle.equals(areaLimitIntersection, tile.rectangle)) {\n            surfaceTile.clippedByBoundaries = true;\n        }\n\n        if (frameState.mode !== SceneMode.SCENE3D) {\n            boundingVolume = boundingSphereScratch;\n            BoundingSphere.fromRectangleWithHeights2D(tile.rectangle, frameState.mapProjection, tileBoundingRegion.minimumHeight, tileBoundingRegion.maximumHeight, boundingVolume);\n            Cartesian3.fromElements(boundingVolume.center.z, boundingVolume.center.x, boundingVolume.center.y, boundingVolume.center);\n\n            if (frameState.mode === SceneMode.MORPHING && defined(surfaceTile.renderedMesh)) {\n                boundingVolume = BoundingSphere.union(surfaceTile.renderedMesh.boundingSphere3D, boundingVolume, boundingVolume);\n            }\n        }\n\n        if (!defined(boundingVolume)) {\n            return Intersect.INTERSECTING;\n        }\n\n        var clippingPlanes = this._clippingPlanes;\n        if (defined(clippingPlanes) && clippingPlanes.enabled) {\n            var planeIntersection = clippingPlanes.computeIntersectionWithBoundingVolume(boundingVolume);\n            tile.isClipped = (planeIntersection !== Intersect.INSIDE);\n            if (planeIntersection === Intersect.OUTSIDE) {\n                return Visibility.NONE;\n            }\n        }\n\n        var intersection = cullingVolume.computeVisibility(boundingVolume);\n        if (intersection === Intersect.OUTSIDE) {\n            return Visibility.NONE;\n        }\n\n        var ortho3D = frameState.mode === SceneMode.SCENE3D && frameState.camera.frustum instanceof OrthographicFrustum;\n        if (frameState.mode === SceneMode.SCENE3D && !ortho3D && defined(occluders)) {\n            var occludeePointInScaledSpace = surfaceTile.occludeePointInScaledSpace;\n            if (!defined(occludeePointInScaledSpace)) {\n                return intersection;\n            }\n\n            if (occluders.ellipsoid.isScaledSpacePointVisible(occludeePointInScaledSpace)) {\n                return intersection;\n            }\n\n            return Visibility.NONE;\n        }\n\n        return intersection;\n    };\n\n    /**\n     * Determines if the given tile can be refined\n     * @param {QuadtreeTile} tile The tile to check.\n     * @returns {boolean} True if the tile can be refined, false if it cannot.\n     */\n    GlobeSurfaceTileProvider.prototype.canRefine = function(tile) {\n        // Only allow refinement it we know whether or not the children of this tile exist.\n        // For a tileset with `availability`, we'll always be able to refine.\n        // We can ask for availability of _any_ child tile because we only need to confirm\n        // that we get a yes or no answer, it doesn't matter what the answer is.\n        if (defined(tile.data.terrainData)) {\n            return true;\n        }\n        var childAvailable = this.terrainProvider.getTileDataAvailable(tile.x * 2, tile.y * 2, tile.level + 1);\n        return childAvailable !== undefined;\n    };\n\n    var readyImageryScratch = [];\n    var canRenderTraversalStack = [];\n\n    /**\n     * Determines if the given not-fully-loaded tile can be rendered without losing detail that\n     * was present last frame as a result of rendering descendant tiles. This method will only be\n     * called if this tile's descendants were rendered last frame. If the tile is fully loaded,\n     * it is assumed that this method will return true and it will not be called.\n     * @param {QuadtreeTile} tile The tile to check.\n     * @returns {boolean} True if the tile can be rendered without losing detail.\n     */\n    GlobeSurfaceTileProvider.prototype.canRenderWithoutLosingDetail = function(tile, frameState) {\n        var surfaceTile = tile.data;\n\n        var readyImagery = readyImageryScratch;\n        readyImagery.length = this._imageryLayers.length;\n\n        var terrainReady = false;\n        var initialImageryState = false;\n        var imagery;\n\n        if (defined(surfaceTile)) {\n            // We can render even with non-ready terrain as long as all our rendered descendants\n            // are missing terrain geometry too. i.e. if we rendered fills for more detailed tiles\n            // last frame, it's ok to render a fill for this tile this frame.\n            terrainReady = surfaceTile.terrainState === TerrainState.READY;\n\n            // Initially assume all imagery layers are ready, unless imagery hasn't been initialized at all.\n            initialImageryState = true;\n\n            imagery = surfaceTile.imagery;\n        }\n\n        var i;\n        var len;\n\n        for (i = 0, len = readyImagery.length; i < len; ++i) {\n            readyImagery[i] = initialImageryState;\n        }\n\n        if (defined(imagery)) {\n            for (i = 0, len = imagery.length; i < len; ++i) {\n                var tileImagery = imagery[i];\n                var loadingImagery = tileImagery.loadingImagery;\n                var isReady = !defined(loadingImagery) || loadingImagery.state === ImageryState.FAILED || loadingImagery.state === ImageryState.INVALID;\n                var layerIndex = (tileImagery.loadingImagery || tileImagery.readyImagery).imageryLayer._layerIndex;\n\n                // For a layer to be ready, all tiles belonging to that layer must be ready.\n                readyImagery[layerIndex] = isReady && readyImagery[layerIndex];\n            }\n        }\n\n        var lastFrame = this.quadtree._lastSelectionFrameNumber;\n\n        // Traverse the descendants looking for one with terrain or imagery that is not loaded on this tile.\n        var stack = canRenderTraversalStack;\n        stack.length = 0;\n        stack.push(tile.southwestChild, tile.southeastChild, tile.northwestChild, tile.northeastChild);\n\n        while (stack.length > 0) {\n            var descendant = stack.pop();\n            var lastFrameSelectionResult = descendant._lastSelectionResultFrame === lastFrame ? descendant._lastSelectionResult : TileSelectionResult.NONE;\n\n            if (lastFrameSelectionResult === TileSelectionResult.RENDERED) {\n                var descendantSurface = descendant.data;\n\n                if (!defined(descendantSurface)) {\n                    // Descendant has no data, so it can't block rendering.\n                    continue;\n                }\n\n                if (!terrainReady && descendant.data.terrainState === TerrainState.READY) {\n                    // Rendered descendant has real terrain, but we don't. Rendering is blocked.\n                    return false;\n                }\n\n                var descendantImagery = descendant.data.imagery;\n                for (i = 0, len = descendantImagery.length; i < len; ++i) {\n                    var descendantTileImagery = descendantImagery[i];\n                    var descendantLoadingImagery = descendantTileImagery.loadingImagery;\n                    var descendantIsReady = !defined(descendantLoadingImagery) || descendantLoadingImagery.state === ImageryState.FAILED || descendantLoadingImagery.state === ImageryState.INVALID;\n                    var descendantLayerIndex = (descendantTileImagery.loadingImagery || descendantTileImagery.readyImagery).imageryLayer._layerIndex;\n\n                    // If this imagery tile of a descendant is ready but the layer isn't ready in this tile,\n                    // then rendering is blocked.\n                    if (descendantIsReady && !readyImagery[descendantLayerIndex]) {\n                        return false;\n                    }\n                }\n            } else if (lastFrameSelectionResult === TileSelectionResult.REFINED) {\n                stack.push(descendant.southwestChild, descendant.southeastChild, descendant.northwestChild, descendant.northeastChild);\n            }\n        }\n\n        return true;\n    };\n\n    var tileDirectionScratch = new Cartesian3();\n\n    /**\n     * Determines the priority for loading this tile. Lower priority values load sooner.\n     * @param {QuadtreeTile} tile The tile.\n     * @param {FrameState} frameState The frame state.\n     * @returns {Number} The load priority value.\n     */\n    GlobeSurfaceTileProvider.prototype.computeTileLoadPriority = function(tile, frameState) {\n        var surfaceTile = tile.data;\n        if (surfaceTile === undefined) {\n            return 0.0;\n        }\n\n        var obb = surfaceTile.orientedBoundingBox;\n        if (obb === undefined) {\n            return 0.0;\n        }\n\n        var cameraPosition = frameState.camera.positionWC;\n        var cameraDirection = frameState.camera.directionWC;\n        var tileDirection = Cartesian3.subtract(obb.center, cameraPosition, tileDirectionScratch);\n        var magnitude = Cartesian3.magnitude(tileDirection);\n        if (magnitude < CesiumMath.EPSILON5) {\n            return 0.0;\n        }\n        Cartesian3.divideByScalar(tileDirection, magnitude, tileDirection);\n        return (1.0 - Cartesian3.dot(tileDirection, cameraDirection)) * tile._distance;\n    };\n\n    var modifiedModelViewScratch = new Matrix4();\n    var modifiedModelViewProjectionScratch = new Matrix4();\n    var tileRectangleScratch = new Cartesian4();\n    var localizedCartographicLimitRectangleScratch = new Cartesian4();\n    var rtcScratch = new Cartesian3();\n    var centerEyeScratch = new Cartesian3();\n    var southwestScratch = new Cartesian3();\n    var northeastScratch = new Cartesian3();\n\n    /**\n     * Shows a specified tile in this frame.  The provider can cause the tile to be shown by adding\n     * render commands to the commandList, or use any other method as appropriate.  The tile is not\n     * expected to be visible next frame as well, unless this method is called next frame, too.\n     *\n     * @param {QuadtreeTile} tile The tile instance.\n     * @param {FrameState} frameState The state information of the current rendering frame.\n     */\n    GlobeSurfaceTileProvider.prototype.showTileThisFrame = function(tile, frameState) {\n        var readyTextureCount = 0;\n        var tileImageryCollection = tile.data.imagery;\n        for (var i = 0, len = tileImageryCollection.length; i < len; ++i) {\n            var tileImagery = tileImageryCollection[i];\n            if (defined(tileImagery.readyImagery) && tileImagery.readyImagery.imageryLayer.alpha !== 0.0) {\n                ++readyTextureCount;\n            }\n        }\n\n        var tileSet = this._tilesToRenderByTextureCount[readyTextureCount];\n        if (!defined(tileSet)) {\n            tileSet = [];\n            this._tilesToRenderByTextureCount[readyTextureCount] = tileSet;\n        }\n\n        tileSet.push(tile);\n\n        var surfaceTile = tile.data;\n        if (!defined(surfaceTile.vertexArray)) {\n            this._hasFillTilesThisFrame = true;\n        } else {\n            this._hasLoadedTilesThisFrame = true;\n        }\n\n        var debug = this._debug;\n        ++debug.tilesRendered;\n        debug.texturesRendered += readyTextureCount;\n    };\n\n    var cornerPositionsScratch = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\n\n    function computeOccludeePoint(tileProvider, center, rectangle, height, result) {\n        var ellipsoidalOccluder = tileProvider.quadtree._occluders.ellipsoid;\n        var ellipsoid = ellipsoidalOccluder.ellipsoid;\n\n        var cornerPositions = cornerPositionsScratch;\n        Cartesian3.fromRadians(rectangle.west, rectangle.south, height, ellipsoid, cornerPositions[0]);\n        Cartesian3.fromRadians(rectangle.east, rectangle.south, height, ellipsoid, cornerPositions[1]);\n        Cartesian3.fromRadians(rectangle.west, rectangle.north, height, ellipsoid, cornerPositions[2]);\n        Cartesian3.fromRadians(rectangle.east, rectangle.north, height, ellipsoid, cornerPositions[3]);\n\n        return ellipsoidalOccluder.computeHorizonCullingPoint(center, cornerPositions, result);\n    }\n\n    /**\n     * Gets the distance from the camera to the closest point on the tile.  This is used for level-of-detail selection.\n     *\n     * @param {QuadtreeTile} tile The tile instance.\n     * @param {FrameState} frameState The state information of the current rendering frame.\n     *\n     * @returns {Number} The distance from the camera to the closest point on the tile, in meters.\n     */\n    GlobeSurfaceTileProvider.prototype.computeDistanceToTile = function(tile, frameState) {\n        // The distance should be:\n        // 1. the actual distance to the tight-fitting bounding volume, or\n        // 2. a distance that is equal to or greater than the actual distance to the tight-fitting bounding volume.\n        //\n        // When we don't know the min/max heights for a tile, but we do know the min/max of an ancestor tile, we can\n        // build a tight-fitting bounding volume horizontally, but not vertically. The min/max heights from the\n        // ancestor will likely form a volume that is much bigger than it needs to be. This means that the volume may\n        // be deemed to be much closer to the camera than it really is, causing us to select tiles that are too detailed.\n        // Loading too-detailed tiles is super expensive, so we don't want to do that. We don't know where the child\n        // tile really lies within the parent range of heights, but we _do_ know the child tile can't be any closer than\n        // the ancestor height surface (min or max) that is _farthest away_ from the camera. So if we compute distance\n        // based that conservative metric, we may end up loading tiles that are not detailed enough, but that's much\n        // better (faster) than loading tiles that are too detailed.\n\n        var heightSource = updateTileBoundingRegion(tile, this.terrainProvider, frameState);\n        var surfaceTile = tile.data;\n        var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n\n        if (heightSource === undefined) {\n            // Can't find any min/max heights anywhere? Ok, let's just say the\n            // tile is really far away so we'll load and render it rather than\n            // refining.\n            return 9999999999.0;\n        } else if (surfaceTile.boundingVolumeSourceTile !== heightSource) {\n            // Heights are from a new source tile, so update the bounding volume.\n            surfaceTile.boundingVolumeSourceTile = heightSource;\n\n            var rectangle = tile.rectangle;\n            if (defined(rectangle) && rectangle.width < CesiumMath.PI_OVER_TWO + CesiumMath.EPSILON5) {\n                surfaceTile.orientedBoundingBox = OrientedBoundingBox.fromRectangle(\n                    tile.rectangle,\n                    tileBoundingRegion.minimumHeight,\n                    tileBoundingRegion.maximumHeight,\n                    tile.tilingScheme.ellipsoid,\n                    surfaceTile.orientedBoundingBox);\n\n                surfaceTile.occludeePointInScaledSpace = computeOccludeePoint(this, surfaceTile.orientedBoundingBox.center, tile.rectangle, tileBoundingRegion.maximumHeight, surfaceTile.occludeePointInScaledSpace);\n            }\n        }\n\n        var min = tileBoundingRegion.minimumHeight;\n        var max = tileBoundingRegion.maximumHeight;\n\n        if (surfaceTile.boundingVolumeSourceTile !== tile) {\n            var cameraHeight = frameState.camera.positionCartographic.height;\n            var distanceToMin = Math.abs(cameraHeight - min);\n            var distanceToMax = Math.abs(cameraHeight - max);\n            if (distanceToMin > distanceToMax) {\n                tileBoundingRegion.minimumHeight = min;\n                tileBoundingRegion.maximumHeight = min;\n            } else {\n                tileBoundingRegion.minimumHeight = max;\n                tileBoundingRegion.maximumHeight = max;\n            }\n        }\n\n        var result = tileBoundingRegion.distanceToCamera(frameState);\n\n        tileBoundingRegion.minimumHeight = min;\n        tileBoundingRegion.maximumHeight = max;\n\n        return result;\n    };\n\n    function updateTileBoundingRegion(tile, terrainProvider, frameState) {\n        var surfaceTile = tile.data;\n        if (surfaceTile === undefined) {\n            surfaceTile = tile.data = new GlobeSurfaceTile();\n        }\n\n        if (surfaceTile.tileBoundingRegion === undefined) {\n            surfaceTile.tileBoundingRegion = new TileBoundingRegion({\n                computeBoundingVolumes : false,\n                rectangle : tile.rectangle,\n                ellipsoid : tile.tilingScheme.ellipsoid,\n                minimumHeight : 0.0,\n                maximumHeight : 0.0\n            });\n        }\n\n        var terrainData = surfaceTile.terrainData;\n        var mesh = surfaceTile.mesh;\n        var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n\n        if (mesh !== undefined && mesh.minimumHeight !== undefined && mesh.maximumHeight !== undefined) {\n            // We have tight-fitting min/max heights from the mesh.\n            tileBoundingRegion.minimumHeight = mesh.minimumHeight;\n            tileBoundingRegion.maximumHeight = mesh.maximumHeight;\n            return tile;\n        }\n\n        if (terrainData !== undefined && terrainData._minimumHeight !== undefined && terrainData._maximumHeight !== undefined) {\n            // We have tight-fitting min/max heights from the terrain data.\n            tileBoundingRegion.minimumHeight = terrainData._minimumHeight * frameState.terrainExaggeration;\n            tileBoundingRegion.maximumHeight = terrainData._maximumHeight * frameState.terrainExaggeration;\n            return tile;\n        }\n\n        // No accurate min/max heights available, so we're stuck with min/max heights from an ancestor tile.\n        tileBoundingRegion.minimumHeight = Number.NaN;\n        tileBoundingRegion.maximumHeight = Number.NaN;\n\n        var ancestor = tile.parent;\n        while (ancestor !== undefined) {\n            var ancestorSurfaceTile = ancestor.data;\n            if (ancestorSurfaceTile !== undefined) {\n                var ancestorMesh = ancestorSurfaceTile.mesh;\n                if (ancestorMesh !== undefined && ancestorMesh.minimumHeight !== undefined && ancestorMesh.maximumHeight !== undefined) {\n                    tileBoundingRegion.minimumHeight = ancestorMesh.minimumHeight;\n                    tileBoundingRegion.maximumHeight = ancestorMesh.maximumHeight;\n                    return ancestor;\n                }\n\n                var ancestorTerrainData = ancestorSurfaceTile.terrainData;\n                if (ancestorTerrainData !== undefined && ancestorTerrainData._minimumHeight !== undefined && ancestorTerrainData._maximumHeight !== undefined) {\n                    tileBoundingRegion.minimumHeight = ancestorTerrainData._minimumHeight * frameState.terrainExaggeration;\n                    tileBoundingRegion.maximumHeight = ancestorTerrainData._maximumHeight * frameState.terrainExaggeration;\n                    return ancestor;\n                }\n            }\n            ancestor = ancestor.parent;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see GlobeSurfaceTileProvider#destroy\n     */\n    GlobeSurfaceTileProvider.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * provider = provider && provider();\n     *\n     * @see GlobeSurfaceTileProvider#isDestroyed\n     */\n    GlobeSurfaceTileProvider.prototype.destroy = function() {\n        this._tileProvider = this._tileProvider && this._tileProvider.destroy();\n        this._clippingPlanes = this._clippingPlanes && this._clippingPlanes.destroy();\n\n        return destroyObject(this);\n    };\n\n    function getTileReadyCallback(tileImageriesToFree, layer, terrainProvider) {\n        return function(tile) {\n            var tileImagery;\n            var imagery;\n            var startIndex = -1;\n            var tileImageryCollection = tile.data.imagery;\n            var length = tileImageryCollection.length;\n            var i;\n            for (i = 0; i < length; ++i) {\n                tileImagery = tileImageryCollection[i];\n                imagery = defaultValue(tileImagery.readyImagery, tileImagery.loadingImagery);\n                if (imagery.imageryLayer === layer) {\n                    startIndex = i;\n                    break;\n                }\n            }\n\n            if (startIndex !== -1) {\n                var endIndex = startIndex + tileImageriesToFree;\n                tileImagery = tileImageryCollection[endIndex];\n                imagery = defined(tileImagery) ? defaultValue(tileImagery.readyImagery, tileImagery.loadingImagery) : undefined;\n                if (!defined(imagery) || imagery.imageryLayer !== layer) {\n                    // Return false to keep the callback if we have to wait on the skeletons\n                    // Return true to remove the callback if something went wrong\n                    return !(layer._createTileImagerySkeletons(tile, terrainProvider, endIndex));\n                }\n\n                for (i = startIndex; i < endIndex; ++i) {\n                    tileImageryCollection[i].freeResources();\n                }\n\n                tileImageryCollection.splice(startIndex, tileImageriesToFree);\n            }\n\n            return true; // Everything is done, so remove the callback\n        };\n    }\n\n    GlobeSurfaceTileProvider.prototype._onLayerAdded = function(layer, index) {\n        if (layer.show) {\n            var terrainProvider = this._terrainProvider;\n\n            var that = this;\n            var imageryProvider = layer.imageryProvider;\n            var tileImageryUpdatedEvent = this._imageryLayersUpdatedEvent;\n            imageryProvider._reload = function() {\n                // Clear the layer's cache\n                layer._imageryCache = {};\n\n                that._quadtree.forEachLoadedTile(function(tile) {\n                    // If this layer is still waiting to for the loaded callback, just return\n                    if (defined(tile._loadedCallbacks[layer._layerIndex])) {\n                        return;\n                    }\n\n                    var i;\n\n                    // Figure out how many TileImageries we will need to remove and where to insert new ones\n                    var tileImageryCollection = tile.data.imagery;\n                    var length = tileImageryCollection.length;\n                    var startIndex = -1;\n                    var tileImageriesToFree = 0;\n                    for (i = 0; i < length; ++i) {\n                        var tileImagery = tileImageryCollection[i];\n                        var imagery = defaultValue(tileImagery.readyImagery, tileImagery.loadingImagery);\n                        if (imagery.imageryLayer === layer) {\n                            if (startIndex === -1) {\n                                startIndex = i;\n                            }\n\n                            ++tileImageriesToFree;\n                        } else if (startIndex !== -1) {\n                            // iterated past the section of TileImageries belonging to this layer, no need to continue.\n                            break;\n                        }\n                    }\n\n                    if (startIndex === -1) {\n                        return;\n                    }\n\n                    // Insert immediately after existing TileImageries\n                    var insertionPoint = startIndex + tileImageriesToFree;\n\n                    // Create new TileImageries for all loaded tiles\n                    if (layer._createTileImagerySkeletons(tile, terrainProvider, insertionPoint)) {\n                        // Add callback to remove old TileImageries when the new TileImageries are ready\n                        tile._loadedCallbacks[layer._layerIndex] = getTileReadyCallback(tileImageriesToFree, layer, terrainProvider);\n\n                        tile.state = QuadtreeTileLoadState.LOADING;\n                    }\n                });\n            };\n\n            // create TileImageries for this layer for all previously loaded tiles\n            this._quadtree.forEachLoadedTile(function(tile) {\n                if (layer._createTileImagerySkeletons(tile, terrainProvider)) {\n                    tile.state = QuadtreeTileLoadState.LOADING;\n\n                    // Tiles that are not currently being rendered need to load the new layer before they're renderable.\n                    // We don't mark the rendered tiles non-renderable, though, because that would make the globe disappear.\n                    if (tile.level !== 0 && (tile._lastSelectionResultFrame !== that.quadtree._lastSelectionFrameNumber || tile._lastSelectionResult !== TileSelectionResult.RENDERED)) {\n                        tile.renderable = false;\n                    }\n                }\n            });\n\n            this._layerOrderChanged = true;\n            tileImageryUpdatedEvent.raiseEvent();\n        }\n    };\n\n    GlobeSurfaceTileProvider.prototype._onLayerRemoved = function(layer, index) {\n        // destroy TileImagerys for this layer for all previously loaded tiles\n        this._quadtree.forEachLoadedTile(function(tile) {\n            var tileImageryCollection = tile.data.imagery;\n\n            var startIndex = -1;\n            var numDestroyed = 0;\n            for (var i = 0, len = tileImageryCollection.length; i < len; ++i) {\n                var tileImagery = tileImageryCollection[i];\n                var imagery = tileImagery.loadingImagery;\n                if (!defined(imagery)) {\n                    imagery = tileImagery.readyImagery;\n                }\n                if (imagery.imageryLayer === layer) {\n                    if (startIndex === -1) {\n                        startIndex = i;\n                    }\n\n                    tileImagery.freeResources();\n                    ++numDestroyed;\n                } else if (startIndex !== -1) {\n                    // iterated past the section of TileImagerys belonging to this layer, no need to continue.\n                    break;\n                }\n            }\n\n            if (startIndex !== -1) {\n                tileImageryCollection.splice(startIndex, numDestroyed);\n            }\n        });\n\n        if (defined(layer.imageryProvider)) {\n            layer.imageryProvider._reload = undefined;\n        }\n\n        this._imageryLayersUpdatedEvent.raiseEvent();\n    };\n\n    GlobeSurfaceTileProvider.prototype._onLayerMoved = function(layer, newIndex, oldIndex) {\n        this._layerOrderChanged = true;\n        this._imageryLayersUpdatedEvent.raiseEvent();\n    };\n\n    GlobeSurfaceTileProvider.prototype._onLayerShownOrHidden = function(layer, index, show) {\n        if (show) {\n            this._onLayerAdded(layer, index);\n        } else {\n            this._onLayerRemoved(layer, index);\n        }\n    };\n\n    var scratchClippingPlaneMatrix = new Matrix4();\n    function createTileUniformMap(frameState, globeSurfaceTileProvider) {\n        var uniformMap = {\n            u_initialColor : function() {\n                return this.properties.initialColor;\n            },\n            u_fillHighlightColor : function() {\n                return this.properties.fillHighlightColor;\n            },\n            u_zoomedOutOceanSpecularIntensity : function() {\n                return this.properties.zoomedOutOceanSpecularIntensity;\n            },\n            u_oceanNormalMap : function() {\n                return this.properties.oceanNormalMap;\n            },\n            u_lightingFadeDistance : function() {\n                return this.properties.lightingFadeDistance;\n            },\n            u_nightFadeDistance : function() {\n                return this.properties.nightFadeDistance;\n            },\n            u_center3D : function() {\n                return this.properties.center3D;\n            },\n            u_tileRectangle : function() {\n                return this.properties.tileRectangle;\n            },\n            u_modifiedModelView : function() {\n                var viewMatrix = frameState.context.uniformState.view;\n                var centerEye = Matrix4.multiplyByPoint(viewMatrix, this.properties.rtc, centerEyeScratch);\n                Matrix4.setTranslation(viewMatrix, centerEye, modifiedModelViewScratch);\n                return modifiedModelViewScratch;\n            },\n            u_modifiedModelViewProjection : function() {\n                var viewMatrix = frameState.context.uniformState.view;\n                var projectionMatrix = frameState.context.uniformState.projection;\n                var centerEye = Matrix4.multiplyByPoint(viewMatrix, this.properties.rtc, centerEyeScratch);\n                Matrix4.setTranslation(viewMatrix, centerEye, modifiedModelViewProjectionScratch);\n                Matrix4.multiply(projectionMatrix, modifiedModelViewProjectionScratch, modifiedModelViewProjectionScratch);\n                return modifiedModelViewProjectionScratch;\n            },\n            u_dayTextures : function() {\n                return this.properties.dayTextures;\n            },\n            u_dayTextureTranslationAndScale : function() {\n                return this.properties.dayTextureTranslationAndScale;\n            },\n            u_dayTextureTexCoordsRectangle : function() {\n                return this.properties.dayTextureTexCoordsRectangle;\n            },\n            u_dayTextureUseWebMercatorT : function() {\n                return this.properties.dayTextureUseWebMercatorT;\n            },\n            u_dayTextureAlpha : function() {\n                return this.properties.dayTextureAlpha;\n            },\n            u_dayTextureBrightness : function() {\n                return this.properties.dayTextureBrightness;\n            },\n            u_dayTextureContrast : function() {\n                return this.properties.dayTextureContrast;\n            },\n            u_dayTextureHue : function() {\n                return this.properties.dayTextureHue;\n            },\n            u_dayTextureSaturation : function() {\n                return this.properties.dayTextureSaturation;\n            },\n            u_dayTextureOneOverGamma : function() {\n                return this.properties.dayTextureOneOverGamma;\n            },\n            u_dayIntensity : function() {\n                return this.properties.dayIntensity;\n            },\n            u_southAndNorthLatitude : function() {\n                return this.properties.southAndNorthLatitude;\n            },\n            u_southMercatorYAndOneOverHeight : function() {\n                return this.properties.southMercatorYAndOneOverHeight;\n            },\n            u_waterMask : function() {\n                return this.properties.waterMask;\n            },\n            u_waterMaskTranslationAndScale : function() {\n                return this.properties.waterMaskTranslationAndScale;\n            },\n            u_minMaxHeight : function() {\n                return this.properties.minMaxHeight;\n            },\n            u_scaleAndBias : function() {\n                return this.properties.scaleAndBias;\n            },\n            u_dayTextureSplit : function() {\n                return this.properties.dayTextureSplit;\n            },\n            u_dayTextureCutoutRectangles : function() {\n                return this.properties.dayTextureCutoutRectangles;\n            },\n            u_clippingPlanes : function() {\n                var clippingPlanes = globeSurfaceTileProvider._clippingPlanes;\n                if (defined(clippingPlanes) && defined(clippingPlanes.texture)) {\n                    // Check in case clippingPlanes hasn't been updated yet.\n                    return clippingPlanes.texture;\n                }\n                return frameState.context.defaultTexture;\n            },\n            u_cartographicLimitRectangle : function() {\n                return this.properties.localizedCartographicLimitRectangle;\n            },\n            u_clippingPlanesMatrix : function() {\n                var clippingPlanes = globeSurfaceTileProvider._clippingPlanes;\n                return defined(clippingPlanes) ? Matrix4.multiply(frameState.context.uniformState.view, clippingPlanes.modelMatrix, scratchClippingPlaneMatrix) : Matrix4.IDENTITY;\n            },\n            u_clippingPlanesEdgeStyle : function() {\n                var style = this.properties.clippingPlanesEdgeColor;\n                style.alpha = this.properties.clippingPlanesEdgeWidth;\n                return style;\n            },\n            u_minimumBrightness : function() {\n                return frameState.fog.minimumBrightness;\n            },\n            u_terrainSplitDirection : function() {\n                return globeSurfaceTileProvider.splitDirection;\n            },\n            u_hsbShift : function() {\n                return this.properties.hsbShift;\n            },\n            u_colorsToAlpha : function() {\n                return this.properties.colorsToAlpha;\n            },\n\n            // make a separate object so that changes to the properties are seen on\n            // derived commands that combine another uniform map with this one.\n            properties : {\n                initialColor : new Cartesian4(0.0, 0.0, 0.5, 1.0),\n                fillHighlightColor : new Color(0.0, 0.0, 0.0, 0.0),\n                zoomedOutOceanSpecularIntensity : 0.5,\n                oceanNormalMap : undefined,\n                lightingFadeDistance : new Cartesian2(6500000.0, 9000000.0),\n                nightFadeDistance : new Cartesian2(10000000.0, 40000000.0),\n                hsbShift : new Cartesian3(),\n\n                center3D : undefined,\n                rtc : new Cartesian3(),\n                modifiedModelView : new Matrix4(),\n                tileRectangle : new Cartesian4(),\n\n                dayTextures : [],\n                dayTextureTranslationAndScale : [],\n                dayTextureTexCoordsRectangle : [],\n                dayTextureUseWebMercatorT : [],\n                dayTextureAlpha : [],\n                dayTextureBrightness : [],\n                dayTextureContrast : [],\n                dayTextureHue : [],\n                dayTextureSaturation : [],\n                dayTextureOneOverGamma : [],\n                dayTextureSplit : [],\n                dayTextureCutoutRectangles : [],\n                dayIntensity : 0.0,\n                colorsToAlpha : [],\n\n                southAndNorthLatitude : new Cartesian2(),\n                southMercatorYAndOneOverHeight : new Cartesian2(),\n\n                waterMask : undefined,\n                waterMaskTranslationAndScale : new Cartesian4(),\n\n                minMaxHeight : new Cartesian2(),\n                scaleAndBias : new Matrix4(),\n                clippingPlanesEdgeColor : Color.clone(Color.WHITE),\n                clippingPlanesEdgeWidth : 0.0,\n\n                localizedCartographicLimitRectangle : new Cartesian4()\n            }\n        };\n\n        return uniformMap;\n    }\n\n    function createWireframeVertexArrayIfNecessary(context, provider, tile) {\n        var surfaceTile = tile.data;\n\n        var mesh;\n        var vertexArray;\n\n        if (defined(surfaceTile.vertexArray)) {\n            mesh = surfaceTile.mesh;\n            vertexArray = surfaceTile.vertexArray;\n        } else if (defined(surfaceTile.fill) && defined(surfaceTile.fill.vertexArray)) {\n            mesh = surfaceTile.fill.mesh;\n            vertexArray = surfaceTile.fill.vertexArray;\n        }\n\n        if (!defined(mesh) || !defined(vertexArray)) {\n            return;\n        }\n\n        if (defined(surfaceTile.wireframeVertexArray)) {\n            if (surfaceTile.wireframeVertexArray.mesh === mesh) {\n                return;\n            }\n\n            surfaceTile.wireframeVertexArray.destroy();\n            surfaceTile.wireframeVertexArray = undefined;\n        }\n\n        surfaceTile.wireframeVertexArray = createWireframeVertexArray(context, vertexArray, mesh);\n        surfaceTile.wireframeVertexArray.mesh = mesh;\n    }\n\n    /**\n     * Creates a vertex array for wireframe rendering of a terrain tile.\n     *\n     * @private\n     *\n     * @param {Context} context The context in which to create the vertex array.\n     * @param {VertexArray} vertexArray The existing, non-wireframe vertex array.  The new vertex array\n     *                      will share vertex buffers with this existing one.\n     * @param {TerrainMesh} terrainMesh The terrain mesh containing non-wireframe indices.\n     * @returns {VertexArray} The vertex array for wireframe rendering.\n     */\n    function createWireframeVertexArray(context, vertexArray, terrainMesh) {\n        var indices = terrainMesh.indices;\n\n        var geometry = {\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES\n        };\n\n        GeometryPipeline.toWireframe(geometry);\n\n        var wireframeIndices = geometry.indices;\n        var wireframeIndexBuffer = Buffer.createIndexBuffer({\n            context : context,\n            typedArray : wireframeIndices,\n            usage : BufferUsage.STATIC_DRAW,\n            indexDatatype : IndexDatatype.fromSizeInBytes(wireframeIndices.BYTES_PER_ELEMENT)\n        });\n        return new VertexArray({\n            context : context,\n            attributes : vertexArray._attributes,\n            indexBuffer : wireframeIndexBuffer\n        });\n    }\n\n    var getDebugOrientedBoundingBox;\n    var getDebugBoundingSphere;\n    var debugDestroyPrimitive;\n\n    (function() {\n        var instanceOBB = new GeometryInstance({\n            geometry : BoxOutlineGeometry.fromDimensions({dimensions : new Cartesian3(2.0, 2.0, 2.0)})\n        });\n        var instanceSphere = new GeometryInstance({\n            geometry : new SphereOutlineGeometry({radius : 1.0})\n        });\n        var modelMatrix = new Matrix4();\n        var previousVolume;\n        var primitive;\n\n        function createDebugPrimitive(instance) {\n            return new Primitive({\n                geometryInstances : instance,\n                appearance : new PerInstanceColorAppearance({\n                    translucent : false,\n                    flat : true\n                }),\n                asynchronous : false\n            });\n        }\n\n        getDebugOrientedBoundingBox = function(obb, color) {\n            if (obb === previousVolume) {\n                return primitive;\n            }\n            debugDestroyPrimitive();\n\n            previousVolume = obb;\n            modelMatrix = Matrix4.fromRotationTranslation(obb.halfAxes, obb.center, modelMatrix);\n\n            instanceOBB.modelMatrix = modelMatrix;\n            instanceOBB.attributes.color = ColorGeometryInstanceAttribute.fromColor(color);\n\n            primitive = createDebugPrimitive(instanceOBB);\n            return primitive;\n        };\n\n        getDebugBoundingSphere = function(sphere, color) {\n            if (sphere === previousVolume) {\n                return primitive;\n            }\n            debugDestroyPrimitive();\n\n            previousVolume = sphere;\n            modelMatrix = Matrix4.fromTranslation(sphere.center, modelMatrix);\n            modelMatrix = Matrix4.multiplyByUniformScale(modelMatrix, sphere.radius, modelMatrix);\n\n            instanceSphere.modelMatrix = modelMatrix;\n            instanceSphere.attributes.color = ColorGeometryInstanceAttribute.fromColor(color);\n\n            primitive = createDebugPrimitive(instanceSphere);\n            return primitive;\n        };\n\n        debugDestroyPrimitive = function() {\n            if (defined(primitive)) {\n                primitive.destroy();\n                primitive = undefined;\n                previousVolume = undefined;\n            }\n        };\n    })();\n\n    var otherPassesInitialColor = new Cartesian4(0.0, 0.0, 0.0, 0.0);\n    var surfaceShaderSetOptionsScratch = {\n        frameState : undefined,\n        surfaceTile : undefined,\n        numberOfDayTextures : undefined,\n        applyBrightness : undefined,\n        applyContrast : undefined,\n        applyHue : undefined,\n        applySaturation : undefined,\n        applyGamma : undefined,\n        applyAlpha : undefined,\n        applySplit : undefined,\n        showReflectiveOcean : undefined,\n        showOceanWaves : undefined,\n        enableLighting : undefined,\n        showGroundAtmosphere : undefined,\n        perFragmentGroundAtmosphere : undefined,\n        hasVertexNormals : undefined,\n        useWebMercatorProjection : undefined,\n        enableFog : undefined,\n        enableClippingPlanes : undefined,\n        clippingPlanes : undefined,\n        clippedByBoundaries : undefined,\n        hasImageryLayerCutout : undefined,\n        colorCorrect : undefined,\n        colorToAlpha : undefined\n    };\n\n    function addDrawCommandsForTile(tileProvider, tile, frameState) {\n        var surfaceTile = tile.data;\n\n        if (!defined(surfaceTile.vertexArray)) {\n            if (surfaceTile.fill === undefined) {\n                // No fill was created for this tile, probably because this tile is not connected to\n                // any renderable tiles. So create a simple tile in the middle of the tile's possible\n                // height range.\n                surfaceTile.fill = new TerrainFillMesh(tile);\n            }\n            surfaceTile.fill.update(tileProvider, frameState);\n        }\n\n        var creditDisplay = frameState.creditDisplay;\n\n        var terrainData = surfaceTile.terrainData;\n        if (defined(terrainData) && defined(terrainData.credits)) {\n            var tileCredits = terrainData.credits;\n            for (var tileCreditIndex = 0,\n                     tileCreditLength = tileCredits.length; tileCreditIndex < tileCreditLength; ++tileCreditIndex) {\n                creditDisplay.addCredit(tileCredits[tileCreditIndex]);\n            }\n        }\n\n        var maxTextures = ContextLimits.maximumTextureImageUnits;\n\n        var waterMaskTexture = surfaceTile.waterMaskTexture;\n        var waterMaskTranslationAndScale = surfaceTile.waterMaskTranslationAndScale;\n        if (!defined(waterMaskTexture) && defined(surfaceTile.fill)) {\n            waterMaskTexture = surfaceTile.fill.waterMaskTexture;\n            waterMaskTranslationAndScale = surfaceTile.fill.waterMaskTranslationAndScale;\n        }\n\n        var showReflectiveOcean = tileProvider.hasWaterMask && defined(waterMaskTexture);\n        var oceanNormalMap = tileProvider.oceanNormalMap;\n        var showOceanWaves = showReflectiveOcean && defined(oceanNormalMap);\n        var hasVertexNormals = tileProvider.terrainProvider.ready && tileProvider.terrainProvider.hasVertexNormals;\n        var enableFog = frameState.fog.enabled;\n        var showGroundAtmosphere = tileProvider.showGroundAtmosphere;\n        var castShadows = ShadowMode.castShadows(tileProvider.shadows);\n        var receiveShadows = ShadowMode.receiveShadows(tileProvider.shadows);\n\n        var hueShift = tileProvider.hueShift;\n        var saturationShift = tileProvider.saturationShift;\n        var brightnessShift = tileProvider.brightnessShift;\n\n        var colorCorrect = !(CesiumMath.equalsEpsilon(hueShift, 0.0, CesiumMath.EPSILON7) &&\n                             CesiumMath.equalsEpsilon(saturationShift, 0.0, CesiumMath.EPSILON7) &&\n                             CesiumMath.equalsEpsilon(brightnessShift, 0.0, CesiumMath.EPSILON7));\n\n        var perFragmentGroundAtmosphere = false;\n        if (showGroundAtmosphere) {\n            var mode = frameState.mode;\n            var camera = frameState.camera;\n            var cameraDistance;\n            if (mode === SceneMode.SCENE2D || mode === SceneMode.COLUMBUS_VIEW) {\n                cameraDistance = camera.positionCartographic.height;\n            } else {\n                cameraDistance = Cartesian3.magnitude(camera.positionWC);\n            }\n            var fadeOutDistance = tileProvider.nightFadeOutDistance;\n            if (mode !== SceneMode.SCENE3D) {\n                fadeOutDistance -= frameState.mapProjection.ellipsoid.maximumRadius;\n            }\n            perFragmentGroundAtmosphere = cameraDistance > fadeOutDistance;\n        }\n\n        if (showReflectiveOcean) {\n            --maxTextures;\n        }\n        if (showOceanWaves) {\n            --maxTextures;\n        }\n\n        if (defined(frameState.shadowState) && frameState.shadowState.shadowsEnabled) {\n            --maxTextures;\n        }\n        if (defined(tileProvider.clippingPlanes) && tileProvider.clippingPlanes.enabled) {\n            --maxTextures;\n        }\n\n        var mesh = surfaceTile.renderedMesh;\n        var rtc = mesh.center;\n        var encoding = mesh.encoding;\n\n        // Not used in 3D.\n        var tileRectangle = tileRectangleScratch;\n\n        // Only used for Mercator projections.\n        var southLatitude = 0.0;\n        var northLatitude = 0.0;\n        var southMercatorY = 0.0;\n        var oneOverMercatorHeight = 0.0;\n\n        var useWebMercatorProjection = false;\n\n        if (frameState.mode !== SceneMode.SCENE3D) {\n            var projection = frameState.mapProjection;\n            var southwest = projection.project(Rectangle.southwest(tile.rectangle), southwestScratch);\n            var northeast = projection.project(Rectangle.northeast(tile.rectangle), northeastScratch);\n\n            tileRectangle.x = southwest.x;\n            tileRectangle.y = southwest.y;\n            tileRectangle.z = northeast.x;\n            tileRectangle.w = northeast.y;\n\n            // In 2D and Columbus View, use the center of the tile for RTC rendering.\n            if (frameState.mode !== SceneMode.MORPHING) {\n                rtc = rtcScratch;\n                rtc.x = 0.0;\n                rtc.y = (tileRectangle.z + tileRectangle.x) * 0.5;\n                rtc.z = (tileRectangle.w + tileRectangle.y) * 0.5;\n                tileRectangle.x -= rtc.y;\n                tileRectangle.y -= rtc.z;\n                tileRectangle.z -= rtc.y;\n                tileRectangle.w -= rtc.z;\n            }\n\n            if (frameState.mode === SceneMode.SCENE2D && encoding.quantization === TerrainQuantization.BITS12) {\n                // In 2D, the texture coordinates of the tile are interpolated over the rectangle to get the position in the vertex shader.\n                // When the texture coordinates are quantized, error is introduced. This can be seen through the 1px wide cracking\n                // between the quantized tiles in 2D. To compensate for the error, move the expand the rectangle in each direction by\n                // half the error amount.\n                var epsilon = (1.0 / (Math.pow(2.0, 12.0) - 1.0)) * 0.5;\n                var widthEpsilon = (tileRectangle.z - tileRectangle.x) * epsilon;\n                var heightEpsilon = (tileRectangle.w - tileRectangle.y) * epsilon;\n                tileRectangle.x -= widthEpsilon;\n                tileRectangle.y -= heightEpsilon;\n                tileRectangle.z += widthEpsilon;\n                tileRectangle.w += heightEpsilon;\n            }\n\n            if (projection instanceof WebMercatorProjection) {\n                southLatitude = tile.rectangle.south;\n                northLatitude = tile.rectangle.north;\n\n                southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(southLatitude);\n\n                oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(northLatitude) - southMercatorY);\n\n                useWebMercatorProjection = true;\n            }\n        }\n\n        var surfaceShaderSetOptions = surfaceShaderSetOptionsScratch;\n        surfaceShaderSetOptions.frameState = frameState;\n        surfaceShaderSetOptions.surfaceTile = surfaceTile;\n        surfaceShaderSetOptions.showReflectiveOcean = showReflectiveOcean;\n        surfaceShaderSetOptions.showOceanWaves = showOceanWaves;\n        surfaceShaderSetOptions.enableLighting = tileProvider.enableLighting;\n        surfaceShaderSetOptions.showGroundAtmosphere = showGroundAtmosphere;\n        surfaceShaderSetOptions.perFragmentGroundAtmosphere = perFragmentGroundAtmosphere;\n        surfaceShaderSetOptions.hasVertexNormals = hasVertexNormals;\n        surfaceShaderSetOptions.useWebMercatorProjection = useWebMercatorProjection;\n        surfaceShaderSetOptions.clippedByBoundaries = surfaceTile.clippedByBoundaries;\n        surfaceShaderSetOptions.splitTerrain = tileProvider.splitDirection !== ImagerySplitDirection.NONE;\n\n        var tileImageryCollection = surfaceTile.imagery;\n        var imageryIndex = 0;\n        var imageryLen = tileImageryCollection.length;\n\n        var firstPassRenderState = tileProvider._renderState;\n        var otherPassesRenderState = tileProvider._blendRenderState;\n        var renderState = firstPassRenderState;\n\n        var initialColor = tileProvider._firstPassInitialColor;\n\n        var context = frameState.context;\n\n        if (!defined(tileProvider._debug.boundingSphereTile)) {\n            debugDestroyPrimitive();\n        }\n\n        do {\n            var numberOfDayTextures = 0;\n\n            var command;\n            var uniformMap;\n\n            if (tileProvider._drawCommands.length <= tileProvider._usedDrawCommands) {\n                command = new DrawCommand();\n                command.owner = tile;\n                command.cull = false;\n                command.boundingVolume = new BoundingSphere();\n                command.orientedBoundingBox = undefined;\n\n                uniformMap = createTileUniformMap(frameState, tileProvider);\n\n                tileProvider._drawCommands.push(command);\n                tileProvider._uniformMaps.push(uniformMap);\n            } else {\n                command = tileProvider._drawCommands[tileProvider._usedDrawCommands];\n                uniformMap = tileProvider._uniformMaps[tileProvider._usedDrawCommands];\n            }\n\n            command.owner = tile;\n\n            ++tileProvider._usedDrawCommands;\n\n            if (tile === tileProvider._debug.boundingSphereTile) {\n                var obb = surfaceTile.orientedBoundingBox;\n                // If a debug primitive already exists for this tile, it will not be\n                // re-created, to avoid allocation every frame. If it were possible\n                // to have more than one selected tile, this would have to change.\n                if (defined(obb)) {\n                    getDebugOrientedBoundingBox(obb, Color.RED).update(frameState);\n                } else if (defined(mesh) && defined(mesh.boundingSphere3D)) {\n                    getDebugBoundingSphere(mesh.boundingSphere3D, Color.RED).update(frameState);\n                }\n            }\n\n            var uniformMapProperties = uniformMap.properties;\n            Cartesian4.clone(initialColor, uniformMapProperties.initialColor);\n            uniformMapProperties.oceanNormalMap = oceanNormalMap;\n            uniformMapProperties.lightingFadeDistance.x = tileProvider.lightingFadeOutDistance;\n            uniformMapProperties.lightingFadeDistance.y = tileProvider.lightingFadeInDistance;\n            uniformMapProperties.nightFadeDistance.x = tileProvider.nightFadeOutDistance;\n            uniformMapProperties.nightFadeDistance.y = tileProvider.nightFadeInDistance;\n            uniformMapProperties.zoomedOutOceanSpecularIntensity = tileProvider.zoomedOutOceanSpecularIntensity;\n\n            var highlightFillTile = !defined(surfaceTile.vertexArray) && defined(tileProvider.fillHighlightColor) && tileProvider.fillHighlightColor.alpha > 0.0;\n            if (highlightFillTile) {\n                Color.clone(tileProvider.fillHighlightColor, uniformMapProperties.fillHighlightColor);\n            }\n\n            uniformMapProperties.center3D = mesh.center;\n            Cartesian3.clone(rtc, uniformMapProperties.rtc);\n\n            Cartesian4.clone(tileRectangle, uniformMapProperties.tileRectangle);\n            uniformMapProperties.southAndNorthLatitude.x = southLatitude;\n            uniformMapProperties.southAndNorthLatitude.y = northLatitude;\n            uniformMapProperties.southMercatorYAndOneOverHeight.x = southMercatorY;\n            uniformMapProperties.southMercatorYAndOneOverHeight.y = oneOverMercatorHeight;\n\n            // Convert tile limiter rectangle from cartographic to texture space using the tileRectangle.\n            var localizedCartographicLimitRectangle = localizedCartographicLimitRectangleScratch;\n            var cartographicLimitRectangle = clipRectangleAntimeridian(tile.rectangle, tileProvider.cartographicLimitRectangle);\n\n            Cartesian3.fromElements(hueShift, saturationShift, brightnessShift, uniformMapProperties.hsbShift);\n\n            var cartographicTileRectangle = tile.rectangle;\n            var inverseTileWidth = 1.0 / cartographicTileRectangle.width;\n            var inverseTileHeight = 1.0 / cartographicTileRectangle.height;\n            localizedCartographicLimitRectangle.x = (cartographicLimitRectangle.west - cartographicTileRectangle.west) * inverseTileWidth;\n            localizedCartographicLimitRectangle.y = (cartographicLimitRectangle.south - cartographicTileRectangle.south) * inverseTileHeight;\n            localizedCartographicLimitRectangle.z = (cartographicLimitRectangle.east - cartographicTileRectangle.west) * inverseTileWidth;\n            localizedCartographicLimitRectangle.w = (cartographicLimitRectangle.north - cartographicTileRectangle.south) * inverseTileHeight;\n\n            Cartesian4.clone(localizedCartographicLimitRectangle, uniformMapProperties.localizedCartographicLimitRectangle);\n\n            // For performance, use fog in the shader only when the tile is in fog.\n            var applyFog = enableFog && CesiumMath.fog(tile._distance, frameState.fog.density) > CesiumMath.EPSILON3;\n            colorCorrect = colorCorrect && (applyFog || showGroundAtmosphere);\n\n            var applyBrightness = false;\n            var applyContrast = false;\n            var applyHue = false;\n            var applySaturation = false;\n            var applyGamma = false;\n            var applyAlpha = false;\n            var applySplit = false;\n            var applyCutout = false;\n            var applyColorToAlpha = false;\n\n            while (numberOfDayTextures < maxTextures && imageryIndex < imageryLen) {\n                var tileImagery = tileImageryCollection[imageryIndex];\n                var imagery = tileImagery.readyImagery;\n                ++imageryIndex;\n\n                if (!defined(imagery) || imagery.imageryLayer.alpha === 0.0) {\n                    continue;\n                }\n\n                var texture = tileImagery.useWebMercatorT ? imagery.textureWebMercator : imagery.texture;\n\n                \n\n                var imageryLayer = imagery.imageryLayer;\n\n                if (!defined(tileImagery.textureTranslationAndScale)) {\n                    tileImagery.textureTranslationAndScale = imageryLayer._calculateTextureTranslationAndScale(tile, tileImagery);\n                }\n\n                uniformMapProperties.dayTextures[numberOfDayTextures] = texture;\n                uniformMapProperties.dayTextureTranslationAndScale[numberOfDayTextures] = tileImagery.textureTranslationAndScale;\n                uniformMapProperties.dayTextureTexCoordsRectangle[numberOfDayTextures] = tileImagery.textureCoordinateRectangle;\n                uniformMapProperties.dayTextureUseWebMercatorT[numberOfDayTextures] = tileImagery.useWebMercatorT;\n\n                uniformMapProperties.dayTextureAlpha[numberOfDayTextures] = imageryLayer.alpha;\n                applyAlpha = applyAlpha || uniformMapProperties.dayTextureAlpha[numberOfDayTextures] !== 1.0;\n\n                uniformMapProperties.dayTextureBrightness[numberOfDayTextures] = imageryLayer.brightness;\n                applyBrightness = applyBrightness || uniformMapProperties.dayTextureBrightness[numberOfDayTextures] !== ImageryLayer.DEFAULT_BRIGHTNESS;\n\n                uniformMapProperties.dayTextureContrast[numberOfDayTextures] = imageryLayer.contrast;\n                applyContrast = applyContrast || uniformMapProperties.dayTextureContrast[numberOfDayTextures] !== ImageryLayer.DEFAULT_CONTRAST;\n\n                uniformMapProperties.dayTextureHue[numberOfDayTextures] = imageryLayer.hue;\n                applyHue = applyHue || uniformMapProperties.dayTextureHue[numberOfDayTextures] !== ImageryLayer.DEFAULT_HUE;\n\n                uniformMapProperties.dayTextureSaturation[numberOfDayTextures] = imageryLayer.saturation;\n                applySaturation = applySaturation || uniformMapProperties.dayTextureSaturation[numberOfDayTextures] !== ImageryLayer.DEFAULT_SATURATION;\n\n                uniformMapProperties.dayTextureOneOverGamma[numberOfDayTextures] = 1.0 / imageryLayer.gamma;\n                applyGamma = applyGamma || uniformMapProperties.dayTextureOneOverGamma[numberOfDayTextures] !== 1.0 / ImageryLayer.DEFAULT_GAMMA;\n\n                uniformMapProperties.dayTextureSplit[numberOfDayTextures] = imageryLayer.splitDirection;\n                applySplit = applySplit || uniformMapProperties.dayTextureSplit[numberOfDayTextures] !== 0.0;\n\n                // Update cutout rectangle\n                var dayTextureCutoutRectangle = uniformMapProperties.dayTextureCutoutRectangles[numberOfDayTextures];\n                if (!defined(dayTextureCutoutRectangle)) {\n                    dayTextureCutoutRectangle = uniformMapProperties.dayTextureCutoutRectangles[numberOfDayTextures] = new Cartesian4();\n                }\n\n                Cartesian4.clone(Cartesian4.ZERO, dayTextureCutoutRectangle);\n                if (defined(imageryLayer.cutoutRectangle)) {\n                    var cutoutRectangle = clipRectangleAntimeridian(cartographicTileRectangle, imageryLayer.cutoutRectangle);\n                    var intersection = Rectangle.simpleIntersection(cutoutRectangle, cartographicTileRectangle, rectangleIntersectionScratch);\n                    applyCutout = defined(intersection) || applyCutout;\n\n                    dayTextureCutoutRectangle.x = (cutoutRectangle.west - cartographicTileRectangle.west) * inverseTileWidth;\n                    dayTextureCutoutRectangle.y = (cutoutRectangle.south - cartographicTileRectangle.south) * inverseTileHeight;\n                    dayTextureCutoutRectangle.z = (cutoutRectangle.east - cartographicTileRectangle.west) * inverseTileWidth;\n                    dayTextureCutoutRectangle.w = (cutoutRectangle.north - cartographicTileRectangle.south) * inverseTileHeight;\n                }\n\n                // Update color to alpha\n                var colorToAlpha = uniformMapProperties.colorsToAlpha[numberOfDayTextures];\n                if (!defined(colorToAlpha)) {\n                    colorToAlpha = uniformMapProperties.colorsToAlpha[numberOfDayTextures] = new Cartesian4();\n                }\n\n                var hasColorToAlpha = defined(imageryLayer.colorToAlpha) && imageryLayer.colorToAlphaThreshold > 0.0;\n                applyColorToAlpha = applyColorToAlpha || hasColorToAlpha;\n\n                if (hasColorToAlpha) {\n                    var color = imageryLayer.colorToAlpha;\n                    colorToAlpha.x = color.red;\n                    colorToAlpha.y = color.green;\n                    colorToAlpha.z = color.blue;\n                    colorToAlpha.w = imageryLayer.colorToAlphaThreshold;\n                } else {\n                    colorToAlpha.w = -1.0;\n                }\n\n                if (defined(imagery.credits)) {\n                    var credits = imagery.credits;\n                    for (var creditIndex = 0, creditLength = credits.length; creditIndex < creditLength; ++creditIndex) {\n                        creditDisplay.addCredit(credits[creditIndex]);\n                    }\n                }\n\n                ++numberOfDayTextures;\n            }\n\n            // trim texture array to the used length so we don't end up using old textures\n            // which might get destroyed eventually\n            uniformMapProperties.dayTextures.length = numberOfDayTextures;\n            uniformMapProperties.waterMask = waterMaskTexture;\n            Cartesian4.clone(waterMaskTranslationAndScale, uniformMapProperties.waterMaskTranslationAndScale);\n\n            uniformMapProperties.minMaxHeight.x = encoding.minimumHeight;\n            uniformMapProperties.minMaxHeight.y = encoding.maximumHeight;\n            Matrix4.clone(encoding.matrix, uniformMapProperties.scaleAndBias);\n\n            // update clipping planes\n            var clippingPlanes = tileProvider._clippingPlanes;\n            var clippingPlanesEnabled = defined(clippingPlanes) && clippingPlanes.enabled && tile.isClipped;\n            if (clippingPlanesEnabled) {\n                uniformMapProperties.clippingPlanesEdgeColor = Color.clone(clippingPlanes.edgeColor, uniformMapProperties.clippingPlanesEdgeColor);\n                uniformMapProperties.clippingPlanesEdgeWidth = clippingPlanes.edgeWidth;\n            }\n\n            if (defined(tileProvider.uniformMap)) {\n                uniformMap = combine(uniformMap, tileProvider.uniformMap);\n            }\n\n            surfaceShaderSetOptions.numberOfDayTextures = numberOfDayTextures;\n            surfaceShaderSetOptions.applyBrightness = applyBrightness;\n            surfaceShaderSetOptions.applyContrast = applyContrast;\n            surfaceShaderSetOptions.applyHue = applyHue;\n            surfaceShaderSetOptions.applySaturation = applySaturation;\n            surfaceShaderSetOptions.applyGamma = applyGamma;\n            surfaceShaderSetOptions.applyAlpha = applyAlpha;\n            surfaceShaderSetOptions.applySplit = applySplit;\n            surfaceShaderSetOptions.enableFog = applyFog;\n            surfaceShaderSetOptions.enableClippingPlanes = clippingPlanesEnabled;\n            surfaceShaderSetOptions.clippingPlanes = clippingPlanes;\n            surfaceShaderSetOptions.hasImageryLayerCutout = applyCutout;\n            surfaceShaderSetOptions.colorCorrect = colorCorrect;\n            surfaceShaderSetOptions.highlightFillTile = highlightFillTile;\n            surfaceShaderSetOptions.colorToAlpha = applyColorToAlpha;\n\n            command.shaderProgram = tileProvider._surfaceShaderSet.getShaderProgram(surfaceShaderSetOptions);\n            command.castShadows = castShadows;\n            command.receiveShadows = receiveShadows;\n            command.renderState = renderState;\n            command.primitiveType = PrimitiveType.TRIANGLES;\n            command.vertexArray = surfaceTile.vertexArray || surfaceTile.fill.vertexArray;\n            command.uniformMap = uniformMap;\n            command.pass = Pass.GLOBE;\n\n            if (tileProvider._debug.wireframe) {\n                createWireframeVertexArrayIfNecessary(context, tileProvider, tile);\n                if (defined(surfaceTile.wireframeVertexArray)) {\n                    command.vertexArray = surfaceTile.wireframeVertexArray;\n                    command.primitiveType = PrimitiveType.LINES;\n                }\n            }\n\n            var boundingVolume = command.boundingVolume;\n            var orientedBoundingBox = command.orientedBoundingBox;\n\n            if (frameState.mode !== SceneMode.SCENE3D) {\n                var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n                BoundingSphere.fromRectangleWithHeights2D(tile.rectangle, frameState.mapProjection, tileBoundingRegion.minimumHeight, tileBoundingRegion.maximumHeight, boundingVolume);\n                Cartesian3.fromElements(boundingVolume.center.z, boundingVolume.center.x, boundingVolume.center.y, boundingVolume.center);\n\n                if (frameState.mode === SceneMode.MORPHING) {\n                    boundingVolume = BoundingSphere.union(mesh.boundingSphere3D, boundingVolume, boundingVolume);\n                }\n            } else {\n                command.boundingVolume = BoundingSphere.clone(mesh.boundingSphere3D, boundingVolume);\n                command.orientedBoundingBox = OrientedBoundingBox.clone(surfaceTile.orientedBoundingBox, orientedBoundingBox);\n            }\n\n            command.dirty = true;\n            frameState.commandList.push(command);\n\n            renderState = otherPassesRenderState;\n            initialColor = otherPassesInitialColor;\n        } while (imageryIndex < imageryLen);\n    }\n\n    return GlobeSurfaceTileProvider;\n});\n","define([\n        '../Core/AttributeCompression',\n        '../Core/binarySearch',\n        '../Core/BoundingSphere',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/Cartographic',\n        '../Core/defined',\n        '../Core/HeightmapTerrainData',\n        '../Core/Math',\n        '../Core/DeveloperError',\n        '../Core/OrientedBoundingBox',\n        '../Core/Queue',\n        '../Core/Rectangle',\n        '../Core/TileEdge',\n        '../Core/TerrainEncoding',\n        '../Core/TerrainMesh',\n        '../Core/WebMercatorProjection',\n        './GlobeSurfaceTile',\n        './TileSelectionResult'\n    ], function(\n        AttributeCompression,\n        binarySearch,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        defined,\n        HeightmapTerrainData,\n        CesiumMath,\n        DeveloperError,\n        OrientedBoundingBox,\n        Queue,\n        Rectangle,\n        TileEdge,\n        TerrainEncoding,\n        TerrainMesh,\n        WebMercatorProjection,\n        GlobeSurfaceTile,\n        TileSelectionResult) {\n    'use strict';\n\n    function TerrainFillMesh(tile) {\n        this.tile = tile;\n        this.frameLastUpdated = undefined;\n        this.westMeshes = []; // north to south (CCW)\n        this.westTiles = [];\n        this.southMeshes = []; // west to east (CCW)\n        this.southTiles = [];\n        this.eastMeshes = []; // south to north (CCW)\n        this.eastTiles = [];\n        this.northMeshes = []; // east to west (CCW)\n        this.northTiles = [];\n        this.southwestMesh = undefined;\n        this.southwestTile = undefined;\n        this.southeastMesh = undefined;\n        this.southeastTile = undefined;\n        this.northwestMesh = undefined;\n        this.northwestTile = undefined;\n        this.northeastMesh = undefined;\n        this.northeastTile = undefined;\n        this.changedThisFrame = true;\n        this.visitedFrame = undefined;\n        this.enqueuedFrame = undefined;\n        this.mesh = undefined;\n        this.vertexArray = undefined;\n        this.waterMaskTexture = undefined;\n        this.waterMaskTranslationAndScale = new Cartesian4();\n    }\n\n    TerrainFillMesh.prototype.update = function(tileProvider, frameState, vertexArraysToDestroy) {\n        if (this.changedThisFrame) {\n            createFillMesh(tileProvider, frameState, this.tile, vertexArraysToDestroy);\n            this.changedThisFrame = false;\n        }\n    };\n\n    TerrainFillMesh.prototype.destroy = function(vertexArraysToDestroy) {\n        if (defined(this.vertexArray)) {\n            if (defined(vertexArraysToDestroy)) {\n                vertexArraysToDestroy.push(this.vertexArray);\n            } else {\n                GlobeSurfaceTile._freeVertexArray(this.vertexArray, vertexArraysToDestroy);\n            }\n            this.vertexArray = undefined;\n        }\n\n        if (defined(this.waterMaskTexture)) {\n            --this.waterMaskTexture.referenceCount;\n            if (this.waterMaskTexture.referenceCount === 0) {\n                this.waterMaskTexture.destroy();\n            }\n            this.waterMaskTexture = undefined;\n        }\n\n        return undefined;\n    };\n\n    var traversalQueueScratch = new Queue();\n\n    TerrainFillMesh.updateFillTiles = function(tileProvider, renderedTiles, frameState, vertexArraysToDestroy) {\n        // We want our fill tiles to look natural, which means they should align perfectly with\n        // adjacent loaded tiles, and their edges that are not adjacent to loaded tiles should have\n        // sensible heights (e.g. the average of the heights of loaded edges). Some fill tiles may\n        // be adjacent only to other fill tiles, and in that case heights should be assigned fanning\n        // outward from the loaded tiles so that there are no sudden changes in height.\n\n        // We do this with a breadth-first traversal of the rendered tiles, starting with the loaded\n        // ones. Graph nodes are tiles and graph edges connect to other rendered tiles that are spatially adjacent\n        // to those tiles. As we visit each node, we propagate tile edges to adjacent tiles. If there's no data\n        // for a tile edge,  we create an edge with an average height and then propagate it. If an edge is partially defined\n        // (e.g. an edge is adjacent to multiple more-detailed tiles and only some of them are loaded), we\n        // fill in the rest of the edge with the same height.\n        var quadtree = tileProvider._quadtree;\n        var levelZeroTiles = quadtree._levelZeroTiles;\n        var lastSelectionFrameNumber = quadtree._lastSelectionFrameNumber;\n\n        var traversalQueue = traversalQueueScratch;\n        traversalQueue.clear();\n\n        // Add the tiles with real geometry to the traversal queue.\n        for (var i = 0; i < renderedTiles.length; ++i) {\n            var renderedTile = renderedTiles[i];\n            if (defined(renderedTile.data.vertexArray)) {\n                traversalQueue.enqueue(renderedTiles[i]);\n            }\n        }\n\n        var tile = traversalQueue.dequeue();\n\n        while (tile !== undefined) {\n            var tileToWest = tile.findTileToWest(levelZeroTiles);\n            var tileToSouth = tile.findTileToSouth(levelZeroTiles);\n            var tileToEast = tile.findTileToEast(levelZeroTiles);\n            var tileToNorth = tile.findTileToNorth(levelZeroTiles);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToWest, lastSelectionFrameNumber, TileEdge.EAST, false, traversalQueue, vertexArraysToDestroy);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToSouth, lastSelectionFrameNumber, TileEdge.NORTH, false, traversalQueue, vertexArraysToDestroy);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToEast, lastSelectionFrameNumber, TileEdge.WEST, false, traversalQueue, vertexArraysToDestroy);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToNorth, lastSelectionFrameNumber, TileEdge.SOUTH, false, traversalQueue, vertexArraysToDestroy);\n\n            var tileToNorthwest = tileToWest.findTileToNorth(levelZeroTiles);\n            var tileToSouthwest = tileToWest.findTileToSouth(levelZeroTiles);\n            var tileToNortheast = tileToEast.findTileToNorth(levelZeroTiles);\n            var tileToSoutheast = tileToEast.findTileToSouth(levelZeroTiles);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToNorthwest, lastSelectionFrameNumber, TileEdge.SOUTHEAST, false, traversalQueue, vertexArraysToDestroy);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToNortheast, lastSelectionFrameNumber, TileEdge.SOUTHWEST, false, traversalQueue, vertexArraysToDestroy);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToSouthwest, lastSelectionFrameNumber, TileEdge.NORTHEAST, false, traversalQueue, vertexArraysToDestroy);\n            visitRenderedTiles(tileProvider, frameState, tile, tileToSoutheast, lastSelectionFrameNumber, TileEdge.NORTHWEST, false, traversalQueue, vertexArraysToDestroy);\n\n            tile = traversalQueue.dequeue();\n        }\n    };\n\n    function visitRenderedTiles(tileProvider, frameState, sourceTile, startTile, currentFrameNumber, tileEdge, downOnly, traversalQueue, vertexArraysToDestroy) {\n        if (startTile === undefined) {\n            // There are no tiles North or South of the poles.\n            return;\n        }\n\n        var tile = startTile;\n        while (tile && (tile._lastSelectionResultFrame !== currentFrameNumber || TileSelectionResult.wasKicked(tile._lastSelectionResult) || TileSelectionResult.originalResult(tile._lastSelectionResult) === TileSelectionResult.CULLED)) {\n            // This tile wasn't visited or it was visited and then kicked, so walk up to find the closest ancestor that was rendered.\n            // We also walk up if the tile was culled, because if siblings were kicked an ancestor may have been rendered.\n            if (downOnly) {\n                return;\n            }\n\n            var parent = tile.parent;\n            if (tileEdge >= TileEdge.NORTHWEST && parent !== undefined) {\n                // When we're looking for a corner, verify that the parent tile is still relevant.\n                // That is, the parent and child must share the corner in question.\n                switch (tileEdge) {\n                    case TileEdge.NORTHWEST:\n                        tile = tile === parent.northwestChild ? parent : undefined;\n                        break;\n                    case TileEdge.NORTHEAST:\n                        tile = tile === parent.northeastChild ? parent : undefined;\n                        break;\n                    case TileEdge.SOUTHWEST:\n                        tile = tile === parent.southwestChild ? parent : undefined;\n                        break;\n                    case TileEdge.SOUTHEAST:\n                        tile = tile === parent.southeastChild ? parent : undefined;\n                        break;\n                }\n            } else {\n                tile = parent;\n            }\n        }\n\n        if (tile === undefined) {\n            return;\n        }\n\n        if (tile._lastSelectionResult === TileSelectionResult.RENDERED) {\n            if (defined(tile.data.vertexArray)) {\n                // No further processing necessary for renderable tiles.\n                return;\n            }\n            visitTile(tileProvider, frameState, sourceTile, tile, tileEdge, currentFrameNumber, traversalQueue, vertexArraysToDestroy);\n            return;\n        }\n\n        if (TileSelectionResult.originalResult(startTile._lastSelectionResult) === TileSelectionResult.CULLED) {\n            return;\n        }\n\n        // This tile was refined, so find rendered children, if any.\n        // Visit the tiles in counter-clockwise order.\n        switch (tileEdge) {\n            case TileEdge.WEST:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.northwestChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.southwestChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.EAST:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.southeastChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.northeastChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.SOUTH:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.southwestChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.southeastChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.NORTH:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.northeastChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.northwestChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.NORTHWEST:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.northwestChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.NORTHEAST:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.northeastChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.SOUTHWEST:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.southwestChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            case TileEdge.SOUTHEAST:\n                visitRenderedTiles(tileProvider, frameState, sourceTile, startTile.southeastChild, currentFrameNumber, tileEdge, true, traversalQueue, vertexArraysToDestroy);\n                break;\n            default:\n                throw new DeveloperError('Invalid edge');\n        }\n    }\n\n    function visitTile(tileProvider, frameState, sourceTile, destinationTile, tileEdge, frameNumber, traversalQueue, vertexArraysToDestroy) {\n        var destinationSurfaceTile = destinationTile.data;\n\n        if (destinationSurfaceTile.fill === undefined) {\n            destinationSurfaceTile.fill = new TerrainFillMesh(destinationTile);\n        } else if (destinationSurfaceTile.fill.visitedFrame === frameNumber) {\n            // Don't propagate edges to tiles that have already been visited this frame.\n            return;\n        }\n\n        if (destinationSurfaceTile.fill.enqueuedFrame !== frameNumber) {\n            // First time visiting this tile this frame, add it to the traversal queue.\n            destinationSurfaceTile.fill.enqueuedFrame = frameNumber;\n            destinationSurfaceTile.fill.changedThisFrame = false;\n            traversalQueue.enqueue(destinationTile);\n        }\n\n        propagateEdge(tileProvider, frameState, sourceTile, destinationTile, tileEdge, vertexArraysToDestroy);\n    }\n\n    function propagateEdge(tileProvider, frameState, sourceTile, destinationTile, tileEdge, vertexArraysToDestroy) {\n        var destinationFill = destinationTile.data.fill;\n\n        var sourceMesh;\n        var sourceFill = sourceTile.data.fill;\n        if (defined(sourceFill)) {\n            sourceFill.visitedFrame = frameState.frameNumber;\n\n            // Source is a fill, create/update it if necessary.\n            if (sourceFill.changedThisFrame) {\n                createFillMesh(tileProvider, frameState, sourceTile, vertexArraysToDestroy);\n                sourceFill.changedThisFrame = false;\n            }\n            sourceMesh = sourceTile.data.fill.mesh;\n        } else {\n            sourceMesh = sourceTile.data.mesh;\n        }\n\n        var edgeMeshes;\n        var edgeTiles;\n\n        switch (tileEdge) {\n            case TileEdge.WEST:\n                edgeMeshes = destinationFill.westMeshes;\n                edgeTiles = destinationFill.westTiles;\n                break;\n            case TileEdge.SOUTH:\n                edgeMeshes = destinationFill.southMeshes;\n                edgeTiles = destinationFill.southTiles;\n                break;\n            case TileEdge.EAST:\n                edgeMeshes = destinationFill.eastMeshes;\n                edgeTiles = destinationFill.eastTiles;\n                break;\n            case TileEdge.NORTH:\n                edgeMeshes = destinationFill.northMeshes;\n                edgeTiles = destinationFill.northTiles;\n                break;\n            // Corners are simpler.\n            case TileEdge.NORTHWEST:\n                destinationFill.changedThisFrame = destinationFill.changedThisFrame || destinationFill.northwestMesh !== sourceMesh;\n                destinationFill.northwestMesh = sourceMesh;\n                destinationFill.northwestTile = sourceTile;\n                return;\n            case TileEdge.NORTHEAST:\n                destinationFill.changedThisFrame = destinationFill.changedThisFrame || destinationFill.northeastMesh !== sourceMesh;\n                destinationFill.northeastMesh = sourceMesh;\n                destinationFill.northeastTile = sourceTile;\n                return;\n            case TileEdge.SOUTHWEST:\n                destinationFill.changedThisFrame = destinationFill.changedThisFrame || destinationFill.southwestMesh !== sourceMesh;\n                destinationFill.southwestMesh = sourceMesh;\n                destinationFill.southwestTile = sourceTile;\n                return;\n            case TileEdge.SOUTHEAST:\n                destinationFill.changedThisFrame = destinationFill.changedThisFrame || destinationFill.southeastMesh !== sourceMesh;\n                destinationFill.southeastMesh = sourceMesh;\n                destinationFill.southeastTile = sourceTile;\n                return;\n        }\n\n        if (sourceTile.level <= destinationTile.level) {\n            // Source edge completely spans the destination edge.\n            destinationFill.changedThisFrame = destinationFill.changedThisFrame || edgeMeshes[0] !== sourceMesh || edgeMeshes.length !== 1;\n            edgeMeshes[0] = sourceMesh;\n            edgeTiles[0] = sourceTile;\n            edgeMeshes.length = 1;\n            edgeTiles.length = 1;\n            return;\n        }\n\n        // Source edge is a subset of the destination edge.\n        // Figure out the range of meshes we're replacing.\n        var startIndex, endIndex, existingTile, existingRectangle;\n        var sourceRectangle = sourceTile.rectangle;\n\n        var epsilon;\n        var destinationRectangle = destinationTile.rectangle;\n\n        switch (tileEdge) {\n            case TileEdge.WEST:\n                epsilon = (destinationRectangle.north - destinationRectangle.south) * CesiumMath.EPSILON5;\n\n                for (startIndex = 0; startIndex < edgeTiles.length; ++startIndex) {\n                    existingTile = edgeTiles[startIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.greaterThan(sourceRectangle.north, existingRectangle.south, epsilon)) {\n                        break;\n                    }\n                }\n                for (endIndex = startIndex; endIndex < edgeTiles.length; ++endIndex) {\n                    existingTile = edgeTiles[endIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.greaterThanOrEquals(sourceRectangle.south, existingRectangle.north, epsilon)) {\n                        break;\n                    }\n                }\n                break;\n            case TileEdge.SOUTH:\n                epsilon = (destinationRectangle.east - destinationRectangle.west) * CesiumMath.EPSILON5;\n\n                for (startIndex = 0; startIndex < edgeTiles.length; ++startIndex) {\n                    existingTile = edgeTiles[startIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.lessThan(sourceRectangle.west, existingRectangle.east, epsilon)) {\n                        break;\n                    }\n                }\n                for (endIndex = startIndex; endIndex < edgeTiles.length; ++endIndex) {\n                    existingTile = edgeTiles[endIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.lessThanOrEquals(sourceRectangle.east, existingRectangle.west, epsilon)) {\n                        break;\n                    }\n                }\n                break;\n            case TileEdge.EAST:\n                epsilon = (destinationRectangle.north - destinationRectangle.south) * CesiumMath.EPSILON5;\n\n                for (startIndex = 0; startIndex < edgeTiles.length; ++startIndex) {\n                    existingTile = edgeTiles[startIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.lessThan(sourceRectangle.south, existingRectangle.north, epsilon)) {\n                        break;\n                    }\n                }\n                for (endIndex = startIndex; endIndex < edgeTiles.length; ++endIndex) {\n                    existingTile = edgeTiles[endIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.lessThanOrEquals(sourceRectangle.north, existingRectangle.south, epsilon)) {\n                        break;\n                    }\n                }\n                break;\n            case TileEdge.NORTH:\n                epsilon = (destinationRectangle.east - destinationRectangle.west) * CesiumMath.EPSILON5;\n\n                for (startIndex = 0; startIndex < edgeTiles.length; ++startIndex) {\n                    existingTile = edgeTiles[startIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.greaterThan(sourceRectangle.east, existingRectangle.west, epsilon)) {\n                        break;\n                    }\n                }\n                for (endIndex = startIndex; endIndex < edgeTiles.length; ++endIndex) {\n                    existingTile = edgeTiles[endIndex];\n                    existingRectangle = existingTile.rectangle;\n                    if (CesiumMath.greaterThanOrEquals(sourceRectangle.west, existingRectangle.east, epsilon)) {\n                        break;\n                    }\n                }\n                break;\n        }\n\n        if (endIndex - startIndex === 1) {\n            destinationFill.changedThisFrame = destinationFill.changedThisFrame || edgeMeshes[startIndex] !== sourceMesh;\n            edgeMeshes[startIndex] = sourceMesh;\n            edgeTiles[startIndex] = sourceTile;\n        } else {\n            destinationFill.changedThisFrame = true;\n            edgeMeshes.splice(startIndex, endIndex - startIndex, sourceMesh);\n            edgeTiles.splice(startIndex, endIndex - startIndex, sourceTile);\n        }\n    }\n\n    var cartographicScratch = new Cartographic();\n    var centerCartographicScratch = new Cartographic();\n    var cartesianScratch = new Cartesian3();\n    var normalScratch = new Cartesian3();\n    var octEncodedNormalScratch = new Cartesian2();\n    var uvScratch2 = new Cartesian2();\n    var uvScratch = new Cartesian2();\n\n    function HeightAndNormal() {\n        this.height = 0.0;\n        this.encodedNormal = new Cartesian2();\n    }\n\n    function fillMissingCorner(fill, ellipsoid, u, v, corner, adjacentCorner1, adjacentCorner2, oppositeCorner, vertex) {\n        if (defined(corner)) {\n            return corner;\n        }\n\n        var height;\n\n        if (defined(adjacentCorner1) && defined(adjacentCorner2)) {\n            height = (adjacentCorner1.height + adjacentCorner2.height) * 0.5;\n        } else if (defined(adjacentCorner1)) {\n            height = adjacentCorner1.height;\n        } else if (defined(adjacentCorner2)) {\n            height = adjacentCorner2.height;\n        } else if (defined(oppositeCorner)) {\n            height = oppositeCorner.height;\n        } else {\n            var surfaceTile = fill.tile.data;\n            var tileBoundingRegion = surfaceTile.tileBoundingRegion;\n            var minimumHeight = 0.0;\n            var maximumHeight = 0.0;\n            if (defined(tileBoundingRegion)) {\n                minimumHeight = tileBoundingRegion.minimumHeight;\n                maximumHeight = tileBoundingRegion.maximumHeight;\n            }\n            height = (minimumHeight + maximumHeight) * 0.5;\n        }\n\n        getVertexWithHeightAtCorner(fill, ellipsoid, u, v, height, vertex);\n        return vertex;\n    }\n\n    var heightRangeScratch = {\n        minimumHeight: 0.0,\n        maximumHeight: 0.0\n    };\n\n    var swVertexScratch = new HeightAndNormal();\n    var seVertexScratch = new HeightAndNormal();\n    var nwVertexScratch = new HeightAndNormal();\n    var neVertexScratch = new HeightAndNormal();\n    var heightmapBuffer = typeof Uint8Array !== 'undefined' ? new Uint8Array(9 * 9) : undefined;\n\n    function createFillMesh(tileProvider, frameState, tile, vertexArraysToDestroy) {\n        GlobeSurfaceTile.initialize(tile, tileProvider.terrainProvider, tileProvider._imageryLayers);\n\n        var surfaceTile = tile.data;\n        var fill = surfaceTile.fill;\n        var rectangle = tile.rectangle;\n\n        var ellipsoid = tile.tilingScheme.ellipsoid;\n\n        var nwCorner = getCorner(fill, ellipsoid, 0.0, 1.0, fill.northwestTile, fill.northwestMesh, fill.northTiles, fill.northMeshes, fill.westTiles, fill.westMeshes, nwVertexScratch);\n        var swCorner = getCorner(fill, ellipsoid, 0.0, 0.0, fill.southwestTile, fill.southwestMesh, fill.westTiles, fill.westMeshes, fill.southTiles, fill.southMeshes, swVertexScratch);\n        var seCorner = getCorner(fill, ellipsoid, 1.0, 0.0, fill.southeastTile, fill.southeastMesh, fill.southTiles, fill.southMeshes, fill.eastTiles, fill.eastMeshes, seVertexScratch);\n        var neCorner = getCorner(fill, ellipsoid, 1.0, 1.0, fill.northeastTile, fill.northeastMesh, fill.eastTiles, fill.eastMeshes, fill.northTiles, fill.northMeshes, neVertexScratch);\n\n        nwCorner = fillMissingCorner(fill, ellipsoid, 0.0, 1.0, nwCorner, swCorner, neCorner, seCorner, nwVertexScratch);\n        swCorner = fillMissingCorner(fill, ellipsoid, 0.0, 0.0, swCorner, nwCorner, seCorner, neCorner, swVertexScratch);\n        seCorner = fillMissingCorner(fill, ellipsoid, 1.0, 1.0, seCorner, swCorner, neCorner, nwCorner, seVertexScratch);\n        neCorner = fillMissingCorner(fill, ellipsoid, 1.0, 1.0, neCorner, seCorner, nwCorner, swCorner, neVertexScratch);\n\n        var southwestHeight = swCorner.height;\n        var southeastHeight = seCorner.height;\n        var northwestHeight = nwCorner.height;\n        var northeastHeight = neCorner.height;\n\n        var minimumHeight = Math.min(southwestHeight, southeastHeight, northwestHeight, northeastHeight);\n        var maximumHeight = Math.max(southwestHeight, southeastHeight, northwestHeight, northeastHeight);\n\n        var middleHeight = (minimumHeight + maximumHeight) * 0.5;\n\n        var i;\n        var len;\n\n        // For low-detail tiles, our usual fill tile approach will create tiles that\n        // look really blocky because they don't have enough vertices to account for the\n        // Earth's curvature. But the height range will also typically be well within\n        // the allowed geometric error for those levels. So fill such tiles with a\n        // constant-height heightmap.\n        var geometricError = tileProvider.getLevelMaximumGeometricError(tile.level);\n        var minCutThroughRadius = ellipsoid.maximumRadius - geometricError;\n        var maxTileWidth = Math.acos(minCutThroughRadius / ellipsoid.maximumRadius) * 4.0;\n\n        // When the tile width is greater than maxTileWidth as computed above, the error\n        // of a normal fill tile from globe curvature alone will exceed the allowed geometric\n        // error. Terrain won't change that much. However, we can allow more error than that.\n        // A little blockiness during load is acceptable. For the WGS84 ellipsoid and\n        // standard geometric error setup, the value here will have us use a heightmap\n        // at levels 1, 2, and 3.\n        maxTileWidth *= 1.5;\n\n        if (rectangle.width > maxTileWidth && (maximumHeight - minimumHeight) <= geometricError) {\n            var terrainData = new HeightmapTerrainData({\n                width: 9,\n                height: 9,\n                buffer: heightmapBuffer,\n                structure: {\n                    // Use the maximum as the constant height so that this tile's skirt\n                    // covers any cracks with adjacent tiles.\n                    heightOffset: maximumHeight\n                }\n            });\n            fill.mesh = terrainData._createMeshSync(tile.tilingScheme, tile.x, tile.y, tile.level, 1.0);\n        } else {\n            var encoding = new TerrainEncoding(undefined, undefined, undefined, undefined, true, true);\n\n            var centerCartographic = centerCartographicScratch;\n            centerCartographic.longitude = (rectangle.east + rectangle.west) * 0.5;\n            centerCartographic.latitude = (rectangle.north + rectangle.south) * 0.5;\n            centerCartographic.height = middleHeight;\n            encoding.center = ellipsoid.cartographicToCartesian(centerCartographic, encoding.center);\n\n            // At _most_, we have vertices for the 4 corners, plus 1 center, plus every adjacent edge vertex.\n            // In reality there will be less most of the time, but close enough; better\n            // to overestimate than to re-allocate/copy/traverse the vertices twice.\n            // Also, we'll often be able to squeeze the index data into the extra space in the buffer.\n            var maxVertexCount = 5;\n            var meshes;\n\n            meshes = fill.westMeshes;\n            for (i = 0, len = meshes.length; i < len; ++i) {\n                maxVertexCount += meshes[i].eastIndicesNorthToSouth.length;\n            }\n\n            meshes = fill.southMeshes;\n            for (i = 0, len = meshes.length; i < len; ++i) {\n                maxVertexCount += meshes[i].northIndicesWestToEast.length;\n            }\n\n            meshes = fill.eastMeshes;\n            for (i = 0, len = meshes.length; i < len; ++i) {\n                maxVertexCount += meshes[i].westIndicesSouthToNorth.length;\n            }\n\n            meshes = fill.northMeshes;\n            for (i = 0, len = meshes.length; i < len; ++i) {\n                maxVertexCount += meshes[i].southIndicesEastToWest.length;\n            }\n\n            var heightRange = heightRangeScratch;\n            heightRange.minimumHeight = minimumHeight;\n            heightRange.maximumHeight = maximumHeight;\n\n            var stride = encoding.getStride();\n            var typedArray = new Float32Array(maxVertexCount * stride);\n\n            var nextIndex = 0;\n            var northwestIndex = nextIndex;\n            nextIndex = addVertexWithComputedPosition(ellipsoid, rectangle, encoding, typedArray, nextIndex, 0.0, 1.0, nwCorner.height, nwCorner.encodedNormal, 1.0, heightRange);\n            nextIndex = addEdge(fill, ellipsoid, encoding, typedArray, nextIndex, fill.westTiles, fill.westMeshes, TileEdge.EAST, heightRange);\n            var southwestIndex = nextIndex;\n            nextIndex = addVertexWithComputedPosition(ellipsoid, rectangle, encoding, typedArray, nextIndex, 0.0, 0.0, swCorner.height, swCorner.encodedNormal, 0.0, heightRange);\n            nextIndex = addEdge(fill, ellipsoid, encoding, typedArray, nextIndex, fill.southTiles, fill.southMeshes, TileEdge.NORTH, heightRange);\n            var southeastIndex = nextIndex;\n            nextIndex = addVertexWithComputedPosition(ellipsoid, rectangle, encoding, typedArray, nextIndex, 1.0, 0.0, seCorner.height, seCorner.encodedNormal, 0.0, heightRange);\n            nextIndex = addEdge(fill, ellipsoid, encoding, typedArray, nextIndex, fill.eastTiles, fill.eastMeshes, TileEdge.WEST, heightRange);\n            var northeastIndex = nextIndex;\n            nextIndex = addVertexWithComputedPosition(ellipsoid, rectangle, encoding, typedArray, nextIndex, 1.0, 1.0, neCorner.height, neCorner.encodedNormal, 1.0, heightRange);\n            nextIndex = addEdge(fill, ellipsoid, encoding, typedArray, nextIndex, fill.northTiles, fill.northMeshes, TileEdge.SOUTH, heightRange);\n\n            minimumHeight = heightRange.minimumHeight;\n            maximumHeight = heightRange.maximumHeight;\n\n            var obb = OrientedBoundingBox.fromRectangle(rectangle, minimumHeight, maximumHeight, tile.tilingScheme.ellipsoid);\n\n            // Add a single vertex at the center of the tile.\n            var southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(rectangle.south);\n            var oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(rectangle.north) - southMercatorY);\n            var centerWebMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(centerCartographic.latitude) - southMercatorY) * oneOverMercatorHeight;\n\n            ellipsoid.geodeticSurfaceNormalCartographic(cartographicScratch, normalScratch);\n            var centerEncodedNormal = AttributeCompression.octEncode(normalScratch, octEncodedNormalScratch);\n\n            var centerIndex = nextIndex;\n            encoding.encode(typedArray, nextIndex * stride, obb.center, Cartesian2.fromElements(0.5, 0.5, uvScratch), middleHeight, centerEncodedNormal, centerWebMercatorT);\n            ++nextIndex;\n\n            var vertexCount = nextIndex;\n\n            var bytesPerIndex = vertexCount < 256 ? 1 : 2;\n            var indexCount = (vertexCount - 1) * 3; // one triangle per edge vertex\n            var indexDataBytes = indexCount * bytesPerIndex;\n            var availableBytesInBuffer = (typedArray.length - vertexCount * stride) * Float32Array.BYTES_PER_ELEMENT;\n\n            var indices;\n            if (availableBytesInBuffer >= indexDataBytes) {\n                // Store the index data in the same buffer as the vertex data.\n                var startIndex = vertexCount * stride * Float32Array.BYTES_PER_ELEMENT;\n                indices = vertexCount < 256\n                    ? new Uint8Array(typedArray.buffer, startIndex, indexCount)\n                    : new Uint16Array(typedArray.buffer, startIndex, indexCount);\n            } else {\n                // Allocate a new buffer for the index data.\n                indices = vertexCount < 256 ? new Uint8Array(indexCount) : new Uint16Array(indexCount);\n            }\n\n            typedArray = new Float32Array(typedArray.buffer, 0, vertexCount * stride);\n\n            var indexOut = 0;\n            for (i = 0; i < vertexCount - 2; ++i) {\n                indices[indexOut++] = centerIndex;\n                indices[indexOut++] = i;\n                indices[indexOut++] = i + 1;\n            }\n\n            indices[indexOut++] = centerIndex;\n            indices[indexOut++] = i;\n            indices[indexOut++] = 0;\n\n            var westIndicesSouthToNorth = [];\n            for (i = southwestIndex; i >= northwestIndex; --i) {\n                westIndicesSouthToNorth.push(i);\n            }\n\n            var southIndicesEastToWest = [];\n            for (i = southeastIndex; i >= southwestIndex; --i) {\n                southIndicesEastToWest.push(i);\n            }\n\n            var eastIndicesNorthToSouth = [];\n            for (i = northeastIndex; i >= southeastIndex; --i) {\n                eastIndicesNorthToSouth.push(i);\n            }\n\n            var northIndicesWestToEast = [];\n            northIndicesWestToEast.push(0);\n            for (i = centerIndex - 1; i >= northeastIndex; --i) {\n                northIndicesWestToEast.push(i);\n            }\n\n            fill.mesh = new TerrainMesh(\n                encoding.center,\n                typedArray,\n                indices,\n                minimumHeight,\n                maximumHeight,\n                BoundingSphere.fromOrientedBoundingBox(obb),\n                computeOccludeePoint(tileProvider, obb.center, rectangle, maximumHeight),\n                encoding.getStride(),\n                obb,\n                encoding,\n                frameState.terrainExaggeration,\n                westIndicesSouthToNorth,\n                southIndicesEastToWest,\n                eastIndicesNorthToSouth,\n                northIndicesWestToEast\n            );\n        }\n\n        var context = frameState.context;\n\n        if (defined(fill.vertexArray)) {\n            if (defined(vertexArraysToDestroy)) {\n                vertexArraysToDestroy.push(fill.vertexArray);\n            } else {\n                GlobeSurfaceTile._freeVertexArray(fill.vertexArray);\n            }\n        }\n\n        fill.vertexArray = GlobeSurfaceTile._createVertexArrayForMesh(context, fill.mesh);\n        surfaceTile.processImagery(tile, tileProvider.terrainProvider, frameState, true);\n\n        var oldTexture = fill.waterMaskTexture;\n        fill.waterMaskTexture = undefined;\n\n        if (tileProvider.terrainProvider.hasWaterMask) {\n            var waterSourceTile = surfaceTile._findAncestorTileWithTerrainData(tile);\n            if (defined(waterSourceTile) && defined(waterSourceTile.data.waterMaskTexture)) {\n                fill.waterMaskTexture = waterSourceTile.data.waterMaskTexture;\n                ++fill.waterMaskTexture.referenceCount;\n                surfaceTile._computeWaterMaskTranslationAndScale(tile, waterSourceTile, fill.waterMaskTranslationAndScale);\n            }\n        }\n\n        if (defined(oldTexture)) {\n            --oldTexture.referenceCount;\n            if (oldTexture.referenceCount === 0) {\n                oldTexture.destroy();\n            }\n        }\n    }\n\n    function addVertexWithComputedPosition(ellipsoid, rectangle, encoding, buffer, index, u, v, height, encodedNormal, webMercatorT, heightRange) {\n        var cartographic = cartographicScratch;\n        cartographic.longitude = CesiumMath.lerp(rectangle.west, rectangle.east, u);\n        cartographic.latitude = CesiumMath.lerp(rectangle.south, rectangle.north, v);\n        cartographic.height = height;\n        var position = ellipsoid.cartographicToCartesian(cartographic, cartesianScratch);\n\n        var uv = uvScratch2;\n        uv.x = u;\n        uv.y = v;\n\n        encoding.encode(buffer, index * encoding.getStride(), position, uv, height, encodedNormal, webMercatorT);\n\n        heightRange.minimumHeight = Math.min(heightRange.minimumHeight, height);\n        heightRange.maximumHeight = Math.max(heightRange.maximumHeight, height);\n\n        return index + 1;\n    }\n\n    var sourceRectangleScratch = new Rectangle();\n\n    function transformTextureCoordinates(sourceTile, targetTile, coordinates, result) {\n        var sourceRectangle = sourceTile.rectangle;\n        var targetRectangle = targetTile.rectangle;\n\n        // Handle transforming across the anti-meridian.\n        if (targetTile.x === 0 && coordinates.x === 1.0 && sourceTile.x === sourceTile.tilingScheme.getNumberOfXTilesAtLevel(sourceTile.level) - 1) {\n            sourceRectangle = Rectangle.clone(sourceTile.rectangle, sourceRectangleScratch);\n            sourceRectangle.west -= CesiumMath.TWO_PI;\n            sourceRectangle.east -= CesiumMath.TWO_PI;\n        } else if (sourceTile.x === 0 && coordinates.x === 0.0 && targetTile.x === targetTile.tilingScheme.getNumberOfXTilesAtLevel(targetTile.level) - 1) {\n            sourceRectangle = Rectangle.clone(sourceTile.rectangle, sourceRectangleScratch);\n            sourceRectangle.west += CesiumMath.TWO_PI;\n            sourceRectangle.east += CesiumMath.TWO_PI;\n        }\n\n        var sourceWidth = sourceRectangle.east - sourceRectangle.west;\n        var umin = (targetRectangle.west - sourceRectangle.west) / sourceWidth;\n        var umax = (targetRectangle.east - sourceRectangle.west) / sourceWidth;\n\n        var sourceHeight = sourceRectangle.north - sourceRectangle.south;\n        var vmin = (targetRectangle.south - sourceRectangle.south) / sourceHeight;\n        var vmax = (targetRectangle.north - sourceRectangle.south) / sourceHeight;\n\n        var u = (coordinates.x - umin) / (umax - umin);\n        var v = (coordinates.y - vmin) / (vmax - vmin);\n\n        // Ensure that coordinates very near the corners are at the corners.\n        if (Math.abs(u) < Math.EPSILON5) {\n            u = 0.0;\n        } else if (Math.abs(u - 1.0) < Math.EPSILON5) {\n            u = 1.0;\n        }\n\n        if (Math.abs(v) < Math.EPSILON5) {\n            v = 0.0;\n        } else if (Math.abs(v - 1.0) < Math.EPSILON5) {\n            v = 1.0;\n        }\n\n        result.x = u;\n        result.y = v;\n        return result;\n    }\n\n    var encodedNormalScratch = new Cartesian2();\n\n    function getVertexFromTileAtCorner(sourceMesh, sourceIndex, u, v, vertex) {\n        var sourceEncoding = sourceMesh.encoding;\n        var sourceVertices = sourceMesh.vertices;\n\n        vertex.height = sourceEncoding.decodeHeight(sourceVertices, sourceIndex);\n\n        if (sourceEncoding.hasVertexNormals) {\n            sourceEncoding.getOctEncodedNormal(sourceVertices, sourceIndex, vertex.encodedNormal);\n        } else {\n            var normal = vertex.encodedNormal;\n            normal.x = 0.0;\n            normal.y = 0.0;\n        }\n    }\n\n    var encodedNormalScratch2 = new Cartesian2();\n    var cartesianScratch2 = new Cartesian3();\n\n    function getInterpolatedVertexAtCorner(ellipsoid, sourceTile, targetTile, sourceMesh, previousIndex, nextIndex, u, v, interpolateU, vertex) {\n        var sourceEncoding = sourceMesh.encoding;\n        var sourceVertices = sourceMesh.vertices;\n\n        var previousUv = transformTextureCoordinates(sourceTile, targetTile, sourceEncoding.decodeTextureCoordinates(sourceVertices, previousIndex, uvScratch), uvScratch);\n        var nextUv = transformTextureCoordinates(sourceTile, targetTile, sourceEncoding.decodeTextureCoordinates(sourceVertices, nextIndex, uvScratch2), uvScratch2);\n\n        var ratio;\n        if (interpolateU) {\n            ratio = (u - previousUv.x) / (nextUv.x - previousUv.x);\n        } else {\n            ratio = (v - previousUv.y) / (nextUv.y - previousUv.y);\n        }\n\n        var height1 = sourceEncoding.decodeHeight(sourceVertices, previousIndex);\n        var height2 = sourceEncoding.decodeHeight(sourceVertices, nextIndex);\n\n        var targetRectangle = targetTile.rectangle;\n        cartographicScratch.longitude = CesiumMath.lerp(targetRectangle.west, targetRectangle.east, u);\n        cartographicScratch.latitude = CesiumMath.lerp(targetRectangle.south, targetRectangle.north, v);\n        vertex.height = cartographicScratch.height = CesiumMath.lerp(height1, height2, ratio);\n\n        var normal;\n        if (sourceEncoding.hasVertexNormals) {\n            var encodedNormal1 = sourceEncoding.getOctEncodedNormal(sourceVertices, previousIndex, encodedNormalScratch);\n            var encodedNormal2 = sourceEncoding.getOctEncodedNormal(sourceVertices, nextIndex, encodedNormalScratch2);\n            var normal1 = AttributeCompression.octDecode(encodedNormal1.x, encodedNormal1.y, cartesianScratch);\n            var normal2 = AttributeCompression.octDecode(encodedNormal2.x, encodedNormal2.y, cartesianScratch2);\n            normal = Cartesian3.lerp(normal1, normal2, ratio, cartesianScratch);\n            Cartesian3.normalize(normal, normal);\n            AttributeCompression.octEncode(normal, vertex.encodedNormal);\n        } else {\n            normal = ellipsoid.geodeticSurfaceNormalCartographic(cartographicScratch, cartesianScratch);\n            AttributeCompression.octEncode(normal, vertex.encodedNormal);\n        }\n    }\n\n    function getVertexWithHeightAtCorner(terrainFillMesh, ellipsoid, u, v, height, vertex) {\n        vertex.height = height;\n        var normal = ellipsoid.geodeticSurfaceNormalCartographic(cartographicScratch, cartesianScratch);\n        AttributeCompression.octEncode(normal, vertex.encodedNormal);\n    }\n\n    function getCorner(\n        terrainFillMesh,\n        ellipsoid,\n        u, v,\n        cornerTile, cornerMesh,\n        previousEdgeTiles, previousEdgeMeshes,\n        nextEdgeTiles, nextEdgeMeshes,\n        vertex\n    ) {\n        var gotCorner =\n            getCornerFromEdge(terrainFillMesh, ellipsoid, previousEdgeMeshes, previousEdgeTiles, false, u, v, vertex) ||\n            getCornerFromEdge(terrainFillMesh, ellipsoid, nextEdgeMeshes, nextEdgeTiles, true, u, v, vertex);\n        if (gotCorner) {\n            return vertex;\n        }\n\n        var vertexIndex;\n\n        if (meshIsUsable(cornerTile, cornerMesh)) {\n            // Corner mesh is valid, copy its corner vertex to this mesh.\n            if (u === 0.0) {\n                if (v === 0.0) {\n                    // southwest destination, northeast source\n                    vertexIndex = cornerMesh.eastIndicesNorthToSouth[0];\n                } else {\n                    // northwest destination, southeast source\n                    vertexIndex = cornerMesh.southIndicesEastToWest[0];\n                }\n            } else if (v === 0.0) {\n                // southeast destination, northwest source\n                vertexIndex = cornerMesh.northIndicesWestToEast[0];\n            } else {\n                // northeast destination, southwest source\n                vertexIndex = cornerMesh.westIndicesSouthToNorth[0];\n            }\n            getVertexFromTileAtCorner(cornerMesh, vertexIndex, u, v, vertex);\n            return vertex;\n        }\n\n        // There is no precise vertex available from the corner or from either adjacent edge.\n        // This is either because there are no tiles at all at the edges and corner, or\n        // because the tiles at the edge are higher-level-number and don't extend all the way\n        // to the corner.\n        // Try to grab a height from the adjacent edges.\n        var height;\n        if (u === 0.0) {\n            if (v === 0.0) {\n                // southwest\n                height = getClosestHeightToCorner(\n                    terrainFillMesh.westMeshes, terrainFillMesh.westTiles, TileEdge.EAST,\n                    terrainFillMesh.southMeshes, terrainFillMesh.southTiles, TileEdge.NORTH,\n                    u, v);\n            } else {\n                // northwest\n                height = getClosestHeightToCorner(\n                    terrainFillMesh.northMeshes, terrainFillMesh.northTiles, TileEdge.SOUTH,\n                    terrainFillMesh.westMeshes, terrainFillMesh.westTiles, TileEdge.EAST,\n                    u, v);\n            }\n        } else if (v === 0.0) {\n            // southeast\n            height = getClosestHeightToCorner(\n                terrainFillMesh.southMeshes, terrainFillMesh.southTiles, TileEdge.NORTH,\n                terrainFillMesh.eastMeshes, terrainFillMesh.eastTiles, TileEdge.WEST,\n                u, v);\n        } else {\n            // northeast\n            height = getClosestHeightToCorner(\n                terrainFillMesh.eastMeshes, terrainFillMesh.eastTiles, TileEdge.WEST,\n                terrainFillMesh.northMeshes, terrainFillMesh.northTiles, TileEdge.SOUTH,\n                u, v);\n        }\n\n        if (defined(height)) {\n            getVertexWithHeightAtCorner(terrainFillMesh, ellipsoid, u, v, height, vertex);\n            return vertex;\n        }\n\n        // No heights available that are closer than the adjacent corners.\n        return undefined;\n    }\n\n    function getClosestHeightToCorner(\n        previousMeshes, previousTiles, previousEdge,\n        nextMeshes, nextTiles, nextEdge,\n        u, v\n    ) {\n        var height1 = getNearestHeightOnEdge(previousMeshes, previousTiles, false, previousEdge, u, v);\n        var height2 = getNearestHeightOnEdge(nextMeshes, nextTiles, true, nextEdge, u, v);\n        if (defined(height1) && defined(height2)) {\n            // It would be slightly better to do a weighted average of the two heights\n            // based on their distance from the corner, but it shouldn't matter much in practice.\n            return (height1 + height2) * 0.5;\n        } else if (defined(height1)) {\n            return height1;\n        }\n        return height2;\n    }\n\n    function addEdge(terrainFillMesh, ellipsoid, encoding, typedArray, nextIndex, edgeTiles, edgeMeshes, tileEdge, heightRange) {\n        for (var i = 0; i < edgeTiles.length; ++i) {\n            nextIndex = addEdgeMesh(terrainFillMesh, ellipsoid, encoding, typedArray, nextIndex, edgeTiles[i], edgeMeshes[i], tileEdge, heightRange);\n        }\n        return nextIndex;\n    }\n\n    function addEdgeMesh(terrainFillMesh, ellipsoid, encoding, typedArray, nextIndex, edgeTile, edgeMesh, tileEdge, heightRange) {\n        // Handle copying edges across the anti-meridian.\n        var sourceRectangle = edgeTile.rectangle;\n        if (tileEdge === TileEdge.EAST && terrainFillMesh.tile.x === 0) {\n            sourceRectangle = Rectangle.clone(edgeTile.rectangle, sourceRectangleScratch);\n            sourceRectangle.west -= CesiumMath.TWO_PI;\n            sourceRectangle.east -= CesiumMath.TWO_PI;\n        } else if (tileEdge === TileEdge.WEST && edgeTile.x === 0) {\n            sourceRectangle = Rectangle.clone(edgeTile.rectangle, sourceRectangleScratch);\n            sourceRectangle.west += CesiumMath.TWO_PI;\n            sourceRectangle.east += CesiumMath.TWO_PI;\n        }\n\n        var targetRectangle = terrainFillMesh.tile.rectangle;\n\n        var lastU;\n        var lastV;\n\n        if (nextIndex > 0) {\n            encoding.decodeTextureCoordinates(typedArray, nextIndex - 1, uvScratch);\n            lastU = uvScratch.x;\n            lastV = uvScratch.y;\n        }\n\n        var indices;\n        var compareU;\n\n        switch (tileEdge) {\n            case TileEdge.WEST:\n                indices = edgeMesh.westIndicesSouthToNorth;\n                compareU = false;\n                break;\n            case TileEdge.NORTH:\n                indices = edgeMesh.northIndicesWestToEast;\n                compareU = true;\n                break;\n            case TileEdge.EAST:\n                indices = edgeMesh.eastIndicesNorthToSouth;\n                compareU = false;\n                break;\n            case TileEdge.SOUTH:\n                indices = edgeMesh.southIndicesEastToWest;\n                compareU = true;\n                break;\n        }\n\n        var sourceTile = edgeTile;\n        var targetTile = terrainFillMesh.tile;\n        var sourceEncoding = edgeMesh.encoding;\n        var sourceVertices = edgeMesh.vertices;\n        var targetStride = encoding.getStride();\n\n        var southMercatorY;\n        var oneOverMercatorHeight;\n        if (sourceEncoding.hasWebMercatorT) {\n            southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(targetRectangle.south);\n            oneOverMercatorHeight = 1.0 / (WebMercatorProjection.geodeticLatitudeToMercatorAngle(targetRectangle.north) - southMercatorY);\n        }\n\n        for (var i = 0; i < indices.length; ++i) {\n            var index = indices[i];\n\n            var uv = sourceEncoding.decodeTextureCoordinates(sourceVertices, index, uvScratch);\n            transformTextureCoordinates(sourceTile, targetTile, uv, uv);\n            var u = uv.x;\n            var v = uv.y;\n            var uOrV = compareU ? u : v;\n\n            if (uOrV < 0.0 || uOrV > 1.0) {\n                // Vertex is outside the target tile - skip it.\n                continue;\n            }\n\n            if (Math.abs(u - lastU) < CesiumMath.EPSILON5 && Math.abs(v - lastV) < CesiumMath.EPSILON5) {\n                // Vertex is very close to the previous one - skip it.\n                continue;\n            }\n\n            var nearlyEdgeU = Math.abs(u) < CesiumMath.EPSILON5 || Math.abs(u - 1.0) < CesiumMath.EPSILON5;\n            var nearlyEdgeV = Math.abs(v) < CesiumMath.EPSILON5 || Math.abs(v - 1.0) < CesiumMath.EPSILON5;\n\n            if (nearlyEdgeU && nearlyEdgeV) {\n                // Corner vertex - skip it.\n                continue;\n            }\n\n            var position = sourceEncoding.decodePosition(sourceVertices, index, cartesianScratch);\n            var height = sourceEncoding.decodeHeight(sourceVertices, index);\n\n            var normal;\n            if (sourceEncoding.hasVertexNormals) {\n                normal = sourceEncoding.getOctEncodedNormal(sourceVertices, index, octEncodedNormalScratch);\n            } else {\n                normal = octEncodedNormalScratch;\n                normal.x = 0.0;\n                normal.y = 0.0;\n            }\n\n            var webMercatorT = v;\n            if (sourceEncoding.hasWebMercatorT) {\n                var latitude = CesiumMath.lerp(targetRectangle.south, targetRectangle.north, v);\n                webMercatorT = (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) - southMercatorY) * oneOverMercatorHeight;\n            }\n\n            encoding.encode(typedArray, nextIndex * targetStride, position, uv, height, normal, webMercatorT);\n\n            heightRange.minimumHeight = Math.min(heightRange.minimumHeight, height);\n            heightRange.maximumHeight = Math.max(heightRange.maximumHeight, height);\n\n            ++nextIndex;\n        }\n\n        return nextIndex;\n    }\n\n    function getNearestHeightOnEdge(meshes, tiles, isNext, edge, u, v) {\n        var meshStart;\n        var meshEnd;\n        var meshStep;\n\n        if (isNext) {\n            meshStart = 0;\n            meshEnd = meshes.length;\n            meshStep = 1;\n        } else {\n            meshStart = meshes.length - 1;\n            meshEnd = -1;\n            meshStep = -1;\n        }\n\n        for (var meshIndex = meshStart; meshIndex !== meshEnd; meshIndex += meshStep) {\n            var mesh = meshes[meshIndex];\n            var tile = tiles[meshIndex];\n            if (!meshIsUsable(tile, mesh)) {\n                continue;\n            }\n\n            var indices;\n            switch (edge) {\n                case TileEdge.WEST:\n                    indices = mesh.westIndicesSouthToNorth;\n                    break;\n                case TileEdge.SOUTH:\n                    indices = mesh.southIndicesEastToWest;\n                    break;\n                case TileEdge.EAST:\n                    indices = mesh.eastIndicesNorthToSouth;\n                    break;\n                case TileEdge.NORTH:\n                    indices = mesh.northIndicesWestToEast;\n                    break;\n            }\n\n            var index = indices[isNext ? 0 : indices.length - 1];\n            if (defined(index)) {\n                return mesh.encoding.decodeHeight(mesh.vertices, index);\n            }\n        }\n\n        return undefined;\n    }\n\n    function meshIsUsable(tile, mesh) {\n        return defined(mesh) && (!defined(tile.data.fill) || !tile.data.fill.changedThisFrame);\n    }\n\n    function getCornerFromEdge(terrainFillMesh, ellipsoid, edgeMeshes, edgeTiles, isNext, u, v, vertex) {\n        var edgeVertices;\n        var compareU;\n        var increasing;\n        var vertexIndexIndex;\n        var vertexIndex;\n        var sourceTile = edgeTiles[isNext ? 0 : edgeMeshes.length - 1];\n        var sourceMesh = edgeMeshes[isNext ? 0 : edgeMeshes.length - 1];\n\n        if (meshIsUsable(sourceTile, sourceMesh)) {\n            // Previous mesh is valid, but we don't know yet if it covers this corner.\n            if (u === 0.0) {\n                if (v === 0.0) {\n                    // southwest\n                    edgeVertices = isNext ? sourceMesh.northIndicesWestToEast : sourceMesh.eastIndicesNorthToSouth;\n                    compareU = isNext;\n                    increasing = isNext;\n                } else {\n                    // northwest\n                    edgeVertices = isNext ? sourceMesh.eastIndicesNorthToSouth : sourceMesh.southIndicesEastToWest;\n                    compareU = !isNext;\n                    increasing = false;\n                }\n            } else if (v === 0.0) {\n                // southeast\n                edgeVertices = isNext ? sourceMesh.westIndicesSouthToNorth : sourceMesh.northIndicesWestToEast;\n                compareU = !isNext;\n                increasing = true;\n            } else {\n                // northeast\n                edgeVertices = isNext ? sourceMesh.southIndicesEastToWest : sourceMesh.westIndicesSouthToNorth;\n                compareU = isNext;\n                increasing = !isNext;\n            }\n\n            if (edgeVertices.length > 0) {\n                // The vertex we want will very often be the first/last vertex so check that first.\n                vertexIndexIndex = isNext ? 0 : edgeVertices.length - 1;\n                vertexIndex = edgeVertices[vertexIndexIndex];\n                sourceMesh.encoding.decodeTextureCoordinates(sourceMesh.vertices, vertexIndex, uvScratch);\n                var targetUv = transformTextureCoordinates(sourceTile, terrainFillMesh.tile, uvScratch, uvScratch);\n                if (targetUv.x === u && targetUv.y === v) {\n                    // Vertex is good!\n                    getVertexFromTileAtCorner(sourceMesh, vertexIndex, u, v, vertex);\n                    return true;\n                }\n\n                // The last vertex is not the one we need, try binary searching for the right one.\n                vertexIndexIndex = binarySearch(edgeVertices, compareU ? u : v, function(vertexIndex, textureCoordinate) {\n                    sourceMesh.encoding.decodeTextureCoordinates(sourceMesh.vertices, vertexIndex, uvScratch);\n                    var targetUv = transformTextureCoordinates(sourceTile, terrainFillMesh.tile, uvScratch, uvScratch);\n                    if (increasing) {\n                        if (compareU) {\n                            return targetUv.x - u;\n                        }\n                        return targetUv.y - v;\n                    } else if (compareU) {\n                        return u - targetUv.x;\n                    }\n                    return v - targetUv.y;\n                });\n\n                if (vertexIndexIndex < 0) {\n                    vertexIndexIndex = ~vertexIndexIndex;\n\n                    if (vertexIndexIndex > 0 && vertexIndexIndex < edgeVertices.length) {\n                        // The corner falls between two vertices, so interpolate between them.\n                        getInterpolatedVertexAtCorner(ellipsoid, sourceTile, terrainFillMesh.tile, sourceMesh, edgeVertices[vertexIndexIndex - 1], edgeVertices[vertexIndexIndex], u, v, compareU, vertex);\n                        return true;\n                    }\n                } else {\n                    // Found a vertex that fits in the corner exactly.\n                    getVertexFromTileAtCorner(sourceMesh, edgeVertices[vertexIndexIndex], u, v, vertex);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    var cornerPositionsScratch = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\n\n    function computeOccludeePoint(tileProvider, center, rectangle, height, result) {\n        var ellipsoidalOccluder = tileProvider.quadtree._occluders.ellipsoid;\n        var ellipsoid = ellipsoidalOccluder.ellipsoid;\n\n        var cornerPositions = cornerPositionsScratch;\n        Cartesian3.fromRadians(rectangle.west, rectangle.south, height, ellipsoid, cornerPositions[0]);\n        Cartesian3.fromRadians(rectangle.east, rectangle.south, height, ellipsoid, cornerPositions[1]);\n        Cartesian3.fromRadians(rectangle.west, rectangle.north, height, ellipsoid, cornerPositions[2]);\n        Cartesian3.fromRadians(rectangle.east, rectangle.north, height, ellipsoid, cornerPositions[3]);\n\n        return ellipsoidalOccluder.computeHorizonCullingPoint(center, cornerPositions, result);\n    }\n\n    return TerrainFillMesh;\n});\n","define([\n    ], function() {\n    'use strict';\n\n    /**\n     * @private\n     */\n    var TileEdge = {\n        WEST: 0,\n        NORTH: 1,\n        EAST: 2,\n        SOUTH: 3,\n        NORTHWEST: 4,\n        NORTHEAST: 5,\n        SOUTHWEST: 6,\n        SOUTHEAST: 7\n    };\n\n    return TileEdge;\n});\n","define([\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Event',\n        '../Core/Math',\n        '../Core/Rectangle',\n        '../ThirdParty/when',\n        './ImageryLayer'\n    ], function(\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        Event,\n        CesiumMath,\n        Rectangle,\n        when,\n        ImageryLayer) {\n    'use strict';\n\n    /**\n     * An ordered collection of imagery layers.\n     *\n     * @alias ImageryLayerCollection\n     * @constructor\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Imagery%20Adjustment.html|Cesium Sandcastle Imagery Adjustment Demo}\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Imagery%20Layers%20Manipulation.html|Cesium Sandcastle Imagery Manipulation Demo}\n     */\n    function ImageryLayerCollection() {\n        this._layers = [];\n\n        /**\n         * An event that is raised when a layer is added to the collection.  Event handlers are passed the layer that\n         * was added and the index at which it was added.\n         * @type {Event}\n         * @default Event()\n         */\n        this.layerAdded = new Event();\n\n        /**\n         * An event that is raised when a layer is removed from the collection.  Event handlers are passed the layer that\n         * was removed and the index from which it was removed.\n         * @type {Event}\n         * @default Event()\n         */\n        this.layerRemoved = new Event();\n\n        /**\n         * An event that is raised when a layer changes position in the collection.  Event handlers are passed the layer that\n         * was moved, its new index after the move, and its old index prior to the move.\n         * @type {Event}\n         * @default Event()\n         */\n        this.layerMoved = new Event();\n\n        /**\n         * An event that is raised when a layer is shown or hidden by setting the\n         * {@link ImageryLayer#show} property.  Event handlers are passed a reference to this layer,\n         * the index of the layer in the collection, and a flag that is true if the layer is now\n         * shown or false if it is now hidden.\n         *\n         * @type {Event}\n         * @default Event()\n         */\n        this.layerShownOrHidden = new Event();\n    }\n\n    defineProperties(ImageryLayerCollection.prototype, {\n        /**\n         * Gets the number of layers in this collection.\n         * @memberof ImageryLayerCollection.prototype\n         * @type {Number}\n         */\n        length : {\n            get : function() {\n                return this._layers.length;\n            }\n        }\n    });\n\n    /**\n     * Adds a layer to the collection.\n     *\n     * @param {ImageryLayer} layer the layer to add.\n     * @param {Number} [index] the index to add the layer at.  If omitted, the layer will\n     *                         added on top of all existing layers.\n     *\n     * @exception {DeveloperError} index, if supplied, must be greater than or equal to zero and less than or equal to the number of the layers.\n     */\n    ImageryLayerCollection.prototype.add = function(layer, index) {\n        var hasIndex = defined(index);\n\n        \n\n        if (!hasIndex) {\n            index = this._layers.length;\n            this._layers.push(layer);\n        } else {\n            this._layers.splice(index, 0, layer);\n        }\n\n        this._update();\n        this.layerAdded.raiseEvent(layer, index);\n    };\n\n    /**\n     * Creates a new layer using the given ImageryProvider and adds it to the collection.\n     *\n     * @param {ImageryProvider} imageryProvider the imagery provider to create a new layer for.\n     * @param {Number} [index] the index to add the layer at.  If omitted, the layer will\n     *                         added on top of all existing layers.\n     * @returns {ImageryLayer} The newly created layer.\n     */\n    ImageryLayerCollection.prototype.addImageryProvider = function(imageryProvider, index) {\n        \n\n        var layer = new ImageryLayer(imageryProvider);\n        this.add(layer, index);\n        return layer;\n    };\n\n    /**\n     * Removes a layer from this collection, if present.\n     *\n     * @param {ImageryLayer} layer The layer to remove.\n     * @param {Boolean} [destroy=true] whether to destroy the layers in addition to removing them.\n     * @returns {Boolean} true if the layer was in the collection and was removed,\n     *                    false if the layer was not in the collection.\n     */\n    ImageryLayerCollection.prototype.remove = function(layer, destroy) {\n        destroy = defaultValue(destroy, true);\n\n        var index = this._layers.indexOf(layer);\n        if (index !== -1) {\n            this._layers.splice(index, 1);\n\n            this._update();\n\n            this.layerRemoved.raiseEvent(layer, index);\n\n            if (destroy) {\n                layer.destroy();\n            }\n\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Removes all layers from this collection.\n     *\n     * @param {Boolean} [destroy=true] whether to destroy the layers in addition to removing them.\n     */\n    ImageryLayerCollection.prototype.removeAll = function(destroy) {\n        destroy = defaultValue(destroy, true);\n\n        var layers = this._layers;\n        for (var i = 0, len = layers.length; i < len; i++) {\n            var layer = layers[i];\n            this.layerRemoved.raiseEvent(layer, i);\n\n            if (destroy) {\n                layer.destroy();\n            }\n        }\n\n        this._layers = [];\n    };\n\n    /**\n     * Checks to see if the collection contains a given layer.\n     *\n     * @param {ImageryLayer} layer the layer to check for.\n     *\n     * @returns {Boolean} true if the collection contains the layer, false otherwise.\n     */\n    ImageryLayerCollection.prototype.contains = function(layer) {\n        return this.indexOf(layer) !== -1;\n    };\n\n    /**\n     * Determines the index of a given layer in the collection.\n     *\n     * @param {ImageryLayer} layer The layer to find the index of.\n     *\n     * @returns {Number} The index of the layer in the collection, or -1 if the layer does not exist in the collection.\n     */\n    ImageryLayerCollection.prototype.indexOf = function(layer) {\n        return this._layers.indexOf(layer);\n    };\n\n    /**\n     * Gets a layer by index from the collection.\n     *\n     * @param {Number} index the index to retrieve.\n     *\n     * @returns {ImageryLayer} The imagery layer at the given index.\n     */\n    ImageryLayerCollection.prototype.get = function(index) {\n        \n\n        return this._layers[index];\n    };\n\n    function getLayerIndex(layers, layer) {\n        \n\n        var index = layers.indexOf(layer);\n\n        \n\n        return index;\n    }\n\n    function swapLayers(collection, i, j) {\n        var arr = collection._layers;\n        i = CesiumMath.clamp(i, 0, arr.length - 1);\n        j = CesiumMath.clamp(j, 0, arr.length - 1);\n\n        if (i === j) {\n            return;\n        }\n\n        var temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n\n        collection._update();\n\n        collection.layerMoved.raiseEvent(temp, j, i);\n    }\n\n    /**\n     * Raises a layer up one position in the collection.\n     *\n     * @param {ImageryLayer} layer the layer to move.\n     *\n     * @exception {DeveloperError} layer is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    ImageryLayerCollection.prototype.raise = function(layer) {\n        var index = getLayerIndex(this._layers, layer);\n        swapLayers(this, index, index + 1);\n    };\n\n    /**\n     * Lowers a layer down one position in the collection.\n     *\n     * @param {ImageryLayer} layer the layer to move.\n     *\n     * @exception {DeveloperError} layer is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    ImageryLayerCollection.prototype.lower = function(layer) {\n        var index = getLayerIndex(this._layers, layer);\n        swapLayers(this, index, index - 1);\n    };\n\n    /**\n     * Raises a layer to the top of the collection.\n     *\n     * @param {ImageryLayer} layer the layer to move.\n     *\n     * @exception {DeveloperError} layer is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    ImageryLayerCollection.prototype.raiseToTop = function(layer) {\n        var index = getLayerIndex(this._layers, layer);\n        if (index === this._layers.length - 1) {\n            return;\n        }\n        this._layers.splice(index, 1);\n        this._layers.push(layer);\n\n        this._update();\n\n        this.layerMoved.raiseEvent(layer, this._layers.length - 1, index);\n    };\n\n    /**\n     * Lowers a layer to the bottom of the collection.\n     *\n     * @param {ImageryLayer} layer the layer to move.\n     *\n     * @exception {DeveloperError} layer is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    ImageryLayerCollection.prototype.lowerToBottom = function(layer) {\n        var index = getLayerIndex(this._layers, layer);\n        if (index === 0) {\n            return;\n        }\n        this._layers.splice(index, 1);\n        this._layers.splice(0, 0, layer);\n\n        this._update();\n\n        this.layerMoved.raiseEvent(layer, 0, index);\n    };\n\n    var applicableRectangleScratch = new Rectangle();\n\n    /**\n     * Asynchronously determines the imagery layer features that are intersected by a pick ray.  The intersected imagery\n     * layer features are found by invoking {@link ImageryProvider#pickFeatures} for each imagery layer tile intersected\n     * by the pick ray.  To compute a pick ray from a location on the screen, use {@link Camera.getPickRay}.\n     *\n     * @param {Ray} ray The ray to test for intersection.\n     * @param {Scene} scene The scene.\n     * @return {Promise.<ImageryLayerFeatureInfo[]>|undefined} A promise that resolves to an array of features intersected by the pick ray.\n     *                                             If it can be quickly determined that no features are intersected (for example,\n     *                                             because no active imagery providers support {@link ImageryProvider#pickFeatures}\n     *                                             or because the pick ray does not intersect the surface), this function will\n     *                                             return undefined.\n     *\n     * @example\n     * var pickRay = viewer.camera.getPickRay(windowPosition);\n     * var featuresPromise = viewer.imageryLayers.pickImageryLayerFeatures(pickRay, viewer.scene);\n     * if (!Cesium.defined(featuresPromise)) {\n     *     console.log('No features picked.');\n     * } else {\n     *     Cesium.when(featuresPromise, function(features) {\n     *         // This function is called asynchronously when the list if picked features is available.\n     *         console.log('Number of features: ' + features.length);\n     *         if (features.length > 0) {\n     *             console.log('First feature name: ' + features[0].name);\n     *         }\n     *     });\n     * }\n     */\n    ImageryLayerCollection.prototype.pickImageryLayerFeatures = function(ray, scene) {\n        // Find the picked location on the globe.\n        var pickedPosition = scene.globe.pick(ray, scene);\n        if (!defined(pickedPosition)) {\n            return undefined;\n        }\n\n        var pickedLocation = scene.globe.ellipsoid.cartesianToCartographic(pickedPosition);\n\n        // Find the terrain tile containing the picked location.\n        var tilesToRender = scene.globe._surface._tilesToRender;\n        var pickedTile;\n\n        for (var textureIndex = 0; !defined(pickedTile) && textureIndex < tilesToRender.length; ++textureIndex) {\n            var tile = tilesToRender[textureIndex];\n            if (Rectangle.contains(tile.rectangle, pickedLocation)) {\n                pickedTile = tile;\n            }\n        }\n\n        if (!defined(pickedTile)) {\n            return undefined;\n        }\n\n        // Pick against all attached imagery tiles containing the pickedLocation.\n        var imageryTiles = pickedTile.data.imagery;\n\n        var promises = [];\n        var imageryLayers = [];\n        for (var i = imageryTiles.length - 1; i >= 0; --i) {\n            var terrainImagery = imageryTiles[i];\n            var imagery = terrainImagery.readyImagery;\n            if (!defined(imagery)) {\n                continue;\n            }\n            var provider = imagery.imageryLayer.imageryProvider;\n            if (!defined(provider.pickFeatures)) {\n                continue;\n            }\n\n            if (!Rectangle.contains(imagery.rectangle, pickedLocation)) {\n                continue;\n            }\n\n            // If this imagery came from a parent, it may not be applicable to its entire rectangle.\n            // Check the textureCoordinateRectangle.\n            var applicableRectangle = applicableRectangleScratch;\n\n            var epsilon = 1 / 1024; // 1/4 of a pixel in a typical 256x256 tile.\n            applicableRectangle.west = CesiumMath.lerp(pickedTile.rectangle.west, pickedTile.rectangle.east, terrainImagery.textureCoordinateRectangle.x - epsilon);\n            applicableRectangle.east = CesiumMath.lerp(pickedTile.rectangle.west, pickedTile.rectangle.east, terrainImagery.textureCoordinateRectangle.z + epsilon);\n            applicableRectangle.south = CesiumMath.lerp(pickedTile.rectangle.south, pickedTile.rectangle.north, terrainImagery.textureCoordinateRectangle.y - epsilon);\n            applicableRectangle.north = CesiumMath.lerp(pickedTile.rectangle.south, pickedTile.rectangle.north, terrainImagery.textureCoordinateRectangle.w + epsilon);\n            if (!Rectangle.contains(applicableRectangle, pickedLocation)) {\n                continue;\n            }\n\n            var promise = provider.pickFeatures(imagery.x, imagery.y, imagery.level, pickedLocation.longitude, pickedLocation.latitude);\n            if (!defined(promise)) {\n                continue;\n            }\n\n            promises.push(promise);\n            imageryLayers.push(imagery.imageryLayer);\n        }\n\n        if (promises.length === 0) {\n            return undefined;\n        }\n\n        return when.all(promises, function(results) {\n            var features = [];\n\n            for (var resultIndex = 0; resultIndex < results.length; ++resultIndex) {\n                var result = results[resultIndex];\n                var image = imageryLayers[resultIndex];\n\n                if (defined(result) && result.length > 0) {\n                    for (var featureIndex = 0; featureIndex < result.length; ++featureIndex) {\n                        var feature = result[featureIndex];\n                        feature.imageryLayer = image;\n\n                        // For features without a position, use the picked location.\n                        if (!defined(feature.position)) {\n                            feature.position = pickedLocation;\n                        }\n\n                        features.push(feature);\n                    }\n                }\n            }\n\n            return features;\n        });\n    };\n\n    /**\n     * Updates frame state to execute any queued texture re-projections.\n     *\n     * @private\n     *\n     * @param {FrameState} frameState The frameState.\n     */\n    ImageryLayerCollection.prototype.queueReprojectionCommands = function(frameState) {\n        var layers = this._layers;\n        for (var i = 0, len = layers.length; i < len; ++i) {\n            layers[i].queueReprojectionCommands(frameState);\n        }\n    };\n\n    /**\n     * Cancels re-projection commands queued for the next frame.\n     *\n     * @private\n     */\n    ImageryLayerCollection.prototype.cancelReprojections = function() {\n        var layers = this._layers;\n        for (var i = 0, len = layers.length; i < len; ++i) {\n            layers[i].cancelReprojections();\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} true if this object was destroyed; otherwise, false.\n     *\n     * @see ImageryLayerCollection#destroy\n     */\n    ImageryLayerCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by all layers in this collection.  Explicitly destroying this\n     * object allows for deterministic release of WebGL resources, instead of relying on the garbage\n     * collector.\n     * <br /><br />\n     * Once this object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * layerCollection = layerCollection && layerCollection.destroy();\n     *\n     * @see ImageryLayerCollection#isDestroyed\n     */\n    ImageryLayerCollection.prototype.destroy = function() {\n        this.removeAll(true);\n        return destroyObject(this);\n    };\n\n    ImageryLayerCollection.prototype._update = function() {\n        var isBaseLayer = true;\n        var layers = this._layers;\n        var layersShownOrHidden;\n        var layer;\n        var i, len;\n        for (i = 0, len = layers.length; i < len; ++i) {\n            layer = layers[i];\n\n            layer._layerIndex = i;\n\n            if (layer.show) {\n                layer._isBaseLayer = isBaseLayer;\n                isBaseLayer = false;\n            } else {\n                layer._isBaseLayer = false;\n            }\n\n            if (layer.show !== layer._show) {\n                if (defined(layer._show)) {\n                    if (!defined(layersShownOrHidden)) {\n                        layersShownOrHidden = [];\n                    }\n                    layersShownOrHidden.push(layer);\n                }\n                layer._show = layer.show;\n            }\n        }\n\n        if (defined(layersShownOrHidden)) {\n            for (i = 0, len = layersShownOrHidden.length; i < len; ++i) {\n                layer = layersShownOrHidden[i];\n                this.layerShownOrHidden.raiseEvent(layer, layer._layerIndex, layer.show);\n            }\n        }\n    };\n\n    return ImageryLayerCollection;\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/Cartographic',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/Event',\n        '../Core/getTimestamp',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/OrthographicFrustum',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Core/Ray',\n        '../Core/Rectangle',\n        '../Core/Visibility',\n        './QuadtreeOccluders',\n        './QuadtreeTile',\n        './QuadtreeTileLoadState',\n        './SceneMode',\n        './TileReplacementQueue',\n        './TileSelectionResult'\n    ], function(\n        Cartesian3,\n        Cartographic,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        Event,\n        getTimestamp,\n        CesiumMath,\n        Matrix4,\n        OrthographicFrustum,\n        OrthographicOffCenterFrustum,\n        Ray,\n        Rectangle,\n        Visibility,\n        QuadtreeOccluders,\n        QuadtreeTile,\n        QuadtreeTileLoadState,\n        SceneMode,\n        TileReplacementQueue,\n        TileSelectionResult) {\n    'use strict';\n\n    /**\n     * Renders massive sets of data by utilizing level-of-detail and culling.  The globe surface is divided into\n     * a quadtree of tiles with large, low-detail tiles at the root and small, high-detail tiles at the leaves.\n     * The set of tiles to render is selected by projecting an estimate of the geometric error in a tile onto\n     * the screen to estimate screen-space error, in pixels, which must be below a user-specified threshold.\n     * The actual content of the tiles is arbitrary and is specified using a {@link QuadtreeTileProvider}.\n     *\n     * @alias QuadtreePrimitive\n     * @constructor\n     * @private\n     *\n     * @param {QuadtreeTileProvider} options.tileProvider The tile provider that loads, renders, and estimates\n     *        the distance to individual tiles.\n     * @param {Number} [options.maximumScreenSpaceError=2] The maximum screen-space error, in pixels, that is allowed.\n     *        A higher maximum error will render fewer tiles and improve performance, while a lower\n     *        value will improve visual quality.\n     * @param {Number} [options.tileCacheSize=100] The maximum number of tiles that will be retained in the tile cache.\n     *        Note that tiles will never be unloaded if they were used for rendering the last\n     *        frame, so the actual number of resident tiles may be higher.  The value of\n     *        this property will not affect visual quality.\n     */\n    function QuadtreePrimitive(options) {\n        \n\n        this._tileProvider = options.tileProvider;\n        this._tileProvider.quadtree = this;\n\n        this._debug = {\n            enableDebugOutput : false,\n\n            maxDepth : 0,\n            maxDepthVisited : 0,\n            tilesVisited : 0,\n            tilesCulled : 0,\n            tilesRendered : 0,\n            tilesWaitingForChildren : 0,\n\n            lastMaxDepth : -1,\n            lastMaxDepthVisited : -1,\n            lastTilesVisited : -1,\n            lastTilesCulled : -1,\n            lastTilesRendered : -1,\n            lastTilesWaitingForChildren : -1,\n\n            suspendLodUpdate : false\n        };\n\n        var tilingScheme = this._tileProvider.tilingScheme;\n        var ellipsoid = tilingScheme.ellipsoid;\n\n        this._tilesToRender = [];\n        this._tileLoadQueueHigh = []; // high priority tiles are preventing refinement\n        this._tileLoadQueueMedium = []; // medium priority tiles are being rendered\n        this._tileLoadQueueLow = []; // low priority tiles were refined past or are non-visible parts of quads.\n        this._tileReplacementQueue = new TileReplacementQueue();\n        this._levelZeroTiles = undefined;\n        this._loadQueueTimeSlice = 5.0;\n        this._tilesInvalidated = false;\n\n        this._addHeightCallbacks = [];\n        this._removeHeightCallbacks = [];\n\n        this._tileToUpdateHeights = [];\n        this._lastTileIndex = 0;\n        this._updateHeightsTimeSlice = 2.0;\n\n        // If a culled tile contains _cameraPositionCartographic or _cameraReferenceFrameOriginCartographic, it will be marked\n        // TileSelectionResult.CULLED_BUT_NEEDED and added to the list of tiles to update heights,\n        // even though it is not rendered.\n        // These are updated each frame in `selectTilesForRendering`.\n        this._cameraPositionCartographic = undefined;\n        this._cameraReferenceFrameOriginCartographic = undefined;\n\n        /**\n         * Gets or sets the maximum screen-space error, in pixels, that is allowed.\n         * A higher maximum error will render fewer tiles and improve performance, while a lower\n         * value will improve visual quality.\n         * @type {Number}\n         * @default 2\n         */\n        this.maximumScreenSpaceError = defaultValue(options.maximumScreenSpaceError, 2);\n\n        /**\n         * Gets or sets the maximum number of tiles that will be retained in the tile cache.\n         * Note that tiles will never be unloaded if they were used for rendering the last\n         * frame, so the actual number of resident tiles may be higher.  The value of\n         * this property will not affect visual quality.\n         * @type {Number}\n         * @default 100\n         */\n        this.tileCacheSize = defaultValue(options.tileCacheSize, 100);\n\n        /**\n         * Gets or sets the number of loading descendant tiles that is considered \"too many\".\n         * If a tile has too many loading descendants, that tile will be loaded and rendered before any of\n         * its descendants are loaded and rendered. This means more feedback for the user that something\n         * is happening at the cost of a longer overall load time. Setting this to 0 will cause each\n         * tile level to be loaded successively, significantly increasing load time. Setting it to a large\n         * number (e.g. 1000) will minimize the number of tiles that are loaded but tend to make\n         * detail appear all at once after a long wait.\n         * @type {Number}\n         * @default 20\n         */\n        this.loadingDescendantLimit = 20;\n\n        /**\n         * Gets or sets a value indicating whether the ancestors of rendered tiles should be preloaded.\n         * Setting this to true optimizes the zoom-out experience and provides more detail in\n         * newly-exposed areas when panning. The down side is that it requires loading more tiles.\n         * @type {Boolean}\n         * @default true\n         */\n        this.preloadAncestors = true;\n\n        /**\n         * Gets or sets a value indicating whether the siblings of rendered tiles should be preloaded.\n         * Setting this to true causes tiles with the same parent as a rendered tile to be loaded, even\n         * if they are culled. Setting this to true may provide a better panning experience at the\n         * cost of loading more tiles.\n         * @type {Boolean}\n         * @default false\n         */\n        this.preloadSiblings = false;\n\n        this._occluders = new QuadtreeOccluders({\n            ellipsoid : ellipsoid\n        });\n\n        this._tileLoadProgressEvent = new Event();\n        this._lastTileLoadQueueLength = 0;\n\n        this._lastSelectionFrameNumber = undefined;\n    }\n\n    defineProperties(QuadtreePrimitive.prototype, {\n        /**\n         * Gets the provider of {@link QuadtreeTile} instances for this quadtree.\n         * @type {QuadtreeTile}\n         * @memberof QuadtreePrimitive.prototype\n         */\n        tileProvider : {\n            get : function() {\n                return this._tileProvider;\n            }\n        },\n        /**\n         * Gets an event that's raised when the length of the tile load queue has changed since the last render frame.  When the load queue is empty,\n         * all terrain and imagery for the current view have been loaded.  The event passes the new length of the tile load queue.\n         *\n         * @memberof QuadtreePrimitive.prototype\n         * @type {Event}\n         */\n        tileLoadProgressEvent : {\n            get : function() {\n                return this._tileLoadProgressEvent;\n            }\n        },\n\n        occluders : {\n            get : function() {\n                return this._occluders;\n            }\n        }\n    });\n\n    /**\n     * Invalidates and frees all the tiles in the quadtree.  The tiles must be reloaded\n     * before they can be displayed.\n     *\n     * @memberof QuadtreePrimitive\n     */\n    QuadtreePrimitive.prototype.invalidateAllTiles = function() {\n        this._tilesInvalidated = true;\n    };\n\n    function invalidateAllTiles(primitive) {\n        // Clear the replacement queue\n        var replacementQueue = primitive._tileReplacementQueue;\n        replacementQueue.head = undefined;\n        replacementQueue.tail = undefined;\n        replacementQueue.count = 0;\n\n        clearTileLoadQueue(primitive);\n\n        // Free and recreate the level zero tiles.\n        var levelZeroTiles = primitive._levelZeroTiles;\n        if (defined(levelZeroTiles)) {\n            for (var i = 0; i < levelZeroTiles.length; ++i) {\n                var tile = levelZeroTiles[i];\n                var customData = tile.customData;\n                var customDataLength = customData.length;\n\n                for (var j = 0; j < customDataLength; ++j) {\n                    var data = customData[j];\n                    data.level = 0;\n                    primitive._addHeightCallbacks.push(data);\n                }\n\n                levelZeroTiles[i].freeResources();\n            }\n        }\n\n        primitive._levelZeroTiles = undefined;\n\n        primitive._tileProvider.cancelReprojections();\n    }\n\n    /**\n     * Invokes a specified function for each {@link QuadtreeTile} that is partially\n     * or completely loaded.\n     *\n     * @param {Function} tileFunction The function to invoke for each loaded tile.  The\n     *        function is passed a reference to the tile as its only parameter.\n     */\n    QuadtreePrimitive.prototype.forEachLoadedTile = function(tileFunction) {\n        var tile = this._tileReplacementQueue.head;\n        while (defined(tile)) {\n            if (tile.state !== QuadtreeTileLoadState.START) {\n                tileFunction(tile);\n            }\n            tile = tile.replacementNext;\n        }\n    };\n\n    /**\n     * Invokes a specified function for each {@link QuadtreeTile} that was rendered\n     * in the most recent frame.\n     *\n     * @param {Function} tileFunction The function to invoke for each rendered tile.  The\n     *        function is passed a reference to the tile as its only parameter.\n     */\n    QuadtreePrimitive.prototype.forEachRenderedTile = function(tileFunction) {\n        var tilesRendered = this._tilesToRender;\n        for (var i = 0, len = tilesRendered.length; i < len; ++i) {\n            tileFunction(tilesRendered[i]);\n        }\n    };\n\n    /**\n     * Calls the callback when a new tile is rendered that contains the given cartographic. The only parameter\n     * is the cartesian position on the tile.\n     *\n     * @param {Cartographic} cartographic The cartographic position.\n     * @param {Function} callback The function to be called when a new tile is loaded containing cartographic.\n     * @returns {Function} The function to remove this callback from the quadtree.\n     */\n    QuadtreePrimitive.prototype.updateHeight = function(cartographic, callback) {\n        var primitive = this;\n        var object = {\n            positionOnEllipsoidSurface : undefined,\n            positionCartographic : cartographic,\n            level : -1,\n            callback : callback\n        };\n\n        object.removeFunc = function() {\n            var addedCallbacks = primitive._addHeightCallbacks;\n            var length = addedCallbacks.length;\n            for (var i = 0; i < length; ++i) {\n                if (addedCallbacks[i] === object) {\n                    addedCallbacks.splice(i, 1);\n                    break;\n                }\n            }\n            primitive._removeHeightCallbacks.push(object);\n        };\n\n        primitive._addHeightCallbacks.push(object);\n        return object.removeFunc;\n    };\n\n    /**\n     * Updates the tile provider imagery and continues to process the tile load queue.\n     * @private\n     */\n    QuadtreePrimitive.prototype.update = function(frameState) {\n        if (defined(this._tileProvider.update)) {\n            this._tileProvider.update(frameState);\n        }\n    };\n\n    function clearTileLoadQueue(primitive) {\n        var debug = primitive._debug;\n        debug.maxDepth = 0;\n        debug.maxDepthVisited = 0;\n        debug.tilesVisited = 0;\n        debug.tilesCulled = 0;\n        debug.tilesRendered = 0;\n        debug.tilesWaitingForChildren = 0;\n\n        primitive._tileLoadQueueHigh.length = 0;\n        primitive._tileLoadQueueMedium.length = 0;\n        primitive._tileLoadQueueLow.length = 0;\n    }\n\n    /**\n     * Initializes values for a new render frame and prepare the tile load queue.\n     * @private\n     */\n    QuadtreePrimitive.prototype.beginFrame = function(frameState) {\n        var passes = frameState.passes;\n        if (!passes.render) {\n            return;\n        }\n\n        if (this._tilesInvalidated) {\n            invalidateAllTiles(this);\n            this._tilesInvalidated = false;\n        }\n\n        // Gets commands for any texture re-projections\n        this._tileProvider.initialize(frameState);\n\n        clearTileLoadQueue(this);\n\n        if (this._debug.suspendLodUpdate) {\n            return;\n        }\n\n        this._tileReplacementQueue.markStartOfRenderFrame();\n    };\n\n    /**\n     * Selects new tiles to load based on the frame state and creates render commands.\n     * @private\n     */\n    QuadtreePrimitive.prototype.render = function(frameState) {\n        var passes = frameState.passes;\n        var tileProvider = this._tileProvider;\n\n        if (passes.render) {\n            tileProvider.beginUpdate(frameState);\n\n            selectTilesForRendering(this, frameState);\n            createRenderCommandsForSelectedTiles(this, frameState);\n\n            tileProvider.endUpdate(frameState);\n        }\n\n        if (passes.pick && this._tilesToRender.length > 0) {\n            tileProvider.updateForPick(frameState);\n        }\n    };\n\n    /**\n     * Checks if the load queue length has changed since the last time we raised a queue change event - if so, raises\n     * a new change event at the end of the render cycle.\n     */\n    function updateTileLoadProgress(primitive, frameState) {\n        var currentLoadQueueLength = primitive._tileLoadQueueHigh.length + primitive._tileLoadQueueMedium.length + primitive._tileLoadQueueLow.length;\n\n        if (currentLoadQueueLength !== primitive._lastTileLoadQueueLength || primitive._tilesInvalidated) {\n            frameState.afterRender.push(Event.prototype.raiseEvent.bind(primitive._tileLoadProgressEvent, currentLoadQueueLength));\n            primitive._lastTileLoadQueueLength = currentLoadQueueLength;\n        }\n\n        var debug = primitive._debug;\n        if (debug.enableDebugOutput && !debug.suspendLodUpdate) {\n            debug.maxDepth = primitive._tilesToRender.reduce(function(max, tile) {\n                return Math.max(max, tile.level);\n            }, -1);\n            debug.tilesRendered = primitive._tilesToRender.length;\n\n            if (debug.tilesVisited !== debug.lastTilesVisited ||\n                debug.tilesRendered !== debug.lastTilesRendered ||\n                debug.tilesCulled !== debug.lastTilesCulled ||\n                debug.maxDepth !== debug.lastMaxDepth ||\n                debug.tilesWaitingForChildren !== debug.lastTilesWaitingForChildren ||\n                debug.maxDepthVisited !== debug.lastMaxDepthVisited) {\n\n                console.log('Visited ' + debug.tilesVisited + ', Rendered: ' + debug.tilesRendered + ', Culled: ' + debug.tilesCulled + ', Max Depth Rendered: ' + debug.maxDepth + ', Max Depth Visited: ' + debug.maxDepthVisited + ', Waiting for children: ' + debug.tilesWaitingForChildren);\n\n                debug.lastTilesVisited = debug.tilesVisited;\n                debug.lastTilesRendered = debug.tilesRendered;\n                debug.lastTilesCulled = debug.tilesCulled;\n                debug.lastMaxDepth = debug.maxDepth;\n                debug.lastTilesWaitingForChildren = debug.tilesWaitingForChildren;\n                debug.lastMaxDepthVisited = debug.maxDepthVisited;\n            }\n        }\n    }\n\n    /**\n     * Updates terrain heights.\n     * @private\n     */\n    QuadtreePrimitive.prototype.endFrame = function(frameState) {\n        var passes = frameState.passes;\n        if (!passes.render || frameState.mode === SceneMode.MORPHING) {\n            // Only process the load queue for a single pass.\n            // Don't process the load queue or update heights during the morph flights.\n            return;\n        }\n\n        // Load/create resources for terrain and imagery. Prepare texture re-projections for the next frame.\n        processTileLoadQueue(this, frameState);\n        updateHeights(this, frameState);\n        updateTileLoadProgress(this, frameState);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @memberof QuadtreePrimitive\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see QuadtreePrimitive#destroy\n     */\n    QuadtreePrimitive.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @memberof QuadtreePrimitive\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * primitive = primitive && primitive.destroy();\n     *\n     * @see QuadtreePrimitive#isDestroyed\n     */\n    QuadtreePrimitive.prototype.destroy = function() {\n        this._tileProvider = this._tileProvider && this._tileProvider.destroy();\n    };\n\n    var comparisonPoint;\n    var centerScratch = new Cartographic();\n    function compareDistanceToPoint(a, b) {\n        var center = Rectangle.center(a.rectangle, centerScratch);\n        var alon = center.longitude - comparisonPoint.longitude;\n        var alat = center.latitude - comparisonPoint.latitude;\n\n        center = Rectangle.center(b.rectangle, centerScratch);\n        var blon = center.longitude - comparisonPoint.longitude;\n        var blat = center.latitude - comparisonPoint.latitude;\n\n        return (alon * alon + alat * alat) - (blon * blon + blat * blat);\n    }\n\n    var cameraOriginScratch = new Cartesian3();\n    var rootTraversalDetails = [];\n\n    function selectTilesForRendering(primitive, frameState) {\n        var debug = primitive._debug;\n        if (debug.suspendLodUpdate) {\n            return;\n        }\n\n        // Clear the render list.\n        var tilesToRender = primitive._tilesToRender;\n        tilesToRender.length = 0;\n\n        // We can't render anything before the level zero tiles exist.\n        var i;\n        var tileProvider = primitive._tileProvider;\n        if (!defined(primitive._levelZeroTiles)) {\n            if (tileProvider.ready) {\n                var tilingScheme = tileProvider.tilingScheme;\n                primitive._levelZeroTiles = QuadtreeTile.createLevelZeroTiles(tilingScheme);\n                var numberOfRootTiles = primitive._levelZeroTiles.length;\n                if (rootTraversalDetails.length < numberOfRootTiles) {\n                    rootTraversalDetails = new Array(numberOfRootTiles);\n                    for (i = 0; i < numberOfRootTiles; ++i) {\n                        if (rootTraversalDetails[i] === undefined) {\n                            rootTraversalDetails[i] = new TraversalDetails();\n                        }\n                    }\n                }\n            } else {\n                // Nothing to do until the provider is ready.\n                return;\n            }\n        }\n\n        primitive._occluders.ellipsoid.cameraPosition = frameState.camera.positionWC;\n\n        var tile;\n        var levelZeroTiles = primitive._levelZeroTiles;\n        var occluders = levelZeroTiles.length > 1 ? primitive._occluders : undefined;\n\n        // Sort the level zero tiles by the distance from the center to the camera.\n        // The level zero tiles aren't necessarily a nice neat quad, so we can't use the\n        // quadtree ordering we use elsewhere in the tree\n        comparisonPoint = frameState.camera.positionCartographic;\n        levelZeroTiles.sort(compareDistanceToPoint);\n\n        var customDataAdded = primitive._addHeightCallbacks;\n        var customDataRemoved = primitive._removeHeightCallbacks;\n        var frameNumber = frameState.frameNumber;\n\n        var len;\n        if (customDataAdded.length > 0 || customDataRemoved.length > 0) {\n            for (i = 0, len = levelZeroTiles.length; i < len; ++i) {\n                tile = levelZeroTiles[i];\n                tile._updateCustomData(frameNumber, customDataAdded, customDataRemoved);\n            }\n\n            customDataAdded.length = 0;\n            customDataRemoved.length = 0;\n        }\n\n        var camera = frameState.camera;\n\n        primitive._cameraPositionCartographic = camera.positionCartographic;\n        var cameraFrameOrigin = Matrix4.getTranslation(camera.transform, cameraOriginScratch);\n        primitive._cameraReferenceFrameOriginCartographic = primitive.tileProvider.tilingScheme.ellipsoid.cartesianToCartographic(cameraFrameOrigin, primitive._cameraReferenceFrameOriginCartographic);\n\n        // Traverse in depth-first, near-to-far order.\n        for (i = 0, len = levelZeroTiles.length; i < len; ++i) {\n            tile = levelZeroTiles[i];\n            primitive._tileReplacementQueue.markTileRendered(tile);\n            if (!tile.renderable) {\n                queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);\n                ++debug.tilesWaitingForChildren;\n            } else {\n                visitIfVisible(primitive, tile, tileProvider, frameState, occluders, false, rootTraversalDetails[i]);\n            }\n        }\n\n        primitive._lastSelectionFrameNumber = frameNumber;\n    }\n\n    function queueTileLoad(primitive, queue, tile, frameState) {\n        if (!tile.needsLoading) {\n            return;\n        }\n\n        if (primitive.tileProvider.computeTileLoadPriority !== undefined) {\n            tile._loadPriority = primitive.tileProvider.computeTileLoadPriority(tile, frameState);\n        }\n        queue.push(tile);\n    }\n\n    /**\n     * Tracks details of traversing a tile while selecting tiles for rendering.\n     * @alias TraversalDetails\n     * @constructor\n     * @private\n     */\n    function TraversalDetails() {\n        /**\n         * True if all selected (i.e. not culled or refined) tiles in this tile's subtree\n         * are renderable. If the subtree is renderable, we'll render it; no drama.\n         */\n        this.allAreRenderable = true;\n\n        /**\n         * True if any tiles in this tile's subtree were rendered last frame. If any\n         * were, we must render the subtree rather than this tile, because rendering\n         * this tile would cause detail to vanish that was visible last frame, and\n         * that's no good.\n         */\n        this.anyWereRenderedLastFrame = false;\n\n        /**\n         * Counts the number of selected tiles in this tile's subtree that are\n         * not yet ready to be rendered because they need more loading. Note that\n         * this value will _not_ necessarily be zero when\n         * {@link TraversalDetails#allAreRenderable} is true, for subtle reasons.\n         * When {@link TraversalDetails#allAreRenderable} and\n         * {@link TraversalDetails#anyWereRenderedLastFrame} are both false, we\n         * will render this tile instead of any tiles in its subtree and\n         * the `allAreRenderable` value for this tile will reflect only whether _this_\n         * tile is renderable. The `notYetRenderableCount` value, however, will still\n         * reflect the total number of tiles that we are waiting on, including the\n         * ones that we're not rendering. `notYetRenderableCount` is only reset\n         * when a subtree is removed from the render queue because the\n         * `notYetRenderableCount` exceeds the\n         * {@link QuadtreePrimitive#loadingDescendantLimit}.\n         */\n        this.notYetRenderableCount = 0;\n    }\n\n    function TraversalQuadDetails() {\n        this.southwest = new TraversalDetails();\n        this.southeast = new TraversalDetails();\n        this.northwest = new TraversalDetails();\n        this.northeast = new TraversalDetails();\n    }\n\n    TraversalQuadDetails.prototype.combine = function(result) {\n        var southwest = this.southwest;\n        var southeast = this.southeast;\n        var northwest = this.northwest;\n        var northeast = this.northeast;\n\n        result.allAreRenderable = southwest.allAreRenderable && southeast.allAreRenderable && northwest.allAreRenderable && northeast.allAreRenderable;\n        result.anyWereRenderedLastFrame = southwest.anyWereRenderedLastFrame || southeast.anyWereRenderedLastFrame || northwest.anyWereRenderedLastFrame || northeast.anyWereRenderedLastFrame;\n        result.notYetRenderableCount = southwest.notYetRenderableCount + southeast.notYetRenderableCount + northwest.notYetRenderableCount + northeast.notYetRenderableCount;\n    };\n\n    var traversalQuadsByLevel = new Array(30); // level 30 tiles are ~2cm wide at the equator, should be good enough.\n    for (var i = 0; i < traversalQuadsByLevel.length; ++i) {\n        traversalQuadsByLevel[i] = new TraversalQuadDetails();\n    }\n\n    /**\n     * Visits a tile for possible rendering. When we call this function with a tile:\n     *\n     *    * the tile has been determined to be visible (possibly based on a bounding volume that is not very tight-fitting)\n     *    * its parent tile does _not_ meet the SSE (unless ancestorMeetsSse=true, see comments below)\n     *    * the tile may or may not be renderable\n     *\n     * @private\n     *\n     * @param {Primitive} primitive The QuadtreePrimitive.\n     * @param {FrameState} frameState The frame state.\n     * @param {QuadtreeTile} tile The tile to visit\n     * @param {Boolean} ancestorMeetsSse True if a tile higher in the tile tree already met the SSE and we're refining further only\n     *                  to maintain detail while that higher tile loads.\n     * @param {TraversalDetails} traveralDetails On return, populated with details of how the traversal of this tile went.\n     */\n    function visitTile(primitive, frameState, tile, ancestorMeetsSse, traversalDetails) {\n        var debug = primitive._debug;\n\n        ++debug.tilesVisited;\n\n        primitive._tileReplacementQueue.markTileRendered(tile);\n        tile._updateCustomData(frameState.frameNumber);\n\n        if (tile.level > debug.maxDepthVisited) {\n            debug.maxDepthVisited = tile.level;\n        }\n\n        var meetsSse = screenSpaceError(primitive, frameState, tile) < primitive.maximumScreenSpaceError;\n\n        var southwestChild = tile.southwestChild;\n        var southeastChild = tile.southeastChild;\n        var northwestChild = tile.northwestChild;\n        var northeastChild = tile.northeastChild;\n\n        var lastFrame = primitive._lastSelectionFrameNumber;\n        var lastFrameSelectionResult = tile._lastSelectionResultFrame === lastFrame ? tile._lastSelectionResult : TileSelectionResult.NONE;\n\n        var tileProvider = primitive.tileProvider;\n\n        if (meetsSse || ancestorMeetsSse) {\n            // This tile (or an ancestor) is the one we want to render this frame, but we'll do different things depending\n            // on the state of this tile and on what we did _last_ frame.\n\n            // We can render it if _any_ of the following are true:\n            // 1. We rendered it (or kicked it) last frame.\n            // 2. This tile was culled last frame, or it wasn't even visited because an ancestor was culled.\n            // 3. The tile is completely done loading.\n            // 4. a) Terrain is ready, and\n            //    b) All necessary imagery is ready. Necessary imagery is imagery that was rendered with this tile\n            //       or any descendants last frame. Such imagery is required because rendering this tile without\n            //       it would cause detail to disappear.\n            //\n            // Determining condition 4 is more expensive, so we check the others first.\n            //\n            // Note that even if we decide to render a tile here, it may later get \"kicked\" in favor of an ancestor.\n\n            var oneRenderedLastFrame = TileSelectionResult.originalResult(lastFrameSelectionResult) === TileSelectionResult.RENDERED;\n            var twoCulledOrNotVisited = TileSelectionResult.originalResult(lastFrameSelectionResult) === TileSelectionResult.CULLED || lastFrameSelectionResult === TileSelectionResult.NONE;\n            var threeCompletelyLoaded = tile.state === QuadtreeTileLoadState.DONE;\n\n            var renderable = oneRenderedLastFrame || twoCulledOrNotVisited || threeCompletelyLoaded;\n\n            if (!renderable) {\n                // Check the more expensive condition 4 above. This requires details of the thing\n                // we're rendering (e.g. the globe surface), so delegate it to the tile provider.\n                if (defined(tileProvider.canRenderWithoutLosingDetail)) {\n                    renderable = tileProvider.canRenderWithoutLosingDetail(tile);\n                }\n            }\n\n            if (renderable) {\n                // Only load this tile if it (not just an ancestor) meets the SSE.\n                if (meetsSse) {\n                    queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);\n                }\n                addTileToRenderList(primitive, tile);\n\n                traversalDetails.allAreRenderable = tile.renderable;\n                traversalDetails.anyWereRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;\n                traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n\n                tile._lastSelectionResultFrame = frameState.frameNumber;\n                tile._lastSelectionResult = TileSelectionResult.RENDERED;\n\n                if (!traversalDetails.anyWereRenderedLastFrame) {\n                    // Tile is newly-rendered this frame, so update its heights.\n                    primitive._tileToUpdateHeights.push(tile);\n                }\n\n                return;\n            }\n\n            // Otherwise, we can't render this tile (or its fill) because doing so would cause detail to disappear\n            // that was visible last frame. Instead, keep rendering any still-visible descendants that were rendered\n            // last frame and render fills for newly-visible descendants. E.g. if we were rendering level 15 last\n            // frame but this frame we want level 14 and the closest renderable level <= 14 is 0, rendering level\n            // zero would be pretty jarring so instead we keep rendering level 15 even though its SSE is better\n            // than required. So fall through to continue traversal...\n            ancestorMeetsSse = true;\n\n            // Load this blocker tile with high priority, but only if this tile (not just an ancestor) meets the SSE.\n            if (meetsSse) {\n                queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);\n            }\n        }\n\n        if (tileProvider.canRefine(tile)) {\n            var allAreUpsampled = southwestChild.upsampledFromParent && southeastChild.upsampledFromParent &&\n                                  northwestChild.upsampledFromParent && northeastChild.upsampledFromParent;\n\n            if (allAreUpsampled) {\n                // No point in rendering the children because they're all upsampled.  Render this tile instead.\n                addTileToRenderList(primitive, tile);\n\n                // Rendered tile that's not waiting on children loads with medium priority.\n                queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);\n\n                // Make sure we don't unload the children and forget they're upsampled.\n                primitive._tileReplacementQueue.markTileRendered(southwestChild);\n                primitive._tileReplacementQueue.markTileRendered(southeastChild);\n                primitive._tileReplacementQueue.markTileRendered(northwestChild);\n                primitive._tileReplacementQueue.markTileRendered(northeastChild);\n\n                traversalDetails.allAreRenderable = tile.renderable;\n                traversalDetails.anyWereRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;\n                traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n\n                tile._lastSelectionResultFrame = frameState.frameNumber;\n                tile._lastSelectionResult = TileSelectionResult.RENDERED;\n\n                if (!traversalDetails.anyWereRenderedLastFrame) {\n                    // Tile is newly-rendered this frame, so update its heights.\n                    primitive._tileToUpdateHeights.push(tile);\n                }\n\n                return;\n            }\n\n            // SSE is not good enough, so refine.\n            tile._lastSelectionResultFrame = frameState.frameNumber;\n            tile._lastSelectionResult = TileSelectionResult.REFINED;\n\n            var firstRenderedDescendantIndex = primitive._tilesToRender.length;\n            var loadIndexLow = primitive._tileLoadQueueLow.length;\n            var loadIndexMedium = primitive._tileLoadQueueMedium.length;\n            var loadIndexHigh = primitive._tileLoadQueueHigh.length;\n            var tilesToUpdateHeightsIndex = primitive._tileToUpdateHeights.length;\n\n            // No need to add the children to the load queue because they'll be added (if necessary) when they're visited.\n            visitVisibleChildrenNearToFar(primitive, southwestChild, southeastChild, northwestChild, northeastChild, frameState, ancestorMeetsSse, traversalDetails);\n\n            // If no descendant tiles were added to the render list by the function above, it means they were all\n            // culled even though this tile was deemed visible. That's pretty common.\n\n            if (firstRenderedDescendantIndex !== primitive._tilesToRender.length) {\n                // At least one descendant tile was added to the render list.\n                // The traversalDetails tell us what happened while visiting the children.\n\n                var allAreRenderable = traversalDetails.allAreRenderable;\n                var anyWereRenderedLastFrame = traversalDetails.anyWereRenderedLastFrame;\n                var notYetRenderableCount = traversalDetails.notYetRenderableCount;\n                var queuedForLoad = false;\n\n                if (!allAreRenderable && !anyWereRenderedLastFrame) {\n                    // Some of our descendants aren't ready to render yet, and none were rendered last frame,\n                    // so kick them all out of the render list and render this tile instead. Continue to load them though!\n\n                    // Mark the rendered descendants and their ancestors - up to this tile - as kicked.\n                    var renderList = primitive._tilesToRender;\n                    for (var i = firstRenderedDescendantIndex; i < renderList.length; ++i) {\n                        var workTile = renderList[i];\n                        while (workTile !== undefined && workTile._lastSelectionResult !== TileSelectionResult.KICKED && workTile !== tile) {\n                            workTile._lastSelectionResult = TileSelectionResult.kick(workTile._lastSelectionResult);\n                            workTile = workTile.parent;\n                        }\n                    }\n\n                    // Remove all descendants from the render list and add this tile.\n                    primitive._tilesToRender.length = firstRenderedDescendantIndex;\n                    primitive._tileToUpdateHeights.length = tilesToUpdateHeightsIndex;\n                    addTileToRenderList(primitive, tile);\n\n                    tile._lastSelectionResult = TileSelectionResult.RENDERED;\n\n                    // If we're waiting on heaps of descendants, the above will take too long. So in that case,\n                    // load this tile INSTEAD of loading any of the descendants, and tell the up-level we're only waiting\n                    // on this tile. Keep doing this until we actually manage to render this tile.\n                    var wasRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;\n                    if (!wasRenderedLastFrame && notYetRenderableCount > primitive.loadingDescendantLimit) {\n                        // Remove all descendants from the load queues.\n                        primitive._tileLoadQueueLow.length = loadIndexLow;\n                        primitive._tileLoadQueueMedium.length = loadIndexMedium;\n                        primitive._tileLoadQueueHigh.length = loadIndexHigh;\n                        queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);\n                        traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n                        queuedForLoad = true;\n                    }\n\n                    traversalDetails.allAreRenderable = tile.renderable;\n                    traversalDetails.anyWereRenderedLastFrame = wasRenderedLastFrame;\n\n                    if (!wasRenderedLastFrame) {\n                        // Tile is newly-rendered this frame, so update its heights.\n                        primitive._tileToUpdateHeights.push(tile);\n                    }\n\n                    ++debug.tilesWaitingForChildren;\n                }\n\n                if (primitive.preloadAncestors && !queuedForLoad) {\n                    queueTileLoad(primitive, primitive._tileLoadQueueLow, tile, frameState);\n                }\n            }\n\n            return;\n        }\n\n        tile._lastSelectionResultFrame = frameState.frameNumber;\n        tile._lastSelectionResult = TileSelectionResult.RENDERED;\n\n        // We'd like to refine but can't because we have no availability data for this tile's children,\n        // so we have no idea if refinining would involve a load or an upsample. We'll have to finish\n        // loading this tile first in order to find that out, so load this refinement blocker with\n        // high priority.\n        addTileToRenderList(primitive, tile);\n        queueTileLoad(primitive, primitive._tileLoadQueueHigh, tile, frameState);\n\n        traversalDetails.allAreRenderable = tile.renderable;\n        traversalDetails.anyWereRenderedLastFrame = lastFrameSelectionResult === TileSelectionResult.RENDERED;\n        traversalDetails.notYetRenderableCount = tile.renderable ? 0 : 1;\n    }\n\n    function visitVisibleChildrenNearToFar(primitive, southwest, southeast, northwest, northeast, frameState, ancestorMeetsSse, traversalDetails) {\n        var cameraPosition = frameState.camera.positionCartographic;\n        var tileProvider = primitive._tileProvider;\n        var occluders = primitive._occluders;\n\n        var quadDetails = traversalQuadsByLevel[southwest.level];\n        var southwestDetails = quadDetails.southwest;\n        var southeastDetails = quadDetails.southeast;\n        var northwestDetails = quadDetails.northwest;\n        var northeastDetails = quadDetails.northeast;\n\n        if (cameraPosition.longitude < southwest.rectangle.east) {\n            if (cameraPosition.latitude < southwest.rectangle.north) {\n                // Camera in southwest quadrant\n                visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);\n                visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);\n                visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);\n                visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);\n            } else {\n                // Camera in northwest quadrant\n                visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);\n                visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);\n                visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);\n                visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);\n            }\n        } else if (cameraPosition.latitude < southwest.rectangle.north) {\n            // Camera southeast quadrant\n            visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);\n            visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);\n            visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);\n            visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);\n        } else {\n            // Camera in northeast quadrant\n            visitIfVisible(primitive, northeast, tileProvider, frameState, occluders, ancestorMeetsSse, northeastDetails);\n            visitIfVisible(primitive, northwest, tileProvider, frameState, occluders, ancestorMeetsSse, northwestDetails);\n            visitIfVisible(primitive, southeast, tileProvider, frameState, occluders, ancestorMeetsSse, southeastDetails);\n            visitIfVisible(primitive, southwest, tileProvider, frameState, occluders, ancestorMeetsSse, southwestDetails);\n        }\n\n        quadDetails.combine(traversalDetails);\n    }\n\n    function containsNeededPosition(primitive, tile) {\n        var rectangle = tile.rectangle;\n        return (defined(primitive._cameraPositionCartographic) && Rectangle.contains(rectangle, primitive._cameraPositionCartographic)) ||\n               (defined(primitive._cameraReferenceFrameOriginCartographic) && Rectangle.contains(rectangle, primitive._cameraReferenceFrameOriginCartographic));\n    }\n\n    function visitIfVisible(primitive, tile, tileProvider, frameState, occluders, ancestorMeetsSse, traversalDetails) {\n        if (tileProvider.computeTileVisibility(tile, frameState, occluders) !== Visibility.NONE) {\n            return visitTile(primitive, frameState, tile, ancestorMeetsSse, traversalDetails);\n        }\n\n        ++primitive._debug.tilesCulled;\n        primitive._tileReplacementQueue.markTileRendered(tile);\n\n        traversalDetails.allAreRenderable = true;\n        traversalDetails.anyWereRenderedLastFrame = false;\n        traversalDetails.notYetRenderableCount = 0;\n\n        if (containsNeededPosition(primitive, tile)) {\n            // Load the tile(s) that contains the camera's position and\n            // the origin of its reference frame with medium priority.\n            // But we only need to load until the terrain is available, no need to load imagery.\n            if (!defined(tile.data) || !defined(tile.data.vertexArray)) {\n                queueTileLoad(primitive, primitive._tileLoadQueueMedium, tile, frameState);\n            }\n\n            var lastFrame = primitive._lastSelectionFrameNumber;\n            var lastFrameSelectionResult = tile._lastSelectionResultFrame === lastFrame ? tile._lastSelectionResult : TileSelectionResult.NONE;\n            if (lastFrameSelectionResult !== TileSelectionResult.CULLED_BUT_NEEDED && lastFrameSelectionResult !== TileSelectionResult.RENDERED) {\n                primitive._tileToUpdateHeights.push(tile);\n            }\n\n            tile._lastSelectionResult = TileSelectionResult.CULLED_BUT_NEEDED;\n        } else if (primitive.preloadSiblings || tile.level === 0) {\n            // Load culled level zero tiles with low priority.\n            // For all other levels, only load culled tiles if preloadSiblings is enabled.\n            queueTileLoad(primitive, primitive._tileLoadQueueLow, tile, frameState);\n            tile._lastSelectionResult = TileSelectionResult.CULLED;\n        } else {\n            tile._lastSelectionResult = TileSelectionResult.CULLED;\n        }\n\n        tile._lastSelectionResultFrame = frameState.frameNumber;\n    }\n\n    function screenSpaceError(primitive, frameState, tile) {\n        if (frameState.mode === SceneMode.SCENE2D || frameState.camera.frustum instanceof OrthographicFrustum || frameState.camera.frustum instanceof OrthographicOffCenterFrustum) {\n            return screenSpaceError2D(primitive, frameState, tile);\n        }\n\n        var maxGeometricError = primitive._tileProvider.getLevelMaximumGeometricError(tile.level);\n\n        var distance = tile._distance;\n        var height = frameState.context.drawingBufferHeight;\n        var sseDenominator = frameState.camera.frustum.sseDenominator;\n\n        var error = (maxGeometricError * height) / (distance * sseDenominator);\n\n        if (frameState.fog.enabled) {\n            error -= CesiumMath.fog(distance, frameState.fog.density) * frameState.fog.sse;\n        }\n\n        error /= frameState.pixelRatio;\n\n        return error;\n    }\n\n    function screenSpaceError2D(primitive, frameState, tile) {\n        var camera = frameState.camera;\n        var frustum = camera.frustum;\n        if (defined(frustum._offCenterFrustum)) {\n            frustum = frustum._offCenterFrustum;\n        }\n\n        var context = frameState.context;\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight;\n\n        var maxGeometricError = primitive._tileProvider.getLevelMaximumGeometricError(tile.level);\n        var pixelSize = Math.max(frustum.top - frustum.bottom, frustum.right - frustum.left) / Math.max(width, height);\n        var error = maxGeometricError / pixelSize;\n\n        if (frameState.fog.enabled && frameState.mode !== SceneMode.SCENE2D) {\n            error -= CesiumMath.fog(tile._distance, frameState.fog.density) * frameState.fog.sse;\n        }\n\n        error /= frameState.pixelRatio;\n\n        return error;\n    }\n\n    function addTileToRenderList(primitive, tile) {\n        primitive._tilesToRender.push(tile);\n    }\n\n    function processTileLoadQueue(primitive, frameState) {\n        var tileLoadQueueHigh = primitive._tileLoadQueueHigh;\n        var tileLoadQueueMedium = primitive._tileLoadQueueMedium;\n        var tileLoadQueueLow = primitive._tileLoadQueueLow;\n\n        if (tileLoadQueueHigh.length === 0 && tileLoadQueueMedium.length === 0 && tileLoadQueueLow.length === 0) {\n            return;\n        }\n\n        // Remove any tiles that were not used this frame beyond the number\n        // we're allowed to keep.\n        primitive._tileReplacementQueue.trimTiles(primitive.tileCacheSize);\n\n        var endTime = getTimestamp() + primitive._loadQueueTimeSlice;\n        var tileProvider = primitive._tileProvider;\n\n        var didSomeLoading = processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, tileLoadQueueHigh, false);\n        didSomeLoading = processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, tileLoadQueueMedium, didSomeLoading);\n        processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, tileLoadQueueLow, didSomeLoading);\n    }\n\n    function sortByLoadPriority(a, b) {\n        return a._loadPriority - b._loadPriority;\n    }\n\n    function processSinglePriorityLoadQueue(primitive, frameState, tileProvider, endTime, loadQueue, didSomeLoading) {\n        if (tileProvider.computeTileLoadPriority !== undefined) {\n            loadQueue.sort(sortByLoadPriority);\n        }\n\n        for (var i = 0, len = loadQueue.length; i < len && (getTimestamp() < endTime || !didSomeLoading); ++i) {\n            var tile = loadQueue[i];\n            primitive._tileReplacementQueue.markTileRendered(tile);\n            tileProvider.loadTile(frameState, tile);\n            didSomeLoading = true;\n        }\n\n        return didSomeLoading;\n    }\n\n    var scratchRay = new Ray();\n    var scratchCartographic = new Cartographic();\n    var scratchPosition = new Cartesian3();\n    var scratchArray = [];\n\n    function updateHeights(primitive, frameState) {\n        if (!primitive.tileProvider.ready) {\n            return;\n        }\n\n        var tryNextFrame = scratchArray;\n        tryNextFrame.length = 0;\n        var tilesToUpdateHeights = primitive._tileToUpdateHeights;\n        var terrainProvider = primitive._tileProvider.terrainProvider;\n\n        var startTime = getTimestamp();\n        var timeSlice = primitive._updateHeightsTimeSlice;\n        var endTime = startTime + timeSlice;\n\n        var mode = frameState.mode;\n        var projection = frameState.mapProjection;\n        var ellipsoid = primitive.tileProvider.tilingScheme.ellipsoid;\n        var i;\n\n        while (tilesToUpdateHeights.length > 0) {\n            var tile = tilesToUpdateHeights[0];\n            if (!defined(tile.data) || !defined(tile.data.mesh)) {\n                // Tile isn't loaded enough yet, so try again next frame if this tile is still\n                // being rendered.\n                var selectionResult = tile._lastSelectionResultFrame === primitive._lastSelectionFrameNumber\n                    ? tile._lastSelectionResult\n                    : TileSelectionResult.NONE;\n                if (selectionResult === TileSelectionResult.RENDERED || selectionResult === TileSelectionResult.CULLED_BUT_NEEDED) {\n                    tryNextFrame.push(tile);\n                }\n                tilesToUpdateHeights.shift();\n                primitive._lastTileIndex = 0;\n                continue;\n            }\n            var customData = tile.customData;\n            var customDataLength = customData.length;\n\n            var timeSliceMax = false;\n            for (i = primitive._lastTileIndex; i < customDataLength; ++i) {\n                var data = customData[i];\n\n                if (tile.level > data.level) {\n                    if (!defined(data.positionOnEllipsoidSurface)) {\n                        // cartesian has to be on the ellipsoid surface for `ellipsoid.geodeticSurfaceNormal`\n                        data.positionOnEllipsoidSurface = Cartesian3.fromRadians(data.positionCartographic.longitude, data.positionCartographic.latitude, 0.0, ellipsoid);\n                    }\n\n                    if (mode === SceneMode.SCENE3D) {\n                        var surfaceNormal = ellipsoid.geodeticSurfaceNormal(data.positionOnEllipsoidSurface, scratchRay.direction);\n\n                        // compute origin point\n\n                        // Try to find the intersection point between the surface normal and z-axis.\n                        // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n                        var rayOrigin = ellipsoid.getSurfaceNormalIntersectionWithZAxis(data.positionOnEllipsoidSurface, 11500.0, scratchRay.origin);\n\n                        // Theoretically, not with Earth datums, the intersection point can be outside the ellipsoid\n                        if (!defined(rayOrigin)) {\n                            // intersection point is outside the ellipsoid, try other value\n                            // minimum height (-11500.0) for the terrain set, need to get this information from the terrain provider\n                            var minimumHeight;\n                            if (defined(tile.data.tileBoundingRegion)) {\n                                minimumHeight = tile.data.tileBoundingRegion.minimumHeight;\n                            }\n                            var magnitude = Math.min(defaultValue(minimumHeight, 0.0), -11500.0);\n\n                            // multiply by the *positive* value of the magnitude\n                            var vectorToMinimumPoint = Cartesian3.multiplyByScalar(surfaceNormal, Math.abs(magnitude) + 1, scratchPosition);\n                            Cartesian3.subtract(data.positionOnEllipsoidSurface, vectorToMinimumPoint, scratchRay.origin);\n                        }\n                    } else {\n                        Cartographic.clone(data.positionCartographic, scratchCartographic);\n\n                        // minimum height for the terrain set, need to get this information from the terrain provider\n                        scratchCartographic.height = -11500.0;\n                        projection.project(scratchCartographic, scratchPosition);\n                        Cartesian3.fromElements(scratchPosition.z, scratchPosition.x, scratchPosition.y, scratchPosition);\n                        Cartesian3.clone(scratchPosition, scratchRay.origin);\n                        Cartesian3.clone(Cartesian3.UNIT_X, scratchRay.direction);\n                    }\n\n                    var position = tile.data.pick(scratchRay, mode, projection, false, scratchPosition);\n                    if (defined(position)) {\n                        data.callback(position);\n                        data.level = tile.level;\n                    }\n                } else if (tile.level === data.level) {\n                    var children = tile.children;\n                    var childrenLength = children.length;\n\n                    var child;\n                    for (var j = 0; j < childrenLength; ++j) {\n                        child = children[j];\n                        if (Rectangle.contains(child.rectangle, data.positionCartographic)) {\n                            break;\n                        }\n                    }\n\n                    var tileDataAvailable = terrainProvider.getTileDataAvailable(child.x, child.y, child.level);\n                    var parentTile = tile.parent;\n                    if ((defined(tileDataAvailable) && !tileDataAvailable) ||\n                        (defined(parentTile) && defined(parentTile.data) && defined(parentTile.data.terrainData) &&\n                         !parentTile.data.terrainData.isChildAvailable(parentTile.x, parentTile.y, child.x, child.y))) {\n                        data.removeFunc();\n                    }\n                }\n\n                if (getTimestamp() >= endTime) {\n                    timeSliceMax = true;\n                    break;\n                }\n            }\n\n            if (timeSliceMax) {\n                primitive._lastTileIndex = i;\n                break;\n            } else {\n                primitive._lastTileIndex = 0;\n                tilesToUpdateHeights.shift();\n            }\n        }\n        for (i = 0; i < tryNextFrame.length; i++) {\n            tilesToUpdateHeights.push(tryNextFrame[i]);\n        }\n    }\n\n    function createRenderCommandsForSelectedTiles(primitive, frameState) {\n        var tileProvider = primitive._tileProvider;\n        var tilesToRender = primitive._tilesToRender;\n\n        for (var i = 0, len = tilesToRender.length; i < len; ++i) {\n            var tile = tilesToRender[i];\n            tileProvider.showTileThisFrame(tile, frameState);\n        }\n    }\n\n    return QuadtreePrimitive;\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/defineProperties',\n        '../Core/EllipsoidalOccluder'\n    ], function(\n        Cartesian3,\n        defineProperties,\n        EllipsoidalOccluder) {\n    'use strict';\n\n    /**\n     * A set of occluders that can be used to test quadtree tiles for occlusion.\n     *\n     * @alias QuadtreeOccluders\n     * @constructor\n     * @private\n     *\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid that potentially occludes tiles.\n     */\n    function QuadtreeOccluders(options) {\n        this._ellipsoid = new EllipsoidalOccluder(options.ellipsoid, Cartesian3.ZERO);\n    }\n\n    defineProperties(QuadtreeOccluders.prototype, {\n        /**\n         * Gets the {@link EllipsoidalOccluder} that can be used to determine if a point is\n         * occluded by an {@link Ellipsoid}.\n         * @type {EllipsoidalOccluder}\n         * @memberof QuadtreeOccluders.prototype\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        }\n    });\n\n    return QuadtreeOccluders;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/Rectangle',\n        './QuadtreeTileLoadState',\n        './TileSelectionResult'\n    ], function(\n        defined,\n        defineProperties,\n        DeveloperError,\n        Rectangle,\n        QuadtreeTileLoadState,\n        TileSelectionResult) {\n    'use strict';\n\n    /**\n     * A single tile in a {@link QuadtreePrimitive}.\n     *\n     * @alias QuadtreeTile\n     * @constructor\n     * @private\n     *\n     * @param {Number} options.level The level of the tile in the quadtree.\n     * @param {Number} options.x The X coordinate of the tile in the quadtree.  0 is the westernmost tile.\n     * @param {Number} options.y The Y coordinate of the tile in the quadtree.  0 is the northernmost tile.\n     * @param {TilingScheme} options.tilingScheme The tiling scheme in which this tile exists.\n     * @param {QuadtreeTile} [options.parent] This tile's parent, or undefined if this is a root tile.\n     */\n    function QuadtreeTile(options) {\n        \n\n        this._tilingScheme = options.tilingScheme;\n        this._x = options.x;\n        this._y = options.y;\n        this._level = options.level;\n        this._parent = options.parent;\n        this._rectangle = this._tilingScheme.tileXYToRectangle(this._x, this._y, this._level);\n\n        this._southwestChild = undefined;\n        this._southeastChild = undefined;\n        this._northwestChild = undefined;\n        this._northeastChild = undefined;\n\n        // TileReplacementQueue gets/sets these private properties.\n        this.replacementPrevious = undefined;\n        this.replacementNext = undefined;\n\n        // The distance from the camera to this tile, updated when the tile is selected\n        // for rendering.  We can get rid of this if we have a better way to sort by\n        // distance - for example, by using the natural ordering of a quadtree.\n        // QuadtreePrimitive gets/sets this private property.\n        this._distance = 0.0;\n        this._loadPriority = 0.0;\n\n        this._customData = [];\n        this._frameUpdated = undefined;\n        this._lastSelectionResult = TileSelectionResult.NONE;\n        this._lastSelectionResultFrame = undefined;\n        this._loadedCallbacks = {};\n\n        /**\n         * Gets or sets the current state of the tile in the tile load pipeline.\n         * @type {QuadtreeTileLoadState}\n         * @default {@link QuadtreeTileLoadState.START}\n         */\n        this.state = QuadtreeTileLoadState.START;\n\n        /**\n         * Gets or sets a value indicating whether or not the tile is currently renderable.\n         * @type {Boolean}\n         * @default false\n         */\n        this.renderable = false;\n\n        /**\n         * Gets or set a value indicating whether or not the tile was entirely upsampled from its\n         * parent tile.  If all four children of a parent tile were upsampled from the parent,\n         * we will render the parent instead of the children even if the LOD indicates that\n         * the children would be preferable.\n         * @type {Boolean}\n         * @default false\n         */\n        this.upsampledFromParent = false;\n\n        /**\n         * Gets or sets the additional data associated with this tile.  The exact content is specific to the\n         * {@link QuadtreeTileProvider}.\n         * @type {Object}\n         * @default undefined\n         */\n        this.data = undefined;\n    }\n\n    /**\n     * Creates a rectangular set of tiles for level of detail zero, the coarsest, least detailed level.\n     *\n     * @memberof QuadtreeTile\n     *\n     * @param {TilingScheme} tilingScheme The tiling scheme for which the tiles are to be created.\n     * @returns {QuadtreeTile[]} An array containing the tiles at level of detail zero, starting with the\n     * tile in the northwest corner and followed by the tile (if any) to its east.\n     */\n    QuadtreeTile.createLevelZeroTiles = function(tilingScheme) {\n        \n\n        var numberOfLevelZeroTilesX = tilingScheme.getNumberOfXTilesAtLevel(0);\n        var numberOfLevelZeroTilesY = tilingScheme.getNumberOfYTilesAtLevel(0);\n\n        var result = new Array(numberOfLevelZeroTilesX * numberOfLevelZeroTilesY);\n\n        var index = 0;\n        for (var y = 0; y < numberOfLevelZeroTilesY; ++y) {\n            for (var x = 0; x < numberOfLevelZeroTilesX; ++x) {\n                result[index++] = new QuadtreeTile({\n                    tilingScheme : tilingScheme,\n                    x : x,\n                    y : y,\n                    level : 0\n                });\n            }\n        }\n\n        return result;\n    };\n\n    QuadtreeTile.prototype._updateCustomData = function(frameNumber, added, removed) {\n        var customData = this.customData;\n\n        var i;\n        var data;\n        var rectangle;\n\n        if (defined(added) && defined(removed)) {\n            customData = customData.filter(function(value) {\n                return removed.indexOf(value) === -1;\n            });\n            this._customData = customData;\n\n            rectangle = this._rectangle;\n            for (i = 0; i < added.length; ++i) {\n                data = added[i];\n                if (Rectangle.contains(rectangle, data.positionCartographic)) {\n                    customData.push(data);\n                }\n            }\n\n            this._frameUpdated = frameNumber;\n        } else {\n            // interior or leaf tile, update from parent\n            var parent = this._parent;\n            if (defined(parent) && this._frameUpdated !== parent._frameUpdated) {\n                customData.length = 0;\n\n                rectangle = this._rectangle;\n                var parentCustomData = parent.customData;\n                for (i = 0; i < parentCustomData.length; ++i) {\n                    data = parentCustomData[i];\n                    if (Rectangle.contains(rectangle, data.positionCartographic)) {\n                        customData.push(data);\n                    }\n                }\n\n                this._frameUpdated = parent._frameUpdated;\n            }\n        }\n    };\n\n    defineProperties(QuadtreeTile.prototype, {\n        /**\n         * Gets the tiling scheme used to tile the surface.\n         * @memberof QuadtreeTile.prototype\n         * @type {TilingScheme}\n         */\n        tilingScheme : {\n            get : function() {\n                return this._tilingScheme;\n            }\n        },\n\n        /**\n         * Gets the tile X coordinate.\n         * @memberof QuadtreeTile.prototype\n         * @type {Number}\n         */\n        x : {\n            get : function() {\n                return this._x;\n            }\n        },\n\n        /**\n         * Gets the tile Y coordinate.\n         * @memberof QuadtreeTile.prototype\n         * @type {Number}\n         */\n        y : {\n            get : function() {\n                return this._y;\n            }\n        },\n\n        /**\n         * Gets the level-of-detail, where zero is the coarsest, least-detailed.\n         * @memberof QuadtreeTile.prototype\n         * @type {Number}\n         */\n        level : {\n            get : function() {\n                return this._level;\n            }\n        },\n\n        /**\n         * Gets the parent tile of this tile.\n         * @memberof QuadtreeTile.prototype\n         * @type {QuadtreeTile}\n         */\n        parent : {\n            get : function() {\n                return this._parent;\n            }\n        },\n\n        /**\n         * Gets the cartographic rectangle of the tile, with north, south, east and\n         * west properties in radians.\n         * @memberof QuadtreeTile.prototype\n         * @type {Rectangle}\n         */\n        rectangle : {\n            get : function() {\n                return this._rectangle;\n            }\n        },\n\n        /**\n         * An array of tiles that is at the next level of the tile tree.\n         * @memberof QuadtreeTile.prototype\n         * @type {QuadtreeTile[]}\n         */\n        children : {\n            get : function() {\n                return [this.northwestChild, this.northeastChild, this.southwestChild, this.southeastChild];\n            }\n        },\n\n        /**\n         * Gets the southwest child tile.\n         * @memberof QuadtreeTile.prototype\n         * @type {QuadtreeTile}\n         */\n        southwestChild : {\n            get : function() {\n                if (!defined(this._southwestChild)) {\n                    this._southwestChild = new QuadtreeTile({\n                        tilingScheme : this.tilingScheme,\n                        x : this.x * 2,\n                        y : this.y * 2 + 1,\n                        level : this.level + 1,\n                        parent : this\n                    });\n                }\n                return this._southwestChild;\n            }\n        },\n\n        /**\n         * Gets the southeast child tile.\n         * @memberof QuadtreeTile.prototype\n         * @type {QuadtreeTile}\n         */\n        southeastChild : {\n            get : function() {\n                if (!defined(this._southeastChild)) {\n                    this._southeastChild = new QuadtreeTile({\n                        tilingScheme : this.tilingScheme,\n                        x : this.x * 2 + 1,\n                        y : this.y * 2 + 1,\n                        level : this.level + 1,\n                        parent : this\n                    });\n                }\n                return this._southeastChild;\n            }\n        },\n\n        /**\n         * Gets the northwest child tile.\n         * @memberof QuadtreeTile.prototype\n         * @type {QuadtreeTile}\n         */\n        northwestChild : {\n            get : function() {\n                if (!defined(this._northwestChild)) {\n                    this._northwestChild = new QuadtreeTile({\n                        tilingScheme : this.tilingScheme,\n                        x : this.x * 2,\n                        y : this.y * 2,\n                        level : this.level + 1,\n                        parent : this\n                    });\n                }\n                return this._northwestChild;\n            }\n        },\n\n        /**\n         * Gets the northeast child tile.\n         * @memberof QuadtreeTile.prototype\n         * @type {QuadtreeTile}\n         */\n        northeastChild : {\n            get : function() {\n                if (!defined(this._northeastChild)) {\n                    this._northeastChild = new QuadtreeTile({\n                        tilingScheme : this.tilingScheme,\n                        x : this.x * 2 + 1,\n                        y : this.y * 2,\n                        level : this.level + 1,\n                        parent : this\n                    });\n                }\n                return this._northeastChild;\n            }\n        },\n\n        /**\n         * An array of objects associated with this tile.\n         * @memberof QuadtreeTile.prototype\n         * @type {Array}\n         */\n        customData : {\n            get : function() {\n                return this._customData;\n            }\n        },\n\n        /**\n         * Gets a value indicating whether or not this tile needs further loading.\n         * This property will return true if the {@link QuadtreeTile#state} is\n         * <code>START</code> or <code>LOADING</code>.\n         * @memberof QuadtreeTile.prototype\n         * @type {Boolean}\n         */\n        needsLoading : {\n            get : function() {\n                return this.state < QuadtreeTileLoadState.DONE;\n            }\n        },\n\n        /**\n         * Gets a value indicating whether or not this tile is eligible to be unloaded.\n         * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n         * such as a request for data, is in progress on it.  A tile will never be\n         * unloaded while it is needed for rendering, regardless of the value of this\n         * property.  If {@link QuadtreeTile#data} is defined and has an\n         * <code>eligibleForUnloading</code> property, the value of that property is returned.\n         * Otherwise, this property returns true.\n         * @memberof QuadtreeTile.prototype\n         * @type {Boolean}\n         */\n        eligibleForUnloading : {\n            get : function() {\n                var result = true;\n\n                if (defined(this.data)) {\n                    result = this.data.eligibleForUnloading;\n                    if (!defined(result)) {\n                        result = true;\n                    }\n                }\n\n                return result;\n            }\n        }\n    });\n\n    QuadtreeTile.prototype.findLevelZeroTile = function(levelZeroTiles, x, y) {\n        var xTiles = this.tilingScheme.getNumberOfXTilesAtLevel(0);\n        if (x < 0) {\n            x += xTiles;\n        } else if (x >= xTiles) {\n            x -= xTiles;\n        }\n\n        if (y < 0 || y >= this.tilingScheme.getNumberOfYTilesAtLevel(0)) {\n            return undefined;\n        }\n\n        return levelZeroTiles.filter(function(tile) {\n            return tile.x === x && tile.y === y;\n        })[0];\n    };\n\n    QuadtreeTile.prototype.findTileToWest = function(levelZeroTiles) {\n        var parent = this.parent;\n        if (parent === undefined) {\n            return this.findLevelZeroTile(levelZeroTiles, this.x - 1, this.y);\n        }\n\n        if (parent.southeastChild === this) {\n            return parent.southwestChild;\n        } else if (parent.northeastChild === this) {\n            return parent.northwestChild;\n        }\n\n        var westOfParent = parent.findTileToWest(levelZeroTiles);\n        if (westOfParent === undefined) {\n            return undefined;\n        } else if (parent.southwestChild === this) {\n            return westOfParent.southeastChild;\n        }\n        return westOfParent.northeastChild;\n    };\n\n    QuadtreeTile.prototype.findTileToEast = function(levelZeroTiles) {\n        var parent = this.parent;\n        if (parent === undefined) {\n            return this.findLevelZeroTile(levelZeroTiles, this.x + 1, this.y);\n        }\n\n        if (parent.southwestChild === this) {\n            return parent.southeastChild;\n        } else if (parent.northwestChild === this) {\n            return parent.northeastChild;\n        }\n\n        var eastOfParent = parent.findTileToEast(levelZeroTiles);\n        if (eastOfParent === undefined) {\n            return undefined;\n        } else if (parent.southeastChild === this) {\n            return eastOfParent.southwestChild;\n        }\n        return eastOfParent.northwestChild;\n    };\n\n    QuadtreeTile.prototype.findTileToSouth = function(levelZeroTiles) {\n        var parent = this.parent;\n        if (parent === undefined) {\n            return this.findLevelZeroTile(levelZeroTiles, this.x, this.y + 1);\n        }\n\n        if (parent.northwestChild === this) {\n            return parent.southwestChild;\n        } else if (parent.northeastChild === this) {\n            return parent.southeastChild;\n        }\n\n        var southOfParent = parent.findTileToSouth(levelZeroTiles);\n        if (southOfParent === undefined) {\n            return undefined;\n        } else if (parent.southwestChild === this) {\n            return southOfParent.northwestChild;\n        }\n        return southOfParent.northeastChild;\n    };\n\n    QuadtreeTile.prototype.findTileToNorth = function(levelZeroTiles) {\n        var parent = this.parent;\n        if (parent === undefined) {\n            return this.findLevelZeroTile(levelZeroTiles, this.x, this.y - 1);\n        }\n\n        if (parent.southwestChild === this) {\n            return parent.northwestChild;\n        } else if (parent.southeastChild === this) {\n            return parent.northeastChild;\n        }\n\n        var northOfParent = parent.findTileToNorth(levelZeroTiles);\n        if (northOfParent === undefined) {\n            return undefined;\n        } else if (parent.northwestChild === this) {\n            return northOfParent.southwestChild;\n        }\n        return northOfParent.southeastChild;\n    };\n\n    /**\n     * Frees the resources associated with this tile and returns it to the <code>START</code>\n     * {@link QuadtreeTileLoadState}.  If the {@link QuadtreeTile#data} property is defined and it\n     * has a <code>freeResources</code> method, the method will be invoked.\n     *\n     * @memberof QuadtreeTile\n     */\n    QuadtreeTile.prototype.freeResources = function() {\n        this.state = QuadtreeTileLoadState.START;\n        this.renderable = false;\n        this.upsampledFromParent = false;\n\n        if (defined(this.data) && defined(this.data.freeResources)) {\n            this.data.freeResources();\n        }\n\n        freeTile(this._southwestChild);\n        this._southwestChild = undefined;\n        freeTile(this._southeastChild);\n        this._southeastChild = undefined;\n        freeTile(this._northwestChild);\n        this._northwestChild = undefined;\n        freeTile(this._northeastChild);\n        this._northeastChild = undefined;\n    };\n\n    function freeTile(tile) {\n        if (defined(tile)) {\n            tile.freeResources();\n        }\n    }\n\n    return QuadtreeTile;\n});\n","define([\n        '../Core/defined'\n    ], function(\n        defined) {\n    'use strict';\n\n    /**\n     * A priority queue of tiles to be replaced, if necessary, to make room for new tiles.  The queue\n     * is implemented as a linked list.\n     *\n     * @alias TileReplacementQueue\n     * @private\n     */\n    function TileReplacementQueue() {\n        this.head = undefined;\n        this.tail = undefined;\n        this.count = 0;\n        this._lastBeforeStartOfFrame = undefined;\n    }\n\n    /**\n     * Marks the start of the render frame.  Tiles before (closer to the head) this tile in the\n     * list were used last frame and must not be unloaded.\n     */\n    TileReplacementQueue.prototype.markStartOfRenderFrame = function() {\n        this._lastBeforeStartOfFrame = this.head;\n    };\n\n    /**\n     * Reduces the size of the queue to a specified size by unloading the least-recently used\n     * tiles.  Tiles that were used last frame will not be unloaded, even if that puts the number\n     * of tiles above the specified maximum.\n     *\n     * @param {Number} maximumTiles The maximum number of tiles in the queue.\n     */\n    TileReplacementQueue.prototype.trimTiles = function(maximumTiles) {\n        var tileToTrim = this.tail;\n        var keepTrimming = true;\n        while (keepTrimming &&\n               defined(this._lastBeforeStartOfFrame) &&\n               this.count > maximumTiles &&\n               defined(tileToTrim)) {\n            // Stop trimming after we process the last tile not used in the\n            // current frame.\n            keepTrimming = tileToTrim !== this._lastBeforeStartOfFrame;\n\n            var previous = tileToTrim.replacementPrevious;\n\n            if (tileToTrim.eligibleForUnloading) {\n                tileToTrim.freeResources();\n                remove(this, tileToTrim);\n            }\n\n            tileToTrim = previous;\n        }\n    };\n\n    function remove(tileReplacementQueue, item) {\n        var previous = item.replacementPrevious;\n        var next = item.replacementNext;\n\n        if (item === tileReplacementQueue._lastBeforeStartOfFrame) {\n            tileReplacementQueue._lastBeforeStartOfFrame = next;\n        }\n\n        if (item === tileReplacementQueue.head) {\n            tileReplacementQueue.head = next;\n        } else {\n            previous.replacementNext = next;\n        }\n\n        if (item === tileReplacementQueue.tail) {\n            tileReplacementQueue.tail = previous;\n        } else {\n            next.replacementPrevious = previous;\n        }\n\n        item.replacementPrevious = undefined;\n        item.replacementNext = undefined;\n\n        --tileReplacementQueue.count;\n    }\n\n    /**\n     * Marks a tile as rendered this frame and moves it before the first tile that was not rendered\n     * this frame.\n     *\n     * @param {TileReplacementQueue} item The tile that was rendered.\n     */\n    TileReplacementQueue.prototype.markTileRendered = function(item) {\n        var head = this.head;\n        if (head === item) {\n            if (item === this._lastBeforeStartOfFrame) {\n                this._lastBeforeStartOfFrame = item.replacementNext;\n            }\n            return;\n        }\n\n        ++this.count;\n\n        if (!defined(head)) {\n            // no other tiles in the list\n            item.replacementPrevious = undefined;\n            item.replacementNext = undefined;\n            this.head = item;\n            this.tail = item;\n            return;\n        }\n\n        if (defined(item.replacementPrevious) || defined(item.replacementNext)) {\n            // tile already in the list, remove from its current location\n            remove(this, item);\n        }\n\n        item.replacementPrevious = undefined;\n        item.replacementNext = head;\n        head.replacementPrevious = item;\n\n        this.head = item;\n    };\n\n    return TileReplacementQueue;\n});\n","module.exports = __webpack_public_path__ + \"4fff67aa927fc4ecb16298f61b0cf84a.jpg\";","define([\n        '../Core/buildModuleUrl',\n        '../Core/Cartesian3',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/Ellipsoid',\n        '../Core/IauOrientationAxes',\n        '../Core/Matrix3',\n        '../Core/Matrix4',\n        '../Core/Simon1994PlanetaryPositions',\n        '../Core/Transforms',\n        './EllipsoidPrimitive',\n        './Material'\n    ], function(\n        buildModuleUrl,\n        Cartesian3,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        Ellipsoid,\n        IauOrientationAxes,\n        Matrix3,\n        Matrix4,\n        Simon1994PlanetaryPositions,\n        Transforms,\n        EllipsoidPrimitive,\n        Material) {\n    'use strict';\n\n    /**\n     * Draws the Moon in 3D.\n     * @alias Moon\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.show=true] Determines whether the moon will be rendered.\n     * @param {String} [options.textureUrl=require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/moonSmall.jpg')] The moon texture.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.MOON] The moon ellipsoid.\n     * @param {Boolean} [options.onlySunLighting=true] Use the sun as the only light source.\n     *\n     *\n     * @example\n     * scene.moon = new Cesium.Moon();\n     *\n     * @see Scene#moon\n     */\n    function Moon(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var url = options.textureUrl;\n        if (!defined(url)) {\n            url = require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/moonSmall.jpg');\n        }\n\n        /**\n         * Determines if the moon will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * The moon texture.\n         * @type {String}\n         * @default require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/moonSmall.jpg')\n         */\n        this.textureUrl = url;\n\n        this._ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.MOON);\n\n        /**\n         * Use the sun as the only light source.\n         * @type {Boolean}\n         * @default true\n         */\n        this.onlySunLighting = defaultValue(options.onlySunLighting, true);\n\n        this._ellipsoidPrimitive = new EllipsoidPrimitive({\n            radii : this.ellipsoid.radii,\n            material : Material.fromType(Material.ImageType),\n            depthTestEnabled : false,\n            _owner : this\n        });\n        this._ellipsoidPrimitive.material.translucent = false;\n\n        this._axes = new IauOrientationAxes();\n    }\n\n    defineProperties(Moon.prototype, {\n        /**\n         * Get the ellipsoid that defines the shape of the moon.\n         *\n         * @memberof Moon.prototype\n         *\n         * @type {Ellipsoid}\n         * @readonly\n         *\n         * @default {@link Ellipsoid.MOON}\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        }\n    });\n\n    var icrfToFixed = new Matrix3();\n    var rotationScratch = new Matrix3();\n    var translationScratch = new Cartesian3();\n    var scratchCommandList = [];\n\n    /**\n     * @private\n     */\n    Moon.prototype.update = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        var ellipsoidPrimitive = this._ellipsoidPrimitive;\n        ellipsoidPrimitive.material.uniforms.image = this.textureUrl;\n        ellipsoidPrimitive.onlySunLighting = this.onlySunLighting;\n\n        var date = frameState.time;\n        if (!defined(Transforms.computeIcrfToFixedMatrix(date, icrfToFixed))) {\n            Transforms.computeTemeToPseudoFixedMatrix(date, icrfToFixed);\n        }\n\n        var rotation = this._axes.evaluate(date, rotationScratch);\n        Matrix3.transpose(rotation, rotation);\n        Matrix3.multiply(icrfToFixed, rotation, rotation);\n\n        var translation = Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame(date, translationScratch);\n        Matrix3.multiplyByVector(icrfToFixed, translation, translation);\n\n        Matrix4.fromRotationTranslation(rotation, translation, ellipsoidPrimitive.modelMatrix);\n\n        var savedCommandList = frameState.commandList;\n        frameState.commandList = scratchCommandList;\n        scratchCommandList.length = 0;\n        ellipsoidPrimitive.update(frameState);\n        frameState.commandList = savedCommandList;\n        return (scratchCommandList.length === 1) ? scratchCommandList[0] : undefined;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see Moon#destroy\n     */\n    Moon.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * moon = moon && moon.destroy();\n     *\n     * @see Moon#isDestroyed\n     */\n    Moon.prototype.destroy = function() {\n        this._ellipsoidPrimitive = this._ellipsoidPrimitive && this._ellipsoidPrimitive.destroy();\n        return destroyObject(this);\n    };\n\n    return Moon;\n});\n","define([\n        './Cartesian3',\n        './defined',\n        './Iau2000Orientation',\n        './JulianDate',\n        './Math',\n        './Matrix3',\n        './Quaternion'\n    ], function(\n        Cartesian3,\n        defined,\n        Iau2000Orientation,\n        JulianDate,\n        CesiumMath,\n        Matrix3,\n        Quaternion) {\n    'use strict';\n\n    /**\n     * The Axes representing the orientation of a Globe as represented by the data\n     * from the IAU/IAG Working Group reports on rotational elements.\n     * @alias IauOrientationAxes\n     * @constructor\n     *\n     * @param {IauOrientationAxes~ComputeFunction} [computeFunction] The function that computes the {@link IauOrientationParameters} given a {@link JulianDate}.\n     *\n     * @see Iau2000Orientation\n     *\n     * @private\n     */\n    function IauOrientationAxes(computeFunction) {\n        if (!defined(computeFunction) || typeof computeFunction !== 'function') {\n            computeFunction = Iau2000Orientation.ComputeMoon;\n        }\n\n        this._computeFunction = computeFunction;\n    }\n\n    var xAxisScratch = new Cartesian3();\n    var yAxisScratch = new Cartesian3();\n    var zAxisScratch = new Cartesian3();\n\n    function computeRotationMatrix(alpha, delta, result) {\n        var xAxis = xAxisScratch;\n        xAxis.x = Math.cos(alpha + CesiumMath.PI_OVER_TWO);\n        xAxis.y = Math.sin(alpha + CesiumMath.PI_OVER_TWO);\n        xAxis.z = 0.0;\n\n        var cosDec = Math.cos(delta);\n\n        var zAxis = zAxisScratch;\n        zAxis.x = cosDec * Math.cos(alpha);\n        zAxis.y = cosDec * Math.sin(alpha);\n        zAxis.z = Math.sin(delta);\n\n        var yAxis = Cartesian3.cross(zAxis, xAxis, yAxisScratch);\n\n        if (!defined(result)) {\n            result = new Matrix3();\n        }\n\n        result[0] = xAxis.x;\n        result[1] = yAxis.x;\n        result[2] = zAxis.x;\n        result[3] = xAxis.y;\n        result[4] = yAxis.y;\n        result[5] = zAxis.y;\n        result[6] = xAxis.z;\n        result[7] = yAxis.z;\n        result[8] = zAxis.z;\n\n        return result;\n    }\n\n    var rotMtxScratch = new Matrix3();\n    var quatScratch = new Quaternion();\n\n    /**\n     * Computes a rotation from ICRF to a Globe's Fixed axes.\n     *\n     * @param {JulianDate} date The date to evaluate the matrix.\n     * @param {Matrix3} result The object onto which to store the result.\n     * @returns {Matrix3} The modified result parameter or a new instance of the rotation from ICRF to Fixed.\n     */\n    IauOrientationAxes.prototype.evaluate = function(date, result) {\n        if (!defined(date)) {\n            date = JulianDate.now();\n        }\n\n        var alphaDeltaW = this._computeFunction(date);\n        var precMtx = computeRotationMatrix(alphaDeltaW.rightAscension, alphaDeltaW.declination, result);\n\n        var rot = CesiumMath.zeroToTwoPi(alphaDeltaW.rotation);\n        var quat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, rot, quatScratch);\n        var rotMtx = Matrix3.fromQuaternion(Quaternion.conjugate(quat, quat), rotMtxScratch);\n\n        var cbi2cbf = Matrix3.multiply(rotMtx, precMtx, precMtx);\n        return cbi2cbf;\n    };\n\n    /**\n     * A function that computes the {@link IauOrientationParameters} for a {@link JulianDate}.\n     * @callback IauOrientationAxes~ComputeFunction\n     * @param {JulianDate} date The date to evaluate the parameters.\n     * @returns {IauOrientationParameters} The orientation parameters.\n     */\n\n    return IauOrientationAxes;\n});\n","define([\n        './defined',\n        './IauOrientationParameters',\n        './JulianDate',\n        './Math',\n        './TimeConstants'\n    ], function(\n        defined,\n        IauOrientationParameters,\n        JulianDate,\n        CesiumMath,\n        TimeConstants) {\n    'use strict';\n\n    /**\n     * This is a collection of the orientation information available for central bodies.\n     * The data comes from the Report of the IAU/IAG Working Group on Cartographic\n     * Coordinates and Rotational Elements: 2000.\n     *\n     * @exports Iau2000Orientation\n     *\n     * @private\n     */\n    var Iau2000Orientation = {};\n\n    var TdtMinusTai = 32.184;\n    var J2000d = 2451545.0;\n\n    var c1 = -0.0529921;\n    var c2 = -0.1059842;\n    var c3 = 13.0120009;\n    var c4 = 13.3407154;\n    var c5 = 0.9856003;\n    var c6 = 26.4057084;\n    var c7 = 13.0649930;\n    var c8 = 0.3287146;\n    var c9 = 1.7484877;\n    var c10 = -0.1589763;\n    var c11 = 0.0036096;\n    var c12 = 0.1643573;\n    var c13 = 12.9590088;\n    var dateTT = new JulianDate();\n\n    /**\n     * Compute the orientation parameters for the Moon.\n     *\n     * @param {JulianDate} [date=JulianDate.now()] The date to evaluate the parameters.\n     * @param {IauOrientationParameters} [result] The object onto which to store the result.\n     * @returns {IauOrientationParameters} The modified result parameter or a new instance representing the orientation of the Earth's Moon.\n     */\n    Iau2000Orientation.ComputeMoon = function(date, result) {\n        if (!defined(date)) {\n            date = JulianDate.now();\n        }\n\n        dateTT = JulianDate.addSeconds(date, TdtMinusTai, dateTT);\n        var d = JulianDate.totalDays(dateTT) - J2000d;\n        var T = d / TimeConstants.DAYS_PER_JULIAN_CENTURY;\n\n        var E1 = (125.045 + c1 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E2 = (250.089 + c2 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E3 = (260.008 + c3 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E4 = (176.625 + c4 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E5 = (357.529 + c5 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E6 = (311.589 + c6 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E7 = (134.963 + c7 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E8 = (276.617 + c8 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E9 = (34.226 + c9 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E10 = (15.134 + c10 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E11 = (119.743 + c11 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E12 = (239.961 + c12 * d) * CesiumMath.RADIANS_PER_DEGREE;\n        var E13 = (25.053 + c13 * d) * CesiumMath.RADIANS_PER_DEGREE;\n\n        var sinE1 = Math.sin(E1);\n        var sinE2 = Math.sin(E2);\n        var sinE3 = Math.sin(E3);\n        var sinE4 = Math.sin(E4);\n        var sinE5 = Math.sin(E5);\n        var sinE6 = Math.sin(E6);\n        var sinE7 = Math.sin(E7);\n        var sinE8 = Math.sin(E8);\n        var sinE9 = Math.sin(E9);\n        var sinE10 = Math.sin(E10);\n        var sinE11 = Math.sin(E11);\n        var sinE12 = Math.sin(E12);\n        var sinE13 = Math.sin(E13);\n\n        var cosE1 = Math.cos(E1);\n        var cosE2 = Math.cos(E2);\n        var cosE3 = Math.cos(E3);\n        var cosE4 = Math.cos(E4);\n        var cosE5 = Math.cos(E5);\n        var cosE6 = Math.cos(E6);\n        var cosE7 = Math.cos(E7);\n        var cosE8 = Math.cos(E8);\n        var cosE9 = Math.cos(E9);\n        var cosE10 = Math.cos(E10);\n        var cosE11 = Math.cos(E11);\n        var cosE12 = Math.cos(E12);\n        var cosE13 = Math.cos(E13);\n\n        var rightAscension = (269.9949 + 0.0031 * T - 3.8787 * sinE1 - 0.1204 * sinE2 +\n            0.0700 * sinE3 - 0.0172 * sinE4 + 0.0072 * sinE6 -\n            0.0052 * sinE10 + 0.0043 * sinE13) *\n            CesiumMath.RADIANS_PER_DEGREE;\n        var declination = (66.5392 + 0.013 * T + 1.5419 * cosE1 + 0.0239 * cosE2 -\n            0.0278 * cosE3 + 0.0068 * cosE4 - 0.0029 * cosE6 +\n            0.0009 * cosE7 + 0.0008 * cosE10 - 0.0009 * cosE13) *\n            CesiumMath.RADIANS_PER_DEGREE;\n        var rotation = (38.3213 + 13.17635815 * d - 1.4e-12 * d * d + 3.5610 * sinE1 +\n            0.1208 * sinE2 - 0.0642 * sinE3 + 0.0158 * sinE4 +\n            0.0252 * sinE5 - 0.0066 * sinE6 - 0.0047 * sinE7 -\n            0.0046 * sinE8 + 0.0028 * sinE9 + 0.0052 * sinE10 +\n            0.004 * sinE11 + 0.0019 * sinE12 - 0.0044 * sinE13) *\n            CesiumMath.RADIANS_PER_DEGREE;\n\n        var rotationRate = ((13.17635815 - 1.4e-12 * (2.0 * d)) +\n            3.5610 * cosE1 * c1 +\n            0.1208 * cosE2*c2 - 0.0642 * cosE3*c3 + 0.0158 * cosE4*c4 +\n            0.0252 * cosE5*c5 - 0.0066 * cosE6*c6 - 0.0047 * cosE7*c7 -\n            0.0046 * cosE8*c8 + 0.0028 * cosE9*c9 + 0.0052 * cosE10*c10 +\n            0.004 * cosE11*c11 + 0.0019 * cosE12*c12 - 0.0044 * cosE13*c13) /\n            86400.0 * CesiumMath.RADIANS_PER_DEGREE;\n\n        if (!defined(result)) {\n            result = new IauOrientationParameters();\n        }\n\n        result.rightAscension = rightAscension;\n        result.declination = declination;\n        result.rotation = rotation;\n        result.rotationRate = rotationRate;\n\n        return result;\n    };\n\n    return Iau2000Orientation;\n});\n","define(function() {\n    'use strict';\n\n    /**\n     * A structure containing the orientation data computed at a particular time. The data\n     * represents the direction of the pole of rotation and the rotation about that pole.\n     * <p>\n     * These parameters correspond to the parameters in the Report from the IAU/IAG Working Group\n     * except that they are expressed in radians.\n     * </p>\n     *\n     * @exports IauOrientationParameters\n     *\n     * @private\n     */\n    function IauOrientationParameters(rightAscension, declination, rotation, rotationRate) {\n        /**\n         * The right ascension of the north pole of the body with respect to\n         * the International Celestial Reference Frame, in radians.\n         * @type {Number}\n         *\n         * @private\n         */\n        this.rightAscension = rightAscension;\n\n        /**\n         * The declination of the north pole of the body with respect to\n         * the International Celestial Reference Frame, in radians.\n         * @type {Number}\n         *\n         * @private\n         */\n        this.declination = declination;\n\n        /**\n         * The rotation about the north pole used to align a set of axes with\n         * the meridian defined by the IAU report, in radians.\n         * @type {Number}\n         *\n         * @private\n         */\n        this.rotation = rotation;\n\n        /**\n         * The instantaneous rotation rate about the north pole, in radians per second.\n         * @type {Number}\n         *\n         * @private\n         */\n        this.rotationRate = rotationRate;\n    }\n\n    return IauOrientationParameters;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/BoxGeometry',\n        '../Core/Cartesian3',\n        '../Core/combine',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Matrix4',\n        '../Core/VertexFormat',\n        '../Renderer/BufferUsage',\n        '../Renderer/DrawCommand',\n        '../Renderer/Pass',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderProgram',\n        '../Renderer/ShaderSource',\n        '../Renderer/VertexArray',\n        '../Shaders/EllipsoidFS',\n        '../Shaders/EllipsoidVS',\n        './BlendingState',\n        './CullFace',\n        './Material',\n        './SceneMode'\n    ], function(\n        BoundingSphere,\n        BoxGeometry,\n        Cartesian3,\n        combine,\n        defaultValue,\n        defined,\n        destroyObject,\n        DeveloperError,\n        Matrix4,\n        VertexFormat,\n        BufferUsage,\n        DrawCommand,\n        Pass,\n        RenderState,\n        ShaderProgram,\n        ShaderSource,\n        VertexArray,\n        EllipsoidFS,\n        EllipsoidVS,\n        BlendingState,\n        CullFace,\n        Material,\n        SceneMode) {\n    'use strict';\n\n    var attributeLocations = {\n        position : 0\n    };\n\n    /**\n     * A renderable ellipsoid.  It can also draw spheres when the three {@link EllipsoidPrimitive#radii} components are equal.\n     * <p>\n     * This is only supported in 3D.  The ellipsoid is not shown in 2D or Columbus view.\n     * </p>\n     *\n     * @alias EllipsoidPrimitive\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Cartesian3} [options.center=Cartesian3.ZERO] The center of the ellipsoid in the ellipsoid's model coordinates.\n     * @param {Cartesian3} [options.radii] The radius of the ellipsoid along the <code>x</code>, <code>y</code>, and <code>z</code> axes in the ellipsoid's model coordinates.\n     * @param {Matrix4} [options.modelMatrix=Matrix4.IDENTITY] The 4x4 transformation matrix that transforms the ellipsoid from model to world coordinates.\n     * @param {Boolean} [options.show=true] Determines if this primitive will be shown.\n     * @param {Material} [options.material=Material.ColorType] The surface appearance of the primitive.\n     * @param {Object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick}\n     * @param {Boolean} [options.debugShowBoundingVolume=false] For debugging only. Determines if this primitive's commands' bounding spheres are shown.\n     *\n     * @private\n     */\n    function EllipsoidPrimitive(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        /**\n         * The center of the ellipsoid in the ellipsoid's model coordinates.\n         * <p>\n         * The default is {@link Cartesian3.ZERO}.\n         * </p>\n         *\n         * @type {Cartesian3}\n         * @default {@link Cartesian3.ZERO}\n         *\n         * @see EllipsoidPrimitive#modelMatrix\n         */\n        this.center = Cartesian3.clone(defaultValue(options.center, Cartesian3.ZERO));\n        this._center = new Cartesian3();\n\n        /**\n         * The radius of the ellipsoid along the <code>x</code>, <code>y</code>, and <code>z</code> axes in the ellipsoid's model coordinates.\n         * When these are the same, the ellipsoid is a sphere.\n         * <p>\n         * The default is <code>undefined</code>.  The ellipsoid is not drawn until a radii is provided.\n         * </p>\n         *\n         * @type {Cartesian3}\n         * @default undefined\n         *\n         *\n         * @example\n         * // A sphere with a radius of 2.0\n         * e.radii = new Cesium.Cartesian3(2.0, 2.0, 2.0);\n         *\n         * @see EllipsoidPrimitive#modelMatrix\n         */\n        this.radii = Cartesian3.clone(options.radii);\n        this._radii = new Cartesian3();\n\n        this._oneOverEllipsoidRadiiSquared = new Cartesian3();\n        this._boundingSphere = new BoundingSphere();\n\n        /**\n         * The 4x4 transformation matrix that transforms the ellipsoid from model to world coordinates.\n         * When this is the identity matrix, the ellipsoid is drawn in world coordinates, i.e., Earth's WGS84 coordinates.\n         * Local reference frames can be used by providing a different transformation matrix, like that returned\n         * by {@link Transforms.eastNorthUpToFixedFrame}.\n         *\n         * @type {Matrix4}\n         * @default {@link Matrix4.IDENTITY}\n         *\n         * @example\n         * var origin = Cesium.Cartesian3.fromDegrees(-95.0, 40.0, 200000.0);\n         * e.modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(origin);\n         */\n        this.modelMatrix = Matrix4.clone(defaultValue(options.modelMatrix, Matrix4.IDENTITY));\n        this._modelMatrix = new Matrix4();\n        this._computedModelMatrix = new Matrix4();\n\n        /**\n         * Determines if the ellipsoid primitive will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * The surface appearance of the ellipsoid.  This can be one of several built-in {@link Material} objects or a custom material, scripted with\n         * {@link https://github.com/AnalyticalGraphicsInc/cesium/wiki/Fabric|Fabric}.\n         * <p>\n         * The default material is <code>Material.ColorType</code>.\n         * </p>\n         *\n         * @type {Material}\n         * @default Material.fromType(Material.ColorType)\n         *\n         *\n         * @example\n         * // 1. Change the color of the default material to yellow\n         * e.material.uniforms.color = new Cesium.Color(1.0, 1.0, 0.0, 1.0);\n         *\n         * // 2. Change material to horizontal stripes\n         * e.material = Cesium.Material.fromType(Cesium.Material.StripeType);\n         *\n         * @see {@link https://github.com/AnalyticalGraphicsInc/cesium/wiki/Fabric|Fabric}\n         */\n        this.material = defaultValue(options.material, Material.fromType(Material.ColorType));\n        this._material = undefined;\n        this._translucent = undefined;\n\n        /**\n         * User-defined object returned when the ellipsoid is picked.\n         *\n         * @type Object\n         *\n         * @default undefined\n         *\n         * @see Scene#pick\n         */\n        this.id = options.id;\n        this._id = undefined;\n\n        /**\n         * This property is for debugging only; it is not for production use nor is it optimized.\n         * <p>\n         * Draws the bounding sphere for each draw command in the primitive.\n         * </p>\n         *\n         * @type {Boolean}\n         *\n         * @default false\n         */\n        this.debugShowBoundingVolume = defaultValue(options.debugShowBoundingVolume, false);\n\n        /**\n         * @private\n         */\n        this.onlySunLighting = defaultValue(options.onlySunLighting, false);\n        this._onlySunLighting = false;\n\n        /**\n         * @private\n         */\n        this._depthTestEnabled = defaultValue(options.depthTestEnabled, true);\n\n        this._useLogDepth = false;\n\n        this._sp = undefined;\n        this._rs = undefined;\n        this._va = undefined;\n\n        this._pickSP = undefined;\n        this._pickId = undefined;\n\n        this._colorCommand = new DrawCommand({\n            owner : defaultValue(options._owner, this)\n        });\n        this._pickCommand = new DrawCommand({\n            owner : defaultValue(options._owner, this),\n            pickOnly : true\n        });\n\n        var that = this;\n        this._uniforms = {\n            u_radii : function() {\n                return that.radii;\n            },\n            u_oneOverEllipsoidRadiiSquared : function() {\n                return that._oneOverEllipsoidRadiiSquared;\n            }\n        };\n\n        this._pickUniforms = {\n            czm_pickColor : function() {\n                return that._pickId.color;\n            }\n        };\n    }\n\n    function getVertexArray(context) {\n        var vertexArray = context.cache.ellipsoidPrimitive_vertexArray;\n\n        if (defined(vertexArray)) {\n            return vertexArray;\n        }\n\n        var geometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n            dimensions : new Cartesian3(2.0, 2.0, 2.0),\n            vertexFormat : VertexFormat.POSITION_ONLY\n        }));\n\n        vertexArray = VertexArray.fromGeometry({\n            context : context,\n            geometry : geometry,\n            attributeLocations : attributeLocations,\n            bufferUsage : BufferUsage.STATIC_DRAW,\n            interleave : true\n        });\n\n        context.cache.ellipsoidPrimitive_vertexArray = vertexArray;\n        return vertexArray;\n    }\n\n    var logDepthExtension =\n        '#ifdef GL_EXT_frag_depth \\n' +\n        '#extension GL_EXT_frag_depth : enable \\n' +\n        '#endif \\n\\n';\n\n    /**\n     * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n     * get the draw commands needed to render this primitive.\n     * <p>\n     * Do not call this function directly.  This is documented just to\n     * list the exceptions that may be propagated when the scene is rendered:\n     * </p>\n     *\n     * @exception {DeveloperError} this.material must be defined.\n     */\n    EllipsoidPrimitive.prototype.update = function(frameState) {\n        if (!this.show ||\n            (frameState.mode !== SceneMode.SCENE3D) ||\n            (!defined(this.center)) ||\n            (!defined(this.radii))) {\n            return;\n        }\n\n        \n\n        var context = frameState.context;\n        var translucent = this.material.isTranslucent();\n        var translucencyChanged = this._translucent !== translucent;\n\n        if (!defined(this._rs) || translucencyChanged) {\n            this._translucent = translucent;\n\n            // If this render state is ever updated to use a non-default\n            // depth range, the hard-coded values in EllipsoidVS.glsl need\n            // to be updated as well.\n\n            this._rs = RenderState.fromCache({\n                // Cull front faces - not back faces - so the ellipsoid doesn't\n                // disappear if the viewer enters the bounding box.\n                cull : {\n                    enabled : true,\n                    face : CullFace.FRONT\n                },\n                depthTest : {\n                    enabled : this._depthTestEnabled\n                },\n                // Only write depth when EXT_frag_depth is supported since the depth for\n                // the bounding box is wrong; it is not the true depth of the ray casted ellipsoid.\n                depthMask : !translucent && context.fragmentDepth,\n                blending : translucent ? BlendingState.ALPHA_BLEND : undefined\n            });\n        }\n\n        if (!defined(this._va)) {\n            this._va = getVertexArray(context);\n        }\n\n        var boundingSphereDirty = false;\n\n        var radii = this.radii;\n        if (!Cartesian3.equals(this._radii, radii)) {\n            Cartesian3.clone(radii, this._radii);\n\n            var r = this._oneOverEllipsoidRadiiSquared;\n            r.x = 1.0 / (radii.x * radii.x);\n            r.y = 1.0 / (radii.y * radii.y);\n            r.z = 1.0 / (radii.z * radii.z);\n\n            boundingSphereDirty = true;\n        }\n\n        if (!Matrix4.equals(this.modelMatrix, this._modelMatrix) || !Cartesian3.equals(this.center, this._center)) {\n            Matrix4.clone(this.modelMatrix, this._modelMatrix);\n            Cartesian3.clone(this.center, this._center);\n\n            // Translate model coordinates used for rendering such that the origin is the center of the ellipsoid.\n            Matrix4.multiplyByTranslation(this.modelMatrix, this.center, this._computedModelMatrix);\n            boundingSphereDirty = true;\n        }\n\n        if (boundingSphereDirty) {\n            Cartesian3.clone(Cartesian3.ZERO, this._boundingSphere.center);\n            this._boundingSphere.radius = Cartesian3.maximumComponent(radii);\n            BoundingSphere.transform(this._boundingSphere, this._computedModelMatrix, this._boundingSphere);\n        }\n\n        var materialChanged = this._material !== this.material;\n        this._material = this.material;\n        this._material.update(context);\n\n        var lightingChanged = this.onlySunLighting !== this._onlySunLighting;\n        this._onlySunLighting = this.onlySunLighting;\n\n        var useLogDepth = frameState.useLogDepth;\n        var useLogDepthChanged = this._useLogDepth !== useLogDepth;\n        this._useLogDepth = useLogDepth;\n\n        var colorCommand = this._colorCommand;\n        var vs;\n        var fs;\n\n        // Recompile shader when material, lighting, or translucency changes\n        if (materialChanged || lightingChanged || translucencyChanged || useLogDepthChanged) {\n            vs = new ShaderSource({\n                sources : [EllipsoidVS]\n            });\n            fs = new ShaderSource({\n                sources : [this.material.shaderSource, EllipsoidFS]\n            });\n            if (this.onlySunLighting) {\n                fs.defines.push('ONLY_SUN_LIGHTING');\n            }\n            if (!translucent && context.fragmentDepth) {\n                fs.defines.push('WRITE_DEPTH');\n            }\n            if (this._useLogDepth) {\n                vs.defines.push('LOG_DEPTH', 'DISABLE_GL_POSITION_LOG_DEPTH');\n                fs.defines.push('LOG_DEPTH');\n                fs.sources.push(logDepthExtension);\n            }\n\n            this._sp = ShaderProgram.replaceCache({\n                context : context,\n                shaderProgram : this._sp,\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n\n            colorCommand.vertexArray = this._va;\n            colorCommand.renderState = this._rs;\n            colorCommand.shaderProgram = this._sp;\n            colorCommand.uniformMap = combine(this._uniforms, this.material._uniforms);\n            colorCommand.executeInClosestFrustum = translucent;\n        }\n\n        var commandList = frameState.commandList;\n        var passes = frameState.passes;\n\n        if (passes.render) {\n            colorCommand.boundingVolume = this._boundingSphere;\n            colorCommand.debugShowBoundingVolume = this.debugShowBoundingVolume;\n            colorCommand.modelMatrix = this._computedModelMatrix;\n            colorCommand.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n\n            commandList.push(colorCommand);\n        }\n\n        if (passes.pick) {\n            var pickCommand = this._pickCommand;\n\n            if (!defined(this._pickId) || (this._id !== this.id)) {\n                this._id = this.id;\n                this._pickId = this._pickId && this._pickId.destroy();\n                this._pickId = context.createPickId({\n                    primitive : this,\n                    id : this.id\n                });\n            }\n\n            // Recompile shader when material changes\n            if (materialChanged || lightingChanged || !defined(this._pickSP) || useLogDepthChanged) {\n                vs = new ShaderSource({\n                    sources : [EllipsoidVS]\n                });\n                fs = new ShaderSource({\n                    sources : [this.material.shaderSource, EllipsoidFS],\n                    pickColorQualifier : 'uniform'\n                });\n                if (this.onlySunLighting) {\n                    fs.defines.push('ONLY_SUN_LIGHTING');\n                }\n                if (!translucent && context.fragmentDepth) {\n                    fs.defines.push('WRITE_DEPTH');\n                }\n                if (this._useLogDepth) {\n                    vs.defines.push('LOG_DEPTH');\n                    fs.defines.push('LOG_DEPTH');\n                    fs.sources.push(logDepthExtension);\n                }\n\n                this._pickSP = ShaderProgram.replaceCache({\n                    context : context,\n                    shaderProgram : this._pickSP,\n                    vertexShaderSource : vs,\n                    fragmentShaderSource : fs,\n                    attributeLocations : attributeLocations\n                });\n\n                pickCommand.vertexArray = this._va;\n                pickCommand.renderState = this._rs;\n                pickCommand.shaderProgram = this._pickSP;\n                pickCommand.uniformMap = combine(combine(this._uniforms, this._pickUniforms), this.material._uniforms);\n                pickCommand.executeInClosestFrustum = translucent;\n            }\n\n            pickCommand.boundingVolume = this._boundingSphere;\n            pickCommand.modelMatrix = this._computedModelMatrix;\n            pickCommand.pass = translucent ? Pass.TRANSLUCENT : Pass.OPAQUE;\n\n            commandList.push(pickCommand);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see EllipsoidPrimitive#destroy\n     */\n    EllipsoidPrimitive.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * e = e && e.destroy();\n     *\n     * @see EllipsoidPrimitive#isDestroyed\n     */\n    EllipsoidPrimitive.prototype.destroy = function() {\n        this._sp = this._sp && this._sp.destroy();\n        this._pickSP = this._pickSP && this._pickSP.destroy();\n        this._pickId = this._pickId && this._pickId.destroy();\n        return destroyObject(this);\n    };\n\n    return EllipsoidPrimitive;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\nuniform vec3 u_oneOverEllipsoidRadiiSquared;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvec4 computeEllipsoidColor(czm_ray ray, float intersection, float side)\\n\\\n{\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, intersection);\\n\\\n    vec3 positionMC = (czm_inverseModelView * vec4(positionEC, 1.0)).xyz;\\n\\\n    vec3 geodeticNormal = normalize(czm_geodeticSurfaceNormal(positionMC, vec3(0.0), u_oneOverEllipsoidRadiiSquared));\\n\\\n    vec3 sphericalNormal = normalize(positionMC / u_radii);\\n\\\n    vec3 normalMC = geodeticNormal * side;              // normalized surface normal (always facing the viewer) in model coordinates\\n\\\n    vec3 normalEC = normalize(czm_normal * normalMC);   // normalized surface normal in eye coordiantes\\n\\\n\\n\\\n    vec2 st = czm_ellipsoidWgs84TextureCoordinates(sphericalNormal);\\n\\\n    vec3 positionToEyeEC = -positionEC;\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.s = st.s;\\n\\\n    materialInput.st = st;\\n\\\n    materialInput.str = (positionMC + u_radii) / u_radii;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef ONLY_SUN_LIGHTING\\n\\\n    return czm_private_phong(normalize(positionToEyeEC), material);\\n\\\n#else\\n\\\n    return czm_phong(normalize(positionToEyeEC), material);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // PERFORMANCE_TODO: When dynamic branching is available, compute ratio of maximum and minimum radii\\n\\\n    // in the vertex shader. Only when it is larger than some constant, march along the ray.\\n\\\n    // Otherwise perform one intersection test which will be the common case.\\n\\\n\\n\\\n    // Test if the ray intersects a sphere with the ellipsoid's maximum radius.\\n\\\n    // For very oblate ellipsoids, using the ellipsoid's radii for an intersection test\\n\\\n    // may cause false negatives. This will discard fragments before marching the ray forward.\\n\\\n    float maxRadius = max(u_radii.x, max(u_radii.y, u_radii.z)) * 1.5;\\n\\\n    vec3 direction = normalize(v_positionEC);\\n\\\n    vec3 ellipsoidCenter = czm_modelView[3].xyz;\\n\\\n\\n\\\n    float t1 = -1.0;\\n\\\n    float t2 = -1.0;\\n\\\n\\n\\\n    float b = -2.0 * dot(direction, ellipsoidCenter);\\n\\\n    float c = dot(ellipsoidCenter, ellipsoidCenter) - maxRadius * maxRadius;\\n\\\n\\n\\\n    float discriminant = b * b - 4.0 * c;\\n\\\n    if (discriminant >= 0.0) {\\n\\\n        t1 = (-b - sqrt(discriminant)) * 0.5;\\n\\\n        t2 = (-b + sqrt(discriminant)) * 0.5;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    float t = min(t1, t2);\\n\\\n    if (t < 0.0) {\\n\\\n        t = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    // March ray forward to intersection with larger sphere and find\\n\\\n    czm_ray ray = czm_ray(t * direction, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_inverseRadii = vec3(1.0 / u_radii.x, 1.0 / u_radii.y, 1.0 / u_radii.z);\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoidCenter, ellipsoid_inverseRadii);\\n\\\n\\n\\\n    if (czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If the viewer is outside, compute outsideFaceColor, with normals facing outward.\\n\\\n    vec4 outsideFaceColor = (intersection.start != 0.0) ? computeEllipsoidColor(ray, intersection.start, 1.0) : vec4(0.0);\\n\\\n\\n\\\n    // If the viewer either is inside or can see inside, compute insideFaceColor, with normals facing inward.\\n\\\n    vec4 insideFaceColor = (outsideFaceColor.a < 1.0) ? computeEllipsoidColor(ray, intersection.stop, -1.0) : vec4(0.0);\\n\\\n\\n\\\n    gl_FragColor = mix(insideFaceColor, outsideFaceColor, outsideFaceColor.a);\\n\\\n    gl_FragColor.a = 1.0 - (1.0 - insideFaceColor.a) * (1.0 - outsideFaceColor.a);\\n\\\n\\n\\\n#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    t = (intersection.start != 0.0) ? intersection.start : intersection.stop;\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, t);\\n\\\n    vec4 positionCC = czm_projection * vec4(positionEC, 1.0);\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(1.0 + positionCC.w);\\n\\\n#else\\n\\\n    float z = positionCC.z / positionCC.w;\\n\\\n\\n\\\n    float n = czm_depthRange.near;\\n\\\n    float f = czm_depthRange.far;\\n\\\n\\n\\\n    gl_FragDepthEXT = (z * (f - n) + f + n) * 0.5;\\n\\\n#endif\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec3 position;\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // In the vertex data, the cube goes from (-1.0, -1.0, -1.0) to (1.0, 1.0, 1.0) in model coordinates.\\n\\\n    // Scale to consider the radii.  We could also do this once on the CPU when using the BoxGeometry,\\n\\\n    // but doing it here allows us to change the radii without rewriting the vertex data, and\\n\\\n    // allows all ellipsoids to reuse the same vertex data.\\n\\\n    vec4 p = vec4(u_radii * position, 1.0);\\n\\\n\\n\\\n    v_positionEC = (czm_modelView * p).xyz;     // position in eye coordinates\\n\\\n    gl_Position = czm_modelViewProjection * p;  // position in clip coordinates\\n\\\n\\n\\\n    // With multi-frustum, when the ellipsoid primitive is positioned on the intersection of two frustums\\n\\\n    // and close to terrain, the terrain (writes depth) in the closest frustum can overwrite part of the\\n\\\n    // ellipsoid (does not write depth) that was rendered in the farther frustum.\\n\\\n    //\\n\\\n    // Here, we clamp the depth in the vertex shader to avoid being overwritten; however, this creates\\n\\\n    // artifacts since some fragments can be alpha blended twice.  This is solved by only rendering\\n\\\n    // the ellipsoid in the closest frustum to the viewer.\\n\\\n    gl_Position.z = clamp(gl_Position.z, czm_depthRange.near, czm_depthRange.far);\\n\\\n\\n\\\n    czm_vertexLogDepth();\\n\\\n}\\n\\\n\";\n});","module.exports = __webpack_public_path__ + \"b592e228bf0641d6b4f0b79e664177ab.jpg\";","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/BoundingRectangle',\n        '../Core/BoundingSphere',\n        '../Core/BoxGeometry',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartographic',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/createGuid',\n        '../Core/CullingVolume',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/EllipsoidGeometry',\n        '../Core/Event',\n        '../Core/GeographicProjection',\n        '../Core/GeometryInstance',\n        '../Core/GeometryPipeline',\n        '../Core/Intersect',\n        '../Core/JulianDate',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/mergeSort',\n        '../Core/Occluder',\n        '../Core/OrthographicFrustum',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Core/PerspectiveFrustum',\n        '../Core/PerspectiveOffCenterFrustum',\n        '../Core/PixelFormat',\n        '../Core/Ray',\n        '../Core/RequestScheduler',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Core/TaskProcessor',\n        '../Core/Transforms',\n        '../Renderer/ClearCommand',\n        '../Renderer/ComputeEngine',\n        '../Renderer/Context',\n        '../Renderer/ContextLimits',\n        '../Renderer/DrawCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/Pass',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderProgram',\n        '../Renderer/ShaderSource',\n        '../Renderer/Texture',\n        '../ThirdParty/when',\n        './BrdfLutGenerator',\n        './Camera',\n        './Cesium3DTileFeature',\n        './Cesium3DTilePass',\n        './Cesium3DTilePassState',\n        './Cesium3DTileset',\n        './CreditDisplay',\n        './DebugCameraPrimitive',\n        './DepthPlane',\n        './DerivedCommand',\n        './DeviceOrientationCameraController',\n        './Fog',\n        './FrameState',\n        './GlobeDepth',\n        './InvertClassification',\n        './JobScheduler',\n        './MapMode2D',\n        './OctahedralProjectedCubeMap',\n        './PerformanceDisplay',\n        './PerInstanceColorAppearance',\n        './PickDepth',\n        './PostProcessStageCollection',\n        './Primitive',\n        './PrimitiveCollection',\n        './SceneMode',\n        './SceneTransforms',\n        './SceneTransitioner',\n        './ScreenSpaceCameraController',\n        './ShadowMap',\n        './StencilConstants',\n        './SunPostProcess',\n        './TweenCollection',\n        './View'\n    ], function(\n        ApproximateTerrainHeights,\n        BoundingRectangle,\n        BoundingSphere,\n        BoxGeometry,\n        Cartesian2,\n        Cartesian3,\n        Cartographic,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        createGuid,\n        CullingVolume,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        EllipsoidGeometry,\n        Event,\n        GeographicProjection,\n        GeometryInstance,\n        GeometryPipeline,\n        Intersect,\n        JulianDate,\n        CesiumMath,\n        Matrix4,\n        mergeSort,\n        Occluder,\n        OrthographicFrustum,\n        OrthographicOffCenterFrustum,\n        PerspectiveFrustum,\n        PerspectiveOffCenterFrustum,\n        PixelFormat,\n        Ray,\n        RequestScheduler,\n        ShowGeometryInstanceAttribute,\n        TaskProcessor,\n        Transforms,\n        ClearCommand,\n        ComputeEngine,\n        Context,\n        ContextLimits,\n        DrawCommand,\n        Framebuffer,\n        Pass,\n        PixelDatatype,\n        RenderState,\n        ShaderProgram,\n        ShaderSource,\n        Texture,\n        when,\n        BrdfLutGenerator,\n        Camera,\n        Cesium3DTileFeature,\n        Cesium3DTilePass,\n        Cesium3DTilePassState,\n        Cesium3DTileset,\n        CreditDisplay,\n        DebugCameraPrimitive,\n        DepthPlane,\n        DerivedCommand,\n        DeviceOrientationCameraController,\n        Fog,\n        FrameState,\n        GlobeDepth,\n        InvertClassification,\n        JobScheduler,\n        MapMode2D,\n        OctahedralProjectedCubeMap,\n        PerformanceDisplay,\n        PerInstanceColorAppearance,\n        PickDepth,\n        PostProcessStageCollection,\n        Primitive,\n        PrimitiveCollection,\n        SceneMode,\n        SceneTransforms,\n        SceneTransitioner,\n        ScreenSpaceCameraController,\n        ShadowMap,\n        StencilConstants,\n        SunPostProcess,\n        TweenCollection,\n        View) {\n    'use strict';\n\n    var requestRenderAfterFrame = function (scene) {\n        return function () {\n            scene.frameState.afterRender.push(function() {\n                scene.requestRender();\n            });\n        };\n    };\n\n    function MostDetailedRayPick(ray, width, tilesets) {\n        this.ray = ray;\n        this.width = width;\n        this.tilesets = tilesets;\n        this.ready = false;\n        this.deferred = when.defer();\n        this.promise = this.deferred.promise;\n    }\n\n    /**\n     * The container for all 3D graphical objects and state in a Cesium virtual scene.  Generally,\n     * a scene is not created directly; instead, it is implicitly created by {@link CesiumWidget}.\n     * <p>\n     * <em><code>contextOptions</code> parameter details:</em>\n     * </p>\n     * <p>\n     * The default values are:\n     * <code>\n     * {\n     *   webgl : {\n     *     alpha : false,\n     *     depth : true,\n     *     stencil : false,\n     *     antialias : true,\n     *     premultipliedAlpha : true,\n     *     preserveDrawingBuffer : false,\n     *     failIfMajorPerformanceCaveat : false\n     *   },\n     *   allowTextureFilterAnisotropic : true\n     * }\n     * </code>\n     * </p>\n     * <p>\n     * The <code>webgl</code> property corresponds to the {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n     * object used to create the WebGL context.\n     * </p>\n     * <p>\n     * <code>webgl.alpha</code> defaults to false, which can improve performance compared to the standard WebGL default\n     * of true.  If an application needs to composite Cesium above other HTML elements using alpha-blending, set\n     * <code>webgl.alpha</code> to true.\n     * </p>\n     * <p>\n     * The other <code>webgl</code> properties match the WebGL defaults for {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}.\n     * </p>\n     * <p>\n     * <code>allowTextureFilterAnisotropic</code> defaults to true, which enables anisotropic texture filtering when the\n     * WebGL extension is supported.  Setting this to false will improve performance, but hurt visual quality, especially for horizon views.\n     * </p>\n     *\n     * @alias Scene\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Canvas} options.canvas The HTML canvas element to create the scene for.\n     * @param {Object} [options.contextOptions] Context and WebGL creation properties.  See details above.\n     * @param {Element} [options.creditContainer] The HTML element in which the credits will be displayed.\n     * @param {Element} [options.creditViewport] The HTML element in which to display the credit popup.  If not specified, the viewport will be a added as a sibling of the canvas.\n     * @param {MapProjection} [options.mapProjection=new GeographicProjection()] The map projection to use in 2D and Columbus View modes.\n     * @param {Boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n     * @param {Boolean} [options.scene3DOnly=false] If true, optimizes memory use and performance for 3D mode but disables the ability to use 2D or Columbus View.\n     * @param {Number} [options.terrainExaggeration=1.0] A scalar used to exaggerate the terrain. Note that terrain exaggeration will not modify any other primitive as they are positioned relative to the ellipsoid.\n     * @param {Boolean} [options.shadows=false] Determines if shadows are cast by the sun.\n     * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n     * @param {Boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n     * @param {Number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n     *\n     * @see CesiumWidget\n     * @see {@link http://www.khronos.org/registry/webgl/specs/latest/#5.2|WebGLContextAttributes}\n     *\n     * @exception {DeveloperError} options and options.canvas are required.\n     *\n     * @example\n     * // Create scene without anisotropic texture filtering\n     * var scene = new Cesium.Scene({\n     *   canvas : canvas,\n     *   contextOptions : {\n     *     allowTextureFilterAnisotropic : false\n     *   }\n     * });\n     */\n    function Scene(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var canvas = options.canvas;\n        var contextOptions = options.contextOptions;\n        var creditContainer = options.creditContainer;\n        var creditViewport = options.creditViewport;\n\n        \n        var hasCreditContainer = defined(creditContainer);\n        var context = new Context(canvas, contextOptions);\n        if (!hasCreditContainer) {\n            creditContainer = document.createElement('div');\n            creditContainer.style.position = 'absolute';\n            creditContainer.style.bottom = '0';\n            creditContainer.style['text-shadow'] = '0 0 2px #000000';\n            creditContainer.style.color = '#ffffff';\n            creditContainer.style['font-size'] = '10px';\n            creditContainer.style['padding-right'] = '5px';\n            canvas.parentNode.appendChild(creditContainer);\n        }\n        if (!defined(creditViewport)) {\n            creditViewport = canvas.parentNode;\n        }\n\n        this._id = createGuid();\n        this._jobScheduler = new JobScheduler();\n        this._frameState = new FrameState(context, new CreditDisplay(creditContainer, ' • ', creditViewport), this._jobScheduler);\n        this._frameState.scene3DOnly = defaultValue(options.scene3DOnly, false);\n        this._removeCreditContainer = !hasCreditContainer;\n        this._creditContainer = creditContainer;\n\n        this._canvas = canvas;\n        this._context = context;\n        this._computeEngine = new ComputeEngine(context);\n        this._globe = undefined;\n        this._primitives = new PrimitiveCollection();\n        this._groundPrimitives = new PrimitiveCollection();\n\n        this._mostDetailedRayPicks = [];\n\n        this._logDepthBuffer = context.fragmentDepth;\n        this._logDepthBufferDirty = true;\n\n        this._tweens = new TweenCollection();\n\n        this._shaderFrameCount = 0;\n\n        this._sunPostProcess = undefined;\n\n        this._computeCommandList = [];\n        this._overlayCommandList = [];\n\n        this._useOIT = defaultValue(options.orderIndependentTranslucency, true);\n        this._executeOITFunction = undefined;\n\n        this._depthPlane = new DepthPlane();\n\n        this._clearColorCommand = new ClearCommand({\n            color : new Color(),\n            stencil : 0,\n            owner : this\n        });\n        this._depthClearCommand = new ClearCommand({\n            depth : 1.0,\n            owner : this\n        });\n        this._stencilClearCommand = new ClearCommand({\n            stencil : 0\n        });\n        this._classificationStencilClearCommand = new ClearCommand({\n            stencil : 0,\n            renderState : RenderState.fromCache({\n                stencilMask : StencilConstants.CLASSIFICATION_MASK\n            })\n        });\n\n        this._depthOnlyRenderStateCache = {};\n        this._pickRenderStateCache = {};\n\n        this._transitioner = new SceneTransitioner(this);\n\n        this._preUpdate = new Event();\n        this._postUpdate = new Event();\n\n        this._renderError = new Event();\n        this._preRender = new Event();\n        this._postRender = new Event();\n\n        this._pickPositionCache = {};\n        this._pickPositionCacheDirty = false;\n\n        this._minimumDisableDepthTestDistance = 0.0;\n\n        /**\n         * Exceptions occurring in <code>render</code> are always caught in order to raise the\n         * <code>renderError</code> event.  If this property is true, the error is rethrown\n         * after the event is raised.  If this property is false, the <code>render</code> function\n         * returns normally after raising the event.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.rethrowRenderErrors = false;\n\n        /**\n         * Determines whether or not to instantly complete the\n         * scene transition animation on user input.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.completeMorphOnUserInput = true;\n\n        /**\n         * The event fired at the beginning of a scene transition.\n         * @type {Event}\n         * @default Event()\n         */\n        this.morphStart = new Event();\n\n        /**\n         * The event fired at the completion of a scene transition.\n         * @type {Event}\n         * @default Event()\n         */\n        this.morphComplete = new Event();\n\n        /**\n         * The {@link SkyBox} used to draw the stars.\n         *\n         * @type {SkyBox}\n         * @default undefined\n         *\n         * @see Scene#backgroundColor\n         */\n        this.skyBox = undefined;\n\n        /**\n         * The sky atmosphere drawn around the globe.\n         *\n         * @type {SkyAtmosphere}\n         * @default undefined\n         */\n        this.skyAtmosphere = undefined;\n\n        /**\n         * The {@link Sun}.\n         *\n         * @type {Sun}\n         * @default undefined\n         */\n        this.sun = undefined;\n\n        /**\n         * Uses a bloom filter on the sun when enabled.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.sunBloom = true;\n        this._sunBloom = undefined;\n\n        /**\n         * The {@link Moon}\n         *\n         * @type Moon\n         * @default undefined\n         */\n        this.moon = undefined;\n\n        /**\n         * The background color, which is only visible if there is no sky box, i.e., {@link Scene#skyBox} is undefined.\n         *\n         * @type {Color}\n         * @default {@link Color.BLACK}\n         *\n         * @see Scene#skyBox\n         */\n        this.backgroundColor = Color.clone(Color.BLACK);\n\n        this._mode = SceneMode.SCENE3D;\n\n        this._mapProjection = defined(options.mapProjection) ? options.mapProjection : new GeographicProjection();\n\n        /**\n         * The current morph transition time between 2D/Columbus View and 3D,\n         * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n         *\n         * @type {Number}\n         * @default 1.0\n         */\n        this.morphTime = 1.0;\n\n        /**\n         * The far-to-near ratio of the multi-frustum when using a normal depth buffer.\n         * <p>\n         * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n         * when {@link Scene#logarithmicDepthBuffer} is <code>false</code>. When <code>logarithmicDepthBuffer</code> is\n         * <code>true</code>, use {@link Scene#logarithmicDepthFarToNearRatio}.\n         * </p>\n         *\n         * @type {Number}\n         * @default 1000.0\n         */\n        this.farToNearRatio = 1000.0;\n\n        /**\n         * The far-to-near ratio of the multi-frustum when using a logarithmic depth buffer.\n         * <p>\n         * This value is used to create the near and far values for each frustum of the multi-frustum. It is only used\n         * when {@link Scene#logarithmicDepthBuffer} is <code>true</code>. When <code>logarithmicDepthBuffer</code> is\n         * <code>false</code>, use {@link Scene#farToNearRatio}.\n         * </p>\n         *\n         * @type {Number}\n         * @default 1e9\n         */\n        this.logarithmicDepthFarToNearRatio = 1e9;\n\n        /**\n         * Determines the uniform depth size in meters of each frustum of the multifrustum in 2D. If a primitive or model close\n         * to the surface shows z-fighting, decreasing this will eliminate the artifact, but decrease performance. On the\n         * other hand, increasing this will increase performance but may cause z-fighting among primitives close to the surface.\n         *\n         * @type {Number}\n         * @default 1.75e6\n         */\n        this.nearToFarDistance2D = 1.75e6;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * A function that determines what commands are executed.  As shown in the examples below,\n         * the function receives the command's <code>owner</code> as an argument, and returns a boolean indicating if the\n         * command should be executed.\n         * </p>\n         * <p>\n         * The default is <code>undefined</code>, indicating that all commands are executed.\n         * </p>\n         *\n         * @type Function\n         *\n         * @default undefined\n         *\n         * @example\n         * // Do not execute any commands.\n         * scene.debugCommandFilter = function(command) {\n         *     return false;\n         * };\n         *\n         * // Execute only the billboard's commands.  That is, only draw the billboard.\n         * var billboards = new Cesium.BillboardCollection();\n         * scene.debugCommandFilter = function(command) {\n         *     return command.owner === billboards;\n         * };\n         */\n        this.debugCommandFilter = undefined;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * When <code>true</code>, commands are randomly shaded.  This is useful\n         * for performance analysis to see what parts of a scene or model are\n         * command-dense and could benefit from batching.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.debugShowCommands = false;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * When <code>true</code>, commands are shaded based on the frustums they\n         * overlap.  Commands in the closest frustum are tinted red, commands in\n         * the next closest are green, and commands in the farthest frustum are\n         * blue.  If a command overlaps more than one frustum, the color components\n         * are combined, e.g., a command overlapping the first two frustums is tinted\n         * yellow.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.debugShowFrustums = false;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * Displays frames per second and time between frames.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.debugShowFramesPerSecond = false;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * Displays depth information for the indicated frustum.\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.debugShowGlobeDepth = false;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * Indicates which frustum will have depth information displayed.\n         * </p>\n         *\n         * @type Number\n         *\n         * @default 1\n         */\n        this.debugShowDepthFrustum = 1;\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * When <code>true</code>, draws outlines to show the boundaries of the camera frustums\n         * </p>\n         *\n         * @type Boolean\n         *\n         * @default false\n         */\n        this.debugShowFrustumPlanes = false;\n        this._debugShowFrustumPlanes = false;\n        this._debugFrustumPlanes = undefined;\n\n        /**\n         * When <code>true</code>, enables picking using the depth buffer.\n         *\n         * @type Boolean\n         * @default true\n         */\n        this.useDepthPicking = true;\n\n        /**\n         * When <code>true</code>, enables picking translucent geometry using the depth buffer. Note that {@link Scene#useDepthPicking} must also be true for enabling this to work.\n         *\n         * <p>\n         * Render must be called between picks.\n         * <br>There is a decrease in performance when enabled. There are extra draw calls to write depth for\n         * translucent geometry.\n         * </p>\n         *\n         * @example\n         * // picking the position of a translucent primitive\n         * viewer.screenSpaceEventHandler.setInputAction(function onLeftClick(movement) {\n         *      var pickedFeature = viewer.scene.pick(movement.position);\n         *      if (!Cesium.defined(pickedFeature)) {\n         *          // nothing picked\n         *          return;\n         *      }\n         *      viewer.scene.render();\n         *      var worldPosition = viewer.scene.pickPosition(movement.position);\n         * }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.pickTranslucentDepth = false;\n\n        /**\n         * The time in milliseconds to wait before checking if the camera has not moved and fire the cameraMoveEnd event.\n         * @type {Number}\n         * @default 500.0\n         * @private\n         */\n        this.cameraEventWaitTime = 500.0;\n\n        /**\n         * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n         * performance improvements by rendering less geometry and dispatching less terrain requests.\n         * @type {Fog}\n         */\n        this.fog = new Fog();\n\n        this._sunCamera = new Camera(this);\n\n        /**\n         * The shadow map in the scene. When enabled, models, primitives, and the globe may cast and receive shadows.\n         * By default the light source of the shadow map is the sun.\n         * @type {ShadowMap}\n         */\n        this.shadowMap = new ShadowMap({\n            context : context,\n            lightCamera : this._sunCamera,\n            enabled : defaultValue(options.shadows, false)\n        });\n\n        /**\n         * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n         * unclassified 3D Tile geometry will render with the color multiplied by {@link Scene#invertClassificationColor}.\n         * @type {Boolean}\n         * @default false\n         */\n        this.invertClassification = false;\n\n        /**\n         * The highlight color of unclassified 3D Tile geometry when {@link Scene#invertClassification} is <code>true</code>.\n         * <p>When the color's alpha is less than 1.0, the unclassified portions of the 3D Tiles will not blend correctly with the classified positions of the 3D Tiles.</p>\n         * <p>Also, when the color's alpha is less than 1.0, the WEBGL_depth_texture and EXT_frag_depth WebGL extensions must be supported.</p>\n         * @type {Color}\n         * @default Color.WHITE\n         */\n        this.invertClassificationColor = Color.clone(Color.WHITE);\n\n        this._actualInvertClassificationColor = Color.clone(this._invertClassificationColor);\n        this._invertClassification = new InvertClassification();\n\n        /**\n         * The focal length for use when with cardboard or WebVR.\n         * @type {Number}\n         */\n        this.focalLength = undefined;\n\n        /**\n         * The eye separation distance in meters for use with cardboard or WebVR.\n         * @type {Number}\n         */\n        this.eyeSeparation = undefined;\n\n        /**\n         * Post processing effects applied to the final render.\n         * @type {PostProcessStageCollection}\n         */\n        this.postProcessStages = new PostProcessStageCollection();\n\n        this._brdfLutGenerator = new BrdfLutGenerator();\n\n        this._terrainExaggeration = defaultValue(options.terrainExaggeration, 1.0);\n\n        this._performanceDisplay = undefined;\n        this._debugVolume = undefined;\n\n        this._screenSpaceCameraController = new ScreenSpaceCameraController(this);\n        this._mapMode2D = defaultValue(options.mapMode2D, MapMode2D.INFINITE_SCROLL);\n\n        // Keeps track of the state of a frame. FrameState is the state across\n        // the primitives of the scene. This state is for internally keeping track\n        // of celestial and environment effects that need to be updated/rendered in\n        // a certain order as well as updating/tracking framebuffer usage.\n        this._environmentState = {\n            skyBoxCommand : undefined,\n            skyAtmosphereCommand : undefined,\n            sunDrawCommand : undefined,\n            sunComputeCommand : undefined,\n            moonCommand : undefined,\n\n            isSunVisible : false,\n            isMoonVisible : false,\n            isReadyForAtmosphere : false,\n            isSkyAtmosphereVisible : false,\n\n            clearGlobeDepth : false,\n            useDepthPlane : false,\n            renderTranslucentDepthForPick : false,\n\n            originalFramebuffer : undefined,\n            useGlobeDepthFramebuffer : false,\n            useOIT : false,\n            useInvertClassification : false,\n            usePostProcess : false,\n            usePostProcessSelected : false,\n            useWebVR : false\n        };\n\n        this._useWebVR = false;\n        this._cameraVR = undefined;\n        this._aspectRatioVR = undefined;\n\n        /**\n         * When <code>true</code>, rendering a frame will only occur when needed as determined by changes within the scene.\n         * Enabling improves performance of the application, but requires using {@link Scene#requestRender}\n         * to render a new frame explicitly in this mode. This will be necessary in many cases after making changes\n         * to the scene in other parts of the API.\n         *\n         * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n         * @see Scene#maximumRenderTimeChange\n         * @see Scene#requestRender\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.requestRenderMode = defaultValue(options.requestRenderMode, false);\n        this._renderRequested = true;\n\n        /**\n         * If {@link Scene#requestRenderMode} is <code>true</code>, this value defines the maximum change in\n         * simulation time allowed before a render is requested. Lower values increase the number of frames rendered\n         * and higher values decrease the number of frames rendered. If <code>undefined</code>, changes to\n         * the simulation time will never request a render.\n         * This value impacts the rate of rendering for changes in the scene like lighting, entity property updates,\n         * and animations.\n         *\n         * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n         * @see Scene#requestRenderMode\n         *\n         * @type {Number}\n         * @default 0.5\n         */\n        this.maximumRenderTimeChange = defaultValue(options.maximumRenderTimeChange, 0.0);\n        this._lastRenderTime = undefined;\n        this._frameRateMonitor = undefined;\n\n        this._removeRequestListenerCallback = RequestScheduler.requestCompletedEvent.addEventListener(requestRenderAfterFrame(this));\n        this._removeTaskProcessorListenerCallback = TaskProcessor.taskCompletedEvent.addEventListener(requestRenderAfterFrame(this));\n        this._removeGlobeCallbacks = [];\n\n        var viewport = new BoundingRectangle(0, 0, context.drawingBufferWidth, context.drawingBufferHeight);\n        var camera = new Camera(this);\n\n        if (this._logDepthBuffer) {\n            camera.frustum.near = 0.1;\n            camera.frustum.far = 10000000000.0;\n        }\n\n        var pickOffscreenDefaultWidth = 0.1;\n        var pickOffscreenViewport = new BoundingRectangle(0, 0, 1, 1);\n        var pickOffscreenCamera = new Camera(this);\n        pickOffscreenCamera.frustum = new OrthographicFrustum({\n            width: pickOffscreenDefaultWidth,\n            aspectRatio: 1.0,\n            near: 0.1\n        });\n\n        this._pickOffscreenView = new View(this, pickOffscreenCamera, pickOffscreenViewport);\n\n        /**\n         * The camera view for the scene camera flight destination. Used for preloading flight destination tiles.\n         * @type {Camera}\n         * @private\n         */\n        this.preloadFlightCamera = new Camera(this);\n\n        /**\n         * The culling volume for the scene camera flight destination. Used for preloading flight destination tiles.\n         * @type {CullingVolume}\n         * @private\n         */\n        this.preloadFlightCullingVolume = undefined;\n\n        /**\n         * @private\n         */\n        this.pickOffscreenDefaultWidth = pickOffscreenDefaultWidth;\n\n        this._defaultView = new View(this, camera, viewport);\n        this._view = this._defaultView;\n\n        this._hdr = undefined;\n        this._hdrDirty = undefined;\n        this.highDynamicRange = false;\n        this.gamma = 2.2;\n        this._sunColor = new Cartesian3(1.8, 1.85, 2.0);\n\n        /**\n         * The spherical harmonic coefficients for image-based lighting of PBR models.\n         * @type {Cartesian3[]}\n         */\n        this.sphericalHarmonicCoefficients = undefined;\n\n        /**\n         * The url to the KTX file containing the specular environment map and convoluted mipmaps for image-based lighting of PBR models.\n         * @type {String}\n         */\n        this.specularEnvironmentMaps = undefined;\n        this._specularEnvironmentMapAtlas = undefined;\n\n        // Give frameState, camera, and screen space camera controller initial state before rendering\n        updateFrameNumber(this, 0.0, JulianDate.now());\n        updateFrameState(this);\n        this.initializeFrame();\n    }\n\n    function updateGlobeListeners(scene, globe) {\n        for (var i = 0; i < scene._removeGlobeCallbacks.length; ++i) {\n            scene._removeGlobeCallbacks[i]();\n        }\n        scene._removeGlobeCallbacks.length = 0;\n\n        var removeGlobeCallbacks = [];\n        if (defined(globe)) {\n            removeGlobeCallbacks.push(globe.imageryLayersUpdatedEvent.addEventListener(requestRenderAfterFrame(scene)));\n            removeGlobeCallbacks.push(globe.terrainProviderChanged.addEventListener(requestRenderAfterFrame(scene)));\n        }\n        scene._removeGlobeCallbacks = removeGlobeCallbacks;\n    }\n\n    defineProperties(Scene.prototype, {\n        /**\n         * Gets the canvas element to which this scene is bound.\n         * @memberof Scene.prototype\n         *\n         * @type {Canvas}\n         * @readonly\n         */\n        canvas : {\n            get : function() {\n                return this._canvas;\n            }\n        },\n\n        /**\n         * The drawingBufferHeight of the underlying GL context.\n         * @memberof Scene.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n         */\n        drawingBufferHeight : {\n            get : function() {\n                return this._context.drawingBufferHeight;\n            }\n        },\n\n        /**\n         * The drawingBufferHeight of the underlying GL context.\n         * @memberof Scene.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n         */\n        drawingBufferWidth : {\n            get : function() {\n                return this._context.drawingBufferWidth;\n            }\n        },\n\n        /**\n         * The maximum aliased line width, in pixels, supported by this WebGL implementation.  It will be at least one.\n         * @memberof Scene.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>ALIASED_LINE_WIDTH_RANGE</code>.\n         */\n        maximumAliasedLineWidth : {\n            get : function() {\n                return ContextLimits.maximumAliasedLineWidth;\n            }\n        },\n\n        /**\n         * The maximum length in pixels of one edge of a cube map, supported by this WebGL implementation.  It will be at least 16.\n         * @memberof Scene.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>.\n         */\n        maximumCubeMapSize : {\n            get : function() {\n                return ContextLimits.maximumCubeMapSize;\n            }\n        },\n\n        /**\n         * Returns <code>true</code> if the {@link Scene#pickPosition} function is supported.\n         * @memberof Scene.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @see Scene#pickPosition\n         */\n        pickPositionSupported : {\n            get : function() {\n                return this._context.depthTexture;\n            }\n        },\n\n        /**\n         * Returns <code>true</code> if the {@link Scene#sampleHeight} and {@link Scene#sampleHeightMostDetailed} functions are supported.\n         * @memberof Scene.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @see Scene#sampleHeight\n         * @see Scene#sampleHeightMostDetailed\n         */\n        sampleHeightSupported : {\n            get : function() {\n                return this._context.depthTexture;\n            }\n        },\n\n        /**\n         * Returns <code>true</code> if the {@link Scene#clampToHeight} and {@link Scene#clampToHeightMostDetailed} functions are supported.\n         * @memberof Scene.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @see Scene#clampToHeight\n         * @see Scene#clampToHeightMostDetailed\n         */\n        clampToHeightSupported : {\n            get : function() {\n                return this._context.depthTexture;\n            }\n        },\n\n        /**\n         * Returns <code>true</code> if the {@link Scene#invertClassification} is supported.\n         * @memberof Scene.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @see Scene#invertClassification\n         */\n        invertClassificationSupported : {\n            get : function() {\n                return this._context.depthTexture;\n            }\n        },\n\n        /**\n         * Gets or sets the depth-test ellipsoid.\n         * @memberof Scene.prototype\n         *\n         * @type {Globe}\n         */\n        globe : {\n            get: function() {\n                return this._globe;\n            },\n\n            set: function(globe) {\n                this._globe = this._globe && this._globe.destroy();\n                this._globe = globe;\n\n                updateGlobeListeners(this, globe);\n            }\n        },\n\n        /**\n         * Gets the collection of primitives.\n         * @memberof Scene.prototype\n         *\n         * @type {PrimitiveCollection}\n         * @readonly\n         */\n        primitives : {\n            get : function() {\n                return this._primitives;\n            }\n        },\n\n        /**\n         * Gets the collection of ground primitives.\n         * @memberof Scene.prototype\n         *\n         * @type {PrimitiveCollection}\n         * @readonly\n         */\n        groundPrimitives : {\n            get : function() {\n                return this._groundPrimitives;\n            }\n        },\n\n        /**\n         * Gets the camera.\n         * @memberof Scene.prototype\n         *\n         * @type {Camera}\n         * @readonly\n         */\n        camera : {\n            get : function() {\n                return this._view.camera;\n            },\n            set : function(camera) {\n                // For internal use only. Documentation is still @readonly.\n                this._view.camera = camera;\n            }\n        },\n\n        /**\n         * Gets the controller for camera input handling.\n         * @memberof Scene.prototype\n         *\n         * @type {ScreenSpaceCameraController}\n         * @readonly\n         */\n        screenSpaceCameraController : {\n            get : function() {\n                return this._screenSpaceCameraController;\n            }\n        },\n\n        /**\n         * Get the map projection to use in 2D and Columbus View modes.\n         * @memberof Scene.prototype\n         *\n         * @type {MapProjection}\n         * @readonly\n         *\n         * @default new GeographicProjection()\n         */\n        mapProjection : {\n            get: function() {\n                return this._mapProjection;\n            }\n        },\n\n        /**\n         * Gets state information about the current scene. If called outside of a primitive's <code>update</code>\n         * function, the previous frame's state is returned.\n         * @memberof Scene.prototype\n         *\n         * @type {FrameState}\n         * @readonly\n         *\n         * @private\n         */\n        frameState : {\n            get: function() {\n                return this._frameState;\n            }\n        },\n\n        /**\n         * Gets the collection of tweens taking place in the scene.\n         * @memberof Scene.prototype\n         *\n         * @type {TweenCollection}\n         * @readonly\n         *\n         * @private\n         */\n        tweens : {\n            get : function() {\n                return this._tweens;\n            }\n        },\n\n        /**\n         * Gets the collection of image layers that will be rendered on the globe.\n         * @memberof Scene.prototype\n         *\n         * @type {ImageryLayerCollection}\n         * @readonly\n         */\n        imageryLayers : {\n            get : function() {\n                if (!defined(this.globe)) {\n                    return undefined;\n                }\n\n                return this.globe.imageryLayers;\n            }\n        },\n\n        /**\n         * The terrain provider providing surface geometry for the globe.\n         * @memberof Scene.prototype\n         *\n         * @type {TerrainProvider}\n         */\n        terrainProvider : {\n            get : function() {\n                if (!defined(this.globe)) {\n                    return undefined;\n                }\n\n                return this.globe.terrainProvider;\n            },\n            set : function(terrainProvider) {\n                if (defined(this.globe)) {\n                    this.globe.terrainProvider = terrainProvider;\n                }\n            }\n        },\n\n        /**\n         * Gets an event that's raised when the terrain provider is changed\n         * @memberof Scene.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        terrainProviderChanged : {\n            get : function() {\n                if (!defined(this.globe)) {\n                    return undefined;\n                }\n\n                return this.globe.terrainProviderChanged;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised before the scene is updated or rendered.  Subscribers to the event\n         * receive the Scene instance as the first parameter and the current time as the second parameter.\n         * @memberof Scene.prototype\n         *\n         * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n         * @see Scene#postUpdate\n         * @see Scene#preRender\n         * @see Scene#postRender\n         *\n         * @type {Event}\n         * @readonly\n         */\n        preUpdate : {\n            get : function() {\n                return this._preUpdate;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised immediately after the scene is updated and before the scene is rendered.\n         * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n         * parameter.\n         * @memberof Scene.prototype\n         *\n         * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n         * @see Scene#preUpdate\n         * @see Scene#preRender\n         * @see Scene#postRender\n         *\n         * @type {Event}\n         * @readonly\n         */\n        postUpdate : {\n            get : function() {\n                return this._postUpdate;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised when an error is thrown inside the <code>render</code> function.\n         * The Scene instance and the thrown error are the only two parameters passed to the event handler.\n         * By default, errors are not rethrown after this event is raised, but that can be changed by setting\n         * the <code>rethrowRenderErrors</code> property.\n         * @memberof Scene.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        renderError : {\n            get : function() {\n                return this._renderError;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised after the scene is updated and immediately before the scene is rendered.\n         * Subscribers to the event receive the Scene instance as the first parameter and the current time as the second\n         * parameter.\n         * @memberof Scene.prototype\n         *\n         * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n         * @see Scene#preUpdate\n         * @see Scene#postUpdate\n         * @see Scene#postRender\n         *\n         * @type {Event}\n         * @readonly\n         */\n        preRender : {\n            get : function() {\n                return this._preRender;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised immediately after the scene is rendered.  Subscribers to the event\n         * receive the Scene instance as the first parameter and the current time as the second parameter.\n         * @memberof Scene.prototype\n         *\n         * @see {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}\n         * @see Scene#preUpdate\n         * @see Scene#postUpdate\n         * @see Scene#postRender\n         *\n         * @type {Event}\n         * @readonly\n         */\n        postRender : {\n            get : function() {\n                return this._postRender;\n            }\n        },\n\n        /**\n         * Gets the simulation time when the scene was last rendered. Returns undefined if the scene has not yet been\n         * rendered.\n         * @memberof Scene.prototype\n         *\n         * @type {JulianDate}\n         * @readonly\n         */\n        lastRenderTime : {\n            get : function() {\n                return this._lastRenderTime;\n            }\n        },\n\n        /**\n         * @memberof Scene.prototype\n         * @private\n         * @readonly\n         */\n        context : {\n            get : function() {\n                return this._context;\n            }\n        },\n\n        /**\n         * This property is for debugging only; it is not for production use.\n         * <p>\n         * When {@link Scene.debugShowFrustums} is <code>true</code>, this contains\n         * properties with statistics about the number of command execute per frustum.\n         * <code>totalCommands</code> is the total number of commands executed, ignoring\n         * overlap. <code>commandsInFrustums</code> is an array with the number of times\n         * commands are executed redundantly, e.g., how many commands overlap two or\n         * three frustums.\n         * </p>\n         *\n         * @memberof Scene.prototype\n         *\n         * @type {Object}\n         * @readonly\n         *\n         * @default undefined\n         */\n        debugFrustumStatistics : {\n            get : function() {\n                return this._view.debugFrustumStatistics;\n            }\n        },\n\n        /**\n         * Gets whether or not the scene is optimized for 3D only viewing.\n         * @memberof Scene.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        scene3DOnly : {\n            get : function() {\n                return this._frameState.scene3DOnly;\n            }\n        },\n\n        /**\n         * Gets whether or not the scene has order independent translucency enabled.\n         * Note that this only reflects the original construction option, and there are\n         * other factors that could prevent OIT from functioning on a given system configuration.\n         * @memberof Scene.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        orderIndependentTranslucency : {\n            get : function() {\n                return this._useOIT;\n            }\n        },\n\n        /**\n         * Gets the unique identifier for this scene.\n         * @memberof Scene.prototype\n         * @type {String}\n         * @readonly\n         */\n        id : {\n            get : function() {\n                return this._id;\n            }\n        },\n\n        /**\n         * Gets or sets the current mode of the scene.\n         * @memberof Scene.prototype\n         * @type {SceneMode}\n         * @default {@link SceneMode.SCENE3D}\n         */\n        mode : {\n            get : function() {\n                return this._mode;\n            },\n            set : function(value) {\n                \n                if (value === SceneMode.SCENE2D) {\n                    this.morphTo2D(0);\n                } else if (value === SceneMode.SCENE3D) {\n                    this.morphTo3D(0);\n                } else if (value === SceneMode.COLUMBUS_VIEW) {\n                    this.morphToColumbusView(0);\n                    \n                }\n                this._mode = value;\n            }\n        },\n\n        /**\n         * Gets the number of frustums used in the last frame.\n         * @memberof Scene.prototype\n         * @type {FrustumCommands[]}\n         *\n         * @private\n         */\n        frustumCommandsList : {\n            get : function() {\n                return this._view.frustumCommandsList;\n            }\n        },\n\n        /**\n         * Gets the number of frustums used in the last frame.\n         * @memberof Scene.prototype\n         * @type {Number}\n         *\n         * @private\n         */\n        numberOfFrustums : {\n            get : function() {\n                return this._view.frustumCommandsList.length;\n            }\n        },\n\n        /**\n         * Gets the scalar used to exaggerate the terrain.\n         * @memberof Scene.prototype\n         * @type {Number}\n         */\n        terrainExaggeration : {\n            get : function() {\n                return this._terrainExaggeration;\n            }\n        },\n\n        /**\n         * When <code>true</code>, splits the scene into two viewports with steroscopic views for the left and right eyes.\n         * Used for cardboard and WebVR.\n         * @memberof Scene.prototype\n         * @type {Boolean}\n         * @default false\n         */\n        useWebVR : {\n            get : function() {\n                return this._useWebVR;\n            },\n            set : function(value) {\n                \n                this._useWebVR = value;\n                if (this._useWebVR) {\n                    this._frameState.creditDisplay.container.style.visibility = 'hidden';\n                    this._cameraVR = new Camera(this);\n                    if (!defined(this._deviceOrientationCameraController)) {\n                        this._deviceOrientationCameraController = new DeviceOrientationCameraController(this);\n                    }\n\n                    this._aspectRatioVR = this.camera.frustum.aspectRatio;\n                } else {\n                    this._frameState.creditDisplay.container.style.visibility = 'visible';\n                    this._cameraVR = undefined;\n                    this._deviceOrientationCameraController = this._deviceOrientationCameraController && !this._deviceOrientationCameraController.isDestroyed() && this._deviceOrientationCameraController.destroy();\n\n                    this.camera.frustum.aspectRatio = this._aspectRatioVR;\n                    this.camera.frustum.xOffset = 0.0;\n                }\n            }\n        },\n\n        /**\n         * Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n         * @memberof Scene.prototype\n         * @type {MapMode2D}\n         */\n        mapMode2D : {\n            get : function() {\n                return this._mapMode2D;\n            }\n        },\n\n        /**\n         * Gets or sets the position of the Imagery splitter within the viewport.  Valid values are between 0.0 and 1.0.\n         * @memberof Scene.prototype\n         *\n         * @type {Number}\n         */\n        imagerySplitPosition : {\n            get: function() {\n                return this._frameState.imagerySplitPosition;\n            },\n            set: function(value) {\n                this._frameState.imagerySplitPosition = value;\n            }\n        },\n\n        /**\n         * The distance from the camera at which to disable the depth test of billboards, labels and points\n         * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n         * be applied. When less than zero, the depth test should never be applied. Setting the disableDepthTestDistance\n         * property of a billboard, label or point will override this value.\n         * @memberof Scene.prototype\n         * @type {Number}\n         * @default 0.0\n         */\n        minimumDisableDepthTestDistance : {\n            get : function() {\n                return this._minimumDisableDepthTestDistance;\n            },\n            set : function(value) {\n                \n                this._minimumDisableDepthTestDistance = value;\n            }\n        },\n\n        /**\n         * Whether or not to use a logarithmic depth buffer. Enabling this option will allow for less frustums in the multi-frustum,\n         * increasing performance. This property relies on {@link Context#fragmentDepth} being supported.\n         * @memberof Scene.prototype\n         * @type {Boolean}\n         */\n        logarithmicDepthBuffer : {\n            get : function() {\n                return this._logDepthBuffer;\n            },\n            set : function(value) {\n                value = this._context.fragmentDepth && value;\n                if (this._logDepthBuffer !== value) {\n                    this._logDepthBuffer = value;\n                    this._logDepthBufferDirty = true;\n                    this._defaultView.updateFrustums = true;\n                }\n            }\n        },\n\n        /**\n         * The value used for gamma correction. This is only used when rendering with high dynamic range.\n         * @memberof Scene.prototype\n         * @type {Number}\n         * @default 2.2\n         */\n        gamma : {\n            get : function() {\n                return this._context.uniformState.gamma;\n            },\n            set : function(value) {\n                this._context.uniformState.gamma = value;\n            }\n        },\n\n        /**\n         * Whether or not to use high dynamic range rendering.\n         * @memberof Scene.prototype\n         * @type {Boolean}\n         * @default true\n         */\n        highDynamicRange : {\n            get : function() {\n                return this._hdr;\n            },\n            set : function(value) {\n                var context = this._context;\n                var hdr = value && context.depthTexture && (context.colorBufferFloat || context.colorBufferHalfFloat);\n                this._hdrDirty = hdr !== this._hdr;\n                this._hdr = hdr;\n            }\n        },\n\n        /**\n         * Whether or not high dynamic range rendering is supported.\n         * @memberof Scene.prototype\n         * @type {Boolean}\n         * @default true\n         */\n        highDynamicRangeSupported : {\n            get : function() {\n                var context = this._context;\n                return context.depthTexture && (context.colorBufferFloat || context.colorBufferHalfFloat);\n            }\n        },\n\n        /**\n         * Gets or sets the color of the light emitted by the sun.\n         *\n         * @memberof Scene.prototype\n         * @type {Cartesian3}\n         * @default Cartesian3(1.8, 1.85, 2.0)\n         */\n        sunColor: {\n            get: function() {\n                return this._sunColor;\n            },\n            set: function(value) {\n                this._sunColor = value;\n            }\n        },\n\n        /**\n         * Ratio between a pixel and a density-independent pixel. Provides a standard unity of\n         * measure for real pixel measurements appropriate to a particular device.\n         *\n         * @memberof Scene.prototype\n         * @type {Number}\n         * @default 1.0\n         * @private\n         */\n        pixelRatio: {\n            get: function() {\n                return this._frameState.pixelRatio;\n            },\n            set: function(value) {\n                this._frameState.pixelRatio = value;\n            }\n        },\n\n        /**\n         * @private\n         */\n        opaqueFrustumNearOffset : {\n            get : function() {\n                return this._frameState.useLogDepth ? 0.9 : 0.9999;\n            }\n        }\n    });\n\n    /**\n     * Determines if a compressed texture format is supported.\n     * @param {String} format The texture format. May be the name of the format or the WebGL extension name, e.g. s3tc or WEBGL_compressed_texture_s3tc.\n     * @return {boolean} Whether or not the format is supported.\n     */\n    Scene.prototype.getCompressedTextureFormatSupported = function(format) {\n        var context = this.context;\n        return ((format === 'WEBGL_compressed_texture_s3tc' || format === 's3tc') && context.s3tc) ||\n               ((format === 'WEBGL_compressed_texture_pvrtc' || format === 'pvrtc') && context.pvrtc) ||\n               ((format === 'WEBGL_compressed_texture_etc1' || format === 'etc1') && context.etc1);\n    };\n\n    function updateDerivedCommands(scene, command, shadowsDirty) {\n        var frameState = scene._frameState;\n        var context = scene._context;\n        var oit = scene._view.oit;\n        var lightShadowMaps = frameState.shadowState.lightShadowMaps;\n        var lightShadowsEnabled = frameState.shadowState.lightShadowsEnabled;\n\n        var derivedCommands = command.derivedCommands;\n\n        if (defined(command.pickId)) {\n            derivedCommands.picking = DerivedCommand.createPickDerivedCommand(scene, command, context, derivedCommands.picking);\n        }\n\n        if (!command.pickOnly) {\n            derivedCommands.depth = DerivedCommand.createDepthOnlyDerivedCommand(scene, command, context, derivedCommands.depth);\n        }\n\n        derivedCommands.originalCommand = command;\n\n        if (scene._hdr) {\n            derivedCommands.hdr = DerivedCommand.createHdrCommand(command, context, derivedCommands.hdr);\n            command = derivedCommands.hdr.command;\n            derivedCommands = command.derivedCommands;\n        }\n\n        if (lightShadowsEnabled && command.receiveShadows) {\n            derivedCommands.shadows = ShadowMap.createReceiveDerivedCommand(lightShadowMaps, command, shadowsDirty, context, derivedCommands.shadows);\n        }\n\n        if (command.pass === Pass.TRANSLUCENT && defined(oit) && oit.isSupported()) {\n            if (lightShadowsEnabled && command.receiveShadows) {\n                derivedCommands.oit = defined(derivedCommands.oit) ? derivedCommands.oit : {};\n                derivedCommands.oit.shadows = oit.createDerivedCommands(derivedCommands.shadows.receiveCommand, context, derivedCommands.oit.shadows);\n            } else {\n                derivedCommands.oit = oit.createDerivedCommands(command, context, derivedCommands.oit);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    Scene.prototype.updateDerivedCommands = function(command) {\n        if (!defined(command.derivedCommands)) {\n            // Is not a DrawCommand\n            return;\n        }\n\n        var frameState = this._frameState;\n        var context = this._context;\n\n        // Update derived commands when any shadow maps become dirty\n        var shadowsDirty = false;\n        var lastDirtyTime = frameState.shadowState.lastDirtyTime;\n        if (command.lastDirtyTime !== lastDirtyTime) {\n            command.lastDirtyTime = lastDirtyTime;\n            command.dirty = true;\n            shadowsDirty = true;\n        }\n\n        var useLogDepth = frameState.useLogDepth;\n        var useHdr = this._hdr;\n        var derivedCommands = command.derivedCommands;\n        var hasLogDepthDerivedCommands = defined(derivedCommands.logDepth);\n        var hasHdrCommands = defined(derivedCommands.hdr);\n        var hasDerivedCommands = defined(derivedCommands.originalCommand);\n        var needsLogDepthDerivedCommands = useLogDepth && !hasLogDepthDerivedCommands;\n        var needsHdrCommands = useHdr && !hasHdrCommands;\n        var needsDerivedCommands = (!useLogDepth || !useHdr) && !hasDerivedCommands;\n        command.dirty = command.dirty || needsLogDepthDerivedCommands || needsHdrCommands || needsDerivedCommands;\n\n        if (command.dirty) {\n            command.dirty = false;\n\n            var shadowMaps = frameState.shadowState.shadowMaps;\n            var shadowsEnabled = frameState.shadowState.shadowsEnabled;\n            if (shadowsEnabled && command.castShadows) {\n                derivedCommands.shadows = ShadowMap.createCastDerivedCommand(shadowMaps, command, shadowsDirty, context, derivedCommands.shadows);\n            }\n\n            if (hasLogDepthDerivedCommands || needsLogDepthDerivedCommands) {\n                derivedCommands.logDepth = DerivedCommand.createLogDepthCommand(command, context, derivedCommands.logDepth);\n                updateDerivedCommands(this, derivedCommands.logDepth.command, shadowsDirty);\n            }\n            if (hasDerivedCommands || needsDerivedCommands) {\n                updateDerivedCommands(this, command, shadowsDirty);\n            }\n        }\n    };\n\n    var mostDetailedPreloadTilesetPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.MOST_DETAILED_PRELOAD\n    });\n\n    var mostDetailedPickTilesetPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.MOST_DETAILED_PICK\n    });\n\n    var renderTilesetPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.RENDER\n    });\n\n    var pickTilesetPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.PICK\n    });\n\n    var preloadTilesetPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.PRELOAD\n    });\n\n    var preloadFlightTilesetPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.PRELOAD_FLIGHT\n    });\n\n    var requestRenderModeDeferCheckPassState = new Cesium3DTilePassState({\n        pass : Cesium3DTilePass.REQUEST_RENDER_MODE_DEFER_CHECK\n    });\n\n    var scratchOccluderBoundingSphere = new BoundingSphere();\n    var scratchOccluder;\n\n    function getOccluder(scene) {\n        // TODO: The occluder is the top-level globe. When we add\n        //       support for multiple central bodies, this should be the closest one.\n        var globe = scene.globe;\n        if (scene._mode === SceneMode.SCENE3D && defined(globe) && globe.show) {\n            var ellipsoid = globe.ellipsoid;\n            scratchOccluderBoundingSphere.radius = ellipsoid.minimumRadius;\n            scratchOccluder = Occluder.fromBoundingSphere(scratchOccluderBoundingSphere, scene.camera.positionWC, scratchOccluder);\n            return scratchOccluder;\n        }\n\n        return undefined;\n    }\n\n    function clearPasses(passes) {\n        passes.render = false;\n        passes.pick = false;\n        passes.depth = false;\n        passes.postProcess = false;\n        passes.offscreen = false;\n    }\n\n    function updateFrameNumber(scene, frameNumber, time) {\n        var frameState = scene._frameState;\n        frameState.frameNumber = frameNumber;\n        frameState.time = JulianDate.clone(time, frameState.time);\n    }\n\n    function updateFrameState(scene) {\n        var camera = scene.camera;\n\n        var frameState = scene._frameState;\n        frameState.commandList.length = 0;\n        frameState.shadowMaps.length = 0;\n        frameState.brdfLutGenerator = scene._brdfLutGenerator;\n        frameState.environmentMap = scene.skyBox && scene.skyBox._cubeMap;\n        frameState.mode = scene._mode;\n        frameState.morphTime = scene.morphTime;\n        frameState.mapProjection = scene.mapProjection;\n        frameState.camera = camera;\n        frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n        frameState.occluder = getOccluder(scene);\n        frameState.terrainExaggeration = scene._terrainExaggeration;\n        frameState.minimumDisableDepthTestDistance = scene._minimumDisableDepthTestDistance;\n        frameState.invertClassification = scene.invertClassification;\n        frameState.useLogDepth = scene._logDepthBuffer && !(scene.camera.frustum instanceof OrthographicFrustum || scene.camera.frustum instanceof OrthographicOffCenterFrustum);\n        frameState.sunColor = scene._sunColor;\n\n        if (defined(scene._specularEnvironmentMapAtlas) && scene._specularEnvironmentMapAtlas.ready) {\n            frameState.specularEnvironmentMaps = scene._specularEnvironmentMapAtlas.texture;\n            frameState.specularEnvironmentMapsMaximumLOD = scene._specularEnvironmentMapAtlas.maximumMipmapLevel;\n        } else {\n            frameState.specularEnvironmentMaps = undefined;\n            frameState.specularEnvironmentMapsMaximumLOD = undefined;\n        }\n\n        frameState.sphericalHarmonicCoefficients = scene.sphericalHarmonicCoefficients;\n\n        scene._actualInvertClassificationColor = Color.clone(scene.invertClassificationColor, scene._actualInvertClassificationColor);\n        if (!InvertClassification.isTranslucencySupported(scene._context)) {\n            scene._actualInvertClassificationColor.alpha = 1.0;\n        }\n\n        frameState.invertClassificationColor = scene._actualInvertClassificationColor;\n\n        if (defined(scene.globe)) {\n            frameState.maximumScreenSpaceError = scene.globe.maximumScreenSpaceError;\n        } else {\n            frameState.maximumScreenSpaceError = 2;\n        }\n\n        clearPasses(frameState.passes);\n\n        frameState.tilesetPassState = undefined;\n    }\n\n    var scratchCullingVolume = new CullingVolume();\n\n    /**\n     * @private\n     */\n    Scene.prototype.isVisible = function(command, cullingVolume, occluder) {\n        return ((defined(command)) &&\n                ((!defined(command.boundingVolume)) ||\n                 !command.cull ||\n                 ((cullingVolume.computeVisibility(command.boundingVolume) !== Intersect.OUTSIDE) &&\n                  (!defined(occluder) || !command.occlude || !command.boundingVolume.isOccluded(occluder)))));\n    };\n\n    function getAttributeLocations(shaderProgram) {\n        var attributeLocations = {};\n        var attributes = shaderProgram.vertexAttributes;\n        for (var a in attributes) {\n            if (attributes.hasOwnProperty(a)) {\n                attributeLocations[a] = attributes[a].index;\n            }\n        }\n\n        return attributeLocations;\n    }\n\n    function createDebugFragmentShaderProgram(command, scene, shaderProgram) {\n        var context = scene.context;\n        var sp = defaultValue(shaderProgram, command.shaderProgram);\n        var fs = sp.fragmentShaderSource.clone();\n\n        var targets = [];\n        fs.sources = fs.sources.map(function(source) {\n            source = ShaderSource.replaceMain(source, 'czm_Debug_main');\n            var re = /gl_FragData\\[(\\d+)\\]/g;\n            var match;\n            while ((match = re.exec(source)) !== null) {\n                if (targets.indexOf(match[1]) === -1) {\n                    targets.push(match[1]);\n                }\n            }\n            return source;\n        });\n        var length = targets.length;\n\n        var newMain =\n            'void main() \\n' +\n            '{ \\n' +\n            '    czm_Debug_main(); \\n';\n\n        var i;\n        if (scene.debugShowCommands) {\n            if (!defined(command._debugColor)) {\n                command._debugColor = Color.fromRandom();\n            }\n            var c = command._debugColor;\n            if (length > 0) {\n                for (i = 0; i < length; ++i) {\n                    newMain += '    gl_FragData[' + targets[i] + '].rgb *= vec3(' + c.red + ', ' + c.green + ', ' + c.blue + '); \\n';\n                }\n            } else {\n                newMain += '    ' + 'gl_FragColor' + '.rgb *= vec3(' + c.red + ', ' + c.green + ', ' + c.blue + '); \\n';\n            }\n        }\n\n        if (scene.debugShowFrustums) {\n            // Support up to three frustums.  If a command overlaps all\n            // three, it's code is not changed.\n            var r = (command.debugOverlappingFrustums & (1 << 0)) ? '1.0' : '0.0';\n            var g = (command.debugOverlappingFrustums & (1 << 1)) ? '1.0' : '0.0';\n            var b = (command.debugOverlappingFrustums & (1 << 2)) ? '1.0' : '0.0';\n            if (length > 0) {\n                for (i = 0; i < length; ++i) {\n                    newMain += '    gl_FragData[' + targets[i] + '].rgb *= vec3(' + r + ', ' + g + ', ' + b + '); \\n';\n                }\n            } else {\n                newMain += '    ' + 'gl_FragColor' + '.rgb *= vec3(' + r + ', ' + g + ', ' + b + '); \\n';\n            }\n        }\n\n        newMain += '}';\n\n        fs.sources.push(newMain);\n\n        var attributeLocations = getAttributeLocations(sp);\n\n        return ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : sp.vertexShaderSource,\n            fragmentShaderSource : fs,\n            attributeLocations : attributeLocations\n        });\n    }\n\n    function executeDebugCommand(command, scene, passState) {\n        var debugCommand = DrawCommand.shallowClone(command);\n        debugCommand.shaderProgram = createDebugFragmentShaderProgram(command, scene);\n        debugCommand.execute(scene.context, passState);\n        debugCommand.shaderProgram.destroy();\n    }\n\n    var transformFrom2D = new Matrix4(0.0, 0.0, 1.0, 0.0,\n                                      1.0, 0.0, 0.0, 0.0,\n                                      0.0, 1.0, 0.0, 0.0,\n                                      0.0, 0.0, 0.0, 1.0);\n    transformFrom2D = Matrix4.inverseTransformation(transformFrom2D, transformFrom2D);\n\n    function debugShowBoundingVolume(command, scene, passState, debugFramebuffer) {\n        // Debug code to draw bounding volume for command.  Not optimized!\n        // Assumes bounding volume is a bounding sphere or box\n        var frameState = scene._frameState;\n        var context = frameState.context;\n        var boundingVolume = command.boundingVolume;\n\n        if (defined(scene._debugVolume)) {\n            scene._debugVolume.destroy();\n        }\n\n        var geometry;\n\n        var center = Cartesian3.clone(boundingVolume.center);\n        if (frameState.mode !== SceneMode.SCENE3D) {\n            center = Matrix4.multiplyByPoint(transformFrom2D, center, center);\n            var projection = frameState.mapProjection;\n            var centerCartographic = projection.unproject(center);\n            center = projection.ellipsoid.cartographicToCartesian(centerCartographic);\n        }\n\n        if (defined(boundingVolume.radius)) {\n            var radius = boundingVolume.radius;\n\n            geometry = GeometryPipeline.toWireframe(EllipsoidGeometry.createGeometry(new EllipsoidGeometry({\n                radii : new Cartesian3(radius, radius, radius),\n                vertexFormat : PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n            })));\n\n            scene._debugVolume = new Primitive({\n                geometryInstances : new GeometryInstance({\n                    geometry : geometry,\n                    modelMatrix : Matrix4.fromTranslation(center),\n                    attributes : {\n                        color : new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0)\n                    }\n                }),\n                appearance : new PerInstanceColorAppearance({\n                    flat : true,\n                    translucent : false\n                }),\n                asynchronous : false\n            });\n        } else {\n            var halfAxes = boundingVolume.halfAxes;\n\n            geometry = GeometryPipeline.toWireframe(BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n                dimensions : new Cartesian3(2.0, 2.0, 2.0),\n                vertexFormat : PerInstanceColorAppearance.FLAT_VERTEX_FORMAT\n            })));\n\n            scene._debugVolume = new Primitive({\n                geometryInstances : new GeometryInstance({\n                    geometry : geometry,\n                    modelMatrix : Matrix4.fromRotationTranslation(halfAxes, center, new Matrix4()),\n                    attributes : {\n                        color : new ColorGeometryInstanceAttribute(1.0, 0.0, 0.0, 1.0)\n                    }\n                }),\n                appearance : new PerInstanceColorAppearance({\n                    flat : true,\n                    translucent : false\n                }),\n                asynchronous : false\n            });\n        }\n\n        var savedCommandList = frameState.commandList;\n        var commandList = frameState.commandList = [];\n        scene._debugVolume.update(frameState);\n\n        command = commandList[0];\n\n        if (frameState.useLogDepth) {\n            var logDepth = DerivedCommand.createLogDepthCommand(command, context);\n            command = logDepth.command;\n        }\n\n        var framebuffer;\n        if (defined(debugFramebuffer)) {\n            framebuffer = passState.framebuffer;\n            passState.framebuffer = debugFramebuffer;\n        }\n\n        command.execute(context, passState);\n\n        if (defined(framebuffer)) {\n            passState.framebuffer = framebuffer;\n        }\n\n        frameState.commandList = savedCommandList;\n    }\n\n    function executeCommand(command, scene, context, passState, debugFramebuffer) {\n        var frameState = scene._frameState;\n\n        if ((defined(scene.debugCommandFilter)) && !scene.debugCommandFilter(command)) {\n            return;\n        }\n\n        if (command instanceof ClearCommand) {\n            command.execute(context, passState);\n            return;\n        }\n\n        if (command.debugShowBoundingVolume && (defined(command.boundingVolume))) {\n            debugShowBoundingVolume(command, scene, passState, debugFramebuffer);\n        }\n\n        if (frameState.useLogDepth && defined(command.derivedCommands.logDepth)) {\n            command = command.derivedCommands.logDepth.command;\n        }\n\n        var passes = frameState.passes;\n        if (!passes.pick && scene._hdr && defined(command.derivedCommands) && defined(command.derivedCommands.hdr)) {\n            command = command.derivedCommands.hdr.command;\n        }\n\n        if (passes.pick || passes.depth) {\n            if (passes.pick && !passes.depth && defined(command.derivedCommands.picking)) {\n                command = command.derivedCommands.picking.pickCommand;\n                command.execute(context, passState);\n                return;\n            } else if (defined(command.derivedCommands.depth)) {\n                command = command.derivedCommands.depth.depthOnlyCommand;\n                command.execute(context, passState);\n                return;\n            }\n        }\n\n        if (scene.debugShowCommands || scene.debugShowFrustums) {\n            executeDebugCommand(command, scene, passState);\n            return;\n        }\n\n        if (frameState.shadowState.lightShadowsEnabled && command.receiveShadows && defined(command.derivedCommands.shadows)) {\n            // If the command receives shadows, execute the derived shadows command.\n            // Some commands, such as OIT derived commands, do not have derived shadow commands themselves\n            // and instead shadowing is built-in. In this case execute the command regularly below.\n            command.derivedCommands.shadows.receiveCommand.execute(context, passState);\n        } else {\n            command.execute(context, passState);\n        }\n    }\n\n    function executeIdCommand(command, scene, context, passState) {\n        var frameState = scene._frameState;\n        var derivedCommands = command.derivedCommands;\n        if (!defined(derivedCommands)) {\n            return;\n        }\n\n        if (frameState.useLogDepth && defined(derivedCommands.logDepth)) {\n            command = derivedCommands.logDepth.command;\n        }\n\n        derivedCommands = command.derivedCommands;\n        if (defined(derivedCommands.picking)) {\n            command = derivedCommands.picking.pickCommand;\n            command.execute(context, passState);\n        } else if (defined(derivedCommands.depth)) {\n            command = derivedCommands.depth.depthOnlyCommand;\n            command.execute(context, passState);\n        }\n    }\n\n    function backToFront(a, b, position) {\n        return b.boundingVolume.distanceSquaredTo(position) - a.boundingVolume.distanceSquaredTo(position);\n    }\n\n    function frontToBack(a, b, position) {\n        // When distances are equal equal favor sorting b before a. This gives render priority to commands later in the list.\n        return a.boundingVolume.distanceSquaredTo(position) - b.boundingVolume.distanceSquaredTo(position) + CesiumMath.EPSILON12;\n    }\n\n    function executeTranslucentCommandsBackToFront(scene, executeFunction, passState, commands, invertClassification) {\n        var context = scene.context;\n\n        mergeSort(commands, backToFront, scene.camera.positionWC);\n\n        if (defined(invertClassification)) {\n            executeFunction(invertClassification.unclassifiedCommand, scene, context, passState);\n        }\n\n        var length = commands.length;\n        for (var i = 0; i < length; ++i) {\n            executeFunction(commands[i], scene, context, passState);\n        }\n    }\n\n    function executeTranslucentCommandsFrontToBack(scene, executeFunction, passState, commands, invertClassification) {\n        var context = scene.context;\n\n        mergeSort(commands, frontToBack, scene.camera.positionWC);\n\n        if (defined(invertClassification)) {\n            executeFunction(invertClassification.unclassifiedCommand, scene, context, passState);\n        }\n\n        var length = commands.length;\n        for (var i = 0; i < length; ++i) {\n            executeFunction(commands[i], scene, context, passState);\n        }\n    }\n\n    function getDebugGlobeDepth(scene, index) {\n        var globeDepths = scene._view.debugGlobeDepths;\n        var globeDepth = globeDepths[index];\n        if (!defined(globeDepth) && scene.context.depthTexture) {\n            globeDepth = new GlobeDepth();\n            globeDepths[index] = globeDepth;\n        }\n        return globeDepth;\n    }\n\n    function getPickDepth(scene, index) {\n        var pickDepths = scene._view.pickDepths;\n        var pickDepth = pickDepths[index];\n        if (!defined(pickDepth)) {\n            pickDepth = new PickDepth();\n            pickDepths[index] = pickDepth;\n        }\n        return pickDepth;\n    }\n\n    var scratchPerspectiveFrustum = new PerspectiveFrustum();\n    var scratchPerspectiveOffCenterFrustum = new PerspectiveOffCenterFrustum();\n    var scratchOrthographicFrustum = new OrthographicFrustum();\n    var scratchOrthographicOffCenterFrustum = new OrthographicOffCenterFrustum();\n\n    function executeCommands(scene, passState) {\n        var camera = scene.camera;\n        var context = scene.context;\n        var us = context.uniformState;\n\n        us.updateCamera(camera);\n\n        // Create a working frustum from the original camera frustum.\n        var frustum;\n        if (defined(camera.frustum.fov)) {\n            frustum = camera.frustum.clone(scratchPerspectiveFrustum);\n        } else if (defined(camera.frustum.infiniteProjectionMatrix)){\n            frustum = camera.frustum.clone(scratchPerspectiveOffCenterFrustum);\n        } else if (defined(camera.frustum.width)) {\n            frustum = camera.frustum.clone(scratchOrthographicFrustum);\n        } else {\n            frustum = camera.frustum.clone(scratchOrthographicOffCenterFrustum);\n        }\n\n        // Ideally, we would render the sky box and atmosphere last for\n        // early-z, but we would have to draw it in each frustum\n        frustum.near = camera.frustum.near;\n        frustum.far = camera.frustum.far;\n        us.updateFrustum(frustum);\n        us.updatePass(Pass.ENVIRONMENT);\n\n        var passes = scene._frameState.passes;\n        var picking = passes.pick;\n        var environmentState = scene._environmentState;\n        var view = scene._view;\n        var renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n        var useWebVR = environmentState.useWebVR;\n\n        // Do not render environment primitives during a pick pass since they do not generate picking commands.\n        if (!picking) {\n            var skyBoxCommand = environmentState.skyBoxCommand;\n            if (defined(skyBoxCommand)) {\n                executeCommand(skyBoxCommand, scene, context, passState);\n            }\n\n            if (environmentState.isSkyAtmosphereVisible) {\n                executeCommand(environmentState.skyAtmosphereCommand, scene, context, passState);\n            }\n\n            if (environmentState.isSunVisible) {\n                environmentState.sunDrawCommand.execute(context, passState);\n                if (scene.sunBloom && !useWebVR) {\n                    var framebuffer;\n                    if (environmentState.useGlobeDepthFramebuffer) {\n                        framebuffer = view.globeDepth.framebuffer;\n                    } else if (environmentState.usePostProcess) {\n                        framebuffer = view.sceneFramebuffer.getFramebuffer();\n                    } else {\n                        framebuffer = environmentState.originalFramebuffer;\n                    }\n                    scene._sunPostProcess.execute(context);\n                    scene._sunPostProcess.copy(context, framebuffer);\n                    passState.framebuffer = framebuffer;\n                }\n            }\n\n            // Moon can be seen through the atmosphere, since the sun is rendered after the atmosphere.\n            if (environmentState.isMoonVisible) {\n                environmentState.moonCommand.execute(context, passState);\n            }\n        }\n\n        // Determine how translucent surfaces will be handled.\n        var executeTranslucentCommands;\n        if (environmentState.useOIT) {\n            if (!defined(scene._executeOITFunction)) {\n                scene._executeOITFunction = function(scene, executeFunction, passState, commands, invertClassification) {\n                    view.oit.executeCommands(scene, executeFunction, passState, commands, invertClassification);\n                };\n            }\n            executeTranslucentCommands = scene._executeOITFunction;\n        } else if (passes.render) {\n            executeTranslucentCommands = executeTranslucentCommandsBackToFront;\n        } else {\n            executeTranslucentCommands = executeTranslucentCommandsFrontToBack;\n        }\n\n        var clearGlobeDepth = environmentState.clearGlobeDepth;\n        var useDepthPlane = environmentState.useDepthPlane;\n        var clearDepth = scene._depthClearCommand;\n        var clearStencil = scene._stencilClearCommand;\n        var clearClassificationStencil = scene._classificationStencilClearCommand;\n        var depthPlane = scene._depthPlane;\n        var usePostProcessSelected = environmentState.usePostProcessSelected;\n\n        var height2D = camera.position.z;\n\n        // Execute commands in each frustum in back to front order\n        var j;\n        var frustumCommandsList = view.frustumCommandsList;\n        var numFrustums = frustumCommandsList.length;\n\n        for (var i = 0; i < numFrustums; ++i) {\n            var index = numFrustums - i - 1;\n            var frustumCommands = frustumCommandsList[index];\n\n            if (scene.mode === SceneMode.SCENE2D) {\n                // To avoid z-fighting in 2D, move the camera to just before the frustum\n                // and scale the frustum depth to be in [1.0, nearToFarDistance2D].\n                camera.position.z = height2D - frustumCommands.near + 1.0;\n                frustum.far = Math.max(1.0, frustumCommands.far - frustumCommands.near);\n                frustum.near = 1.0;\n                us.update(scene.frameState);\n                us.updateFrustum(frustum);\n            } else {\n                // Avoid tearing artifacts between adjacent frustums in the opaque passes\n                frustum.near = index !== 0 ? frustumCommands.near * scene.opaqueFrustumNearOffset : frustumCommands.near;\n                frustum.far = frustumCommands.far;\n                us.updateFrustum(frustum);\n            }\n\n            var globeDepth = scene.debugShowGlobeDepth ? getDebugGlobeDepth(scene, index) : view.globeDepth;\n\n            var fb;\n            if (scene.debugShowGlobeDepth && defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n                globeDepth.update(context, passState, view.viewport);\n                globeDepth.clear(context, passState, scene._clearColorCommand.color);\n                fb = passState.framebuffer;\n                passState.framebuffer = globeDepth.framebuffer;\n            }\n\n            clearDepth.execute(context, passState);\n\n            if (context.stencilBuffer) {\n                clearStencil.execute(context, passState);\n            }\n\n            us.updatePass(Pass.GLOBE);\n            var commands = frustumCommands.commands[Pass.GLOBE];\n            var length = frustumCommands.indices[Pass.GLOBE];\n            for (j = 0; j < length; ++j) {\n                executeCommand(commands[j], scene, context, passState);\n            }\n\n            if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n                globeDepth.executeCopyDepth(context, passState);\n            }\n\n            if (scene.debugShowGlobeDepth && defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n                passState.framebuffer = fb;\n            }\n\n            // Draw terrain classification\n            us.updatePass(Pass.TERRAIN_CLASSIFICATION);\n            commands = frustumCommands.commands[Pass.TERRAIN_CLASSIFICATION];\n            length = frustumCommands.indices[Pass.TERRAIN_CLASSIFICATION];\n            for (j = 0; j < length; ++j) {\n                executeCommand(commands[j], scene, context, passState);\n            }\n\n            if (clearGlobeDepth) {\n                clearDepth.execute(context, passState);\n                if (useDepthPlane) {\n                    depthPlane.execute(context, passState);\n                }\n            }\n\n            if (!environmentState.useInvertClassification || picking) {\n                // Common/fastest path. Draw 3D Tiles and classification normally.\n\n                // Draw 3D Tiles\n                us.updatePass(Pass.CESIUM_3D_TILE);\n                commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n                length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n                for (j = 0; j < length; ++j) {\n                    executeCommand(commands[j], scene, context, passState);\n                }\n\n                if (length > 0) {\n                    if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n                        globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n                    }\n\n                    // Draw classifications. Modifies 3D Tiles color.\n                    us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION);\n                    commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n                    length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n                    for (j = 0; j < length; ++j) {\n                        executeCommand(commands[j], scene, context, passState);\n                    }\n                }\n            } else {\n                // When the invert classification color is opaque:\n                //    Main FBO (FBO1):                   Main_Color   + Main_DepthStencil\n                //    Invert classification FBO (FBO2) : Invert_Color + Main_DepthStencil\n                //\n                //    1. Clear FBO2 color to vec4(0.0) for each frustum\n                //    2. Draw 3D Tiles to FBO2\n                //    3. Draw classification to FBO2\n                //    4. Fullscreen pass to FBO1, draw Invert_Color when:\n                //           * Main_DepthStencil has the stencil bit set > 0 (classified)\n                //    5. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n                //           * Main_DepthStencil has stencil bit set to 0 (unclassified) and\n                //           * Invert_Color !== vec4(0.0)\n                //\n                // When the invert classification color is translucent:\n                //    Main FBO (FBO1):                  Main_Color         + Main_DepthStencil\n                //    Invert classification FBO (FBO2): Invert_Color       + Invert_DepthStencil\n                //    IsClassified FBO (FBO3):          IsClassified_Color + Invert_DepthStencil\n                //\n                //    1. Clear FBO2 and FBO3 color to vec4(0.0), stencil to 0, and depth to 1.0\n                //    2. Draw 3D Tiles to FBO2\n                //    3. Draw classification to FBO2\n                //    4. Fullscreen pass to FBO3, draw any color when\n                //           * Invert_DepthStencil has the stencil bit set > 0 (classified)\n                //    5. Fullscreen pass to FBO1, draw Invert_Color when:\n                //           * Invert_Color !== vec4(0.0) and\n                //           * IsClassified_Color !== vec4(0.0)\n                //    6. Fullscreen pass to FBO1, draw Invert_Color * czm_invertClassificationColor when:\n                //           * Invert_Color !== vec4(0.0) and\n                //           * IsClassified_Color === vec4(0.0)\n                //\n                // NOTE: Step six when translucent invert color occurs after the TRANSLUCENT pass\n                //\n                scene._invertClassification.clear(context, passState);\n\n                var opaqueClassificationFramebuffer = passState.framebuffer;\n                passState.framebuffer = scene._invertClassification._fbo;\n\n                // Draw normally\n                us.updatePass(Pass.CESIUM_3D_TILE);\n                commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n                length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n                for (j = 0; j < length; ++j) {\n                    executeCommand(commands[j], scene, context, passState);\n                }\n\n                if (defined(globeDepth) && environmentState.useGlobeDepthFramebuffer) {\n                    globeDepth.executeUpdateDepth(context, passState, clearGlobeDepth);\n                }\n\n                // Set stencil\n                us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW);\n                commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW];\n                length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW];\n                for (j = 0; j < length; ++j) {\n                    executeCommand(commands[j], scene, context, passState);\n                }\n\n                passState.framebuffer = opaqueClassificationFramebuffer;\n\n                // Fullscreen pass to copy classified fragments\n                scene._invertClassification.executeClassified(context, passState);\n                if (scene.frameState.invertClassificationColor.alpha === 1.0) {\n                    // Fullscreen pass to copy unclassified fragments when alpha == 1.0\n                    scene._invertClassification.executeUnclassified(context, passState);\n                }\n\n                // Clear stencil set by the classification for the next classification pass\n                if (length > 0 && context.stencilBuffer) {\n                    clearClassificationStencil.execute(context, passState);\n                }\n\n                // Draw style over classification.\n                us.updatePass(Pass.CESIUM_3D_TILE_CLASSIFICATION);\n                commands = frustumCommands.commands[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n                length = frustumCommands.indices[Pass.CESIUM_3D_TILE_CLASSIFICATION];\n                for (j = 0; j < length; ++j) {\n                    executeCommand(commands[j], scene, context, passState);\n                }\n            }\n\n            if (length > 0 && context.stencilBuffer) {\n                clearStencil.execute(context, passState);\n            }\n\n            us.updatePass(Pass.OPAQUE);\n            commands = frustumCommands.commands[Pass.OPAQUE];\n            length = frustumCommands.indices[Pass.OPAQUE];\n            for (j = 0; j < length; ++j) {\n                executeCommand(commands[j], scene, context, passState);\n            }\n\n            if (index !== 0 && scene.mode !== SceneMode.SCENE2D) {\n                // Do not overlap frustums in the translucent pass to avoid blending artifacts\n                frustum.near = frustumCommands.near;\n                us.updateFrustum(frustum);\n            }\n\n            var invertClassification;\n            if (!picking && environmentState.useInvertClassification && scene.frameState.invertClassificationColor.alpha < 1.0) {\n                // Fullscreen pass to copy unclassified fragments when alpha < 1.0.\n                // Not executed when undefined.\n                invertClassification = scene._invertClassification;\n            }\n\n            us.updatePass(Pass.TRANSLUCENT);\n            commands = frustumCommands.commands[Pass.TRANSLUCENT];\n            commands.length = frustumCommands.indices[Pass.TRANSLUCENT];\n            executeTranslucentCommands(scene, executeCommand, passState, commands, invertClassification);\n\n            if (context.depthTexture && scene.useDepthPicking && (environmentState.useGlobeDepthFramebuffer || renderTranslucentDepthForPick)) {\n                // PERFORMANCE_IDEA: Use MRT to avoid the extra copy.\n                var depthStencilTexture = renderTranslucentDepthForPick ? passState.framebuffer.depthStencilTexture : globeDepth.framebuffer.depthStencilTexture;\n                var pickDepth = getPickDepth(scene, index);\n                pickDepth.update(context, depthStencilTexture);\n                pickDepth.executeCopyDepth(context, passState);\n            }\n\n            if (picking || !usePostProcessSelected) {\n                continue;\n            }\n\n            var originalFramebuffer = passState.framebuffer;\n            passState.framebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n            // reset frustum\n            frustum.near = index !== 0 ? frustumCommands.near * scene.opaqueFrustumNearOffset : frustumCommands.near;\n            frustum.far = frustumCommands.far;\n            us.updateFrustum(frustum);\n\n            us.updatePass(Pass.GLOBE);\n            commands = frustumCommands.commands[Pass.GLOBE];\n            length = frustumCommands.indices[Pass.GLOBE];\n            for (j = 0; j < length; ++j) {\n                executeIdCommand(commands[j], scene, context, passState);\n            }\n\n            if (clearGlobeDepth) {\n                clearDepth.framebuffer = passState.framebuffer;\n                clearDepth.execute(context, passState);\n                clearDepth.framebuffer = undefined;\n            }\n\n            if (clearGlobeDepth && useDepthPlane) {\n                depthPlane.execute(context, passState);\n            }\n\n            us.updatePass(Pass.CESIUM_3D_TILE);\n            commands = frustumCommands.commands[Pass.CESIUM_3D_TILE];\n            length = frustumCommands.indices[Pass.CESIUM_3D_TILE];\n            for (j = 0; j < length; ++j) {\n                executeIdCommand(commands[j], scene, context, passState);\n            }\n\n            us.updatePass(Pass.OPAQUE);\n            commands = frustumCommands.commands[Pass.OPAQUE];\n            length = frustumCommands.indices[Pass.OPAQUE];\n            for (j = 0; j < length; ++j) {\n                executeIdCommand(commands[j], scene, context, passState);\n            }\n\n            us.updatePass(Pass.TRANSLUCENT);\n            commands = frustumCommands.commands[Pass.TRANSLUCENT];\n            length = frustumCommands.indices[Pass.TRANSLUCENT];\n            for (j = 0; j < length; ++j) {\n                executeIdCommand(commands[j], scene, context, passState);\n            }\n\n            passState.framebuffer = originalFramebuffer;\n        }\n    }\n\n    function executeComputeCommands(scene) {\n        var us = scene.context.uniformState;\n        us.updatePass(Pass.COMPUTE);\n\n        var sunComputeCommand = scene._environmentState.sunComputeCommand;\n        if (defined(sunComputeCommand)) {\n            sunComputeCommand.execute(scene._computeEngine);\n        }\n\n        var commandList = scene._computeCommandList;\n        var length = commandList.length;\n        for (var i = 0; i < length; ++i) {\n            commandList[i].execute(scene._computeEngine);\n        }\n    }\n\n    function executeOverlayCommands(scene, passState) {\n        var us = scene.context.uniformState;\n        us.updatePass(Pass.OVERLAY);\n\n        var context = scene.context;\n        var commandList = scene._overlayCommandList;\n        var length = commandList.length;\n        for (var i = 0; i < length; ++i) {\n            commandList[i].execute(context, passState);\n        }\n    }\n\n    function insertShadowCastCommands(scene, commandList, shadowMap) {\n        var shadowVolume = shadowMap.shadowMapCullingVolume;\n        var isPointLight = shadowMap.isPointLight;\n        var passes = shadowMap.passes;\n        var numberOfPasses = passes.length;\n\n        var length = commandList.length;\n        for (var i = 0; i < length; ++i) {\n            var command = commandList[i];\n            scene.updateDerivedCommands(command);\n\n            if (command.castShadows && (command.pass === Pass.GLOBE || command.pass === Pass.CESIUM_3D_TILE || command.pass === Pass.OPAQUE || command.pass === Pass.TRANSLUCENT)) {\n                if (scene.isVisible(command, shadowVolume)) {\n                    if (isPointLight) {\n                        for (var k = 0; k < numberOfPasses; ++k) {\n                            passes[k].commandList.push(command);\n                        }\n                    } else if (numberOfPasses === 1) {\n                        passes[0].commandList.push(command);\n                    } else {\n                        var wasVisible = false;\n                        // Loop over cascades from largest to smallest\n                        for (var j = numberOfPasses - 1; j >= 0; --j) {\n                            var cascadeVolume = passes[j].cullingVolume;\n                            if (scene.isVisible(command, cascadeVolume)) {\n                                passes[j].commandList.push(command);\n                                wasVisible = true;\n                            } else if (wasVisible) {\n                                // If it was visible in the previous cascade but now isn't\n                                // then there is no need to check any more cascades\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function executeShadowMapCastCommands(scene) {\n        var frameState = scene.frameState;\n        var shadowMaps = frameState.shadowState.shadowMaps;\n        var shadowMapLength = shadowMaps.length;\n\n        if (!frameState.shadowState.shadowsEnabled) {\n            return;\n        }\n\n        var context = scene.context;\n        var uniformState = context.uniformState;\n\n        for (var i = 0; i < shadowMapLength; ++i) {\n            var shadowMap = shadowMaps[i];\n            if (shadowMap.outOfView) {\n                continue;\n            }\n\n            // Reset the command lists\n            var j;\n            var passes = shadowMap.passes;\n            var numberOfPasses = passes.length;\n            for (j = 0; j < numberOfPasses; ++j) {\n                passes[j].commandList.length = 0;\n            }\n\n            // Insert the primitive/model commands into the command lists\n            var sceneCommands = scene.frameState.commandList;\n            insertShadowCastCommands(scene, sceneCommands, shadowMap);\n\n            for (j = 0; j < numberOfPasses; ++j) {\n                var pass = shadowMap.passes[j];\n                uniformState.updateCamera(pass.camera);\n                shadowMap.updatePass(context, j);\n                var numberOfCommands = pass.commandList.length;\n                for (var k = 0; k < numberOfCommands; ++k) {\n                    var command = pass.commandList[k];\n                    // Set the correct pass before rendering into the shadow map because some shaders\n                    // conditionally render based on whether the pass is translucent or opaque.\n                    uniformState.updatePass(command.pass);\n                    executeCommand(command.derivedCommands.shadows.castCommands[i], scene, context, pass.passState);\n                }\n            }\n        }\n    }\n\n    var scratchEyeTranslation = new Cartesian3();\n\n    function updateAndExecuteCommands(scene, passState, backgroundColor) {\n        var frameState = scene._frameState;\n        var mode = frameState.mode;\n        var useWebVR = scene._environmentState.useWebVR;\n\n        if (useWebVR) {\n            executeWebVRCommands(scene, passState, backgroundColor);\n        } else if (mode !== SceneMode.SCENE2D || scene._mapMode2D === MapMode2D.ROTATE) {\n            executeCommandsInViewport(true, scene, passState, backgroundColor);\n        } else {\n            updateAndClearFramebuffers(scene, passState, backgroundColor);\n            execute2DViewportCommands(scene, passState);\n        }\n    }\n\n    function executeWebVRCommands(scene, passState, backgroundColor) {\n        var view = scene._view;\n        var camera = view.camera;\n        var environmentState = scene._environmentState;\n        var renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n\n        updateAndClearFramebuffers(scene, passState, backgroundColor);\n\n        if (!renderTranslucentDepthForPick) {\n            updateAndRenderPrimitives(scene);\n        }\n\n        view.createPotentiallyVisibleSet(scene);\n\n        if (!renderTranslucentDepthForPick) {\n            executeComputeCommands(scene);\n            executeShadowMapCastCommands(scene);\n        }\n\n        // Based on Calculating Stereo pairs by Paul Bourke\n        // http://paulbourke.net/stereographics/stereorender/\n        var viewport = passState.viewport;\n        viewport.x = 0;\n        viewport.y = 0;\n        viewport.width = viewport.width * 0.5;\n\n        var savedCamera = Camera.clone(camera, scene._cameraVR);\n        savedCamera.frustum = camera.frustum;\n\n        var near = camera.frustum.near;\n        var fo = near * defaultValue(scene.focalLength, 5.0);\n        var eyeSeparation = defaultValue(scene.eyeSeparation, fo / 30.0);\n        var eyeTranslation = Cartesian3.multiplyByScalar(savedCamera.right, eyeSeparation * 0.5, scratchEyeTranslation);\n\n        camera.frustum.aspectRatio = viewport.width / viewport.height;\n\n        var offset = 0.5 * eyeSeparation * near / fo;\n\n        Cartesian3.add(savedCamera.position, eyeTranslation, camera.position);\n        camera.frustum.xOffset = offset;\n\n        executeCommands(scene, passState);\n\n        viewport.x = viewport.width;\n\n        Cartesian3.subtract(savedCamera.position, eyeTranslation, camera.position);\n        camera.frustum.xOffset = -offset;\n\n        executeCommands(scene, passState);\n\n        Camera.clone(savedCamera, camera);\n    }\n\n    var scratch2DViewportCartographic = new Cartographic(Math.PI, CesiumMath.PI_OVER_TWO);\n    var scratch2DViewportMaxCoord = new Cartesian3();\n    var scratch2DViewportSavedPosition = new Cartesian3();\n    var scratch2DViewportTransform = new Matrix4();\n    var scratch2DViewportCameraTransform = new Matrix4();\n    var scratch2DViewportEyePoint = new Cartesian3();\n    var scratch2DViewportWindowCoords = new Cartesian3();\n    var scratch2DViewport = new BoundingRectangle();\n\n    function execute2DViewportCommands(scene, passState) {\n        var context = scene.context;\n        var frameState = scene.frameState;\n        var camera = scene.camera;\n\n        var originalViewport = passState.viewport;\n        var viewport = BoundingRectangle.clone(originalViewport, scratch2DViewport);\n        passState.viewport = viewport;\n\n        var maxCartographic = scratch2DViewportCartographic;\n        var maxCoord = scratch2DViewportMaxCoord;\n\n        var projection = scene.mapProjection;\n        projection.project(maxCartographic, maxCoord);\n\n        var position = Cartesian3.clone(camera.position, scratch2DViewportSavedPosition);\n        var transform = Matrix4.clone(camera.transform, scratch2DViewportCameraTransform);\n        var frustum = camera.frustum.clone();\n\n        camera._setTransform(Matrix4.IDENTITY);\n\n        var viewportTransformation = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0, scratch2DViewportTransform);\n        var projectionMatrix = camera.frustum.projectionMatrix;\n\n        var x = camera.positionWC.y;\n        var eyePoint = Cartesian3.fromElements(CesiumMath.sign(x) * maxCoord.x - x, 0.0, -camera.positionWC.x, scratch2DViewportEyePoint);\n        var windowCoordinates = Transforms.pointToGLWindowCoordinates(projectionMatrix, viewportTransformation, eyePoint, scratch2DViewportWindowCoords);\n\n        windowCoordinates.x = Math.floor(windowCoordinates.x);\n\n        var viewportX = viewport.x;\n        var viewportWidth = viewport.width;\n\n        if (x === 0.0 || windowCoordinates.x <= viewportX  || windowCoordinates.x >= viewportX + viewportWidth) {\n            executeCommandsInViewport(true, scene, passState);\n        } else if (Math.abs(viewportX + viewportWidth * 0.5 - windowCoordinates.x) < 1.0) {\n            viewport.width = windowCoordinates.x - viewport.x;\n\n            camera.position.x *= CesiumMath.sign(camera.position.x);\n\n            camera.frustum.right = 0.0;\n\n            frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n            context.uniformState.update(frameState);\n\n            executeCommandsInViewport(true, scene, passState);\n\n            viewport.x = windowCoordinates.x;\n\n            camera.position.x = -camera.position.x;\n\n            camera.frustum.right = -camera.frustum.left;\n            camera.frustum.left = 0.0;\n\n            frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n            context.uniformState.update(frameState);\n\n            executeCommandsInViewport(false, scene, passState);\n        } else if (windowCoordinates.x > viewportX + viewportWidth * 0.5) {\n            viewport.width = windowCoordinates.x - viewportX;\n\n            var right = camera.frustum.right;\n            camera.frustum.right = maxCoord.x - x;\n\n            frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n            context.uniformState.update(frameState);\n\n            executeCommandsInViewport(true, scene, passState);\n\n            viewport.x = windowCoordinates.x;\n            viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n            camera.position.x = -camera.position.x;\n\n            camera.frustum.left = -camera.frustum.right;\n            camera.frustum.right = right - camera.frustum.right * 2.0;\n\n            frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n            context.uniformState.update(frameState);\n\n            executeCommandsInViewport(false, scene, passState);\n        } else {\n            viewport.x = windowCoordinates.x;\n            viewport.width = viewportX + viewportWidth - windowCoordinates.x;\n\n            var left = camera.frustum.left;\n            camera.frustum.left = -maxCoord.x - x;\n\n            frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n            context.uniformState.update(frameState);\n\n            executeCommandsInViewport(true, scene, passState);\n\n            viewport.x = viewportX;\n            viewport.width = windowCoordinates.x - viewportX;\n\n            camera.position.x = -camera.position.x;\n\n            camera.frustum.right = -camera.frustum.left;\n            camera.frustum.left = left - camera.frustum.left * 2.0;\n\n            frameState.cullingVolume = camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n            context.uniformState.update(frameState);\n\n            executeCommandsInViewport(false, scene, passState);\n        }\n\n        camera._setTransform(transform);\n        Cartesian3.clone(position, camera.position);\n        camera.frustum = frustum.clone();\n        passState.viewport = originalViewport;\n    }\n\n    function executeCommandsInViewport(firstViewport, scene, passState, backgroundColor) {\n        var environmentState = scene._environmentState;\n        var view = scene._view;\n        var renderTranslucentDepthForPick = environmentState.renderTranslucentDepthForPick;\n\n        if (!firstViewport && !renderTranslucentDepthForPick) {\n            scene.frameState.commandList.length = 0;\n        }\n\n        if (!renderTranslucentDepthForPick) {\n            updateAndRenderPrimitives(scene);\n        }\n\n        view.createPotentiallyVisibleSet(scene);\n\n        if (firstViewport) {\n            if (defined(backgroundColor)) {\n                updateAndClearFramebuffers(scene, passState, backgroundColor);\n            }\n            if (!renderTranslucentDepthForPick) {\n                executeComputeCommands(scene);\n                executeShadowMapCastCommands(scene);\n            }\n        }\n\n        executeCommands(scene, passState);\n    }\n\n    function updateEnvironment(scene) {\n        var frameState = scene._frameState;\n        var view = scene._view;\n\n        // Update celestial and terrestrial environment effects.\n        var environmentState = scene._environmentState;\n        var renderPass = frameState.passes.render;\n        var offscreenPass = frameState.passes.offscreen;\n        var skyAtmosphere = scene.skyAtmosphere;\n        var globe = scene.globe;\n\n        if (!renderPass || (scene._mode !== SceneMode.SCENE2D && view.camera.frustum instanceof OrthographicFrustum)) {\n            environmentState.skyAtmosphereCommand = undefined;\n            environmentState.skyBoxCommand = undefined;\n            environmentState.sunDrawCommand = undefined;\n            environmentState.sunComputeCommand = undefined;\n            environmentState.moonCommand = undefined;\n        } else {\n            if (defined(skyAtmosphere) && defined(globe)) {\n                skyAtmosphere.setDynamicAtmosphereColor(globe.enableLighting);\n                environmentState.isReadyForAtmosphere = environmentState.isReadyForAtmosphere || globe._surface._tilesToRender.length > 0;\n            }\n            environmentState.skyAtmosphereCommand = defined(skyAtmosphere) ? skyAtmosphere.update(frameState) : undefined;\n            environmentState.skyBoxCommand = defined(scene.skyBox) ? scene.skyBox.update(frameState, scene._hdr) : undefined;\n            var sunCommands = defined(scene.sun) ? scene.sun.update(frameState, view.passState, scene._hdr) : undefined;\n            environmentState.sunDrawCommand = defined(sunCommands) ? sunCommands.drawCommand : undefined;\n            environmentState.sunComputeCommand = defined(sunCommands) ? sunCommands.computeCommand : undefined;\n            environmentState.moonCommand = defined(scene.moon) ? scene.moon.update(frameState) : undefined;\n        }\n\n        var clearGlobeDepth = environmentState.clearGlobeDepth = defined(globe) && (!globe.depthTestAgainstTerrain || scene.mode === SceneMode.SCENE2D);\n        var useDepthPlane = environmentState.useDepthPlane = clearGlobeDepth && scene.mode === SceneMode.SCENE3D;\n        if (useDepthPlane) {\n            // Update the depth plane that is rendered in 3D when the primitives are\n            // not depth tested against terrain so primitives on the backface\n            // of the globe are not picked.\n            scene._depthPlane.update(frameState);\n        }\n\n        environmentState.renderTranslucentDepthForPick = false;\n        environmentState.useWebVR = scene._useWebVR && scene.mode !== SceneMode.SCENE2D  && !offscreenPass;\n\n        var occluder = (frameState.mode === SceneMode.SCENE3D) ? frameState.occluder: undefined;\n        var cullingVolume = frameState.cullingVolume;\n\n        // get user culling volume minus the far plane.\n        var planes = scratchCullingVolume.planes;\n        for (var k = 0; k < 5; ++k) {\n            planes[k] = cullingVolume.planes[k];\n        }\n        cullingVolume = scratchCullingVolume;\n\n        // Determine visibility of celestial and terrestrial environment effects.\n        environmentState.isSkyAtmosphereVisible = defined(environmentState.skyAtmosphereCommand) && environmentState.isReadyForAtmosphere;\n        environmentState.isSunVisible = scene.isVisible(environmentState.sunDrawCommand, cullingVolume, occluder);\n        environmentState.isMoonVisible = scene.isVisible(environmentState.moonCommand, cullingVolume, occluder);\n\n        var envMaps = scene.specularEnvironmentMaps;\n        var envMapAtlas = scene._specularEnvironmentMapAtlas;\n        if (defined(envMaps) && (!defined(envMapAtlas) || envMapAtlas.url !== envMaps)) {\n            envMapAtlas = envMapAtlas && envMapAtlas.destroy();\n            scene._specularEnvironmentMapAtlas = new OctahedralProjectedCubeMap(envMaps);\n        } else if (!defined(envMaps) && defined(envMapAtlas)) {\n            envMapAtlas.destroy();\n            scene._specularEnvironmentMapAtlas = undefined;\n        }\n\n        if (defined(scene._specularEnvironmentMapAtlas)) {\n            scene._specularEnvironmentMapAtlas.update(frameState);\n        }\n    }\n\n    function updateDebugFrustumPlanes(scene) {\n        var frameState = scene._frameState;\n        if (scene.debugShowFrustumPlanes !== scene._debugShowFrustumPlanes) {\n            if (scene.debugShowFrustumPlanes) {\n                scene._debugFrustumPlanes = new DebugCameraPrimitive({\n                    camera: scene.camera,\n                    updateOnChange: false\n                });\n            } else {\n                scene._debugFrustumPlanes = scene._debugFrustumPlanes && scene._debugFrustumPlanes.destroy();\n            }\n            scene._debugShowFrustumPlanes = scene.debugShowFrustumPlanes;\n        }\n\n        if (defined(scene._debugFrustumPlanes)) {\n            scene._debugFrustumPlanes.update(frameState);\n        }\n    }\n\n    function updateShadowMaps(scene) {\n        var frameState = scene._frameState;\n        var shadowMaps = frameState.shadowMaps;\n        var length = shadowMaps.length;\n\n        var shadowsEnabled = (length > 0) && !frameState.passes.pick && (scene.mode === SceneMode.SCENE3D);\n        if (shadowsEnabled !== frameState.shadowState.shadowsEnabled) {\n            // Update derived commands when shadowsEnabled changes\n            ++frameState.shadowState.lastDirtyTime;\n            frameState.shadowState.shadowsEnabled = shadowsEnabled;\n        }\n\n        frameState.shadowState.lightShadowsEnabled = false;\n\n        if (!shadowsEnabled) {\n            return;\n        }\n\n        // Check if the shadow maps are different than the shadow maps last frame.\n        // If so, the derived commands need to be updated.\n        for (var j = 0; j < length; ++j) {\n            if (shadowMaps[j] !== frameState.shadowState.shadowMaps[j]) {\n                ++frameState.shadowState.lastDirtyTime;\n                break;\n            }\n        }\n\n        frameState.shadowState.shadowMaps.length = 0;\n        frameState.shadowState.lightShadowMaps.length = 0;\n\n        for (var i = 0; i < length; ++i) {\n            var shadowMap = shadowMaps[i];\n            shadowMap.update(frameState);\n\n            frameState.shadowState.shadowMaps.push(shadowMap);\n\n            if (shadowMap.fromLightSource) {\n                frameState.shadowState.lightShadowMaps.push(shadowMap);\n                frameState.shadowState.lightShadowsEnabled = true;\n            }\n\n            if (shadowMap.dirty) {\n                ++frameState.shadowState.lastDirtyTime;\n                shadowMap.dirty = false;\n            }\n        }\n    }\n\n    function updateAndRenderPrimitives(scene) {\n        var frameState = scene._frameState;\n\n        scene._groundPrimitives.update(frameState);\n        scene._primitives.update(frameState);\n\n        updateDebugFrustumPlanes(scene);\n        updateShadowMaps(scene);\n\n        if (scene._globe) {\n            scene._globe.render(frameState);\n        }\n    }\n\n    function updateAndClearFramebuffers(scene, passState, clearColor) {\n        var context = scene._context;\n        var frameState = scene._frameState;\n        var environmentState = scene._environmentState;\n        var view = scene._view;\n\n        var passes = scene._frameState.passes;\n        var picking = passes.pick;\n        var useWebVR = environmentState.useWebVR;\n\n        // Preserve the reference to the original framebuffer.\n        environmentState.originalFramebuffer = passState.framebuffer;\n\n        // Manage sun bloom post-processing effect.\n        if (defined(scene.sun) && scene.sunBloom !== scene._sunBloom) {\n            if (scene.sunBloom && !useWebVR) {\n                scene._sunPostProcess = new SunPostProcess();\n            } else if(defined(scene._sunPostProcess)){\n                scene._sunPostProcess = scene._sunPostProcess.destroy();\n            }\n\n            scene._sunBloom = scene.sunBloom;\n        } else if (!defined(scene.sun) && defined(scene._sunPostProcess)) {\n            scene._sunPostProcess = scene._sunPostProcess.destroy();\n            scene._sunBloom = false;\n        }\n\n        // Clear the pass state framebuffer.\n        var clear = scene._clearColorCommand;\n        Color.clone(clearColor, clear.color);\n        clear.execute(context, passState);\n\n        // Update globe depth rendering based on the current context and clear the globe depth framebuffer.\n        // Globe depth is copied for the pick pass to support picking batched geometries in GroundPrimitives.\n        var useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer = defined(view.globeDepth);\n        if (useGlobeDepthFramebuffer) {\n            view.globeDepth.update(context, passState, view.viewport, scene._hdr);\n            view.globeDepth.clear(context, passState, clearColor);\n        }\n\n        // If supported, configure OIT to use the globe depth framebuffer and clear the OIT framebuffer.\n        var oit = view.oit;\n        var useOIT = environmentState.useOIT = !picking && defined(oit) && oit.isSupported();\n        if (useOIT) {\n            oit.update(context, passState, view.globeDepth.framebuffer, scene._hdr);\n            oit.clear(context, passState, clearColor);\n            environmentState.useOIT = oit.isSupported();\n        }\n\n        var postProcess = scene.postProcessStages;\n        var usePostProcess = environmentState.usePostProcess = !picking && (scene._hdr || postProcess.length > 0 || postProcess.ambientOcclusion.enabled || postProcess.fxaa.enabled || postProcess.bloom.enabled);\n        environmentState.usePostProcessSelected = false;\n        if (usePostProcess) {\n            view.sceneFramebuffer.update(context, view.viewport, scene._hdr);\n            view.sceneFramebuffer.clear(context, passState, clearColor);\n\n            postProcess.update(context, frameState.useLogDepth, scene._hdr);\n            postProcess.clear(context);\n\n            usePostProcess = environmentState.usePostProcess = postProcess.ready;\n            environmentState.usePostProcessSelected = usePostProcess && postProcess.hasSelected;\n        }\n\n        if (environmentState.isSunVisible && scene.sunBloom && !useWebVR) {\n            passState.framebuffer = scene._sunPostProcess.update(passState);\n            scene._sunPostProcess.clear(context, passState, clearColor);\n        } else if (useGlobeDepthFramebuffer) {\n            passState.framebuffer = view.globeDepth.framebuffer;\n        } else if (usePostProcess) {\n            passState.framebuffer = view.sceneFramebuffer.getFramebuffer();\n        }\n\n        if (defined(passState.framebuffer)) {\n            clear.execute(context, passState);\n        }\n\n        var useInvertClassification = environmentState.useInvertClassification = !picking && defined(passState.framebuffer) && scene.invertClassification;\n        if (useInvertClassification) {\n            var depthFramebuffer;\n            if (scene.frameState.invertClassificationColor.alpha === 1.0) {\n                if (environmentState.useGlobeDepthFramebuffer) {\n                    depthFramebuffer = view.globeDepth.framebuffer;\n                }\n            }\n\n            if (defined(depthFramebuffer) || context.depthTexture) {\n                scene._invertClassification.previousFramebuffer = depthFramebuffer;\n                scene._invertClassification.update(context);\n                scene._invertClassification.clear(context, passState);\n\n                if (scene.frameState.invertClassificationColor.alpha < 1.0 && useOIT) {\n                    var command = scene._invertClassification.unclassifiedCommand;\n                    var derivedCommands = command.derivedCommands;\n                    derivedCommands.oit = oit.createDerivedCommands(command, context, derivedCommands.oit);\n                }\n            } else {\n                environmentState.useInvertClassification = false;\n            }\n        }\n    }\n\n    function resolveFramebuffers(scene, passState) {\n        var context = scene._context;\n        var frameState = scene._frameState;\n        var environmentState = scene._environmentState;\n        var view = scene._view;\n\n        var useOIT = environmentState.useOIT;\n        var useGlobeDepthFramebuffer = environmentState.useGlobeDepthFramebuffer;\n        var usePostProcess = environmentState.usePostProcess;\n\n        var defaultFramebuffer = environmentState.originalFramebuffer;\n        var globeFramebuffer = useGlobeDepthFramebuffer ? view.globeDepth.framebuffer : undefined;\n        var sceneFramebuffer = view.sceneFramebuffer.getFramebuffer();\n        var idFramebuffer = view.sceneFramebuffer.getIdFramebuffer();\n\n        if (useOIT) {\n            passState.framebuffer = usePostProcess ? sceneFramebuffer : defaultFramebuffer;\n            view.oit.execute(context, passState);\n        }\n\n        if (usePostProcess) {\n            var inputFramebuffer = sceneFramebuffer;\n            if (useGlobeDepthFramebuffer && !useOIT) {\n                inputFramebuffer = globeFramebuffer;\n            }\n\n            var postProcess = scene.postProcessStages;\n            var colorTexture = inputFramebuffer.getColorTexture(0);\n            var idTexture = idFramebuffer.getColorTexture(0);\n            var depthTexture = defaultValue(globeFramebuffer, sceneFramebuffer).depthStencilTexture;\n            postProcess.execute(context, colorTexture, depthTexture, idTexture);\n            postProcess.copy(context, defaultFramebuffer);\n        }\n\n        if (!useOIT && !usePostProcess && useGlobeDepthFramebuffer) {\n            passState.framebuffer = defaultFramebuffer;\n            view.globeDepth.executeCopyColor(context, passState);\n        }\n\n        var useLogDepth = frameState.useLogDepth;\n\n        if (scene.debugShowGlobeDepth && useGlobeDepthFramebuffer) {\n            var gd = getDebugGlobeDepth(scene, scene.debugShowDepthFrustum - 1);\n            gd.executeDebugGlobeDepth(context, passState, useLogDepth);\n        }\n\n        if (scene.debugShowPickDepth && useGlobeDepthFramebuffer) {\n            var pd = getPickDepth(scene, scene.debugShowDepthFrustum - 1);\n            pd.executeDebugPickDepth(context, passState, useLogDepth);\n        }\n    }\n\n    function callAfterRenderFunctions(scene) {\n        // Functions are queued up during primitive update and executed here in case\n        // the function modifies scene state that should remain constant over the frame.\n        var functions = scene._frameState.afterRender;\n        for (var i = 0, length = functions.length; i < length; ++i) {\n            functions[i]();\n            scene.requestRender();\n        }\n\n        functions.length = 0;\n    }\n\n    /**\n     * @private\n     */\n    Scene.prototype.initializeFrame = function() {\n        // Destroy released shaders and textures once every 120 frames to avoid thrashing the cache\n        if (this._shaderFrameCount++ === 120) {\n            this._shaderFrameCount = 0;\n            this._context.shaderCache.destroyReleasedShaderPrograms();\n            this._context.textureCache.destroyReleasedTextures();\n        }\n\n        this._tweens.update();\n\n        this._screenSpaceCameraController.update();\n        if (defined(this._deviceOrientationCameraController)) {\n            this._deviceOrientationCameraController.update();\n        }\n\n        this.camera.update(this._mode);\n        this.camera._updateCameraChanged();\n    };\n\n    function updateDebugShowFramesPerSecond(scene, renderedThisFrame) {\n        if (scene.debugShowFramesPerSecond) {\n            if (!defined(scene._performanceDisplay)) {\n                var performanceContainer = document.createElement('div');\n                performanceContainer.className = 'cesium-performanceDisplay-defaultContainer';\n                var container = scene._canvas.parentNode;\n                container.appendChild(performanceContainer);\n                var performanceDisplay = new PerformanceDisplay({container: performanceContainer});\n                scene._performanceDisplay = performanceDisplay;\n                scene._performanceContainer = performanceContainer;\n            }\n\n            scene._performanceDisplay.throttled = scene.requestRenderMode;\n            scene._performanceDisplay.update(renderedThisFrame);\n        } else if (defined(scene._performanceDisplay)) {\n            scene._performanceDisplay = scene._performanceDisplay && scene._performanceDisplay.destroy();\n            scene._performanceContainer.parentNode.removeChild(scene._performanceContainer);\n        }\n    }\n\n    function prePassesUpdate(scene) {\n        scene._jobScheduler.resetBudgets();\n\n        var frameState = scene._frameState;\n        var primitives = scene.primitives;\n        primitives.prePassesUpdate(frameState);\n\n        if (defined(scene.globe)) {\n            scene.globe.update(frameState);\n        }\n\n        scene._pickPositionCacheDirty = true;\n        frameState.creditDisplay.update();\n    }\n\n    function postPassesUpdate(scene) {\n        var frameState = scene._frameState;\n        var primitives = scene.primitives;\n        primitives.postPassesUpdate(frameState);\n\n        RequestScheduler.update();\n    }\n\n    var scratchBackgroundColor = new Color();\n\n    function render(scene) {\n        var frameState = scene._frameState;\n\n        var context = scene.context;\n        var us = context.uniformState;\n\n        var view = scene._defaultView;\n        scene._view = view;\n\n        updateFrameState(scene);\n        frameState.passes.render = true;\n        frameState.passes.postProcess = scene.postProcessStages.hasSelected;\n        frameState.tilesetPassState = renderTilesetPassState;\n\n        var backgroundColor = defaultValue(scene.backgroundColor, Color.BLACK);\n        if (scene._hdr) {\n            backgroundColor = Color.clone(backgroundColor, scratchBackgroundColor);\n            backgroundColor.red = Math.pow(backgroundColor.red, scene.gamma);\n            backgroundColor.green = Math.pow(backgroundColor.green, scene.gamma);\n            backgroundColor.blue = Math.pow(backgroundColor.blue, scene.gamma);\n        }\n        frameState.backgroundColor = backgroundColor;\n\n        frameState.creditDisplay.beginFrame();\n\n        scene.fog.update(frameState);\n\n        us.update(frameState);\n\n        var shadowMap = scene.shadowMap;\n        if (defined(shadowMap) && shadowMap.enabled) {\n            // Update the sun's direction\n            Cartesian3.negate(us.sunDirectionWC, scene._sunCamera.direction);\n            frameState.shadowMaps.push(shadowMap);\n        }\n\n        scene._computeCommandList.length = 0;\n        scene._overlayCommandList.length = 0;\n\n        var viewport = view.viewport;\n        viewport.x = 0;\n        viewport.y = 0;\n        viewport.width = context.drawingBufferWidth;\n        viewport.height = context.drawingBufferHeight;\n\n        var passState = view.passState;\n        passState.framebuffer = undefined;\n        passState.blendingEnabled = undefined;\n        passState.scissorTest = undefined;\n        passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n\n        if (defined(scene.globe)) {\n            scene.globe.beginFrame(frameState);\n        }\n\n        updateEnvironment(scene);\n        updateAndExecuteCommands(scene, passState, backgroundColor);\n        resolveFramebuffers(scene, passState);\n\n        passState.framebuffer = undefined;\n        executeOverlayCommands(scene, passState);\n\n        if (defined(scene.globe)) {\n            scene.globe.endFrame(frameState);\n\n            if (!scene.globe.tilesLoaded) {\n                scene._renderRequested = true;\n            }\n        }\n\n        frameState.creditDisplay.endFrame();\n        context.endFrame();\n    }\n\n    function tryAndCatchError(scene, functionToExecute) {\n        try {\n            functionToExecute(scene);\n        } catch (error) {\n            scene._renderError.raiseEvent(scene, error);\n\n            if (scene.rethrowRenderErrors) {\n                throw error;\n            }\n        }\n    }\n\n    /**\n     * Update and render the scene.\n     * @param {JulianDate} [time] The simulation time at which to render.\n     *\n     * @private\n     */\n    Scene.prototype.render = function(time) {\n        /**\n         *\n         * Pre passes update. Execute any pass invariant code that should run before the passes here.\n         *\n         */\n        this._preUpdate.raiseEvent(this, time);\n\n        var frameState = this._frameState;\n        frameState.newFrame = false;\n\n        if (!defined(time)) {\n            time = JulianDate.now();\n        }\n\n        // Determine if shouldRender\n        var cameraChanged = this._view.checkForCameraUpdates(this);\n        var shouldRender = !this.requestRenderMode || this._renderRequested || cameraChanged || this._logDepthBufferDirty || this._hdrDirty || (this.mode === SceneMode.MORPHING);\n        if (!shouldRender && defined(this.maximumRenderTimeChange) && defined(this._lastRenderTime)) {\n            var difference = Math.abs(JulianDate.secondsDifference(this._lastRenderTime, time));\n            shouldRender = shouldRender || difference > this.maximumRenderTimeChange;\n        }\n\n        if (shouldRender) {\n            this._lastRenderTime = JulianDate.clone(time, this._lastRenderTime);\n            this._renderRequested = false;\n            this._logDepthBufferDirty = false;\n            this._hdrDirty = false;\n\n            var frameNumber = CesiumMath.incrementWrap(frameState.frameNumber, 15000000.0, 1.0);\n            updateFrameNumber(this, frameNumber, time);\n            frameState.newFrame = true;\n        }\n\n        tryAndCatchError(this, prePassesUpdate);\n\n        /**\n         *\n         * Passes update. Add any passes here\n         *\n         */\n        if (this.primitives.show)\n        {\n            tryAndCatchError(this, updateMostDetailedRayPicks);\n            tryAndCatchError(this, updatePreloadPass);\n            tryAndCatchError(this, updatePreloadFlightPass);\n            if (!shouldRender) {\n                tryAndCatchError(this, updateRequestRenderModeDeferCheckPass);\n            }\n        }\n\n        this._postUpdate.raiseEvent(this, time);\n\n        if (shouldRender) {\n            this._preRender.raiseEvent(this, time);\n            tryAndCatchError(this, render);\n        }\n\n        /**\n         *\n         * Post passes update. Execute any pass invariant code that should run after the passes here.\n         *\n         */\n        updateDebugShowFramesPerSecond(this, shouldRender);\n        tryAndCatchError(this, postPassesUpdate);\n\n        // Often used to trigger events (so don't want in trycatch) that the user might be subscribed to. Things like the tile load events, ready promises, etc.\n        // We don't want those events to resolve during the render loop because the events might add new primitives\n        callAfterRenderFunctions(this);\n\n        if (shouldRender) {\n            this._postRender.raiseEvent(this, time);\n        }\n    };\n\n    /**\n     * Update and render the scene. Always forces a new render frame regardless of whether a render was\n     * previously requested.\n     * @param {JulianDate} [time] The simulation time at which to render.\n     *\n     * @private\n     */\n    Scene.prototype.forceRender = function(time) {\n        this._renderRequested = true;\n        this.render(time);\n    };\n\n    /**\n     * Requests a new rendered frame when {@link Scene#requestRenderMode} is set to <code>true</code>.\n     * The render rate will not exceed the {@link CesiumWidget#targetFrameRate}.\n     *\n     * @see Scene#requestRenderMode\n     */\n    Scene.prototype.requestRender = function() {\n        this._renderRequested = true;\n    };\n\n    /**\n     * @private\n     */\n    Scene.prototype.clampLineWidth = function(width) {\n        return Math.max(ContextLimits.minimumAliasedLineWidth, Math.min(width, ContextLimits.maximumAliasedLineWidth));\n    };\n\n    var orthoPickingFrustum = new OrthographicOffCenterFrustum();\n    var scratchOrigin = new Cartesian3();\n    var scratchDirection = new Cartesian3();\n    var scratchPixelSize = new Cartesian2();\n    var scratchPickVolumeMatrix4 = new Matrix4();\n\n    function getPickOrthographicCullingVolume(scene, drawingBufferPosition, width, height, viewport) {\n        var camera = scene.camera;\n        var frustum = camera.frustum;\n        if (defined(frustum._offCenterFrustum)) {\n            frustum = frustum._offCenterFrustum;\n        }\n\n        var x = 2.0 * (drawingBufferPosition.x - viewport.x) / viewport.width - 1.0;\n        x *= (frustum.right - frustum.left) * 0.5;\n        var y = 2.0 * (viewport.height - drawingBufferPosition.y - viewport.y) / viewport.height - 1.0;\n        y *= (frustum.top - frustum.bottom) * 0.5;\n\n        var transform = Matrix4.clone(camera.transform, scratchPickVolumeMatrix4);\n        camera._setTransform(Matrix4.IDENTITY);\n\n        var origin = Cartesian3.clone(camera.position, scratchOrigin);\n        Cartesian3.multiplyByScalar(camera.right, x, scratchDirection);\n        Cartesian3.add(scratchDirection, origin, origin);\n        Cartesian3.multiplyByScalar(camera.up, y, scratchDirection);\n        Cartesian3.add(scratchDirection, origin, origin);\n\n        camera._setTransform(transform);\n\n        if (scene.mode === SceneMode.SCENE2D) {\n            Cartesian3.fromElements(origin.z, origin.x, origin.y, origin);\n        }\n\n        var pixelSize = frustum.getPixelDimensions(viewport.width, viewport.height, 1.0, scratchPixelSize);\n\n        var ortho = orthoPickingFrustum;\n        ortho.right = pixelSize.x * 0.5;\n        ortho.left = -ortho.right;\n        ortho.top = pixelSize.y * 0.5;\n        ortho.bottom = -ortho.top;\n        ortho.near = frustum.near;\n        ortho.far = frustum.far;\n\n        return ortho.computeCullingVolume(origin, camera.directionWC, camera.upWC);\n    }\n\n    var perspPickingFrustum = new PerspectiveOffCenterFrustum();\n\n    function getPickPerspectiveCullingVolume(scene, drawingBufferPosition, width, height, viewport) {\n        var camera = scene.camera;\n        var frustum = camera.frustum;\n        var near = frustum.near;\n\n        var tanPhi = Math.tan(frustum.fovy * 0.5);\n        var tanTheta = frustum.aspectRatio * tanPhi;\n\n        var x = 2.0 * (drawingBufferPosition.x - viewport.x) / viewport.width - 1.0;\n        var y = 2.0 * (viewport.height - drawingBufferPosition.y - viewport.y) / viewport.height - 1.0;\n\n        var xDir = x * near * tanTheta;\n        var yDir = y * near * tanPhi;\n\n        var pixelSize = frustum.getPixelDimensions(viewport.width, viewport.height, 1.0, scratchPixelSize);\n        var pickWidth = pixelSize.x * width * 0.5;\n        var pickHeight = pixelSize.y * height * 0.5;\n\n        var offCenter = perspPickingFrustum;\n        offCenter.top = yDir + pickHeight;\n        offCenter.bottom = yDir - pickHeight;\n        offCenter.right = xDir + pickWidth;\n        offCenter.left = xDir - pickWidth;\n        offCenter.near = near;\n        offCenter.far = frustum.far;\n\n        return offCenter.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    }\n\n    function getPickCullingVolume(scene, drawingBufferPosition, width, height, viewport) {\n        var frustum = scene.camera.frustum;\n        if (frustum instanceof OrthographicFrustum || frustum instanceof OrthographicOffCenterFrustum) {\n            return getPickOrthographicCullingVolume(scene, drawingBufferPosition, width, height, viewport);\n        }\n\n        return getPickPerspectiveCullingVolume(scene, drawingBufferPosition, width, height, viewport);\n    }\n\n    // pick rectangle width and height, assumed odd\n    var rectangleWidth = 3.0;\n    var rectangleHeight = 3.0;\n    var scratchRectangle = new BoundingRectangle(0.0, 0.0, rectangleWidth, rectangleHeight);\n    var scratchColorZero = new Color(0.0, 0.0, 0.0, 0.0);\n    var scratchPosition = new Cartesian2();\n\n    /**\n     * Returns an object with a `primitive` property that contains the first (top) primitive in the scene\n     * at a particular window coordinate or undefined if nothing is at the location. Other properties may\n     * potentially be set depending on the type of primitive and may be used to further identify the picked object.\n     * <p>\n     * When a feature of a 3D Tiles tileset is picked, <code>pick</code> returns a {@link Cesium3DTileFeature} object.\n     * </p>\n     *\n     * @example\n     * // On mouse over, color the feature yellow.\n     * handler.setInputAction(function(movement) {\n     *     var feature = scene.pick(movement.endPosition);\n     *     if (feature instanceof Cesium.Cesium3DTileFeature) {\n     *         feature.color = Cesium.Color.YELLOW;\n     *     }\n     * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n     *\n     * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n     * @param {Number} [width=3] Width of the pick rectangle.\n     * @param {Number} [height=3] Height of the pick rectangle.\n     * @returns {Object} Object containing the picked primitive.\n     */\n    Scene.prototype.pick = function(windowPosition, width, height) {\n        \n\n        rectangleWidth = defaultValue(width, 3.0);\n        rectangleHeight = defaultValue(height, rectangleWidth);\n\n        var context = this._context;\n        var us = context.uniformState;\n        var frameState = this._frameState;\n\n        var view = this._defaultView;\n        this._view = view;\n\n        var viewport = view.viewport;\n        viewport.x = 0;\n        viewport.y = 0;\n        viewport.width = context.drawingBufferWidth;\n        viewport.height = context.drawingBufferHeight;\n\n        var passState = view.passState;\n        passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n\n        var drawingBufferPosition = SceneTransforms.transformWindowToDrawingBuffer(this, windowPosition, scratchPosition);\n\n        this._jobScheduler.disableThisFrame();\n\n        updateFrameState(this);\n        frameState.cullingVolume = getPickCullingVolume(this, drawingBufferPosition, rectangleWidth, rectangleHeight, viewport);\n        frameState.invertClassification = false;\n        frameState.passes.pick = true;\n        frameState.tilesetPassState = pickTilesetPassState;\n\n        us.update(frameState);\n\n        updateEnvironment(this);\n\n        scratchRectangle.x = drawingBufferPosition.x - ((rectangleWidth - 1.0) * 0.5);\n        scratchRectangle.y = (this.drawingBufferHeight - drawingBufferPosition.y) - ((rectangleHeight - 1.0) * 0.5);\n        scratchRectangle.width = rectangleWidth;\n        scratchRectangle.height = rectangleHeight;\n        passState = view.pickFramebuffer.begin(scratchRectangle, view.viewport);\n\n        updateAndExecuteCommands(this, passState, scratchColorZero);\n        resolveFramebuffers(this, passState);\n\n        var object = view.pickFramebuffer.end(scratchRectangle);\n        context.endFrame();\n        return object;\n    };\n\n    function renderTranslucentDepthForPick(scene, drawingBufferPosition) {\n        // PERFORMANCE_IDEA: render translucent only and merge with the previous frame\n        var context = scene._context;\n        var frameState = scene._frameState;\n        var environmentState = scene._environmentState;\n\n        var view = scene._defaultView;\n        scene._view = view;\n\n        var viewport = view.viewport;\n        viewport.x = 0;\n        viewport.y = 0;\n        viewport.width = context.drawingBufferWidth;\n        viewport.height = context.drawingBufferHeight;\n\n        var passState = view.passState;\n        passState.viewport = BoundingRectangle.clone(viewport, passState.viewport);\n\n        clearPasses(frameState.passes);\n        frameState.passes.pick = true;\n        frameState.passes.depth = true;\n        frameState.cullingVolume = getPickCullingVolume(scene, drawingBufferPosition, 1, 1, viewport);\n        frameState.tilesetPassState = pickTilesetPassState;\n\n        updateEnvironment(scene);\n        environmentState.renderTranslucentDepthForPick = true;\n        passState = view.pickDepthFramebuffer.update(context, drawingBufferPosition, viewport);\n\n        updateAndExecuteCommands(scene, passState, scratchColorZero);\n        resolveFramebuffers(scene, passState);\n\n        context.endFrame();\n    }\n\n    /**\n     * Returns the cartesian position reconstructed from the depth buffer and window position.\n     * The returned position is in world coordinates. Used internally by camera functions to\n     * prevent conversion to projected 2D coordinates and then back.\n     * <p>\n     * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n     * translucent primitives; otherwise, this essentially picks through translucent primitives.\n     * </p>\n     *\n     * @private\n     *\n     * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n     * @param {Cartesian3} [result] The object on which to restore the result.\n     * @returns {Cartesian3} The cartesian position in world coordinates.\n     *\n     * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n     */\n    Scene.prototype.pickPositionWorldCoordinates = function(windowPosition, result) {\n        if (!this.useDepthPicking) {\n            return undefined;\n        }\n\n        \n\n        var cacheKey = windowPosition.toString();\n\n        if (this._pickPositionCacheDirty){\n            this._pickPositionCache = {};\n            this._pickPositionCacheDirty = false;\n        } else if (this._pickPositionCache.hasOwnProperty(cacheKey)){\n            return Cartesian3.clone(this._pickPositionCache[cacheKey], result);\n        }\n\n        var frameState = this._frameState;\n        var context = this._context;\n        var uniformState = context.uniformState;\n\n        var view = this._defaultView;\n        this._view = view;\n\n        var drawingBufferPosition = SceneTransforms.transformWindowToDrawingBuffer(this, windowPosition, scratchPosition);\n        if (this.pickTranslucentDepth) {\n            renderTranslucentDepthForPick(this, drawingBufferPosition);\n        } else {\n            updateFrameState(this, frameState.frameNumber, frameState.time);\n            uniformState.update(frameState);\n            updateEnvironment(this);\n        }\n        drawingBufferPosition.y = this.drawingBufferHeight - drawingBufferPosition.y;\n\n        var camera = this.camera;\n\n        // Create a working frustum from the original camera frustum.\n        var frustum;\n        if (defined(camera.frustum.fov)) {\n            frustum = camera.frustum.clone(scratchPerspectiveFrustum);\n        } else if (defined(camera.frustum.infiniteProjectionMatrix)){\n            frustum = camera.frustum.clone(scratchPerspectiveOffCenterFrustum);\n        } else if (defined(camera.frustum.width)) {\n            frustum = camera.frustum.clone(scratchOrthographicFrustum);\n        } else {\n            frustum = camera.frustum.clone(scratchOrthographicOffCenterFrustum);\n        }\n\n        var frustumCommandsList = view.frustumCommandsList;\n        var numFrustums = frustumCommandsList.length;\n        for (var i = 0; i < numFrustums; ++i) {\n            var pickDepth = getPickDepth(this, i);\n            var depth = pickDepth.getDepth(context, drawingBufferPosition.x, drawingBufferPosition.y);\n            if (depth > 0.0 && depth < 1.0) {\n                var renderedFrustum = frustumCommandsList[i];\n                var height2D;\n                if (this.mode === SceneMode.SCENE2D) {\n                    height2D = camera.position.z;\n                    camera.position.z = height2D - renderedFrustum.near + 1.0;\n                    frustum.far = Math.max(1.0, renderedFrustum.far - renderedFrustum.near);\n                    frustum.near = 1.0;\n                    uniformState.update(frameState);\n                    uniformState.updateFrustum(frustum);\n                } else {\n                    frustum.near = renderedFrustum.near * (i !== 0 ? this.opaqueFrustumNearOffset : 1.0);\n                    frustum.far = renderedFrustum.far;\n                    uniformState.updateFrustum(frustum);\n                }\n\n                result = SceneTransforms.drawingBufferToWgs84Coordinates(this, drawingBufferPosition, depth, result);\n\n                if (this.mode === SceneMode.SCENE2D) {\n                    camera.position.z = height2D;\n                    uniformState.update(frameState);\n                }\n\n                this._pickPositionCache[cacheKey] = Cartesian3.clone(result);\n                return result;\n            }\n        }\n\n        this._pickPositionCache[cacheKey] = undefined;\n        return undefined;\n    };\n\n    var scratchPickPositionCartographic = new Cartographic();\n\n    /**\n     * Returns the cartesian position reconstructed from the depth buffer and window position.\n     * <p>\n     * The position reconstructed from the depth buffer in 2D may be slightly different from those\n     * reconstructed in 3D and Columbus view. This is caused by the difference in the distribution\n     * of depth values of perspective and orthographic projection.\n     * </p>\n     * <p>\n     * Set {@link Scene#pickTranslucentDepth} to <code>true</code> to include the depth of\n     * translucent primitives; otherwise, this essentially picks through translucent primitives.\n     * </p>\n     *\n     * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n     * @param {Cartesian3} [result] The object on which to restore the result.\n     * @returns {Cartesian3} The cartesian position.\n     *\n     * @exception {DeveloperError} Picking from the depth buffer is not supported. Check pickPositionSupported.\n     */\n    Scene.prototype.pickPosition = function(windowPosition, result) {\n        result = this.pickPositionWorldCoordinates(windowPosition, result);\n        if (defined(result) && this.mode !== SceneMode.SCENE3D) {\n            Cartesian3.fromElements(result.y, result.z, result.x, result);\n\n            var projection = this.mapProjection;\n            var ellipsoid = projection.ellipsoid;\n\n            var cart = projection.unproject(result, scratchPickPositionCartographic);\n            ellipsoid.cartographicToCartesian(cart, result);\n        }\n\n        return result;\n    };\n\n    function drillPick(limit, pickCallback) {\n        // PERFORMANCE_IDEA: This function calls each primitive's update for each pass. Instead\n        // we could update the primitive once, and then just execute their commands for each pass,\n        // and cull commands for picked primitives.  e.g., base on the command's owner.\n        var i;\n        var attributes;\n        var result = [];\n        var pickedPrimitives = [];\n        var pickedAttributes = [];\n        var pickedFeatures = [];\n        if (!defined(limit)) {\n            limit = Number.MAX_VALUE;\n        }\n\n        var pickedResult = pickCallback();\n        while (defined(pickedResult)) {\n            var object = pickedResult.object;\n            var position = pickedResult.position;\n            var exclude = pickedResult.exclude;\n\n            if (defined(position) && !defined(object)) {\n                result.push(pickedResult);\n                break;\n            }\n\n            if (!defined(object) || !defined(object.primitive)) {\n                break;\n            }\n\n            if (!exclude) {\n                result.push(pickedResult);\n                if (0 >= --limit) {\n                    break;\n                }\n            }\n\n            var primitive = object.primitive;\n            var hasShowAttribute = false;\n\n            // If the picked object has a show attribute, use it.\n            if (typeof primitive.getGeometryInstanceAttributes === 'function') {\n                if (defined(object.id)) {\n                    attributes = primitive.getGeometryInstanceAttributes(object.id);\n                    if (defined(attributes) && defined(attributes.show)) {\n                        hasShowAttribute = true;\n                        attributes.show = ShowGeometryInstanceAttribute.toValue(false, attributes.show);\n                        pickedAttributes.push(attributes);\n                    }\n                }\n            }\n\n            if (object instanceof Cesium3DTileFeature) {\n                hasShowAttribute = true;\n                object.show = false;\n                pickedFeatures.push(object);\n            }\n\n            // Otherwise, hide the entire primitive\n            if (!hasShowAttribute) {\n                primitive.show = false;\n                pickedPrimitives.push(primitive);\n            }\n\n            pickedResult = pickCallback();\n        }\n\n        // Unhide everything we hid while drill picking\n        for (i = 0; i < pickedPrimitives.length; ++i) {\n            pickedPrimitives[i].show = true;\n        }\n\n        for (i = 0; i < pickedAttributes.length; ++i) {\n            attributes = pickedAttributes[i];\n            attributes.show = ShowGeometryInstanceAttribute.toValue(true, attributes.show);\n        }\n\n        for (i = 0; i < pickedFeatures.length; ++i) {\n            pickedFeatures[i].show = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a list of objects, each containing a `primitive` property, for all primitives at\n     * a particular window coordinate position. Other properties may also be set depending on the\n     * type of primitive and may be used to further identify the picked object. The primitives in\n     * the list are ordered by their visual order in the scene (front to back).\n     *\n     * @param {Cartesian2} windowPosition Window coordinates to perform picking on.\n     * @param {Number} [limit] If supplied, stop drilling after collecting this many picks.\n     * @param {Number} [width=3] Width of the pick rectangle.\n     * @param {Number} [height=3] Height of the pick rectangle.\n     * @returns {Object[]} Array of objects, each containing 1 picked primitives.\n     *\n     * @exception {DeveloperError} windowPosition is undefined.\n     *\n     * @example\n     * var pickedObjects = scene.drillPick(new Cesium.Cartesian2(100.0, 200.0));\n     *\n     * @see Scene#pick\n     */\n    Scene.prototype.drillPick = function(windowPosition, limit, width, height) {\n        var that = this;\n        var pickCallback = function() {\n            var object = that.pick(windowPosition, width, height);\n            if (defined(object)) {\n                return {\n                    object : object,\n                    position : undefined,\n                    exclude : false\n                };\n            }\n        };\n        var objects = drillPick(limit, pickCallback);\n        return objects.map(function(element) {\n            return element.object;\n        });\n    };\n\n    function updatePreloadPass(scene) {\n        var frameState = scene._frameState;\n        preloadTilesetPassState.camera = frameState.camera;\n        preloadTilesetPassState.cullingVolume = frameState.cullingVolume;\n\n        var primitives = scene.primitives;\n        primitives.updateForPass(frameState, preloadTilesetPassState);\n    }\n\n    function updatePreloadFlightPass(scene) {\n        var frameState = scene._frameState;\n        var camera = frameState.camera;\n        if (!camera.hasCurrentFlight()) {\n            return;\n        }\n\n        preloadFlightTilesetPassState.camera = scene.preloadFlightCamera;\n        preloadFlightTilesetPassState.cullingVolume = scene.preloadFlightCullingVolume;\n\n        var primitives = scene.primitives;\n        primitives.updateForPass(frameState, preloadFlightTilesetPassState);\n    }\n\n    function updateRequestRenderModeDeferCheckPass(scene) {\n        // Check if any ignored requests are ready to go (to wake rendering up again)\n        scene.primitives.updateForPass(scene._frameState, requestRenderModeDeferCheckPassState);\n    }\n\n    var scratchRight = new Cartesian3();\n    var scratchUp = new Cartesian3();\n\n    function updateOffscreenCameraFromRay(scene, ray, width, camera) {\n        var direction = ray.direction;\n        var orthogonalAxis = Cartesian3.mostOrthogonalAxis(direction, scratchRight);\n        var right = Cartesian3.cross(direction, orthogonalAxis, scratchRight);\n        var up = Cartesian3.cross(direction, right, scratchUp);\n\n        camera.position = ray.origin;\n        camera.direction = direction;\n        camera.up = up;\n        camera.right = right;\n\n        camera.frustum.width = defaultValue(width, scene.pickOffscreenDefaultWidth);\n        return camera.frustum.computeCullingVolume(camera.positionWC, camera.directionWC, camera.upWC);\n    }\n\n    function updateMostDetailedRayPick(scene, rayPick) {\n        var frameState = scene._frameState;\n\n        var ray = rayPick.ray;\n        var width = rayPick.width;\n        var tilesets = rayPick.tilesets;\n\n        var camera = scene._pickOffscreenView.camera;\n        var cullingVolume = updateOffscreenCameraFromRay(scene, ray, width, camera);\n\n        var tilesetPassState = mostDetailedPreloadTilesetPassState;\n        tilesetPassState.camera = camera;\n        tilesetPassState.cullingVolume = cullingVolume;\n\n        var ready = true;\n        var tilesetsLength = tilesets.length;\n        for (var i = 0; i < tilesetsLength; ++i) {\n            var tileset = tilesets[i];\n            if (tileset.show && scene.primitives.contains(tileset)) {\n                // Only update tilesets that are still contained in the scene's primitive collection and are still visible\n                // Update tilesets continually until all tilesets are ready. This way tiles are never removed from the cache.\n                tileset.updateForPass(frameState, tilesetPassState);\n                ready = (ready && tilesetPassState.ready);\n            }\n        }\n\n        if (ready) {\n            rayPick.deferred.resolve();\n        }\n\n        return ready;\n    }\n\n    function updateMostDetailedRayPicks(scene) {\n        // Modifies array during iteration\n        var rayPicks = scene._mostDetailedRayPicks;\n        for (var i = 0; i < rayPicks.length; ++i) {\n            if (updateMostDetailedRayPick(scene, rayPicks[i])) {\n                rayPicks.splice(i--, 1);\n            }\n        }\n    }\n\n    function getTilesets(primitives, objectsToExclude, tilesets) {\n        var length = primitives.length;\n        for (var i = 0; i < length; ++i) {\n            var primitive = primitives.get(i);\n            if (primitive.show) {\n                if ((primitive instanceof Cesium3DTileset)) {\n                    if (!defined(objectsToExclude) || objectsToExclude.indexOf(primitive) === -1) {\n                        tilesets.push(primitive);\n                    }\n                } else if (primitive instanceof PrimitiveCollection) {\n                    getTilesets(primitive, objectsToExclude, tilesets);\n                }\n            }\n        }\n    }\n\n    function launchMostDetailedRayPick(scene, ray, objectsToExclude, width, callback) {\n        var tilesets = [];\n        getTilesets(scene.primitives, objectsToExclude, tilesets);\n        if (tilesets.length === 0) {\n            return when.resolve(callback());\n        }\n\n        var rayPick = new MostDetailedRayPick(ray, width, tilesets);\n        scene._mostDetailedRayPicks.push(rayPick);\n        return rayPick.promise.then(function() {\n            return callback();\n        });\n    }\n\n    function isExcluded(object, objectsToExclude) {\n        if (!defined(object) || !defined(objectsToExclude) || objectsToExclude.length === 0) {\n            return false;\n        }\n        return (objectsToExclude.indexOf(object) > -1) ||\n               (objectsToExclude.indexOf(object.primitive) > -1) ||\n               (objectsToExclude.indexOf(object.id) > -1);\n    }\n\n    function getRayIntersection(scene, ray, objectsToExclude, width, requirePosition, mostDetailed) {\n        var context = scene._context;\n        var uniformState = context.uniformState;\n        var frameState = scene._frameState;\n\n        var view = scene._pickOffscreenView;\n        scene._view = view;\n\n        updateOffscreenCameraFromRay(scene, ray, width, view.camera);\n\n        scratchRectangle = BoundingRectangle.clone(view.viewport, scratchRectangle);\n\n        var passState = view.pickFramebuffer.begin(scratchRectangle, view.viewport);\n\n        scene._jobScheduler.disableThisFrame();\n\n        updateFrameState(scene);\n        frameState.invertClassification = false;\n        frameState.passes.pick = true;\n        frameState.passes.offscreen = true;\n\n        if (mostDetailed) {\n            frameState.tilesetPassState = mostDetailedPickTilesetPassState;\n        } else {\n            frameState.tilesetPassState = pickTilesetPassState;\n        }\n\n        uniformState.update(frameState);\n\n        updateEnvironment(scene, view);\n        updateAndExecuteCommands(scene, passState, scratchColorZero);\n        resolveFramebuffers(scene, passState);\n\n        var position;\n        var object = view.pickFramebuffer.end(context);\n\n        if (scene._context.depthTexture) {\n            var numFrustums = view.frustumCommandsList.length;\n            for (var i = 0; i < numFrustums; ++i) {\n                var pickDepth = getPickDepth(scene, i);\n                var depth = pickDepth.getDepth(context, 0, 0);\n                if (depth > 0.0 && depth < 1.0) {\n                    var renderedFrustum = view.frustumCommandsList[i];\n                    var near = renderedFrustum.near * (i !== 0 ? scene.opaqueFrustumNearOffset : 1.0);\n                    var far = renderedFrustum.far;\n                    var distance = near + depth * (far - near);\n                    position = Ray.getPoint(ray, distance);\n                    break;\n                }\n            }\n        }\n\n        scene._view = scene._defaultView;\n        context.endFrame();\n\n        if (defined(object) || defined(position)) {\n            return {\n                object : object,\n                position : position,\n                exclude : (!defined(position) && requirePosition) || isExcluded(object, objectsToExclude)\n            };\n        }\n    }\n\n    function getRayIntersections(scene, ray, limit, objectsToExclude, width, requirePosition, mostDetailed) {\n        var pickCallback = function() {\n            return getRayIntersection(scene, ray, objectsToExclude, width, requirePosition, mostDetailed);\n        };\n        return drillPick(limit, pickCallback);\n    }\n\n    function pickFromRay(scene, ray, objectsToExclude, width, requirePosition, mostDetailed) {\n        var results = getRayIntersections(scene, ray, 1, objectsToExclude, width, requirePosition, mostDetailed);\n        if (results.length > 0) {\n            return results[0];\n        }\n    }\n\n    function drillPickFromRay(scene, ray, limit, objectsToExclude, width, requirePosition, mostDetailed) {\n        return getRayIntersections(scene, ray, limit, objectsToExclude, width, requirePosition, mostDetailed);\n    }\n\n    function deferPromiseUntilPostRender(scene, promise) {\n        // Resolve promise after scene's postRender in case entities are created when the promise resolves.\n        // Entities can't be created between viewer._onTick and viewer._postRender.\n        var deferred = when.defer();\n        promise.then(function(result) {\n            var removeCallback = scene.postRender.addEventListener(function() {\n                deferred.resolve(result);\n                removeCallback();\n            });\n        });\n        return deferred.promise;\n    }\n\n    /**\n     * Returns an object containing the first object intersected by the ray and the position of intersection,\n     * or <code>undefined</code> if there were no intersections. The intersected object has a <code>primitive</code>\n     * property that contains the intersected primitive. Other properties may be set depending on the type of primitive\n     * and may be used to further identify the picked object. The ray must be given in world coordinates.\n     * <p>\n     * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n     * primitives regardless of their visibility.\n     * </p>\n     *\n     * @private\n     *\n     * @param {Ray} ray The ray.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Object} An object containing the object and position of the first intersection.\n     *\n     * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n     */\n    Scene.prototype.pickFromRay = function(ray, objectsToExclude, width) {\n        \n        return pickFromRay(this, ray, objectsToExclude, width, false, false);\n    };\n\n    /**\n     * Returns a list of objects, each containing the object intersected by the ray and the position of intersection.\n     * The intersected object has a <code>primitive</code> property that contains the intersected primitive. Other\n     * properties may also be set depending on the type of primitive and may be used to further identify the picked object.\n     * The primitives in the list are ordered by first intersection to last intersection. The ray must be given in\n     * world coordinates.\n     * <p>\n     * This function only picks globe tiles and 3D Tiles that are rendered in the current view. Picks all other\n     * primitives regardless of their visibility.\n     * </p>\n     *\n     * @private\n     *\n     * @param {Ray} ray The ray.\n     * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Object[]} List of objects containing the object and position of each intersection.\n     *\n     * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n     */\n    Scene.prototype.drillPickFromRay = function(ray, limit, objectsToExclude, width) {\n        \n        return drillPickFromRay(this, ray, limit, objectsToExclude, width,false, false);\n    };\n\n    /**\n     * Initiates an asynchronous {@link Scene#pickFromRay} request using the maximum level of detail for 3D Tilesets\n     * regardless of visibility.\n     *\n     * @private\n     *\n     * @param {Ray} ray The ray.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Promise.<Object>} A promise that resolves to an object containing the object and position of the first intersection.\n     *\n     * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n     */\n    Scene.prototype.pickFromRayMostDetailed = function(ray, objectsToExclude, width) {\n        \n        var that = this;\n        ray = Ray.clone(ray);\n        objectsToExclude = defined(objectsToExclude) ? objectsToExclude.slice() : objectsToExclude;\n        return deferPromiseUntilPostRender(this, launchMostDetailedRayPick(this, ray, objectsToExclude, width, function() {\n            return pickFromRay(that, ray, objectsToExclude, width, false, true);\n        }));\n    };\n\n    /**\n     * Initiates an asynchronous {@link Scene#drillPickFromRay} request using the maximum level of detail for 3D Tilesets\n     * regardless of visibility.\n     *\n     * @private\n     *\n     * @param {Ray} ray The ray.\n     * @param {Number} [limit=Number.MAX_VALUE] If supplied, stop finding intersections after this many intersections.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to exclude from the ray intersection.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Promise.<Object[]>} A promise that resolves to a list of objects containing the object and position of each intersection.\n     *\n     * @exception {DeveloperError} Ray intersections are only supported in 3D mode.\n     */\n    Scene.prototype.drillPickFromRayMostDetailed = function(ray, limit, objectsToExclude, width) {\n        \n        var that = this;\n        ray = Ray.clone(ray);\n        objectsToExclude = defined(objectsToExclude) ? objectsToExclude.slice() : objectsToExclude;\n        return deferPromiseUntilPostRender(this, launchMostDetailedRayPick(this, ray, objectsToExclude, width, function() {\n            return drillPickFromRay(that, ray, limit, objectsToExclude, width, false, true);\n        }));\n    };\n\n    var scratchSurfacePosition = new Cartesian3();\n    var scratchSurfaceNormal = new Cartesian3();\n    var scratchSurfaceRay = new Ray();\n    var scratchCartographic = new Cartographic();\n\n    function getRayForSampleHeight(scene, cartographic) {\n        var globe = scene.globe;\n        var ellipsoid = defined(globe) ? globe.ellipsoid : scene.mapProjection.ellipsoid;\n        var height = ApproximateTerrainHeights._defaultMaxTerrainHeight;\n        var surfaceNormal = ellipsoid.geodeticSurfaceNormalCartographic(cartographic, scratchSurfaceNormal);\n        var surfacePosition = Cartographic.toCartesian(cartographic, ellipsoid, scratchSurfacePosition);\n        var surfaceRay = scratchSurfaceRay;\n        surfaceRay.origin = surfacePosition;\n        surfaceRay.direction =  surfaceNormal;\n        var ray = new Ray();\n        Ray.getPoint(surfaceRay, height, ray.origin);\n        Cartesian3.negate(surfaceNormal, ray.direction);\n        return ray;\n    }\n\n    function getRayForClampToHeight(scene, cartesian) {\n        var globe = scene.globe;\n        var ellipsoid = defined(globe) ? globe.ellipsoid : scene.mapProjection.ellipsoid;\n        var cartographic = Cartographic.fromCartesian(cartesian, ellipsoid, scratchCartographic);\n        return getRayForSampleHeight(scene, cartographic);\n    }\n\n    function getHeightFromCartesian(scene, cartesian) {\n        var globe = scene.globe;\n        var ellipsoid = defined(globe) ? globe.ellipsoid : scene.mapProjection.ellipsoid;\n        var cartographic = Cartographic.fromCartesian(cartesian, ellipsoid, scratchCartographic);\n        return cartographic.height;\n    }\n\n    function sampleHeightMostDetailed(scene, cartographic, objectsToExclude, width) {\n        var ray = getRayForSampleHeight(scene, cartographic);\n        return launchMostDetailedRayPick(scene, ray, objectsToExclude, width, function() {\n            var pickResult = pickFromRay(scene, ray, objectsToExclude, width, true, true);\n            if (defined(pickResult)) {\n                return getHeightFromCartesian(scene, pickResult.position);\n            }\n        });\n    }\n\n    function clampToHeightMostDetailed(scene, cartesian, objectsToExclude, width, result) {\n        var ray = getRayForClampToHeight(scene, cartesian);\n        return launchMostDetailedRayPick(scene, ray, objectsToExclude, width, function() {\n            var pickResult = pickFromRay(scene, ray, objectsToExclude, width, true, true);\n            if (defined(pickResult)) {\n                return Cartesian3.clone(pickResult.position, result);\n            }\n        });\n    }\n\n    /**\n     * Returns the height of scene geometry at the given cartographic position or <code>undefined</code> if there was no\n     * scene geometry to sample height from. The height of the input position is ignored. May be used to clamp objects to\n     * the globe, 3D Tiles, or primitives in the scene.\n     * <p>\n     * This function only samples height from globe tiles and 3D Tiles that are rendered in the current view. Samples height\n     * from all other primitives regardless of their visibility.\n     * </p>\n     *\n     * @param {Cartographic} position The cartographic position to sample height from.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Number} The height. This may be <code>undefined</code> if there was no scene geometry to sample height from.\n     *\n     * @example\n     * var position = new Cesium.Cartographic(-1.31968, 0.698874);\n     * var height = viewer.scene.sampleHeight(position);\n     * console.log(height);\n     *\n     * @see Scene#clampToHeight\n     * @see Scene#clampToHeightMostDetailed\n     * @see Scene#sampleHeightMostDetailed\n     *\n     * @exception {DeveloperError} sampleHeight is only supported in 3D mode.\n     * @exception {DeveloperError} sampleHeight requires depth texture support. Check sampleHeightSupported.\n     */\n    Scene.prototype.sampleHeight = function(position, objectsToExclude, width) {\n        \n        var ray = getRayForSampleHeight(this, position);\n        var pickResult = pickFromRay(this, ray, objectsToExclude, width, true, false);\n        if (defined(pickResult)) {\n            return getHeightFromCartesian(this, pickResult.position);\n        }\n    };\n\n    /**\n     * Clamps the given cartesian position to the scene geometry along the geodetic surface normal. Returns the\n     * clamped position or <code>undefined</code> if there was no scene geometry to clamp to. May be used to clamp\n     * objects to the globe, 3D Tiles, or primitives in the scene.\n     * <p>\n     * This function only clamps to globe tiles and 3D Tiles that are rendered in the current view. Clamps to\n     * all other primitives regardless of their visibility.\n     * </p>\n     *\n     * @param {Cartesian3} cartesian The cartesian position.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @param {Cartesian3} [result] An optional object to return the clamped position.\n     * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. This may be <code>undefined</code> if there was no scene geometry to clamp to.\n     *\n     * @example\n     * // Clamp an entity to the underlying scene geometry\n     * var position = entity.position.getValue(Cesium.JulianDate.now());\n     * entity.position = viewer.scene.clampToHeight(position);\n     *\n     * @see Scene#sampleHeight\n     * @see Scene#sampleHeightMostDetailed\n     * @see Scene#clampToHeightMostDetailed\n     *\n     * @exception {DeveloperError} clampToHeight is only supported in 3D mode.\n     * @exception {DeveloperError} clampToHeight requires depth texture support. Check clampToHeightSupported.\n     */\n    Scene.prototype.clampToHeight = function(cartesian, objectsToExclude, width, result) {\n        \n\n        var ray = getRayForClampToHeight(this, cartesian);\n        var pickResult = pickFromRay(this, ray, objectsToExclude, width, true, false);\n        if (defined(pickResult)) {\n            return Cartesian3.clone(pickResult.position, result);\n        }\n    };\n\n    /**\n     * Initiates an asynchronous {@link Scene#sampleHeight} query for an array of {@link Cartographic} positions\n     * using the maximum level of detail for 3D Tilesets in the scene. The height of the input positions is ignored.\n     * Returns a promise that is resolved when the query completes. Each point height is modified in place.\n     * If a height cannot be determined because no geometry can be sampled at that location, or another error occurs,\n     * the height is set to undefined.\n     *\n     * @param {Cartographic[]} positions The cartographic positions to update with sampled heights.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not sample height from.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Promise.<Number[]>} A promise that resolves to the provided list of positions when the query has completed.\n     *\n     * @example\n     * var positions = [\n     *     new Cesium.Cartographic(-1.31968, 0.69887),\n     *     new Cesium.Cartographic(-1.10489, 0.83923)\n     * ];\n     * var promise = viewer.scene.sampleHeightMostDetailed(positions);\n     * promise.then(function(updatedPosition) {\n     *     // positions[0].height and positions[1].height have been updated.\n     *     // updatedPositions is just a reference to positions.\n     * }\n     *\n     * @see Scene#sampleHeight\n     *\n     * @exception {DeveloperError} sampleHeightMostDetailed is only supported in 3D mode.\n     * @exception {DeveloperError} sampleHeightMostDetailed requires depth texture support. Check sampleHeightSupported.\n     */\n    Scene.prototype.sampleHeightMostDetailed = function(positions, objectsToExclude, width) {\n        \n        objectsToExclude = defined(objectsToExclude) ? objectsToExclude.slice() : objectsToExclude;\n        var length = positions.length;\n        var promises = new Array(length);\n        for (var i = 0; i < length; ++i) {\n            promises[i] = sampleHeightMostDetailed(this, positions[i], objectsToExclude, width);\n        }\n        return deferPromiseUntilPostRender(this, when.all(promises).then(function(heights) {\n            var length = heights.length;\n            for (var i = 0; i < length; ++i) {\n                positions[i].height = heights[i];\n            }\n            return positions;\n        }));\n    };\n\n    /**\n     * Initiates an asynchronous {@link Scene#clampToHeight} query for an array of {@link Cartesian3} positions\n     * using the maximum level of detail for 3D Tilesets in the scene. Returns a promise that is resolved when\n     * the query completes. Each position is modified in place. If a position cannot be clamped because no geometry\n     * can be sampled at that location, or another error occurs, the element in the array is set to undefined.\n     *\n     * @param {Cartesian3[]} cartesians The cartesian positions to update with clamped positions.\n     * @param {Object[]} [objectsToExclude] A list of primitives, entities, or 3D Tiles features to not clamp to.\n     * @param {Number} [width=0.1] Width of the intersection volume in meters.\n     * @returns {Promise.<Cartesian3[]>} A promise that resolves to the provided list of positions when the query has completed.\n     *\n     * @example\n     * var cartesians = [\n     *     entities[0].position.getValue(Cesium.JulianDate.now()),\n     *     entities[1].position.getValue(Cesium.JulianDate.now())\n     * ];\n     * var promise = viewer.scene.clampToHeightMostDetailed(cartesians);\n     * promise.then(function(updatedCartesians) {\n     *     entities[0].position = updatedCartesians[0];\n     *     entities[1].position = updatedCartesians[1];\n     * }\n     *\n     * @see Scene#clampToHeight\n     *\n     * @exception {DeveloperError} clampToHeightMostDetailed is only supported in 3D mode.\n     * @exception {DeveloperError} clampToHeightMostDetailed requires depth texture support. Check clampToHeightSupported.\n     */\n    Scene.prototype.clampToHeightMostDetailed = function(cartesians, objectsToExclude, width) {\n        \n        objectsToExclude = defined(objectsToExclude) ? objectsToExclude.slice() : objectsToExclude;\n        var length = cartesians.length;\n        var promises = new Array(length);\n        for (var i = 0; i < length; ++i) {\n            promises[i] = clampToHeightMostDetailed(this, cartesians[i], objectsToExclude, width, cartesians[i]);\n        }\n        return deferPromiseUntilPostRender(this, when.all(promises).then(function(clampedCartesians) {\n            var length = clampedCartesians.length;\n            for (var i = 0; i < length; ++i) {\n                cartesians[i] = clampedCartesians[i];\n            }\n            return cartesians;\n        }));\n    };\n\n    /**\n     * Transforms a position in cartesian coordinates to canvas coordinates.  This is commonly used to place an\n     * HTML element at the same screen position as an object in the scene.\n     *\n     * @param {Cartesian3} position The position in cartesian coordinates.\n     * @param {Cartesian2} [result] An optional object to return the input position transformed to canvas coordinates.\n     * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.  This may be <code>undefined</code> if the input position is near the center of the ellipsoid.\n     *\n     * @example\n     * // Output the canvas position of longitude/latitude (0, 0) every time the mouse moves.\n     * var scene = widget.scene;\n     * var ellipsoid = scene.globe.ellipsoid;\n     * var position = Cesium.Cartesian3.fromDegrees(0.0, 0.0);\n     * var handler = new Cesium.ScreenSpaceEventHandler(scene.canvas);\n     * handler.setInputAction(function(movement) {\n     *     console.log(scene.cartesianToCanvasCoordinates(position));\n     * }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n     */\n    Scene.prototype.cartesianToCanvasCoordinates = function(position, result) {\n        return SceneTransforms.wgs84ToWindowCoordinates(this, position, result);\n    };\n\n    /**\n     * Instantly completes an active transition.\n     */\n    Scene.prototype.completeMorph = function(){\n        this._transitioner.completeMorph();\n    };\n\n    /**\n     * Asynchronously transitions the scene to 2D.\n     * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n     */\n    Scene.prototype.morphTo2D = function(duration) {\n        var ellipsoid;\n        var globe = this.globe;\n        if (defined(globe)) {\n            ellipsoid = globe.ellipsoid;\n        } else {\n            ellipsoid = this.mapProjection.ellipsoid;\n        }\n        duration = defaultValue(duration, 2.0);\n        this._transitioner.morphTo2D(duration, ellipsoid);\n    };\n\n    /**\n     * Asynchronously transitions the scene to Columbus View.\n     * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n     */\n    Scene.prototype.morphToColumbusView = function(duration) {\n        var ellipsoid;\n        var globe = this.globe;\n        if (defined(globe)) {\n            ellipsoid = globe.ellipsoid;\n        } else {\n            ellipsoid = this.mapProjection.ellipsoid;\n        }\n        duration = defaultValue(duration, 2.0);\n        this._transitioner.morphToColumbusView(duration, ellipsoid);\n    };\n\n    /**\n     * Asynchronously transitions the scene to 3D.\n     * @param {Number} [duration=2.0] The amount of time, in seconds, for transition animations to complete.\n     */\n    Scene.prototype.morphTo3D = function(duration) {\n        var ellipsoid;\n        var globe = this.globe;\n        if (defined(globe)) {\n            ellipsoid = globe.ellipsoid;\n        } else {\n            ellipsoid = this.mapProjection.ellipsoid;\n        }\n        duration = defaultValue(duration, 2.0);\n        this._transitioner.morphTo3D(duration, ellipsoid);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see Scene#destroy\n     */\n    Scene.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * scene = scene && scene.destroy();\n     *\n     * @see Scene#isDestroyed\n     */\n    Scene.prototype.destroy = function() {\n        this._tweens.removeAll();\n        this._computeEngine = this._computeEngine && this._computeEngine.destroy();\n        this._screenSpaceCameraController = this._screenSpaceCameraController && this._screenSpaceCameraController.destroy();\n        this._deviceOrientationCameraController = this._deviceOrientationCameraController && !this._deviceOrientationCameraController.isDestroyed() && this._deviceOrientationCameraController.destroy();\n        this._primitives = this._primitives && this._primitives.destroy();\n        this._groundPrimitives = this._groundPrimitives && this._groundPrimitives.destroy();\n        this._globe = this._globe && this._globe.destroy();\n        this.skyBox = this.skyBox && this.skyBox.destroy();\n        this.skyAtmosphere = this.skyAtmosphere && this.skyAtmosphere.destroy();\n        this._debugSphere = this._debugSphere && this._debugSphere.destroy();\n        this.sun = this.sun && this.sun.destroy();\n        this._sunPostProcess = this._sunPostProcess && this._sunPostProcess.destroy();\n        this._depthPlane = this._depthPlane && this._depthPlane.destroy();\n        this._transitioner = this._transitioner && this._transitioner.destroy();\n        this._debugFrustumPlanes = this._debugFrustumPlanes && this._debugFrustumPlanes.destroy();\n        this._brdfLutGenerator = this._brdfLutGenerator && this._brdfLutGenerator.destroy();\n\n        this._defaultView = this._defaultView && this._defaultView.destroy();\n        this._pickOffscreenView = this._pickOffscreenView && this._pickOffscreenView.destroy();\n        this._view = undefined;\n\n        if (this._removeCreditContainer) {\n            this._canvas.parentNode.removeChild(this._creditContainer);\n        }\n\n        this.postProcessStages = this.postProcessStages && this.postProcessStages.destroy();\n\n        this._context = this._context && this._context.destroy();\n        this._frameState.creditDisplay = this._frameState.creditDisplay && this._frameState.creditDisplay.destroy();\n\n        if (defined(this._performanceDisplay)){\n            this._performanceDisplay = this._performanceDisplay && this._performanceDisplay.destroy();\n            this._performanceContainer.parentNode.removeChild(this._performanceContainer);\n        }\n\n        this._removeRequestListenerCallback();\n        this._removeTaskProcessorListenerCallback();\n        for (var i = 0; i < this._removeGlobeCallbacks.length; ++i) {\n            this._removeGlobeCallbacks[i]();\n        }\n        this._removeGlobeCallbacks.length = 0;\n\n        return destroyObject(this);\n    };\n\n    return Scene;\n});\n","define([\n        './defined',\n        './DeveloperError'\n    ], function(\n        defined,\n        DeveloperError) {\n    'use strict';\n\n    var leftScratchArray = [];\n    var rightScratchArray = [];\n\n    function merge(array, compare, userDefinedObject, start, middle, end) {\n        var leftLength = middle - start + 1;\n        var rightLength = end - middle;\n\n        var left = leftScratchArray;\n        var right = rightScratchArray;\n\n        var i;\n        var j;\n\n        for (i = 0; i < leftLength; ++i) {\n            left[i] = array[start + i];\n        }\n\n        for (j = 0; j < rightLength; ++j) {\n            right[j] = array[middle + j + 1];\n        }\n\n        i = 0;\n        j = 0;\n        for (var k = start; k <= end; ++k) {\n            var leftElement = left[i];\n            var rightElement = right[j];\n            if (i < leftLength && (j >= rightLength || compare(leftElement, rightElement, userDefinedObject) <= 0)) {\n                array[k] = leftElement;\n                ++i;\n            } else if (j < rightLength) {\n                array[k] = rightElement;\n                ++j;\n            }\n        }\n    }\n\n    function sort(array, compare, userDefinedObject, start, end) {\n        if (start >= end) {\n            return;\n        }\n\n        var middle = Math.floor((start + end) * 0.5);\n        sort(array, compare, userDefinedObject, start, middle);\n        sort(array, compare, userDefinedObject, middle + 1, end);\n        merge(array, compare, userDefinedObject, start, middle, end);\n    }\n\n    /**\n     * A stable merge sort.\n     *\n     * @exports mergeSort\n     * @param {Array} array The array to sort.\n     * @param {mergeSort~Comparator} comparator The function to use to compare elements in the array.\n     * @param {*} [userDefinedObject] Any item to pass as the third parameter to <code>comparator</code>.\n     *\n     * @example\n     * // Assume array contains BoundingSpheres in world coordinates.\n     * // Sort them in ascending order of distance from the camera.\n     * var position = camera.positionWC;\n     * Cesium.mergeSort(array, function(a, b, position) {\n     *     return Cesium.BoundingSphere.distanceSquaredTo(b, position) - Cesium.BoundingSphere.distanceSquaredTo(a, position);\n     * }, position);\n     */\n    function mergeSort(array, comparator, userDefinedObject) {\n        \n\n        var length = array.length;\n        var scratchLength = Math.ceil(length * 0.5);\n\n        // preallocate space in scratch arrays\n        leftScratchArray.length = scratchLength;\n        rightScratchArray.length = scratchLength;\n\n        sort(array, comparator, userDefinedObject, 0, length - 1);\n\n        // trim scratch arrays\n        leftScratchArray.length = 0;\n        rightScratchArray.length = 0;\n    }\n\n    /**\n     * A function used to compare two items while performing a merge sort.\n     * @callback mergeSort~Comparator\n     *\n     * @param {*} a An item in the array.\n     * @param {*} b An item in the array.\n     * @param {*} [userDefinedObject] An object that was passed to {@link mergeSort}.\n     * @returns {Number} Returns a negative value if <code>a</code> is less than <code>b</code>,\n     *          a positive value if <code>a</code> is greater than <code>b</code>, or\n     *          0 if <code>a</code> is equal to <code>b</code>.\n     *\n     * @example\n     * function compareNumbers(a, b, userDefinedObject) {\n     *     return a - b;\n     * }\n     */\n\n    return mergeSort;\n});\n","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './defaultValue',\n        './defined',\n        './defineProperties',\n        './DeveloperError',\n        './Ellipsoid',\n        './Math',\n        './Rectangle',\n        './Visibility'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        Ellipsoid,\n        CesiumMath,\n        Rectangle,\n        Visibility) {\n    'use strict';\n\n    /**\n     * Creates an Occluder derived from an object's position and radius, as well as the camera position.\n     * The occluder can be used to determine whether or not other objects are visible or hidden behind the\n     * visible horizon defined by the occluder and camera position.\n     *\n     * @alias Occluder\n     *\n     * @param {BoundingSphere} occluderBoundingSphere The bounding sphere surrounding the occluder.\n     * @param {Cartesian3} cameraPosition The coordinate of the viewer/camera.\n     *\n     * @constructor\n     *\n     * @example\n     * // Construct an occluder one unit away from the origin with a radius of one.\n     * var cameraPosition = Cesium.Cartesian3.ZERO;\n     * var occluderBoundingSphere = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -1), 1);\n     * var occluder = new Cesium.Occluder(occluderBoundingSphere, cameraPosition);\n     */\n    function Occluder(occluderBoundingSphere, cameraPosition) {\n        \n\n        this._occluderPosition = Cartesian3.clone(occluderBoundingSphere.center);\n        this._occluderRadius = occluderBoundingSphere.radius;\n\n        this._horizonDistance = 0.0;\n        this._horizonPlaneNormal = undefined;\n        this._horizonPlanePosition = undefined;\n        this._cameraPosition = undefined;\n\n        // cameraPosition fills in the above values\n        this.cameraPosition = cameraPosition;\n    }\n\n    var scratchCartesian3 = new Cartesian3();\n\n    defineProperties(Occluder.prototype, {\n        /**\n         * The position of the occluder.\n         * @memberof Occluder.prototype\n         * @type {Cartesian3}\n         */\n        position: {\n            get: function() {\n                return this._occluderPosition;\n            }\n        },\n\n        /**\n         * The radius of the occluder.\n         * @memberof Occluder.prototype\n         * @type {Number}\n         */\n        radius: {\n            get: function() {\n                return this._occluderRadius;\n            }\n        },\n\n        /**\n         * The position of the camera.\n         * @memberof Occluder.prototype\n         * @type {Cartesian3}\n         */\n        cameraPosition: {\n            set: function(cameraPosition) {\n                \n\n                cameraPosition = Cartesian3.clone(cameraPosition, this._cameraPosition);\n\n                var cameraToOccluderVec = Cartesian3.subtract(this._occluderPosition, cameraPosition, scratchCartesian3);\n                var invCameraToOccluderDistance = Cartesian3.magnitudeSquared(cameraToOccluderVec);\n                var occluderRadiusSqrd = this._occluderRadius * this._occluderRadius;\n\n                var horizonDistance;\n                var horizonPlaneNormal;\n                var horizonPlanePosition;\n                if (invCameraToOccluderDistance > occluderRadiusSqrd) {\n                    horizonDistance = Math.sqrt(invCameraToOccluderDistance - occluderRadiusSqrd);\n                    invCameraToOccluderDistance = 1.0 / Math.sqrt(invCameraToOccluderDistance);\n                    horizonPlaneNormal = Cartesian3.multiplyByScalar(cameraToOccluderVec, invCameraToOccluderDistance, scratchCartesian3);\n                    var nearPlaneDistance = horizonDistance * horizonDistance * invCameraToOccluderDistance;\n                    horizonPlanePosition = Cartesian3.add(cameraPosition, Cartesian3.multiplyByScalar(horizonPlaneNormal, nearPlaneDistance, scratchCartesian3), scratchCartesian3);\n                } else {\n                    horizonDistance = Number.MAX_VALUE;\n                }\n\n                this._horizonDistance = horizonDistance;\n                this._horizonPlaneNormal = horizonPlaneNormal;\n                this._horizonPlanePosition = horizonPlanePosition;\n                this._cameraPosition = cameraPosition;\n            }\n        }\n    });\n\n    /**\n     * Creates an occluder from a bounding sphere and the camera position.\n     *\n     * @param {BoundingSphere} occluderBoundingSphere The bounding sphere surrounding the occluder.\n     * @param {Cartesian3} cameraPosition The coordinate of the viewer/camera.\n     * @param {Occluder} [result] The object onto which to store the result.\n     * @returns {Occluder} The occluder derived from an object's position and radius, as well as the camera position.\n     */\n    Occluder.fromBoundingSphere = function(occluderBoundingSphere, cameraPosition, result) {\n        \n\n        if (!defined(result)) {\n            return new Occluder(occluderBoundingSphere, cameraPosition);\n        }\n\n        Cartesian3.clone(occluderBoundingSphere.center, result._occluderPosition);\n        result._occluderRadius = occluderBoundingSphere.radius;\n        result.cameraPosition = cameraPosition;\n\n        return result;\n    };\n\n    var tempVecScratch = new Cartesian3();\n\n    /**\n     * Determines whether or not a point, the <code>occludee</code>, is hidden from view by the occluder.\n     *\n     * @param {Cartesian3} occludee The point surrounding the occludee object.\n     * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n     *\n     *\n     * @example\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 0);\n     * var littleSphere = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -1), 0.25);\n     * var occluder = new Cesium.Occluder(littleSphere, cameraPosition);\n     * var point = new Cesium.Cartesian3(0, 0, -3);\n     * occluder.isPointVisible(point); //returns true\n     *\n     * @see Occluder#computeVisibility\n     */\n    Occluder.prototype.isPointVisible = function(occludee) {\n        if (this._horizonDistance !== Number.MAX_VALUE) {\n            var tempVec = Cartesian3.subtract(occludee, this._occluderPosition, tempVecScratch);\n            var temp = this._occluderRadius;\n            temp = Cartesian3.magnitudeSquared(tempVec) - (temp * temp);\n            if (temp > 0.0) {\n                temp = Math.sqrt(temp) + this._horizonDistance;\n                tempVec = Cartesian3.subtract(occludee, this._cameraPosition, tempVec);\n                return temp * temp > Cartesian3.magnitudeSquared(tempVec);\n            }\n        }\n        return false;\n    };\n\n    var occludeePositionScratch = new Cartesian3();\n\n    /**\n    * Determines whether or not a sphere, the <code>occludee</code>, is hidden from view by the occluder.\n    *\n    * @param {BoundingSphere} occludee The bounding sphere surrounding the occludee object.\n    * @returns {Boolean} <code>true</code> if the occludee is visible; otherwise <code>false</code>.\n    *\n    *\n    * @example\n    * var cameraPosition = new Cesium.Cartesian3(0, 0, 0);\n    * var littleSphere = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -1), 0.25);\n    * var occluder = new Cesium.Occluder(littleSphere, cameraPosition);\n    * var bigSphere = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -3), 1);\n    * occluder.isBoundingSphereVisible(bigSphere); //returns true\n    *\n    * @see Occluder#computeVisibility\n    */\n    Occluder.prototype.isBoundingSphereVisible = function(occludee) {\n        var occludeePosition = Cartesian3.clone(occludee.center, occludeePositionScratch);\n        var occludeeRadius = occludee.radius;\n\n        if (this._horizonDistance !== Number.MAX_VALUE) {\n            var tempVec = Cartesian3.subtract(occludeePosition, this._occluderPosition, tempVecScratch);\n            var temp = this._occluderRadius - occludeeRadius;\n            temp = Cartesian3.magnitudeSquared(tempVec) - (temp * temp);\n            if (occludeeRadius < this._occluderRadius) {\n                if (temp > 0.0) {\n                    temp = Math.sqrt(temp) + this._horizonDistance;\n                    tempVec = Cartesian3.subtract(occludeePosition, this._cameraPosition, tempVec);\n                    return ((temp * temp) + (occludeeRadius * occludeeRadius)) > Cartesian3.magnitudeSquared(tempVec);\n                }\n                return false;\n            }\n\n            // Prevent against the case where the occludee radius is larger than the occluder's; since this is\n            // an uncommon case, the following code should rarely execute.\n            if (temp > 0.0) {\n                tempVec = Cartesian3.subtract(occludeePosition, this._cameraPosition, tempVec);\n                var tempVecMagnitudeSquared = Cartesian3.magnitudeSquared(tempVec);\n                var occluderRadiusSquared = this._occluderRadius * this._occluderRadius;\n                var occludeeRadiusSquared = occludeeRadius * occludeeRadius;\n                if ((((this._horizonDistance * this._horizonDistance) + occluderRadiusSquared) * occludeeRadiusSquared) >\n                    (tempVecMagnitudeSquared * occluderRadiusSquared)) {\n                    // The occludee is close enough that the occluder cannot possible occlude the occludee\n                    return true;\n                }\n                temp = Math.sqrt(temp) + this._horizonDistance;\n                return ((temp * temp) + occludeeRadiusSquared) > tempVecMagnitudeSquared;\n            }\n\n            // The occludee completely encompasses the occluder\n            return true;\n        }\n\n        return false;\n    };\n\n    var tempScratch = new Cartesian3();\n    /**\n     * Determine to what extent an occludee is visible (not visible, partially visible,  or fully visible).\n     *\n     * @param {BoundingSphere} occludeeBS The bounding sphere of the occludee.\n     * @returns {Number} Visibility.NONE if the occludee is not visible,\n     *                       Visibility.PARTIAL if the occludee is partially visible, or\n     *                       Visibility.FULL if the occludee is fully visible.\n     *\n     *\n     * @example\n     * var sphere1 = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -1.5), 0.5);\n     * var sphere2 = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -2.5), 0.5);\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 0);\n     * var occluder = new Cesium.Occluder(sphere1, cameraPosition);\n     * occluder.computeVisibility(sphere2); //returns Visibility.NONE\n     *\n     * @see Occluder#isVisible\n     */\n    Occluder.prototype.computeVisibility = function(occludeeBS) {\n        \n\n        // If the occludee radius is larger than the occluders, this will return that\n        // the entire ocludee is visible, even though that may not be the case, though this should\n        // not occur too often.\n        var occludeePosition = Cartesian3.clone(occludeeBS.center);\n        var occludeeRadius = occludeeBS.radius;\n\n        if (occludeeRadius > this._occluderRadius) {\n            return Visibility.FULL;\n        }\n\n        if (this._horizonDistance !== Number.MAX_VALUE) {\n            // The camera is outside the occluder\n            var tempVec = Cartesian3.subtract(occludeePosition, this._occluderPosition, tempScratch);\n            var temp = this._occluderRadius - occludeeRadius;\n            var occluderToOccludeeDistSqrd = Cartesian3.magnitudeSquared(tempVec);\n            temp = occluderToOccludeeDistSqrd - (temp * temp);\n            if (temp > 0.0) {\n                // The occludee is not completely inside the occluder\n                // Check to see if the occluder completely hides the occludee\n                temp = Math.sqrt(temp) + this._horizonDistance;\n                tempVec = Cartesian3.subtract(occludeePosition, this._cameraPosition, tempVec);\n                var cameraToOccludeeDistSqrd = Cartesian3.magnitudeSquared(tempVec);\n                if (((temp * temp) + (occludeeRadius * occludeeRadius)) < cameraToOccludeeDistSqrd) {\n                    return Visibility.NONE;\n                }\n\n                // Check to see whether the occluder is fully or partially visible\n                // when the occludee does not intersect the occluder\n                temp = this._occluderRadius + occludeeRadius;\n                temp = occluderToOccludeeDistSqrd - (temp * temp);\n                if (temp > 0.0) {\n                    // The occludee does not intersect the occluder.\n                    temp = Math.sqrt(temp) + this._horizonDistance;\n                    return (cameraToOccludeeDistSqrd < ((temp * temp)) + (occludeeRadius * occludeeRadius)) ? Visibility.FULL : Visibility.PARTIAL;\n                }\n\n                //Check to see if the occluder is fully or partially visible when the occludee DOES\n                //intersect the occluder\n                tempVec = Cartesian3.subtract(occludeePosition, this._horizonPlanePosition, tempVec);\n                return (Cartesian3.dot(tempVec, this._horizonPlaneNormal) > -occludeeRadius) ? Visibility.PARTIAL : Visibility.FULL;\n            }\n        }\n        return Visibility.NONE;\n    };\n\n    var occludeePointScratch = new Cartesian3();\n    /**\n     * Computes a point that can be used as the occludee position to the visibility functions.\n     * Use a radius of zero for the occludee radius.  Typically, a user computes a bounding sphere around\n     * an object that is used for visibility; however it is also possible to compute a point that if\n     * seen/not seen would also indicate if an object is visible/not visible.  This function is better\n     * called for objects that do not move relative to the occluder and is large, such as a chunk of\n     * terrain.  You are better off not calling this and using the object's bounding sphere for objects\n     * such as a satellite or ground vehicle.\n     *\n     * @param {BoundingSphere} occluderBoundingSphere The bounding sphere surrounding the occluder.\n     * @param {Cartesian3} occludeePosition The point where the occludee (bounding sphere of radius 0) is located.\n     * @param {Cartesian3[]} positions List of altitude points on the horizon near the surface of the occluder.\n     * @returns {Object} An object containing two attributes: <code>occludeePoint</code> and <code>valid</code>\n     * which is a boolean value.\n     *\n     * @exception {DeveloperError} <code>positions</code> must contain at least one element.\n     * @exception {DeveloperError} <code>occludeePosition</code> must have a value other than <code>occluderBoundingSphere.center</code>.\n     *\n     * @example\n     * var cameraPosition = new Cesium.Cartesian3(0, 0, 0);\n     * var occluderBoundingSphere = new Cesium.BoundingSphere(new Cesium.Cartesian3(0, 0, -8), 2);\n     * var occluder = new Cesium.Occluder(occluderBoundingSphere, cameraPosition);\n     * var positions = [new Cesium.Cartesian3(-0.25, 0, -5.3), new Cesium.Cartesian3(0.25, 0, -5.3)];\n     * var tileOccluderSphere = Cesium.BoundingSphere.fromPoints(positions);\n     * var occludeePosition = tileOccluderSphere.center;\n     * var occludeePt = Cesium.Occluder.computeOccludeePoint(occluderBoundingSphere, occludeePosition, positions);\n     */\n    Occluder.computeOccludeePoint = function(occluderBoundingSphere, occludeePosition, positions) {\n        \n\n        var occludeePos = Cartesian3.clone(occludeePosition);\n        var occluderPosition = Cartesian3.clone(occluderBoundingSphere.center);\n        var occluderRadius = occluderBoundingSphere.radius;\n        var numPositions = positions.length;\n\n        \n\n        // Compute a plane with a normal from the occluder to the occludee position.\n        var occluderPlaneNormal = Cartesian3.normalize(Cartesian3.subtract(occludeePos, occluderPosition, occludeePointScratch), occludeePointScratch);\n        var occluderPlaneD = -(Cartesian3.dot(occluderPlaneNormal, occluderPosition));\n\n        //For each position, determine the horizon intersection. Choose the position and intersection\n        //that results in the greatest angle with the occcluder plane.\n        var aRotationVector = Occluder._anyRotationVector(occluderPosition, occluderPlaneNormal, occluderPlaneD);\n        var dot = Occluder._horizonToPlaneNormalDotProduct(occluderBoundingSphere, occluderPlaneNormal, occluderPlaneD, aRotationVector, positions[0]);\n        if (!dot) {\n            //The position is inside the mimimum radius, which is invalid\n            return undefined;\n        }\n        var tempDot;\n        for ( var i = 1; i < numPositions; ++i) {\n            tempDot = Occluder._horizonToPlaneNormalDotProduct(occluderBoundingSphere, occluderPlaneNormal, occluderPlaneD, aRotationVector, positions[i]);\n            if (!tempDot) {\n                //The position is inside the minimum radius, which is invalid\n                return undefined;\n            }\n            if (tempDot < dot) {\n                dot = tempDot;\n            }\n        }\n        //Verify that the dot is not near 90 degress\n        if (dot < 0.00174532836589830883577820272085) {\n            return undefined;\n        }\n\n        var distance = occluderRadius / dot;\n        return Cartesian3.add(occluderPosition, Cartesian3.multiplyByScalar(occluderPlaneNormal, distance, occludeePointScratch), occludeePointScratch);\n    };\n\n    var computeOccludeePointFromRectangleScratch = [];\n    /**\n     * Computes a point that can be used as the occludee position to the visibility functions from a rectangle.\n     *\n     * @param {Rectangle} rectangle The rectangle used to create a bounding sphere.\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid used to determine positions of the rectangle.\n     * @returns {Object} An object containing two attributes: <code>occludeePoint</code> and <code>valid</code>\n     * which is a boolean value.\n     */\n    Occluder.computeOccludeePointFromRectangle = function(rectangle, ellipsoid) {\n        \n\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n        var positions = Rectangle.subsample(rectangle, ellipsoid, 0.0, computeOccludeePointFromRectangleScratch);\n        var bs = BoundingSphere.fromPoints(positions);\n\n        // TODO: get correct ellipsoid center\n        var ellipsoidCenter = Cartesian3.ZERO;\n        if (!Cartesian3.equals(ellipsoidCenter, bs.center)) {\n            return Occluder.computeOccludeePoint(new BoundingSphere(ellipsoidCenter, ellipsoid.minimumRadius), bs.center, positions);\n        }\n\n        return undefined;\n    };\n\n    var tempVec0Scratch = new Cartesian3();\n    Occluder._anyRotationVector = function(occluderPosition, occluderPlaneNormal, occluderPlaneD) {\n        var tempVec0 = Cartesian3.abs(occluderPlaneNormal, tempVec0Scratch);\n        var majorAxis = tempVec0.x > tempVec0.y ? 0 : 1;\n        if (((majorAxis === 0) && (tempVec0.z > tempVec0.x)) || ((majorAxis === 1) && (tempVec0.z > tempVec0.y))) {\n            majorAxis = 2;\n        }\n        var tempVec = new Cartesian3();\n        var tempVec1;\n        if (majorAxis === 0) {\n            tempVec0.x = occluderPosition.x;\n            tempVec0.y = occluderPosition.y + 1.0;\n            tempVec0.z = occluderPosition.z + 1.0;\n            tempVec1 = Cartesian3.UNIT_X;\n        } else if (majorAxis === 1) {\n            tempVec0.x = occluderPosition.x + 1.0;\n            tempVec0.y = occluderPosition.y;\n            tempVec0.z = occluderPosition.z + 1.0;\n            tempVec1 = Cartesian3.UNIT_Y;\n        } else {\n            tempVec0.x = occluderPosition.x + 1.0;\n            tempVec0.y = occluderPosition.y + 1.0;\n            tempVec0.z = occluderPosition.z;\n            tempVec1 = Cartesian3.UNIT_Z;\n        }\n        var u = (Cartesian3.dot(occluderPlaneNormal, tempVec0) + occluderPlaneD) / -(Cartesian3.dot(occluderPlaneNormal, tempVec1));\n        return Cartesian3.normalize(Cartesian3.subtract(Cartesian3.add(tempVec0, Cartesian3.multiplyByScalar(tempVec1, u, tempVec), tempVec0), occluderPosition, tempVec0), tempVec0);\n    };\n\n    var posDirectionScratch = new Cartesian3();\n    Occluder._rotationVector = function(occluderPosition, occluderPlaneNormal, occluderPlaneD, position, anyRotationVector) {\n        //Determine the angle between the occluder plane normal and the position direction\n        var positionDirection = Cartesian3.subtract(position, occluderPosition, posDirectionScratch);\n        positionDirection = Cartesian3.normalize(positionDirection, positionDirection);\n        if (Cartesian3.dot(occluderPlaneNormal, positionDirection) < 0.99999998476912904932780850903444) {\n            var crossProduct = Cartesian3.cross(occluderPlaneNormal, positionDirection, positionDirection);\n            var length = Cartesian3.magnitude(crossProduct);\n            if (length > CesiumMath.EPSILON13) {\n                return Cartesian3.normalize(crossProduct, new Cartesian3());\n            }\n        }\n        //The occluder plane normal and the position direction are colinear. Use any\n        //vector in the occluder plane as the rotation vector\n        return anyRotationVector;\n    };\n\n    var posScratch1 = new Cartesian3();\n    var occluerPosScratch = new Cartesian3();\n    var posScratch2 = new Cartesian3();\n    var horizonPlanePosScratch = new Cartesian3();\n    Occluder._horizonToPlaneNormalDotProduct = function(occluderBS, occluderPlaneNormal, occluderPlaneD, anyRotationVector, position) {\n        var pos = Cartesian3.clone(position, posScratch1);\n        var occluderPosition = Cartesian3.clone(occluderBS.center, occluerPosScratch);\n        var occluderRadius = occluderBS.radius;\n\n        //Verify that the position is outside the occluder\n        var positionToOccluder = Cartesian3.subtract(occluderPosition, pos, posScratch2);\n        var occluderToPositionDistanceSquared = Cartesian3.magnitudeSquared(positionToOccluder);\n        var occluderRadiusSquared = occluderRadius * occluderRadius;\n        if (occluderToPositionDistanceSquared < occluderRadiusSquared) {\n            return false;\n        }\n\n        //Horizon parameters\n        var horizonDistanceSquared = occluderToPositionDistanceSquared - occluderRadiusSquared;\n        var horizonDistance = Math.sqrt(horizonDistanceSquared);\n        var occluderToPositionDistance = Math.sqrt(occluderToPositionDistanceSquared);\n        var invOccluderToPositionDistance = 1.0 / occluderToPositionDistance;\n        var cosTheta = horizonDistance * invOccluderToPositionDistance;\n        var horizonPlaneDistance = cosTheta * horizonDistance;\n        positionToOccluder = Cartesian3.normalize(positionToOccluder, positionToOccluder);\n        var horizonPlanePosition = Cartesian3.add(pos, Cartesian3.multiplyByScalar(positionToOccluder, horizonPlaneDistance, horizonPlanePosScratch), horizonPlanePosScratch);\n        var horizonCrossDistance = Math.sqrt(horizonDistanceSquared - (horizonPlaneDistance * horizonPlaneDistance));\n\n        //Rotate the position to occluder vector 90 degrees\n        var tempVec = this._rotationVector(occluderPosition, occluderPlaneNormal, occluderPlaneD, pos, anyRotationVector);\n        var horizonCrossDirection = Cartesian3.fromElements(\n                (tempVec.x * tempVec.x * positionToOccluder.x) + ((tempVec.x * tempVec.y - tempVec.z) * positionToOccluder.y) + ((tempVec.x * tempVec.z + tempVec.y) * positionToOccluder.z),\n                ((tempVec.x * tempVec.y + tempVec.z) * positionToOccluder.x) + (tempVec.y * tempVec.y * positionToOccluder.y) + ((tempVec.y * tempVec.z - tempVec.x) * positionToOccluder.z),\n                ((tempVec.x * tempVec.z - tempVec.y) * positionToOccluder.x) + ((tempVec.y * tempVec.z + tempVec.x) * positionToOccluder.y) + (tempVec.z * tempVec.z * positionToOccluder.z),\n                posScratch1);\n        horizonCrossDirection = Cartesian3.normalize(horizonCrossDirection, horizonCrossDirection);\n\n        //Horizon positions\n        var offset = Cartesian3.multiplyByScalar(horizonCrossDirection, horizonCrossDistance, posScratch1);\n        tempVec = Cartesian3.normalize(Cartesian3.subtract(Cartesian3.add(horizonPlanePosition, offset, posScratch2), occluderPosition, posScratch2), posScratch2);\n        var dot0 = Cartesian3.dot(occluderPlaneNormal, tempVec);\n        tempVec = Cartesian3.normalize(Cartesian3.subtract(Cartesian3.subtract(horizonPlanePosition, offset, tempVec), occluderPosition, tempVec), tempVec);\n        var dot1 = Cartesian3.dot(occluderPlaneNormal, tempVec);\n        return (dot0 < dot1) ? dot0 : dot1;\n    };\n\n    return Occluder;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/PrimitiveType',\n        '../Shaders/ViewportQuadVS',\n        './ClearCommand',\n        './DrawCommand',\n        './Framebuffer',\n        './RenderState',\n        './ShaderProgram'\n    ], function(\n        BoundingRectangle,\n        Check,\n        Color,\n        defined,\n        destroyObject,\n        DeveloperError,\n        PrimitiveType,\n        ViewportQuadVS,\n        ClearCommand,\n        DrawCommand,\n        Framebuffer,\n        RenderState,\n        ShaderProgram) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function ComputeEngine(context) {\n        this._context = context;\n    }\n\n    var renderStateScratch;\n    var drawCommandScratch = new DrawCommand({\n        primitiveType : PrimitiveType.TRIANGLES\n    });\n    var clearCommandScratch = new ClearCommand({\n        color : new Color(0.0, 0.0, 0.0, 0.0)\n    });\n\n    function createFramebuffer(context, outputTexture) {\n        return new Framebuffer({\n            context : context,\n            colorTextures : [outputTexture],\n            destroyAttachments : false\n        });\n    }\n\n    function createViewportQuadShader(context, fragmentShaderSource) {\n        return ShaderProgram.fromCache({\n            context : context,\n            vertexShaderSource : ViewportQuadVS,\n            fragmentShaderSource : fragmentShaderSource,\n            attributeLocations : {\n                position : 0,\n                textureCoordinates : 1\n            }\n        });\n    }\n\n    function createRenderState(width, height) {\n        if ((!defined(renderStateScratch)) ||\n            (renderStateScratch.viewport.width !== width) ||\n            (renderStateScratch.viewport.height !== height)) {\n\n            renderStateScratch = RenderState.fromCache({\n                viewport : new BoundingRectangle(0, 0, width, height)\n            });\n        }\n        return renderStateScratch;\n    }\n\n    ComputeEngine.prototype.execute = function(computeCommand) {\n        \n\n        // This may modify the command's resources, so do error checking afterwards\n        if (defined(computeCommand.preExecute)) {\n            computeCommand.preExecute(computeCommand);\n        }\n\n        \n\n        var outputTexture = computeCommand.outputTexture;\n        var width = outputTexture.width;\n        var height = outputTexture.height;\n\n        var context = this._context;\n        var vertexArray = defined(computeCommand.vertexArray) ? computeCommand.vertexArray : context.getViewportQuadVertexArray();\n        var shaderProgram = defined(computeCommand.shaderProgram) ? computeCommand.shaderProgram : createViewportQuadShader(context, computeCommand.fragmentShaderSource);\n        var framebuffer = createFramebuffer(context, outputTexture);\n        var renderState = createRenderState(width, height);\n        var uniformMap = computeCommand.uniformMap;\n\n        var clearCommand = clearCommandScratch;\n        clearCommand.framebuffer = framebuffer;\n        clearCommand.renderState = renderState;\n        clearCommand.execute(context);\n\n        var drawCommand = drawCommandScratch;\n        drawCommand.vertexArray = vertexArray;\n        drawCommand.renderState = renderState;\n        drawCommand.shaderProgram = shaderProgram;\n        drawCommand.uniformMap = uniformMap;\n        drawCommand.framebuffer = framebuffer;\n        drawCommand.execute(context);\n\n        framebuffer.destroy();\n\n        if (!computeCommand.persists) {\n            shaderProgram.destroy();\n            if (defined(computeCommand.vertexArray)) {\n                vertexArray.destroy();\n            }\n        }\n\n        if (defined(computeCommand.postExecute)) {\n            computeCommand.postExecute(outputTexture);\n        }\n    };\n\n    ComputeEngine.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    ComputeEngine.prototype.destroy = function() {\n        return destroyObject(this);\n    };\n\n    return ComputeEngine;\n});\n","define([\n        '../Core/Check',\n        '../Core/clone',\n        '../Core/Color',\n        '../Core/ComponentDatatype',\n        '../Core/createGuid',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Geometry',\n        '../Core/GeometryAttribute',\n        '../Core/Matrix4',\n        '../Core/PixelFormat',\n        '../Core/PrimitiveType',\n        '../Core/RuntimeError',\n        '../Core/WebGLConstants',\n        '../Shaders/ViewportQuadVS',\n        './BufferUsage',\n        './ClearCommand',\n        './ContextLimits',\n        './CubeMap',\n        './DrawCommand',\n        './PassState',\n        './PixelDatatype',\n        './RenderState',\n        './ShaderCache',\n        './ShaderProgram',\n        './Texture',\n        './TextureCache',\n        './UniformState',\n        './VertexArray'\n    ], function(\n        Check,\n        clone,\n        Color,\n        ComponentDatatype,\n        createGuid,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        Geometry,\n        GeometryAttribute,\n        Matrix4,\n        PixelFormat,\n        PrimitiveType,\n        RuntimeError,\n        WebGLConstants,\n        ViewportQuadVS,\n        BufferUsage,\n        ClearCommand,\n        ContextLimits,\n        CubeMap,\n        DrawCommand,\n        PassState,\n        PixelDatatype,\n        RenderState,\n        ShaderCache,\n        ShaderProgram,\n        Texture,\n        TextureCache,\n        UniformState,\n        VertexArray) {\n    'use strict';\n    /*global WebGLRenderingContext*/\n\n    /*global WebGL2RenderingContext*/\n\n    function errorToString(gl, error) {\n        var message = 'WebGL Error:  ';\n        switch (error) {\n            case gl.INVALID_ENUM:\n                message += 'INVALID_ENUM';\n                break;\n            case gl.INVALID_VALUE:\n                message += 'INVALID_VALUE';\n                break;\n            case gl.INVALID_OPERATION:\n                message += 'INVALID_OPERATION';\n                break;\n            case gl.OUT_OF_MEMORY:\n                message += 'OUT_OF_MEMORY';\n                break;\n            case gl.CONTEXT_LOST_WEBGL:\n                message += 'CONTEXT_LOST_WEBGL lost';\n                break;\n            default:\n                message += 'Unknown (' + error + ')';\n        }\n\n        return message;\n    }\n\n    function createErrorMessage(gl, glFunc, glFuncArguments, error) {\n        var message = errorToString(gl, error) + ': ' + glFunc.name + '(';\n\n        for (var i = 0; i < glFuncArguments.length; ++i) {\n            if (i !== 0) {\n                message += ', ';\n            }\n            message += glFuncArguments[i];\n        }\n        message += ');';\n\n        return message;\n    }\n\n    function throwOnError(gl, glFunc, glFuncArguments) {\n        var error = gl.getError();\n        if (error !== gl.NO_ERROR) {\n            throw new RuntimeError(createErrorMessage(gl, glFunc, glFuncArguments, error));\n        }\n    }\n\n    function makeGetterSetter(gl, propertyName, logFunction) {\n        return {\n            get : function() {\n                var value = gl[propertyName];\n                logFunction(gl, 'get: ' + propertyName, value);\n                return gl[propertyName];\n            },\n            set : function(value) {\n                gl[propertyName] = value;\n                logFunction(gl, 'set: ' + propertyName, value);\n            }\n        };\n    }\n\n    function wrapGL(gl, logFunction) {\n        if (!defined(logFunction)) {\n            return gl;\n        }\n\n        function wrapFunction(property) {\n            return function() {\n                var result = property.apply(gl, arguments);\n                logFunction(gl, property, arguments);\n                return result;\n            };\n        }\n\n        var glWrapper = {};\n\n        // JavaScript linters normally demand that a for..in loop must directly contain an if,\n        // but in our loop below, we actually intend to iterate all properties, including\n        // those in the prototype.\n        /*eslint-disable guard-for-in*/\n        for (var propertyName in gl) {\n            var property = gl[propertyName];\n\n            // wrap any functions we encounter, otherwise just copy the property to the wrapper.\n            if (property instanceof Function) {\n                glWrapper[propertyName] = wrapFunction(property);\n            } else {\n                Object.defineProperty(glWrapper, propertyName, makeGetterSetter(gl, propertyName, logFunction));\n            }\n        }\n        /*eslint-enable guard-for-in*/\n\n        return glWrapper;\n    }\n\n    function getExtension(gl, names) {\n        var length = names.length;\n        for (var i = 0; i < length; ++i) {\n            var extension = gl.getExtension(names[i]);\n            if (extension) {\n                return extension;\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * @private\n     */\n    function Context(canvas, options) {\n        // this check must use typeof, not defined, because defined doesn't work with undeclared variables.\n        if (typeof WebGLRenderingContext === 'undefined') {\n            throw new RuntimeError('The browser does not support WebGL.  Visit http://get.webgl.org.');\n        }\n\n        \n\n        this._canvas = canvas;\n\n        options = clone(options, true);\n        // Don't use defaultValue.EMPTY_OBJECT here because the options object gets modified in the next line.\n        options = defaultValue(options, {});\n        options.allowTextureFilterAnisotropic = defaultValue(options.allowTextureFilterAnisotropic, true);\n        var webglOptions = defaultValue(options.webgl, {});\n\n        // Override select WebGL defaults\n        webglOptions.alpha = defaultValue(webglOptions.alpha, false); // WebGL default is true\n        webglOptions.stencil = defaultValue(webglOptions.stencil, true); // WebGL default is false\n\n        var requestWebgl2 = defaultValue(options.requestWebgl2, false) && (typeof WebGL2RenderingContext !== 'undefined');\n        var webgl2 = false;\n\n        var glContext;\n        var getWebGLStub = options.getWebGLStub;\n\n        if (!defined(getWebGLStub)) {\n            if (requestWebgl2) {\n                glContext = canvas.getContext('webgl2', webglOptions) || canvas.getContext('experimental-webgl2', webglOptions) || undefined;\n                if (defined(glContext)) {\n                    webgl2 = true;\n                }\n            }\n            if (!defined(glContext)) {\n                glContext = canvas.getContext('webgl', webglOptions) || canvas.getContext('experimental-webgl', webglOptions) || undefined;\n            }\n            if (!defined(glContext)) {\n                throw new RuntimeError('The browser supports WebGL, but initialization failed.');\n            }\n        } else {\n            // Use WebGL stub when requested for unit tests\n            glContext = getWebGLStub(canvas, webglOptions);\n        }\n\n        this._originalGLContext = glContext;\n        this._gl = glContext;\n        this._webgl2 = webgl2;\n        this._id = createGuid();\n\n        // Validation and logging disabled by default for speed.\n        this.validateFramebuffer = false;\n        this.validateShaderProgram = false;\n        this.logShaderCompilation = false;\n\n        this._throwOnWebGLError = false;\n\n        this._shaderCache = new ShaderCache(this);\n        this._textureCache = new TextureCache();\n\n        var gl = glContext;\n\n        this._stencilBits = gl.getParameter(gl.STENCIL_BITS);\n\n        ContextLimits._maximumCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS); // min: 8\n        ContextLimits._maximumCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE); // min: 16\n        ContextLimits._maximumFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS); // min: 16\n        ContextLimits._maximumTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS); // min: 8\n        ContextLimits._maximumRenderbufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE); // min: 1\n        ContextLimits._maximumTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE); // min: 64\n        ContextLimits._maximumVaryingVectors = gl.getParameter(gl.MAX_VARYING_VECTORS); // min: 8\n        ContextLimits._maximumVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS); // min: 8\n        ContextLimits._maximumVertexTextureImageUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS); // min: 0\n        ContextLimits._maximumVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS); // min: 128\n\n        var aliasedLineWidthRange = gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE); // must include 1\n        ContextLimits._minimumAliasedLineWidth = aliasedLineWidthRange[0];\n        ContextLimits._maximumAliasedLineWidth = aliasedLineWidthRange[1];\n\n        var aliasedPointSizeRange = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); // must include 1\n        ContextLimits._minimumAliasedPointSize = aliasedPointSizeRange[0];\n        ContextLimits._maximumAliasedPointSize = aliasedPointSizeRange[1];\n\n        var maximumViewportDimensions = gl.getParameter(gl.MAX_VIEWPORT_DIMS);\n        ContextLimits._maximumViewportWidth = maximumViewportDimensions[0];\n        ContextLimits._maximumViewportHeight = maximumViewportDimensions[1];\n\n        var highpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n        ContextLimits._highpFloatSupported = highpFloat.precision !== 0;\n        var highpInt = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);\n        ContextLimits._highpIntSupported = highpInt.rangeMax !== 0;\n\n        this._antialias = gl.getContextAttributes().antialias;\n\n        // Query and initialize extensions\n        this._standardDerivatives = !!getExtension(gl, ['OES_standard_derivatives']);\n        this._blendMinmax = !!getExtension(gl, ['EXT_blend_minmax']);\n        this._elementIndexUint = !!getExtension(gl, ['OES_element_index_uint']);\n        this._depthTexture = !!getExtension(gl, ['WEBGL_depth_texture', 'WEBKIT_WEBGL_depth_texture']);\n        this._fragDepth = !!getExtension(gl, ['EXT_frag_depth']);\n        this._debugShaders = getExtension(gl, ['WEBGL_debug_shaders']);\n\n        this._textureFloat = !!getExtension(gl, ['OES_texture_float']);\n        this._textureHalfFloat = !!getExtension(gl, ['OES_texture_half_float']);\n\n        this._textureFloatLinear = !!getExtension(gl, ['OES_texture_float_linear']);\n        this._textureHalfFloatLinear = !!getExtension(gl, ['OES_texture_half_float_linear']);\n\n        this._colorBufferFloat = !!getExtension(gl, ['EXT_color_buffer_float', 'WEBGL_color_buffer_float']);\n        this._colorBufferHalfFloat = !!getExtension(gl, ['EXT_color_buffer_half_float']);\n\n        this._s3tc = !!getExtension(gl, ['WEBGL_compressed_texture_s3tc', 'MOZ_WEBGL_compressed_texture_s3tc', 'WEBKIT_WEBGL_compressed_texture_s3tc']);\n        this._pvrtc = !!getExtension(gl, ['WEBGL_compressed_texture_pvrtc', 'WEBKIT_WEBGL_compressed_texture_pvrtc']);\n        this._etc1 = !!getExtension(gl, ['WEBGL_compressed_texture_etc1']);\n\n        var textureFilterAnisotropic = options.allowTextureFilterAnisotropic ? getExtension(gl, ['EXT_texture_filter_anisotropic', 'WEBKIT_EXT_texture_filter_anisotropic']) : undefined;\n        this._textureFilterAnisotropic = textureFilterAnisotropic;\n        ContextLimits._maximumTextureFilterAnisotropy = defined(textureFilterAnisotropic) ? gl.getParameter(textureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n\n        var glCreateVertexArray;\n        var glBindVertexArray;\n        var glDeleteVertexArray;\n\n        var glDrawElementsInstanced;\n        var glDrawArraysInstanced;\n        var glVertexAttribDivisor;\n\n        var glDrawBuffers;\n\n        var vertexArrayObject;\n        var instancedArrays;\n        var drawBuffers;\n\n        if (webgl2) {\n            var that = this;\n\n            glCreateVertexArray = function() {\n                return that._gl.createVertexArray();\n            };\n            glBindVertexArray = function(vao) {\n                that._gl.bindVertexArray(vao);\n            };\n            glDeleteVertexArray = function(vao) {\n                that._gl.deleteVertexArray(vao);\n            };\n\n            glDrawElementsInstanced = function(mode, count, type, offset, instanceCount) {\n                gl.drawElementsInstanced(mode, count, type, offset, instanceCount);\n            };\n            glDrawArraysInstanced = function(mode, first, count, instanceCount) {\n                gl.drawArraysInstanced(mode, first, count, instanceCount);\n            };\n            glVertexAttribDivisor = function(index, divisor) {\n                gl.vertexAttribDivisor(index, divisor);\n            };\n\n            glDrawBuffers = function(buffers) {\n                gl.drawBuffers(buffers);\n            };\n        } else {\n            vertexArrayObject = getExtension(gl, ['OES_vertex_array_object']);\n            if (defined(vertexArrayObject)) {\n                glCreateVertexArray = function() {\n                    return vertexArrayObject.createVertexArrayOES();\n                };\n                glBindVertexArray = function(vertexArray) {\n                    vertexArrayObject.bindVertexArrayOES(vertexArray);\n                };\n                glDeleteVertexArray = function(vertexArray) {\n                    vertexArrayObject.deleteVertexArrayOES(vertexArray);\n                };\n            }\n\n            instancedArrays = getExtension(gl, ['ANGLE_instanced_arrays']);\n            if (defined(instancedArrays)) {\n                glDrawElementsInstanced = function(mode, count, type, offset, instanceCount) {\n                    instancedArrays.drawElementsInstancedANGLE(mode, count, type, offset, instanceCount);\n                };\n                glDrawArraysInstanced = function(mode, first, count, instanceCount) {\n                    instancedArrays.drawArraysInstancedANGLE(mode, first, count, instanceCount);\n                };\n                glVertexAttribDivisor = function(index, divisor) {\n                    instancedArrays.vertexAttribDivisorANGLE(index, divisor);\n                };\n            }\n\n            drawBuffers = getExtension(gl, ['WEBGL_draw_buffers']);\n            if (defined(drawBuffers)) {\n                glDrawBuffers = function(buffers) {\n                    drawBuffers.drawBuffersWEBGL(buffers);\n                };\n            }\n        }\n\n        this.glCreateVertexArray = glCreateVertexArray;\n        this.glBindVertexArray = glBindVertexArray;\n        this.glDeleteVertexArray = glDeleteVertexArray;\n\n        this.glDrawElementsInstanced = glDrawElementsInstanced;\n        this.glDrawArraysInstanced = glDrawArraysInstanced;\n        this.glVertexAttribDivisor = glVertexAttribDivisor;\n\n        this.glDrawBuffers = glDrawBuffers;\n\n        this._vertexArrayObject = !!vertexArrayObject;\n        this._instancedArrays = !!instancedArrays;\n        this._drawBuffers = !!drawBuffers;\n\n        ContextLimits._maximumDrawBuffers = this.drawBuffers ? gl.getParameter(WebGLConstants.MAX_DRAW_BUFFERS) : 1;\n        ContextLimits._maximumColorAttachments = this.drawBuffers ? gl.getParameter(WebGLConstants.MAX_COLOR_ATTACHMENTS) : 1;\n\n        this._clearColor = new Color(0.0, 0.0, 0.0, 0.0);\n        this._clearDepth = 1.0;\n        this._clearStencil = 0;\n\n        var us = new UniformState();\n        var ps = new PassState(this);\n        var rs = RenderState.fromCache();\n\n        this._defaultPassState = ps;\n        this._defaultRenderState = rs;\n        this._defaultTexture = undefined;\n        this._defaultCubeMap = undefined;\n\n        this._us = us;\n        this._currentRenderState = rs;\n        this._currentPassState = ps;\n        this._currentFramebuffer = undefined;\n        this._maxFrameTextureUnitIndex = 0;\n\n        // Vertex attribute divisor state cache. Workaround for ANGLE (also look at VertexArray.setVertexAttribDivisor)\n        this._vertexAttribDivisors = [];\n        this._previousDrawInstanced = false;\n        for (var i = 0; i < ContextLimits._maximumVertexAttributes; i++) {\n            this._vertexAttribDivisors.push(0);\n        }\n\n        this._pickObjects = {};\n        this._nextPickColor = new Uint32Array(1);\n\n        /**\n         * @example\n         * {\n         *   webgl : {\n         *     alpha : false,\n         *     depth : true,\n         *     stencil : false,\n         *     antialias : true,\n         *     premultipliedAlpha : true,\n         *     preserveDrawingBuffer : false,\n         *     failIfMajorPerformanceCaveat : true\n         *   },\n         *   allowTextureFilterAnisotropic : true\n         * }\n         */\n        this.options = options;\n\n        /**\n         * A cache of objects tied to this context.  Just before the Context is destroyed,\n         * <code>destroy</code> will be invoked on each object in this object literal that has\n         * such a method.  This is useful for caching any objects that might otherwise\n         * be stored globally, except they're tied to a particular context, and to manage\n         * their lifetime.\n         *\n         * @type {Object}\n         */\n        this.cache = {};\n\n        RenderState.apply(gl, rs, ps);\n    }\n\n    var defaultFramebufferMarker = {};\n\n    defineProperties(Context.prototype, {\n        id : {\n            get : function() {\n                return this._id;\n            }\n        },\n        webgl2 : {\n            get : function() {\n                return this._webgl2;\n            }\n        },\n        canvas : {\n            get : function() {\n                return this._canvas;\n            }\n        },\n        shaderCache : {\n            get : function() {\n                return this._shaderCache;\n            }\n        },\n        textureCache : {\n            get : function() {\n                return this._textureCache;\n            }\n        },\n        uniformState : {\n            get : function() {\n                return this._us;\n            }\n        },\n\n        /**\n         * The number of stencil bits per pixel in the default bound framebuffer.  The minimum is eight bits.\n         * @memberof Context.prototype\n         * @type {Number}\n         * @see {@link https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGet.xml|glGet} with <code>STENCIL_BITS</code>.\n         */\n        stencilBits : {\n            get : function() {\n                return this._stencilBits;\n            }\n        },\n\n        /**\n         * <code>true</code> if the WebGL context supports stencil buffers.\n         * Stencil buffers are not supported by all systems.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         */\n        stencilBuffer : {\n            get : function() {\n                return this._stencilBits >= 8;\n            }\n        },\n\n        /**\n         * <code>true</code> if the WebGL context supports antialiasing.  By default\n         * antialiasing is requested, but it is not supported by all systems.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         */\n        antialias : {\n            get : function() {\n                return this._antialias;\n            }\n        },\n\n        /**\n         * <code>true</code> if the OES_standard_derivatives extension is supported.  This\n         * extension provides access to <code>dFdx</code>, <code>dFdy</code>, and <code>fwidth</code>\n         * functions from GLSL.  A shader using these functions still needs to explicitly enable the\n         * extension with <code>#extension GL_OES_standard_derivatives : enable</code>.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link http://www.khronos.org/registry/gles/extensions/OES/OES_standard_derivatives.txt|OES_standard_derivatives}\n         */\n        standardDerivatives : {\n            get : function() {\n                return this._standardDerivatives || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if the EXT_blend_minmax extension is supported.  This\n         * extension extends blending capabilities by adding two new blend equations:\n         * the minimum or maximum color components of the source and destination colors.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_blend_minmax/}\n         */\n        blendMinmax : {\n            get : function() {\n                return this._blendMinmax || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if the OES_element_index_uint extension is supported.  This\n         * extension allows the use of unsigned int indices, which can improve performance by\n         * eliminating batch breaking caused by unsigned short indices.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_element_index_uint/|OES_element_index_uint}\n         */\n        elementIndexUint : {\n            get : function() {\n                return this._elementIndexUint || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if WEBGL_depth_texture is supported.  This extension provides\n         * access to depth textures that, for example, can be attached to framebuffers for shadow mapping.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n         */\n        depthTexture : {\n            get : function() {\n                return this._depthTexture || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if OES_texture_float is supported. This extension provides\n         * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float/}\n         */\n        floatingPointTexture : {\n            get : function() {\n                return this._webgl2 || this._textureFloat;\n            }\n        },\n\n        /**\n         * <code>true</code> if OES_texture_half_float is supported. This extension provides\n         * access to floating point textures that, for example, can be attached to framebuffers for high dynamic range.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float/}\n         */\n        halfFloatingPointTexture : {\n            get : function() {\n                return this._webgl2 || this._textureHalfFloat;\n            }\n        },\n\n        /**\n         * <code>true</code> if OES_texture_float_linear is supported. This extension provides\n         * access to linear sampling methods for minification and magnification filters of floating-point textures.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_float_linear/}\n         */\n        textureFloatLinear : {\n            get : function() {\n                return this._textureFloatLinear;\n            }\n        },\n\n        /**\n         * <code>true</code> if OES_texture_half_float_linear is supported. This extension provides\n         * access to linear sampling methods for minification and magnification filters of half floating-point textures.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/OES_texture_half_float_linear/}\n         */\n        textureHalfFloatLinear : {\n            get : function() {\n                return (this._webgl2 && this._textureFloatLinear) || (!this._webgl2 && this._textureHalfFloatLinear);\n            }\n        },\n\n        /**\n         * <code>true</code> if EXT_texture_filter_anisotropic is supported. This extension provides\n         * access to anisotropic filtering for textured surfaces at an oblique angle from the viewer.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_texture_filter_anisotropic/}\n         */\n        textureFilterAnisotropic : {\n            get : function() {\n                return !!this._textureFilterAnisotropic;\n            }\n        },\n\n        /**\n         * <code>true</code> if WEBGL_texture_compression_s3tc is supported.  This extension provides\n         * access to DXT compressed textures.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/}\n         */\n        s3tc : {\n            get : function() {\n                return this._s3tc;\n            }\n        },\n\n        /**\n         * <code>true</code> if WEBGL_texture_compression_pvrtc is supported.  This extension provides\n         * access to PVR compressed textures.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_pvrtc/}\n         */\n        pvrtc : {\n            get : function() {\n                return this._pvrtc;\n            }\n        },\n\n        /**\n         * <code>true</code> if WEBGL_texture_compression_etc1 is supported.  This extension provides\n         * access to ETC1 compressed textures.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_etc1/}\n         */\n        etc1 : {\n            get : function() {\n                return this._etc1;\n            }\n        },\n\n        /**\n         * <code>true</code> if the OES_vertex_array_object extension is supported.  This\n         * extension can improve performance by reducing the overhead of switching vertex arrays.\n         * When enabled, this extension is automatically used by {@link VertexArray}.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link http://www.khronos.org/registry/webgl/extensions/OES_vertex_array_object/|OES_vertex_array_object}\n         */\n        vertexArrayObject : {\n            get : function() {\n                return this._vertexArrayObject || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if the EXT_frag_depth extension is supported.  This\n         * extension provides access to the <code>gl_FragDepthEXT</code> built-in output variable\n         * from GLSL fragment shaders.  A shader using these functions still needs to explicitly enable the\n         * extension with <code>#extension GL_EXT_frag_depth : enable</code>.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link http://www.khronos.org/registry/webgl/extensions/EXT_frag_depth/|EXT_frag_depth}\n         */\n        fragmentDepth : {\n            get : function() {\n                return this._fragDepth || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if the ANGLE_instanced_arrays extension is supported.  This\n         * extension provides access to instanced rendering.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/ANGLE_instanced_arrays}\n         */\n        instancedArrays : {\n            get : function() {\n                return this._instancedArrays || this._webgl2;\n            }\n        },\n\n        /**\n         * <code>true</code> if the EXT_color_buffer_float extension is supported.  This\n         * extension makes the gl.RGBA32F format color renderable.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/WEBGL_color_buffer_float/}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n         */\n        colorBufferFloat : {\n            get : function() {\n                return this._colorBufferFloat;\n            }\n        },\n\n        /**\n         * <code>true</code> if the EXT_color_buffer_half_float extension is supported.  This\n         * extension makes the format gl.RGBA16F format color renderable.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_half_float/}\n         * @see {@link https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/}\n         */\n        colorBufferHalfFloat : {\n            get : function() {\n                return (this._webgl2 && this._colorBufferFloat) || (!this._webgl2 && this._colorBufferHalfFloat);\n            }\n        },\n\n        /**\n         * <code>true</code> if the WEBGL_draw_buffers extension is supported. This\n         * extensions provides support for multiple render targets. The framebuffer object can have mutiple\n         * color attachments and the GLSL fragment shader can write to the built-in output array <code>gl_FragData</code>.\n         * A shader using this feature needs to explicitly enable the extension with\n         * <code>#extension GL_EXT_draw_buffers : enable</code>.\n         * @memberof Context.prototype\n         * @type {Boolean}\n         * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_draw_buffers/|WEBGL_draw_buffers}\n         */\n        drawBuffers : {\n            get : function() {\n                return this._drawBuffers || this._webgl2;\n            }\n        },\n\n        debugShaders : {\n            get : function() {\n                return this._debugShaders;\n            }\n        },\n\n        throwOnWebGLError : {\n            get : function() {\n                return this._throwOnWebGLError;\n            },\n            set : function(value) {\n                this._throwOnWebGLError = value;\n                this._gl = wrapGL(this._originalGLContext, value ? throwOnError : undefined);\n            }\n        },\n\n        /**\n         * A 1x1 RGBA texture initialized to [255, 255, 255, 255].  This can\n         * be used as a placeholder texture while other textures are downloaded.\n         * @memberof Context.prototype\n         * @type {Texture}\n         */\n        defaultTexture : {\n            get : function() {\n                if (this._defaultTexture === undefined) {\n                    this._defaultTexture = new Texture({\n                        context : this,\n                        source : {\n                            width : 1,\n                            height : 1,\n                            arrayBufferView : new Uint8Array([255, 255, 255, 255])\n                        },\n                        flipY : false\n                    });\n                }\n\n                return this._defaultTexture;\n            }\n        },\n\n        /**\n         * A cube map, where each face is a 1x1 RGBA texture initialized to\n         * [255, 255, 255, 255].  This can be used as a placeholder cube map while\n         * other cube maps are downloaded.\n         * @memberof Context.prototype\n         * @type {CubeMap}\n         */\n        defaultCubeMap : {\n            get : function() {\n                if (this._defaultCubeMap === undefined) {\n                    var face = {\n                        width : 1,\n                        height : 1,\n                        arrayBufferView : new Uint8Array([255, 255, 255, 255])\n                    };\n\n                    this._defaultCubeMap = new CubeMap({\n                        context : this,\n                        source : {\n                            positiveX : face,\n                            negativeX : face,\n                            positiveY : face,\n                            negativeY : face,\n                            positiveZ : face,\n                            negativeZ : face\n                        },\n                        flipY : false\n                    });\n                }\n\n                return this._defaultCubeMap;\n\n            }\n        },\n\n        /**\n         * The drawingBufferHeight of the underlying GL context.\n         * @memberof Context.prototype\n         * @type {Number}\n         * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferHeight|drawingBufferHeight}\n         */\n        drawingBufferHeight : {\n            get : function() {\n                return this._gl.drawingBufferHeight;\n            }\n        },\n\n        /**\n         * The drawingBufferWidth of the underlying GL context.\n         * @memberof Context.prototype\n         * @type {Number}\n         * @see {@link https://www.khronos.org/registry/webgl/specs/1.0/#DOM-WebGLRenderingContext-drawingBufferWidth|drawingBufferWidth}\n         */\n        drawingBufferWidth : {\n            get : function() {\n                return this._gl.drawingBufferWidth;\n            }\n        },\n\n        /**\n         * Gets an object representing the currently bound framebuffer.  While this instance is not an actual\n         * {@link Framebuffer}, it is used to represent the default framebuffer in calls to\n         * {@link Texture.fromFramebuffer}.\n         * @memberof Context.prototype\n         * @type {Object}\n         */\n        defaultFramebuffer : {\n            get : function() {\n                return defaultFramebufferMarker;\n            }\n        }\n    });\n\n    /**\n     * Validates a framebuffer.\n     * Available in debug builds only.\n     * @private\n     */\n    function validateFramebuffer(context) {\n        \n    }\n\n    function applyRenderState(context, renderState, passState, clear) {\n        var previousRenderState = context._currentRenderState;\n        var previousPassState = context._currentPassState;\n        context._currentRenderState = renderState;\n        context._currentPassState = passState;\n        RenderState.partialApply(context._gl, previousRenderState, renderState, previousPassState, passState, clear);\n    }\n\n    var scratchBackBufferArray;\n    // this check must use typeof, not defined, because defined doesn't work with undeclared variables.\n    if (typeof WebGLRenderingContext !== 'undefined') {\n        scratchBackBufferArray = [WebGLConstants.BACK];\n    }\n\n    function bindFramebuffer(context, framebuffer) {\n        if (framebuffer !== context._currentFramebuffer) {\n            context._currentFramebuffer = framebuffer;\n            var buffers = scratchBackBufferArray;\n\n            if (defined(framebuffer)) {\n                framebuffer._bind();\n                validateFramebuffer(context);\n\n                // TODO: Need a way for a command to give what draw buffers are active.\n                buffers = framebuffer._getActiveColorAttachments();\n            } else {\n                var gl = context._gl;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (context.drawBuffers) {\n                context.glDrawBuffers(buffers);\n            }\n        }\n    }\n\n    var defaultClearCommand = new ClearCommand();\n\n    Context.prototype.clear = function(clearCommand, passState) {\n        clearCommand = defaultValue(clearCommand, defaultClearCommand);\n        passState = defaultValue(passState, this._defaultPassState);\n\n        var gl = this._gl;\n        var bitmask = 0;\n\n        var c = clearCommand.color;\n        var d = clearCommand.depth;\n        var s = clearCommand.stencil;\n\n        if (defined(c)) {\n            if (!Color.equals(this._clearColor, c)) {\n                Color.clone(c, this._clearColor);\n                gl.clearColor(c.red, c.green, c.blue, c.alpha);\n            }\n            bitmask |= gl.COLOR_BUFFER_BIT;\n        }\n\n        if (defined(d)) {\n            if (d !== this._clearDepth) {\n                this._clearDepth = d;\n                gl.clearDepth(d);\n            }\n            bitmask |= gl.DEPTH_BUFFER_BIT;\n        }\n\n        if (defined(s)) {\n            if (s !== this._clearStencil) {\n                this._clearStencil = s;\n                gl.clearStencil(s);\n            }\n            bitmask |= gl.STENCIL_BUFFER_BIT;\n        }\n\n        var rs = defaultValue(clearCommand.renderState, this._defaultRenderState);\n        applyRenderState(this, rs, passState, true);\n\n        // The command's framebuffer takes presidence over the pass' framebuffer, e.g., for off-screen rendering.\n        var framebuffer = defaultValue(clearCommand.framebuffer, passState.framebuffer);\n        bindFramebuffer(this, framebuffer);\n\n        gl.clear(bitmask);\n    };\n\n    function beginDraw(context, framebuffer, passState, shaderProgram, renderState) {\n        \n\n        bindFramebuffer(context, framebuffer);\n        applyRenderState(context, renderState, passState, false);\n        shaderProgram._bind();\n        context._maxFrameTextureUnitIndex = Math.max(context._maxFrameTextureUnitIndex, shaderProgram.maximumTextureUnitIndex);\n    }\n\n    function continueDraw(context, drawCommand, shaderProgram, uniformMap) {\n        var primitiveType = drawCommand._primitiveType;\n        var va = drawCommand._vertexArray;\n        var offset = drawCommand._offset;\n        var count = drawCommand._count;\n        var instanceCount = drawCommand.instanceCount;\n\n        \n\n        context._us.model = defaultValue(drawCommand._modelMatrix, Matrix4.IDENTITY);\n        shaderProgram._setUniforms(uniformMap, context._us, context.validateShaderProgram);\n\n        va._bind();\n        var indexBuffer = va.indexBuffer;\n\n        if (defined(indexBuffer)) {\n            offset = offset * indexBuffer.bytesPerIndex; // offset in vertices to offset in bytes\n            count = defaultValue(count, indexBuffer.numberOfIndices);\n            if (instanceCount === 0) {\n                context._gl.drawElements(primitiveType, count, indexBuffer.indexDatatype, offset);\n            } else {\n                context.glDrawElementsInstanced(primitiveType, count, indexBuffer.indexDatatype, offset, instanceCount);\n            }\n        } else {\n            count = defaultValue(count, va.numberOfVertices);\n            if (instanceCount === 0) {\n                context._gl.drawArrays(primitiveType, offset, count);\n            } else {\n                context.glDrawArraysInstanced(primitiveType, offset, count, instanceCount);\n            }\n        }\n\n        va._unBind();\n    }\n\n    Context.prototype.draw = function(drawCommand, passState, shaderProgram, uniformMap) {\n        \n\n        passState = defaultValue(passState, this._defaultPassState);\n        // The command's framebuffer takes presidence over the pass' framebuffer, e.g., for off-screen rendering.\n        var framebuffer = defaultValue(drawCommand._framebuffer, passState.framebuffer);\n        var renderState = defaultValue(drawCommand._renderState, this._defaultRenderState);\n        shaderProgram = defaultValue(shaderProgram, drawCommand._shaderProgram);\n        uniformMap = defaultValue(uniformMap, drawCommand._uniformMap);\n\n        beginDraw(this, framebuffer, passState, shaderProgram, renderState);\n        continueDraw(this, drawCommand, shaderProgram, uniformMap);\n    };\n\n    Context.prototype.endFrame = function() {\n        var gl = this._gl;\n        gl.useProgram(null);\n\n        this._currentFramebuffer = undefined;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        var buffers = scratchBackBufferArray;\n        if (this.drawBuffers) {\n            this.glDrawBuffers(buffers);\n        }\n\n        var length = this._maxFrameTextureUnitIndex;\n        this._maxFrameTextureUnitIndex = 0;\n\n        for (var i = 0; i < length; ++i) {\n            gl.activeTexture(gl.TEXTURE0 + i);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n        }\n    };\n\n    Context.prototype.readPixels = function(readState) {\n        var gl = this._gl;\n\n        readState = defaultValue(readState, defaultValue.EMPTY_OBJECT);\n        var x = Math.max(defaultValue(readState.x, 0), 0);\n        var y = Math.max(defaultValue(readState.y, 0), 0);\n        var width = defaultValue(readState.width, gl.drawingBufferWidth);\n        var height = defaultValue(readState.height, gl.drawingBufferHeight);\n        var framebuffer = readState.framebuffer;\n\n        \n\n        var pixelDatatype = PixelDatatype.UNSIGNED_BYTE;\n        if (defined(framebuffer) && framebuffer.numberOfColorAttachments > 0) {\n            pixelDatatype = framebuffer.getColorTexture(0).pixelDatatype;\n        }\n\n        var pixels = PixelFormat.createTypedArray(PixelFormat.RGBA, pixelDatatype, width, height);\n\n        bindFramebuffer(this, framebuffer);\n\n        gl.readPixels(x, y, width, height, PixelFormat.RGBA, pixelDatatype, pixels);\n\n        return pixels;\n    };\n\n    var viewportQuadAttributeLocations = {\n        position : 0,\n        textureCoordinates : 1\n    };\n\n    Context.prototype.getViewportQuadVertexArray = function() {\n        // Per-context cache for viewport quads\n        var vertexArray = this.cache.viewportQuad_vertexArray;\n\n        if (!defined(vertexArray)) {\n            var geometry = new Geometry({\n                attributes : {\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        componentsPerAttribute : 2,\n                        values : [\n                            -1.0, -1.0,\n                            1.0, -1.0,\n                            1.0, 1.0,\n                            -1.0, 1.0\n                        ]\n                    }),\n\n                    textureCoordinates : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        componentsPerAttribute : 2,\n                        values : [\n                            0.0, 0.0,\n                            1.0, 0.0,\n                            1.0, 1.0,\n                            0.0, 1.0\n                        ]\n                    })\n                },\n                // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n                indices : new Uint16Array([0, 1, 2, 0, 2, 3]),\n                primitiveType : PrimitiveType.TRIANGLES\n            });\n\n            vertexArray = VertexArray.fromGeometry({\n                context : this,\n                geometry : geometry,\n                attributeLocations : viewportQuadAttributeLocations,\n                bufferUsage : BufferUsage.STATIC_DRAW,\n                interleave : true\n            });\n\n            this.cache.viewportQuad_vertexArray = vertexArray;\n        }\n\n        return vertexArray;\n    };\n\n    Context.prototype.createViewportQuadCommand = function(fragmentShaderSource, overrides) {\n        overrides = defaultValue(overrides, defaultValue.EMPTY_OBJECT);\n\n        return new DrawCommand({\n            vertexArray : this.getViewportQuadVertexArray(),\n            primitiveType : PrimitiveType.TRIANGLES,\n            renderState : overrides.renderState,\n            shaderProgram : ShaderProgram.fromCache({\n                context : this,\n                vertexShaderSource : ViewportQuadVS,\n                fragmentShaderSource : fragmentShaderSource,\n                attributeLocations : viewportQuadAttributeLocations\n            }),\n            uniformMap : overrides.uniformMap,\n            owner : overrides.owner,\n            framebuffer : overrides.framebuffer,\n            pass : overrides.pass\n        });\n    };\n\n    /**\n     * Gets the object associated with a pick color.\n     *\n     * @param {Color} pickColor The pick color.\n     * @returns {Object} The object associated with the pick color, or undefined if no object is associated with that color.\n     *\n     * @example\n     * var object = context.getObjectByPickColor(pickColor);\n     *\n     * @see Context#createPickId\n     */\n    Context.prototype.getObjectByPickColor = function(pickColor) {\n        \n\n        return this._pickObjects[pickColor.toRgba()];\n    };\n\n    function PickId(pickObjects, key, color) {\n        this._pickObjects = pickObjects;\n        this.key = key;\n        this.color = color;\n    }\n\n    defineProperties(PickId.prototype, {\n        object : {\n            get : function() {\n                return this._pickObjects[this.key];\n            },\n            set : function(value) {\n                this._pickObjects[this.key] = value;\n            }\n        }\n    });\n\n    PickId.prototype.destroy = function() {\n        delete this._pickObjects[this.key];\n        return undefined;\n    };\n\n    /**\n     * Creates a unique ID associated with the input object for use with color-buffer picking.\n     * The ID has an RGBA color value unique to this context.  You must call destroy()\n     * on the pick ID when destroying the input object.\n     *\n     * @param {Object} object The object to associate with the pick ID.\n     * @returns {Object} A PickId object with a <code>color</code> property.\n     *\n     * @exception {RuntimeError} Out of unique Pick IDs.\n     *\n     *\n     * @example\n     * this._pickId = context.createPickId({\n     *   primitive : this,\n     *   id : this.id\n     * });\n     *\n     * @see Context#getObjectByPickColor\n     */\n    Context.prototype.createPickId = function(object) {\n        \n\n        // the increment and assignment have to be separate statements to\n        // actually detect overflow in the Uint32 value\n        ++this._nextPickColor[0];\n        var key = this._nextPickColor[0];\n        if (key === 0) {\n            // In case of overflow\n            throw new RuntimeError('Out of unique Pick IDs.');\n        }\n\n        this._pickObjects[key] = object;\n        return new PickId(this._pickObjects, key, Color.fromRgba(key));\n    };\n\n    Context.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Context.prototype.destroy = function() {\n        // Destroy all objects in the cache that have a destroy method.\n        var cache = this.cache;\n        for (var property in cache) {\n            if (cache.hasOwnProperty(property)) {\n                var propertyValue = cache[property];\n                if (defined(propertyValue.destroy)) {\n                    propertyValue.destroy();\n                }\n            }\n        }\n\n        this._shaderCache = this._shaderCache.destroy();\n        this._textureCache = this._textureCache.destroy();\n        this._defaultTexture = this._defaultTexture && this._defaultTexture.destroy();\n        this._defaultCubeMap = this._defaultCubeMap && this._defaultCubeMap.destroy();\n\n        return destroyObject(this);\n    };\n\n    return Context;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        './ShaderProgram',\n        './ShaderSource'\n    ], function(\n        defined,\n        defineProperties,\n        destroyObject,\n        ShaderProgram,\n        ShaderSource) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function ShaderCache(context) {\n        this._context = context;\n        this._shaders = {};\n        this._numberOfShaders = 0;\n        this._shadersToRelease = {};\n    }\n\n    defineProperties(ShaderCache.prototype, {\n        numberOfShaders : {\n            get : function() {\n                return this._numberOfShaders;\n            }\n        }\n    });\n\n    /**\n     * Returns a shader program from the cache, or creates and caches a new shader program,\n     * given the GLSL vertex and fragment shader source and attribute locations.\n     * <p>\n     * The difference between this and {@link ShaderCache#getShaderProgram}, is this is used to\n     * replace an existing reference to a shader program, which is passed as the first argument.\n     * </p>\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {ShaderProgram} [options.shaderProgram] The shader program that is being reassigned.\n     * @param {String|ShaderSource} options.vertexShaderSource The GLSL source for the vertex shader.\n     * @param {String|ShaderSource} options.fragmentShaderSource The GLSL source for the fragment shader.\n     * @param {Object} options.attributeLocations Indices for the attribute inputs to the vertex shader.\n\n     * @returns {ShaderProgram} The cached or newly created shader program.\n     *\n     *\n     * @example\n     * this._shaderProgram = context.shaderCache.replaceShaderProgram({\n     *     shaderProgram : this._shaderProgram,\n     *     vertexShaderSource : vs,\n     *     fragmentShaderSource : fs,\n     *     attributeLocations : attributeLocations\n     * });\n     *\n     * @see ShaderCache#getShaderProgram\n     */\n    ShaderCache.prototype.replaceShaderProgram = function(options) {\n        if (defined(options.shaderProgram)) {\n            options.shaderProgram.destroy();\n        }\n\n        return this.getShaderProgram(options);\n    };\n\n    /**\n     * Returns a shader program from the cache, or creates and caches a new shader program,\n     * given the GLSL vertex and fragment shader source and attribute locations.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {String|ShaderSource} options.vertexShaderSource The GLSL source for the vertex shader.\n     * @param {String|ShaderSource} options.fragmentShaderSource The GLSL source for the fragment shader.\n     * @param {Object} options.attributeLocations Indices for the attribute inputs to the vertex shader.\n     *\n     * @returns {ShaderProgram} The cached or newly created shader program.\n     */\n    ShaderCache.prototype.getShaderProgram = function(options) {\n        // convert shaders which are provided as strings into ShaderSource objects\n        // because ShaderSource handles all the automatic including of built-in functions, etc.\n\n        var vertexShaderSource = options.vertexShaderSource;\n        var fragmentShaderSource = options.fragmentShaderSource;\n        var attributeLocations = options.attributeLocations;\n\n        if (typeof vertexShaderSource === 'string') {\n            vertexShaderSource = new ShaderSource({\n                sources : [vertexShaderSource]\n            });\n        }\n\n        if (typeof fragmentShaderSource === 'string') {\n            fragmentShaderSource = new ShaderSource({\n                sources : [fragmentShaderSource]\n            });\n        }\n\n        var vertexShaderText = vertexShaderSource.createCombinedVertexShader(this._context);\n        var fragmentShaderText = fragmentShaderSource.createCombinedFragmentShader(this._context);\n\n        var keyword = vertexShaderText + fragmentShaderText + JSON.stringify(attributeLocations);\n        var cachedShader;\n\n        if (defined(this._shaders[keyword])) {\n            cachedShader = this._shaders[keyword];\n\n            // No longer want to release this if it was previously released.\n            delete this._shadersToRelease[keyword];\n        } else {\n            var context = this._context;\n            var shaderProgram = new ShaderProgram({\n                gl : context._gl,\n                logShaderCompilation : context.logShaderCompilation,\n                debugShaders : context.debugShaders,\n                vertexShaderSource : vertexShaderSource,\n                vertexShaderText : vertexShaderText,\n                fragmentShaderSource : fragmentShaderSource,\n                fragmentShaderText : fragmentShaderText,\n                attributeLocations : attributeLocations\n            });\n\n            cachedShader = {\n                cache : this,\n                shaderProgram : shaderProgram,\n                keyword : keyword,\n                derivedKeywords : [],\n                count : 0\n            };\n\n            // A shader can't be in more than one cache.\n            shaderProgram._cachedShader = cachedShader;\n            this._shaders[keyword] = cachedShader;\n            ++this._numberOfShaders;\n        }\n\n        ++cachedShader.count;\n        return cachedShader.shaderProgram;\n    };\n\n    ShaderCache.prototype.replaceDerivedShaderProgram = function(shaderProgram, keyword, options) {\n        var cachedShader = shaderProgram._cachedShader;\n        var derivedKeyword = keyword + cachedShader.keyword;\n        var cachedDerivedShader = this._shaders[derivedKeyword];\n        if (defined(cachedDerivedShader)) {\n            destroyShader(this, cachedDerivedShader);\n            var index = cachedShader.derivedKeywords.indexOf(keyword);\n            if (index > -1) {\n                cachedShader.derivedKeywords.splice(index, 1);\n            }\n        }\n\n        return this.createDerivedShaderProgram(shaderProgram, keyword, options);\n    };\n\n    ShaderCache.prototype.getDerivedShaderProgram = function(shaderProgram, keyword) {\n        var cachedShader = shaderProgram._cachedShader;\n        var derivedKeyword = keyword + cachedShader.keyword;\n        var cachedDerivedShader = this._shaders[derivedKeyword];\n        if (!defined(cachedDerivedShader)) {\n            return undefined;\n        }\n\n        return cachedDerivedShader.shaderProgram;\n    };\n\n    ShaderCache.prototype.createDerivedShaderProgram = function(shaderProgram, keyword, options) {\n        var cachedShader = shaderProgram._cachedShader;\n        var derivedKeyword = keyword + cachedShader.keyword;\n\n        var vertexShaderSource = options.vertexShaderSource;\n        var fragmentShaderSource = options.fragmentShaderSource;\n        var attributeLocations = options.attributeLocations;\n\n        if (typeof vertexShaderSource === 'string') {\n            vertexShaderSource = new ShaderSource({\n                sources : [vertexShaderSource]\n            });\n        }\n\n        if (typeof fragmentShaderSource === 'string') {\n            fragmentShaderSource = new ShaderSource({\n                sources : [fragmentShaderSource]\n            });\n        }\n\n        var context = this._context;\n\n        var vertexShaderText = vertexShaderSource.createCombinedVertexShader(context);\n        var fragmentShaderText = fragmentShaderSource.createCombinedFragmentShader(context);\n\n        var derivedShaderProgram = new ShaderProgram({\n            gl : context._gl,\n            logShaderCompilation : context.logShaderCompilation,\n            debugShaders : context.debugShaders,\n            vertexShaderSource : vertexShaderSource,\n            vertexShaderText : vertexShaderText,\n            fragmentShaderSource : fragmentShaderSource,\n            fragmentShaderText : fragmentShaderText,\n            attributeLocations : attributeLocations\n        });\n\n        var derivedCachedShader = {\n            cache : this,\n            shaderProgram : derivedShaderProgram,\n            keyword : derivedKeyword,\n            derivedKeywords : [],\n            count : 0\n        };\n\n        cachedShader.derivedKeywords.push(keyword);\n        derivedShaderProgram._cachedShader = derivedCachedShader;\n        this._shaders[derivedKeyword] = derivedCachedShader;\n        return derivedShaderProgram;\n    };\n\n    function destroyShader(cache, cachedShader) {\n        var derivedKeywords = cachedShader.derivedKeywords;\n        var length = derivedKeywords.length;\n        for (var i = 0; i < length; ++i) {\n            var keyword = derivedKeywords[i] + cachedShader.keyword;\n            var derivedCachedShader = cache._shaders[keyword];\n            destroyShader(cache, derivedCachedShader);\n        }\n\n        delete cache._shaders[cachedShader.keyword];\n        cachedShader.shaderProgram.finalDestroy();\n    }\n\n    ShaderCache.prototype.destroyReleasedShaderPrograms = function() {\n        var shadersToRelease = this._shadersToRelease;\n\n        for ( var keyword in shadersToRelease) {\n            if (shadersToRelease.hasOwnProperty(keyword)) {\n                var cachedShader = shadersToRelease[keyword];\n                destroyShader(this, cachedShader);\n                --this._numberOfShaders;\n            }\n        }\n\n        this._shadersToRelease = {};\n    };\n\n    ShaderCache.prototype.releaseShaderProgram = function(shaderProgram) {\n        if (defined(shaderProgram)) {\n            var cachedShader = shaderProgram._cachedShader;\n            if (cachedShader && (--cachedShader.count === 0)) {\n                this._shadersToRelease[cachedShader.keyword] = cachedShader;\n            }\n        }\n    };\n\n    ShaderCache.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    ShaderCache.prototype.destroy = function() {\n        var shaders = this._shaders;\n        for (var keyword in shaders) {\n            if (shaders.hasOwnProperty(keyword)) {\n                shaders[keyword].shaderProgram.finalDestroy();\n            }\n        }\n        return destroyObject(this);\n    };\n\n    return ShaderCache;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject'\n    ], function(\n        defined,\n        defineProperties,\n        destroyObject) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function TextureCache() {\n        this._textures = {};\n        this._numberOfTextures = 0;\n        this._texturesToRelease = {};\n    }\n\n    defineProperties(TextureCache.prototype, {\n        numberOfTextures : {\n            get : function() {\n                return this._numberOfTextures;\n            }\n        }\n    });\n\n    TextureCache.prototype.getTexture = function(keyword) {\n        var cachedTexture = this._textures[keyword];\n        if (!defined(cachedTexture)) {\n            return undefined;\n        }\n\n        // No longer want to release this if it was previously released.\n        delete this._texturesToRelease[keyword];\n\n        ++cachedTexture.count;\n        return cachedTexture.texture;\n    };\n\n    TextureCache.prototype.addTexture = function(keyword, texture) {\n        var cachedTexture = {\n            texture : texture,\n            count : 1\n        };\n\n        texture.finalDestroy = texture.destroy;\n\n        var that = this;\n        texture.destroy = function() {\n            if (--cachedTexture.count === 0) {\n                that._texturesToRelease[keyword] = cachedTexture;\n            }\n        };\n\n        this._textures[keyword] = cachedTexture;\n        ++this._numberOfTextures;\n    };\n\n    TextureCache.prototype.destroyReleasedTextures = function() {\n        var texturesToRelease = this._texturesToRelease;\n\n        for (var keyword in texturesToRelease) {\n            if (texturesToRelease.hasOwnProperty(keyword)) {\n                var cachedTexture = texturesToRelease[keyword];\n                delete this._textures[keyword];\n                cachedTexture.texture.finalDestroy();\n                --this._numberOfTextures;\n            }\n        }\n\n        this._texturesToRelease = {};\n    };\n\n    TextureCache.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    TextureCache.prototype.destroy = function() {\n        var textures = this._textures;\n        for (var keyword in textures) {\n            if (textures.hasOwnProperty(keyword)) {\n                textures[keyword].texture.finalDestroy();\n            }\n        }\n        return destroyObject(this);\n    };\n\n    return TextureCache;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/Cartographic',\n        '../Core/Color',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/EncodedCartesian3',\n        '../Core/Math',\n        '../Core/Matrix3',\n        '../Core/Matrix4',\n        '../Core/OrthographicFrustum',\n        '../Core/Simon1994PlanetaryPositions',\n        '../Core/Transforms',\n        '../Scene/SceneMode',\n        './Sampler'\n    ], function(\n        BoundingRectangle,\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        Color,\n        defaultValue,\n        defined,\n        defineProperties,\n        EncodedCartesian3,\n        CesiumMath,\n        Matrix3,\n        Matrix4,\n        OrthographicFrustum,\n        Simon1994PlanetaryPositions,\n        Transforms,\n        SceneMode,\n        Sampler) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function UniformState() {\n        /**\n         * @type {Texture}\n         */\n        this.globeDepthTexture = undefined;\n        /**\n         * @type {Number}\n         */\n        this.gamma = undefined;\n\n        this._viewport = new BoundingRectangle();\n        this._viewportCartesian4 = new Cartesian4();\n        this._viewportDirty = false;\n        this._viewportOrthographicMatrix = Matrix4.clone(Matrix4.IDENTITY);\n        this._viewportTransformation = Matrix4.clone(Matrix4.IDENTITY);\n\n        this._model = Matrix4.clone(Matrix4.IDENTITY);\n        this._view = Matrix4.clone(Matrix4.IDENTITY);\n        this._inverseView = Matrix4.clone(Matrix4.IDENTITY);\n        this._projection = Matrix4.clone(Matrix4.IDENTITY);\n        this._infiniteProjection = Matrix4.clone(Matrix4.IDENTITY);\n        this._entireFrustum = new Cartesian2();\n        this._currentFrustum = new Cartesian2();\n        this._frustumPlanes = new Cartesian4();\n        this._log2FarDistance = undefined;\n        this._log2FarPlusOne = undefined;\n        this._log2NearDistance = undefined;\n\n        this._frameState = undefined;\n        this._temeToPseudoFixed = Matrix3.clone(Matrix4.IDENTITY);\n\n        // Derived members\n        this._view3DDirty = true;\n        this._view3D = new Matrix4();\n\n        this._inverseView3DDirty = true;\n        this._inverseView3D = new Matrix4();\n\n        this._inverseModelDirty = true;\n        this._inverseModel = new Matrix4();\n\n        this._inverseTransposeModelDirty = true;\n        this._inverseTransposeModel = new Matrix3();\n\n        this._viewRotation = new Matrix3();\n        this._inverseViewRotation = new Matrix3();\n\n        this._viewRotation3D = new Matrix3();\n        this._inverseViewRotation3D = new Matrix3();\n\n        this._inverseProjectionDirty = true;\n        this._inverseProjection = new Matrix4();\n\n        this._modelViewDirty = true;\n        this._modelView = new Matrix4();\n\n        this._modelView3DDirty = true;\n        this._modelView3D = new Matrix4();\n\n        this._modelViewRelativeToEyeDirty = true;\n        this._modelViewRelativeToEye = new Matrix4();\n\n        this._inverseModelViewDirty = true;\n        this._inverseModelView = new Matrix4();\n\n        this._inverseModelView3DDirty = true;\n        this._inverseModelView3D = new Matrix4();\n\n        this._viewProjectionDirty = true;\n        this._viewProjection = new Matrix4();\n\n        this._inverseViewProjectionDirty = true;\n        this._inverseViewProjection = new Matrix4();\n\n        this._modelViewProjectionDirty = true;\n        this._modelViewProjection = new Matrix4();\n\n        this._inverseModelViewProjectionDirty = true;\n        this._inverseModelViewProjection = new Matrix4();\n\n        this._modelViewProjectionRelativeToEyeDirty = true;\n        this._modelViewProjectionRelativeToEye = new Matrix4();\n\n        this._modelViewInfiniteProjectionDirty = true;\n        this._modelViewInfiniteProjection = new Matrix4();\n\n        this._normalDirty = true;\n        this._normal = new Matrix3();\n\n        this._normal3DDirty = true;\n        this._normal3D = new Matrix3();\n\n        this._inverseNormalDirty = true;\n        this._inverseNormal = new Matrix3();\n\n        this._inverseNormal3DDirty = true;\n        this._inverseNormal3D = new Matrix3();\n\n        this._encodedCameraPositionMCDirty = true;\n        this._encodedCameraPositionMC = new EncodedCartesian3();\n        this._cameraPosition = new Cartesian3();\n\n        this._sunPositionWC = new Cartesian3();\n        this._sunPositionColumbusView = new Cartesian3();\n        this._sunDirectionWC = new Cartesian3();\n        this._sunDirectionEC = new Cartesian3();\n        this._sunColor = new Cartesian3();\n        this._moonDirectionEC = new Cartesian3();\n\n        this._pass = undefined;\n        this._mode = undefined;\n        this._mapProjection = undefined;\n        this._cameraDirection = new Cartesian3();\n        this._cameraRight = new Cartesian3();\n        this._cameraUp = new Cartesian3();\n        this._frustum2DWidth = 0.0;\n        this._eyeHeight2D = new Cartesian2();\n        this._resolutionScale = 1.0;\n        this._orthographicIn3D = false;\n        this._backgroundColor = new Color();\n\n        this._brdfLut = undefined;\n        this._environmentMap = undefined;\n\n        this._sphericalHarmonicCoefficients = undefined;\n        this._specularEnvironmentMaps = undefined;\n        this._specularEnvironmentMapsDimensions = new Cartesian2();\n        this._specularEnvironmentMapsMaximumLOD = undefined;\n\n        this._fogDensity = undefined;\n\n        this._invertClassificationColor = undefined;\n\n        this._imagerySplitPosition = 0.0;\n        this._pixelSizePerMeter = undefined;\n        this._geometricToleranceOverMeter = undefined;\n\n        this._minimumDisableDepthTestDistance = undefined;\n    }\n\n    defineProperties(UniformState.prototype, {\n        /**\n         * @memberof UniformState.prototype\n         * @type {FrameState}\n         * @readonly\n         */\n        frameState : {\n            get : function() {\n                return this._frameState;\n            }\n        },\n        /**\n         * @memberof UniformState.prototype\n         * @type {BoundingRectangle}\n         */\n        viewport : {\n            get : function() {\n                return this._viewport;\n            },\n            set : function(viewport) {\n                if (!BoundingRectangle.equals(viewport, this._viewport)) {\n                    BoundingRectangle.clone(viewport, this._viewport);\n\n                    var v = this._viewport;\n                    var vc = this._viewportCartesian4;\n                    vc.x = v.x;\n                    vc.y = v.y;\n                    vc.z = v.width;\n                    vc.w = v.height;\n\n                    this._viewportDirty = true;\n                }\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @private\n         */\n        viewportCartesian4 : {\n            get : function() {\n                return this._viewportCartesian4;\n            }\n        },\n\n        viewportOrthographic : {\n            get : function() {\n                cleanViewport(this);\n                return this._viewportOrthographicMatrix;\n            }\n        },\n\n        viewportTransformation : {\n            get : function() {\n                cleanViewport(this);\n                return this._viewportTransformation;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        model : {\n            get : function() {\n                return this._model;\n            },\n            set : function(matrix) {\n                Matrix4.clone(matrix, this._model);\n\n                this._modelView3DDirty = true;\n                this._inverseModelView3DDirty = true;\n                this._inverseModelDirty = true;\n                this._inverseTransposeModelDirty = true;\n                this._modelViewDirty = true;\n                this._inverseModelViewDirty = true;\n                this._modelViewRelativeToEyeDirty = true;\n                this._inverseModelViewDirty = true;\n                this._modelViewProjectionDirty = true;\n                this._inverseModelViewProjectionDirty = true;\n                this._modelViewProjectionRelativeToEyeDirty = true;\n                this._modelViewInfiniteProjectionDirty = true;\n                this._normalDirty = true;\n                this._inverseNormalDirty = true;\n                this._normal3DDirty = true;\n                this._inverseNormal3DDirty = true;\n                this._encodedCameraPositionMCDirty = true;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseModel : {\n            get : function() {\n                if (this._inverseModelDirty) {\n                    this._inverseModelDirty = false;\n\n                    Matrix4.inverse(this._model, this._inverseModel);\n                }\n\n                return this._inverseModel;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @private\n         */\n        inverseTransposeModel : {\n            get : function() {\n                var m = this._inverseTransposeModel;\n                if (this._inverseTransposeModelDirty) {\n                    this._inverseTransposeModelDirty = false;\n\n                    Matrix4.getRotation(this.inverseModel, m);\n                    Matrix3.transpose(m, m);\n                }\n\n                return m;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        view : {\n            get : function() {\n                return this._view;\n            }\n        },\n\n        /**\n         * The 3D view matrix.  In 3D mode, this is identical to {@link UniformState#view},\n         * but in 2D and Columbus View it is a synthetic matrix based on the equivalent position\n         * of the camera in the 3D world.\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        view3D : {\n            get : function() {\n                updateView3D(this);\n                return this._view3D;\n            }\n        },\n\n        /**\n         * The 3x3 rotation matrix of the current view matrix ({@link UniformState#view}).\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        viewRotation : {\n            get : function() {\n                updateView3D(this);\n                return this._viewRotation;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        viewRotation3D : {\n            get : function() {\n                updateView3D(this);\n                return this._viewRotation3D;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseView : {\n            get : function() {\n                return this._inverseView;\n            }\n        },\n\n        /**\n         * the 4x4 inverse-view matrix that transforms from eye to 3D world coordinates.  In 3D mode, this is\n         * identical to {@link UniformState#inverseView}, but in 2D and Columbus View it is a synthetic matrix\n         * based on the equivalent position of the camera in the 3D world.\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseView3D : {\n            get : function() {\n                updateInverseView3D(this);\n                return this._inverseView3D;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        inverseViewRotation : {\n            get : function() {\n                return this._inverseViewRotation;\n            }\n        },\n\n        /**\n         * The 3x3 rotation matrix of the current 3D inverse-view matrix ({@link UniformState#inverseView3D}).\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        inverseViewRotation3D : {\n            get : function() {\n                updateInverseView3D(this);\n                return this._inverseViewRotation3D;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        projection : {\n            get : function() {\n                return this._projection;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseProjection : {\n            get : function() {\n                cleanInverseProjection(this);\n                return this._inverseProjection;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        infiniteProjection : {\n            get : function() {\n                return this._infiniteProjection;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        modelView : {\n            get : function() {\n                cleanModelView(this);\n                return this._modelView;\n            }\n        },\n\n        /**\n         * The 3D model-view matrix.  In 3D mode, this is equivalent to {@link UniformState#modelView}.  In 2D and\n         * Columbus View, however, it is a synthetic matrix based on the equivalent position of the camera in the 3D world.\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        modelView3D : {\n            get : function() {\n                cleanModelView3D(this);\n                return this._modelView3D;\n            }\n        },\n\n        /**\n         * Model-view relative to eye matrix.\n         *\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        modelViewRelativeToEye : {\n            get : function() {\n                cleanModelViewRelativeToEye(this);\n                return this._modelViewRelativeToEye;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseModelView : {\n            get : function() {\n                cleanInverseModelView(this);\n                return this._inverseModelView;\n            }\n        },\n\n        /**\n         * The inverse of the 3D model-view matrix.  In 3D mode, this is equivalent to {@link UniformState#inverseModelView}.\n         * In 2D and Columbus View, however, it is a synthetic matrix based on the equivalent position of the camera in the 3D world.\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseModelView3D : {\n            get : function() {\n                cleanInverseModelView3D(this);\n                return this._inverseModelView3D;\n\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        viewProjection : {\n            get : function() {\n                cleanViewProjection(this);\n                return this._viewProjection;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseViewProjection : {\n            get : function() {\n                cleanInverseViewProjection(this);\n                return this._inverseViewProjection;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        modelViewProjection : {\n            get : function() {\n                cleanModelViewProjection(this);\n                return this._modelViewProjection;\n\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        inverseModelViewProjection : {\n            get : function() {\n                cleanInverseModelViewProjection(this);\n                return this._inverseModelViewProjection;\n\n            }\n        },\n\n        /**\n         * Model-view-projection relative to eye matrix.\n         *\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        modelViewProjectionRelativeToEye : {\n            get : function() {\n                cleanModelViewProjectionRelativeToEye(this);\n                return this._modelViewProjectionRelativeToEye;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Matrix4}\n         */\n        modelViewInfiniteProjection : {\n            get : function() {\n                cleanModelViewInfiniteProjection(this);\n                return this._modelViewInfiniteProjection;\n            }\n        },\n\n        /**\n         * A 3x3 normal transformation matrix that transforms normal vectors in model coordinates to\n         * eye coordinates.\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        normal : {\n            get : function() {\n                cleanNormal(this);\n                return this._normal;\n            }\n        },\n\n        /**\n         * A 3x3 normal transformation matrix that transforms normal vectors in 3D model\n         * coordinates to eye coordinates.  In 3D mode, this is identical to\n         * {@link UniformState#normal}, but in 2D and Columbus View it represents the normal transformation\n         * matrix as if the camera were at an equivalent location in 3D mode.\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        normal3D : {\n            get : function() {\n                cleanNormal3D(this);\n                return this._normal3D;\n\n            }\n        },\n\n        /**\n         * An inverse 3x3 normal transformation matrix that transforms normal vectors in model coordinates\n         * to eye coordinates.\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        inverseNormal : {\n            get : function() {\n                cleanInverseNormal(this);\n                return this._inverseNormal;\n            }\n        },\n\n        /**\n         * An inverse 3x3 normal transformation matrix that transforms normal vectors in eye coordinates\n         * to 3D model coordinates.  In 3D mode, this is identical to\n         * {@link UniformState#inverseNormal}, but in 2D and Columbus View it represents the normal transformation\n         * matrix as if the camera were at an equivalent location in 3D mode.\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        inverseNormal3D : {\n            get : function() {\n                cleanInverseNormal3D(this);\n                return this._inverseNormal3D;\n            }\n        },\n\n        /**\n         * The near distance (<code>x</code>) and the far distance (<code>y</code>) of the frustum defined by the camera.\n         * This is the largest possible frustum, not an individual frustum used for multi-frustum rendering.\n         * @memberof UniformState.prototype\n         * @type {Cartesian2}\n         */\n        entireFrustum : {\n            get : function() {\n                return this._entireFrustum;\n            }\n        },\n\n        /**\n         * The near distance (<code>x</code>) and the far distance (<code>y</code>) of the frustum defined by the camera.\n         * This is the individual frustum used for multi-frustum rendering.\n         * @memberof UniformState.prototype\n         * @type {Cartesian2}\n         */\n        currentFrustum : {\n            get : function() {\n                return this._currentFrustum;\n            }\n        },\n\n        /**\n         * The distances to the frustum planes. The top, bottom, left and right distances are\n         * the x, y, z, and w components, respectively.\n         * @memberof UniformState.prototype\n         * @type {Cartesian4}\n         */\n        frustumPlanes : {\n            get : function() {\n                return this._frustumPlanes;\n            }\n        },\n\n        /**\n         * The log2 of the current frustum's far distance. Used to compute the log depth.\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        log2FarDistance : {\n            get : function() {\n                return this._log2FarDistance;\n            }\n        },\n\n        /**\n         * The log2 of 1 + the current frustum's far distance. Used to reverse log depth.\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        log2FarPlusOne : {\n            get : function() {\n                return this._log2FarPlusOne;\n            }\n        },\n\n        /**\n         * The log2 current frustum's near distance. Used when writing log depth in the fragment shader.\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        log2NearDistance : {\n            get : function() {\n                return this._log2NearDistance;\n            }\n        },\n\n        /**\n         * The the height (<code>x</code>) and the height squared (<code>y</code>)\n         * in meters of the camera above the 2D world plane. This uniform is only valid\n         * when the {@link SceneMode} equal to <code>SCENE2D</code>.\n         * @memberof UniformState.prototype\n         * @type {Cartesian2}\n         */\n        eyeHeight2D : {\n            get : function() {\n                return this._eyeHeight2D;\n            }\n        },\n\n        /**\n         * The sun position in 3D world coordinates at the current scene time.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        sunPositionWC : {\n            get : function() {\n                return this._sunPositionWC;\n            }\n        },\n\n        /**\n         * The sun position in 2D world coordinates at the current scene time.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        sunPositionColumbusView : {\n            get : function(){\n                return this._sunPositionColumbusView;\n            }\n        },\n\n        /**\n         * A normalized vector to the sun in 3D world coordinates at the current scene time.  Even in 2D or\n         * Columbus View mode, this returns the position of the sun in the 3D scene.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        sunDirectionWC : {\n            get : function() {\n                return this._sunDirectionWC;\n            }\n        },\n\n        /**\n         * A normalized vector to the sun in eye coordinates at the current scene time.  In 3D mode, this\n         * returns the actual vector from the camera position to the sun position.  In 2D and Columbus View, it returns\n         * the vector from the equivalent 3D camera position to the position of the sun in the 3D scene.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        sunDirectionEC : {\n            get : function() {\n                return this._sunDirectionEC;\n            }\n        },\n\n        /**\n         * The color of the light emitted by the sun.\n         * @memberof UniformState.prototype\n         * @type {Color}\n         */\n        sunColor: {\n            get: function() {\n                return this._sunColor;\n            }\n        },\n\n        /**\n         * A normalized vector to the moon in eye coordinates at the current scene time.  In 3D mode, this\n         * returns the actual vector from the camera position to the moon position.  In 2D and Columbus View, it returns\n         * the vector from the equivalent 3D camera position to the position of the moon in the 3D scene.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        moonDirectionEC : {\n            get : function() {\n                return this._moonDirectionEC;\n            }\n        },\n\n        /**\n         * The high bits of the camera position.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        encodedCameraPositionMCHigh : {\n            get : function() {\n                cleanEncodedCameraPositionMC(this);\n                return this._encodedCameraPositionMC.high;\n            }\n        },\n\n        /**\n         * The low bits of the camera position.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3}\n         */\n        encodedCameraPositionMCLow : {\n            get : function() {\n                cleanEncodedCameraPositionMC(this);\n                return this._encodedCameraPositionMC.low;\n            }\n        },\n\n        /**\n         * A 3x3 matrix that transforms from True Equator Mean Equinox (TEME) axes to the\n         * pseudo-fixed axes at the Scene's current time.\n         * @memberof UniformState.prototype\n         * @type {Matrix3}\n         */\n        temeToPseudoFixedMatrix : {\n            get : function() {\n                return this._temeToPseudoFixed;\n            }\n        },\n\n        /**\n         * Gets the scaling factor for transforming from the canvas\n         * pixel space to canvas coordinate space.\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        resolutionScale : {\n            get : function() {\n                return this._resolutionScale;\n            }\n        },\n\n        /**\n         * A scalar used to mix a color with the fog color based on the distance to the camera.\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        fogDensity : {\n            get : function() {\n                return this._fogDensity;\n            }\n        },\n\n        /**\n         * A scalar that represents the geometric tolerance per meter\n         * @memberof UniformStat.prototype\n         * @type {Number}\n         */\n        geometricToleranceOverMeter: {\n            get: function() {\n                return this._geometricToleranceOverMeter;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Pass}\n         */\n        pass : {\n            get : function() {\n                return this._pass;\n            }\n        },\n\n        /**\n         * The current background color\n         * @memberof UniformState.prototype\n         * @type {Color}\n         */\n        backgroundColor : {\n            get : function() {\n                return this._backgroundColor;\n            }\n        },\n\n        /**\n         * The look up texture used to find the BRDF for a material\n         * @memberof UniformState.prototype\n         * @type {Texture}\n         */\n        brdfLut : {\n            get : function() {\n                return this._brdfLut;\n            }\n        },\n\n        /**\n         * The environment map of the scene\n         * @memberof UniformState.prototype\n         * @type {CubeMap}\n         */\n        environmentMap : {\n            get : function() {\n                return this._environmentMap;\n            }\n        },\n\n        /**\n         * The spherical harmonic coefficients of the scene.\n         * @memberof UniformState.prototype\n         * @type {Cartesian3[]}\n         */\n        sphericalHarmonicCoefficients : {\n            get : function() {\n                return this._sphericalHarmonicCoefficients;\n            }\n        },\n\n        /**\n         * The specular environment map atlas of the scene.\n         * @memberof UniformState.prototype\n         * @type {Texture}\n         */\n        specularEnvironmentMaps : {\n            get : function() {\n                return this._specularEnvironmentMaps;\n            }\n        },\n\n        /**\n         * The dimensions of the specular environment map atlas of the scene.\n         * @memberof UniformState.prototype\n         * @type {Cartesian2}\n         */\n        specularEnvironmentMapsDimensions : {\n            get : function() {\n                return this._specularEnvironmentMapsDimensions;\n            }\n        },\n\n        /**\n         * The maximum level-of-detail of the specular environment map atlas of the scene.\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        specularEnvironmentMapsMaximumLOD : {\n            get : function() {\n                return this._specularEnvironmentMapsMaximumLOD;\n            }\n        },\n\n        /**\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        imagerySplitPosition : {\n            get : function() {\n                return this._imagerySplitPosition;\n            }\n        },\n\n        /**\n         * The distance from the camera at which to disable the depth test of billboards, labels and points\n         * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n         * be applied. When less than zero, the depth test should never be applied.\n         *\n         * @memberof UniformState.prototype\n         * @type {Number}\n         */\n        minimumDisableDepthTestDistance : {\n            get : function() {\n                return this._minimumDisableDepthTestDistance;\n            }\n        },\n\n        /**\n         * The highlight color of unclassified 3D Tiles.\n         *\n         * @memberof UniformState.prototype\n         * @type {Color}\n         */\n        invertClassificationColor : {\n            get : function() {\n                return this._invertClassificationColor;\n            }\n        },\n\n        /**\n         * Whether or not the current projection is orthographic in 3D.\n         *\n         * @memberOf UniformState.prototype\n         * @type {Boolean}\n         */\n        orthographicIn3D : {\n            get : function() {\n                return this._orthographicIn3D;\n            }\n        }\n    });\n\n    function setView(uniformState, matrix) {\n        Matrix4.clone(matrix, uniformState._view);\n        Matrix4.getRotation(matrix, uniformState._viewRotation);\n\n        uniformState._view3DDirty = true;\n        uniformState._inverseView3DDirty = true;\n        uniformState._modelViewDirty = true;\n        uniformState._modelView3DDirty = true;\n        uniformState._modelViewRelativeToEyeDirty = true;\n        uniformState._inverseModelViewDirty = true;\n        uniformState._inverseModelView3DDirty = true;\n        uniformState._viewProjectionDirty = true;\n        uniformState._inverseViewProjectionDirty = true;\n        uniformState._modelViewProjectionDirty = true;\n        uniformState._modelViewProjectionRelativeToEyeDirty = true;\n        uniformState._modelViewInfiniteProjectionDirty = true;\n        uniformState._normalDirty = true;\n        uniformState._inverseNormalDirty = true;\n        uniformState._normal3DDirty = true;\n        uniformState._inverseNormal3DDirty = true;\n    }\n\n    function setInverseView(uniformState, matrix) {\n        Matrix4.clone(matrix, uniformState._inverseView);\n        Matrix4.getRotation(matrix, uniformState._inverseViewRotation);\n    }\n\n    function setProjection(uniformState, matrix) {\n        Matrix4.clone(matrix, uniformState._projection);\n\n        uniformState._inverseProjectionDirty = true;\n        uniformState._viewProjectionDirty = true;\n        uniformState._inverseViewProjectionDirty = true;\n        uniformState._modelViewProjectionDirty = true;\n        uniformState._modelViewProjectionRelativeToEyeDirty = true;\n    }\n\n    function setInfiniteProjection(uniformState, matrix) {\n        Matrix4.clone(matrix, uniformState._infiniteProjection);\n\n        uniformState._modelViewInfiniteProjectionDirty = true;\n    }\n\n    function setCamera(uniformState, camera) {\n        Cartesian3.clone(camera.positionWC, uniformState._cameraPosition);\n        Cartesian3.clone(camera.directionWC, uniformState._cameraDirection);\n        Cartesian3.clone(camera.rightWC, uniformState._cameraRight);\n        Cartesian3.clone(camera.upWC, uniformState._cameraUp);\n        uniformState._encodedCameraPositionMCDirty = true;\n    }\n\n    var transformMatrix = new Matrix3();\n    var sunCartographicScratch = new Cartographic();\n    function setSunAndMoonDirections(uniformState, frameState) {\n        if (!defined(Transforms.computeIcrfToFixedMatrix(frameState.time, transformMatrix))) {\n            transformMatrix = Transforms.computeTemeToPseudoFixedMatrix(frameState.time, transformMatrix);\n        }\n\n        var position = Simon1994PlanetaryPositions.computeSunPositionInEarthInertialFrame(frameState.time, uniformState._sunPositionWC);\n        Matrix3.multiplyByVector(transformMatrix, position, position);\n\n        Cartesian3.normalize(position, uniformState._sunDirectionWC);\n\n        position = Matrix3.multiplyByVector(uniformState.viewRotation3D, position, uniformState._sunDirectionEC);\n        Cartesian3.normalize(position, position);\n\n        position = Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame(frameState.time, uniformState._moonDirectionEC);\n        Matrix3.multiplyByVector(transformMatrix, position, position);\n        Matrix3.multiplyByVector(uniformState.viewRotation3D, position, position);\n        Cartesian3.normalize(position, position);\n\n        var projection = frameState.mapProjection;\n        var ellipsoid = projection.ellipsoid;\n        var sunCartographic = ellipsoid.cartesianToCartographic(uniformState._sunPositionWC, sunCartographicScratch);\n        projection.project(sunCartographic, uniformState._sunPositionColumbusView);\n    }\n\n    /**\n     * Synchronizes the frustum's state with the camera state.  This is called\n     * by the {@link Scene} when rendering to ensure that automatic GLSL uniforms\n     * are set to the right value.\n     *\n     * @param {Object} camera The camera to synchronize with.\n     */\n    UniformState.prototype.updateCamera = function(camera) {\n        setView(this, camera.viewMatrix);\n        setInverseView(this, camera.inverseViewMatrix);\n        setCamera(this, camera);\n\n        this._entireFrustum.x = camera.frustum.near;\n        this._entireFrustum.y = camera.frustum.far;\n        this.updateFrustum(camera.frustum);\n\n        this._orthographicIn3D = this._mode !== SceneMode.SCENE2D && camera.frustum instanceof OrthographicFrustum;\n    };\n\n    /**\n     * Synchronizes the frustum's state with the uniform state.  This is called\n     * by the {@link Scene} when rendering to ensure that automatic GLSL uniforms\n     * are set to the right value.\n     *\n     * @param {Object} frustum The frustum to synchronize with.\n     */\n    UniformState.prototype.updateFrustum = function(frustum) {\n        setProjection(this, frustum.projectionMatrix);\n        if (defined(frustum.infiniteProjectionMatrix)) {\n            setInfiniteProjection(this, frustum.infiniteProjectionMatrix);\n        }\n        this._currentFrustum.x = frustum.near;\n        this._currentFrustum.y = frustum.far;\n\n        this._log2FarDistance = 2.0 / CesiumMath.log2(frustum.far + 1.0);\n        this._log2FarPlusOne = CesiumMath.log2(frustum.far + 1.0);\n        this._log2NearDistance = CesiumMath.log2(frustum.near);\n\n        if (defined(frustum._offCenterFrustum)) {\n            frustum = frustum._offCenterFrustum;\n        }\n\n        this._frustumPlanes.x = frustum.top;\n        this._frustumPlanes.y = frustum.bottom;\n        this._frustumPlanes.z = frustum.left;\n        this._frustumPlanes.w = frustum.right;\n    };\n\n    UniformState.prototype.updatePass = function(pass) {\n        this._pass = pass;\n    };\n\n    var EMPTY_ARRAY = [];\n\n    /**\n     * Synchronizes frame state with the uniform state.  This is called\n     * by the {@link Scene} when rendering to ensure that automatic GLSL uniforms\n     * are set to the right value.\n     *\n     * @param {FrameState} frameState The frameState to synchronize with.\n     */\n    UniformState.prototype.update = function(frameState) {\n        this._mode = frameState.mode;\n        this._mapProjection = frameState.mapProjection;\n\n        var canvas = frameState.context._canvas;\n        this._resolutionScale = canvas.width / canvas.clientWidth;\n\n        var camera = frameState.camera;\n        this.updateCamera(camera);\n\n        if (frameState.mode === SceneMode.SCENE2D) {\n            this._frustum2DWidth = camera.frustum.right - camera.frustum.left;\n            this._eyeHeight2D.x = this._frustum2DWidth * 0.5;\n            this._eyeHeight2D.y = this._eyeHeight2D.x * this._eyeHeight2D.x;\n        } else {\n            this._frustum2DWidth = 0.0;\n            this._eyeHeight2D.x = 0.0;\n            this._eyeHeight2D.y = 0.0;\n        }\n\n        setSunAndMoonDirections(this, frameState);\n        this._sunColor = Cartesian3.clone(frameState.sunColor, this._sunColor);\n\n        var brdfLutGenerator = frameState.brdfLutGenerator;\n        var brdfLut = defined(brdfLutGenerator) ? brdfLutGenerator.colorTexture : undefined;\n        this._brdfLut = brdfLut;\n\n        this._environmentMap = defaultValue(frameState.environmentMap, frameState.context.defaultCubeMap);\n\n        // IE 11 doesn't optimize out uniforms that are #ifdef'd out. So undefined values for the spherical harmonic\n        // coefficients and specular environment map atlas dimensions cause a crash.\n        this._sphericalHarmonicCoefficients = defaultValue(frameState.sphericalHarmonicCoefficients, EMPTY_ARRAY);\n        this._specularEnvironmentMaps = frameState.specularEnvironmentMaps;\n        this._specularEnvironmentMapsMaximumLOD = frameState.specularEnvironmentMapsMaximumLOD;\n\n        if (defined(this._specularEnvironmentMaps)) {\n            Cartesian2.clone(this._specularEnvironmentMaps.dimensions, this._specularEnvironmentMapsDimensions);\n        }\n\n        this._fogDensity = frameState.fog.density;\n\n        this._invertClassificationColor = frameState.invertClassificationColor;\n\n        this._frameState = frameState;\n        this._temeToPseudoFixed = Transforms.computeTemeToPseudoFixedMatrix(frameState.time, this._temeToPseudoFixed);\n\n        // Convert the relative imagerySplitPosition to absolute pixel coordinates\n        this._imagerySplitPosition = frameState.imagerySplitPosition * frameState.context.drawingBufferWidth;\n        var fov = camera.frustum.fov;\n        var viewport = this._viewport;\n        var pixelSizePerMeter;\n        if (viewport.height > viewport.width) {\n            pixelSizePerMeter = Math.tan(0.5 * fov) * 2.0 / viewport.height;\n        } else {\n            pixelSizePerMeter = Math.tan(0.5 * fov) * 2.0 / viewport.width;\n        }\n\n        this._geometricToleranceOverMeter = pixelSizePerMeter * frameState.maximumScreenSpaceError;\n        Color.clone(frameState.backgroundColor, this._backgroundColor);\n\n        this._minimumDisableDepthTestDistance = frameState.minimumDisableDepthTestDistance;\n        this._minimumDisableDepthTestDistance *= this._minimumDisableDepthTestDistance;\n        if (this._minimumDisableDepthTestDistance === Number.POSITIVE_INFINITY) {\n            this._minimumDisableDepthTestDistance = -1.0;\n        }\n    };\n\n    function cleanViewport(uniformState) {\n        if (uniformState._viewportDirty) {\n            var v = uniformState._viewport;\n            Matrix4.computeOrthographicOffCenter(v.x, v.x + v.width, v.y, v.y + v.height, 0.0, 1.0, uniformState._viewportOrthographicMatrix);\n            Matrix4.computeViewportTransformation(v, 0.0, 1.0, uniformState._viewportTransformation);\n            uniformState._viewportDirty = false;\n        }\n    }\n\n    function cleanInverseProjection(uniformState) {\n        if (uniformState._inverseProjectionDirty) {\n            uniformState._inverseProjectionDirty = false;\n\n            if (uniformState._mode !== SceneMode.SCENE2D && uniformState._mode !== SceneMode.MORPHING && !uniformState._orthographicIn3D) {\n                Matrix4.inverse(uniformState._projection, uniformState._inverseProjection);\n            } else {\n                Matrix4.clone(Matrix4.ZERO, uniformState._inverseProjection);\n            }\n        }\n    }\n\n    // Derived\n    function cleanModelView(uniformState) {\n        if (uniformState._modelViewDirty) {\n            uniformState._modelViewDirty = false;\n\n            Matrix4.multiplyTransformation(uniformState._view, uniformState._model, uniformState._modelView);\n        }\n    }\n\n    function cleanModelView3D(uniformState) {\n        if (uniformState._modelView3DDirty) {\n            uniformState._modelView3DDirty = false;\n\n            Matrix4.multiplyTransformation(uniformState.view3D, uniformState._model, uniformState._modelView3D);\n        }\n    }\n\n    function cleanInverseModelView(uniformState) {\n        if (uniformState._inverseModelViewDirty) {\n            uniformState._inverseModelViewDirty = false;\n\n            Matrix4.inverse(uniformState.modelView, uniformState._inverseModelView);\n        }\n    }\n\n    function cleanInverseModelView3D(uniformState) {\n        if (uniformState._inverseModelView3DDirty) {\n            uniformState._inverseModelView3DDirty = false;\n\n            Matrix4.inverse(uniformState.modelView3D, uniformState._inverseModelView3D);\n        }\n    }\n\n    function cleanViewProjection(uniformState) {\n        if (uniformState._viewProjectionDirty) {\n            uniformState._viewProjectionDirty = false;\n\n            Matrix4.multiply(uniformState._projection, uniformState._view, uniformState._viewProjection);\n        }\n    }\n\n    function cleanInverseViewProjection(uniformState) {\n        if (uniformState._inverseViewProjectionDirty) {\n            uniformState._inverseViewProjectionDirty = false;\n\n            Matrix4.inverse(uniformState.viewProjection, uniformState._inverseViewProjection);\n        }\n    }\n\n    function cleanModelViewProjection(uniformState) {\n        if (uniformState._modelViewProjectionDirty) {\n            uniformState._modelViewProjectionDirty = false;\n\n            Matrix4.multiply(uniformState._projection, uniformState.modelView, uniformState._modelViewProjection);\n        }\n    }\n\n    function cleanModelViewRelativeToEye(uniformState) {\n        if (uniformState._modelViewRelativeToEyeDirty) {\n            uniformState._modelViewRelativeToEyeDirty = false;\n\n            var mv = uniformState.modelView;\n            var mvRte = uniformState._modelViewRelativeToEye;\n            mvRte[0] = mv[0];\n            mvRte[1] = mv[1];\n            mvRte[2] = mv[2];\n            mvRte[3] = mv[3];\n            mvRte[4] = mv[4];\n            mvRte[5] = mv[5];\n            mvRte[6] = mv[6];\n            mvRte[7] = mv[7];\n            mvRte[8] = mv[8];\n            mvRte[9] = mv[9];\n            mvRte[10] = mv[10];\n            mvRte[11] = mv[11];\n            mvRte[12] = 0.0;\n            mvRte[13] = 0.0;\n            mvRte[14] = 0.0;\n            mvRte[15] = mv[15];\n        }\n    }\n\n    function cleanInverseModelViewProjection(uniformState) {\n        if (uniformState._inverseModelViewProjectionDirty) {\n            uniformState._inverseModelViewProjectionDirty = false;\n\n            Matrix4.inverse(uniformState.modelViewProjection, uniformState._inverseModelViewProjection);\n        }\n    }\n\n    function cleanModelViewProjectionRelativeToEye(uniformState) {\n        if (uniformState._modelViewProjectionRelativeToEyeDirty) {\n            uniformState._modelViewProjectionRelativeToEyeDirty = false;\n\n            Matrix4.multiply(uniformState._projection, uniformState.modelViewRelativeToEye, uniformState._modelViewProjectionRelativeToEye);\n        }\n    }\n\n    function cleanModelViewInfiniteProjection(uniformState) {\n        if (uniformState._modelViewInfiniteProjectionDirty) {\n            uniformState._modelViewInfiniteProjectionDirty = false;\n\n            Matrix4.multiply(uniformState._infiniteProjection, uniformState.modelView, uniformState._modelViewInfiniteProjection);\n        }\n    }\n\n    function cleanNormal(uniformState) {\n        if (uniformState._normalDirty) {\n            uniformState._normalDirty = false;\n\n            var m = uniformState._normal;\n            Matrix4.getRotation(uniformState.inverseModelView, m);\n            Matrix3.transpose(m, m);\n        }\n    }\n\n    function cleanNormal3D(uniformState) {\n        if (uniformState._normal3DDirty) {\n            uniformState._normal3DDirty = false;\n\n            var m = uniformState._normal3D;\n            Matrix4.getRotation(uniformState.inverseModelView3D, m);\n            Matrix3.transpose(m, m);\n        }\n    }\n\n    function cleanInverseNormal(uniformState) {\n        if (uniformState._inverseNormalDirty) {\n            uniformState._inverseNormalDirty = false;\n\n            Matrix4.getRotation(uniformState.inverseModelView, uniformState._inverseNormal);\n        }\n    }\n\n    function cleanInverseNormal3D(uniformState) {\n        if (uniformState._inverseNormal3DDirty) {\n            uniformState._inverseNormal3DDirty = false;\n\n            Matrix4.getRotation(uniformState.inverseModelView3D, uniformState._inverseNormal3D);\n        }\n    }\n\n    var cameraPositionMC = new Cartesian3();\n\n    function cleanEncodedCameraPositionMC(uniformState) {\n        if (uniformState._encodedCameraPositionMCDirty) {\n            uniformState._encodedCameraPositionMCDirty = false;\n\n            Matrix4.multiplyByPoint(uniformState.inverseModel, uniformState._cameraPosition, cameraPositionMC);\n            EncodedCartesian3.fromCartesian(cameraPositionMC, uniformState._encodedCameraPositionMC);\n        }\n    }\n\n    var view2Dto3DPScratch = new Cartesian3();\n    var view2Dto3DRScratch = new Cartesian3();\n    var view2Dto3DUScratch = new Cartesian3();\n    var view2Dto3DDScratch = new Cartesian3();\n    var view2Dto3DCartographicScratch = new Cartographic();\n    var view2Dto3DCartesian3Scratch = new Cartesian3();\n    var view2Dto3DMatrix4Scratch = new Matrix4();\n\n    function view2Dto3D(position2D, direction2D, right2D, up2D, frustum2DWidth, mode, projection, result) {\n        // The camera position and directions are expressed in the 2D coordinate system where the Y axis is to the East,\n        // the Z axis is to the North, and the X axis is out of the map.  Express them instead in the ENU axes where\n        // X is to the East, Y is to the North, and Z is out of the local horizontal plane.\n        var p = view2Dto3DPScratch;\n        p.x = position2D.y;\n        p.y = position2D.z;\n        p.z = position2D.x;\n\n        var r = view2Dto3DRScratch;\n        r.x = right2D.y;\n        r.y = right2D.z;\n        r.z = right2D.x;\n\n        var u = view2Dto3DUScratch;\n        u.x = up2D.y;\n        u.y = up2D.z;\n        u.z = up2D.x;\n\n        var d = view2Dto3DDScratch;\n        d.x = direction2D.y;\n        d.y = direction2D.z;\n        d.z = direction2D.x;\n\n        // In 2D, the camera height is always 12.7 million meters.\n        // The apparent height is equal to half the frustum width.\n        if (mode === SceneMode.SCENE2D) {\n            p.z = frustum2DWidth * 0.5;\n        }\n\n        // Compute the equivalent camera position in the real (3D) world.\n        // In 2D and Columbus View, the camera can travel outside the projection, and when it does so\n        // there's not really any corresponding location in the real world.  So clamp the unprojected\n        // longitude and latitude to their valid ranges.\n        var cartographic = projection.unproject(p, view2Dto3DCartographicScratch);\n        cartographic.longitude = CesiumMath.clamp(cartographic.longitude, -Math.PI, Math.PI);\n        cartographic.latitude = CesiumMath.clamp(cartographic.latitude, -CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO);\n        var ellipsoid = projection.ellipsoid;\n        var position3D = ellipsoid.cartographicToCartesian(cartographic, view2Dto3DCartesian3Scratch);\n\n        // Compute the rotation from the local ENU at the real world camera position to the fixed axes.\n        var enuToFixed = Transforms.eastNorthUpToFixedFrame(position3D, ellipsoid, view2Dto3DMatrix4Scratch);\n\n        // Transform each camera direction to the fixed axes.\n        Matrix4.multiplyByPointAsVector(enuToFixed, r, r);\n        Matrix4.multiplyByPointAsVector(enuToFixed, u, u);\n        Matrix4.multiplyByPointAsVector(enuToFixed, d, d);\n\n        // Compute the view matrix based on the new fixed-frame camera position and directions.\n        if (!defined(result)) {\n            result = new Matrix4();\n        }\n\n        result[0] = r.x;\n        result[1] = u.x;\n        result[2] = -d.x;\n        result[3] = 0.0;\n        result[4] = r.y;\n        result[5] = u.y;\n        result[6] = -d.y;\n        result[7] = 0.0;\n        result[8] = r.z;\n        result[9] = u.z;\n        result[10] = -d.z;\n        result[11] = 0.0;\n        result[12] = -Cartesian3.dot(r, position3D);\n        result[13] = -Cartesian3.dot(u, position3D);\n        result[14] = Cartesian3.dot(d, position3D);\n        result[15] = 1.0;\n\n        return result;\n    }\n\n    function updateView3D(that) {\n        if (that._view3DDirty) {\n            if (that._mode === SceneMode.SCENE3D) {\n                Matrix4.clone(that._view, that._view3D);\n            } else {\n                view2Dto3D(that._cameraPosition, that._cameraDirection, that._cameraRight, that._cameraUp, that._frustum2DWidth, that._mode, that._mapProjection, that._view3D);\n            }\n            Matrix4.getRotation(that._view3D, that._viewRotation3D);\n            that._view3DDirty = false;\n        }\n    }\n\n    function updateInverseView3D(that){\n        if (that._inverseView3DDirty) {\n            Matrix4.inverseTransformation(that.view3D, that._inverseView3D);\n            Matrix4.getRotation(that._inverseView3D, that._inverseViewRotation3D);\n            that._inverseView3DDirty = false;\n        }\n    }\n\n    return UniformState;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap',\n        '../Shaders/BrdfLutGeneratorFS'\n    ], function(\n        BoundingRectangle,\n        defined,\n        defineProperties,\n        destroyObject,\n        PixelFormat,\n        Framebuffer,\n        PixelDatatype,\n        RenderState,\n        Sampler,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap,\n        BrdfLutGeneratorFS) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function BrdfLutGenerator() {\n        this._framebuffer = undefined;\n        this._colorTexture = undefined;\n        this._drawCommand = undefined;\n    }\n\n    defineProperties(BrdfLutGenerator.prototype, {\n        colorTexture : {\n            get : function() {\n                return this._colorTexture;\n            }\n        }\n    });\n\n    function createCommand(generator, context) {\n        var framebuffer = generator._framebuffer;\n\n        var drawCommand = context.createViewportQuadCommand(BrdfLutGeneratorFS, {\n            framebuffer : framebuffer,\n            renderState : RenderState.fromCache({\n                viewport : new BoundingRectangle(0.0, 0.0, 256.0, 256.0)\n            })\n        });\n\n        generator._drawCommand = drawCommand;\n    }\n\n    function createFramebuffer(generator, context) {\n        var colorTexture = new Texture({\n            context : context,\n            width : 256,\n            height: 256,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n\n        generator._colorTexture = colorTexture;\n\n        var framebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [colorTexture],\n            destroyAttachments : false\n        });\n\n        generator._framebuffer = framebuffer;\n    }\n\n    BrdfLutGenerator.prototype.update = function(frameState) {\n        if (!defined(this._colorTexture)) {\n            var context = frameState.context;\n\n            createFramebuffer(this, context);\n            createCommand(this, context);\n            this._drawCommand.execute(context);\n            this._framebuffer = this._framebuffer && this._framebuffer.destroy();\n            this._drawCommand.shaderProgram = this._drawCommand.shaderProgram && this._drawCommand.shaderProgram.destroy();\n        }\n    };\n\n    BrdfLutGenerator.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    BrdfLutGenerator.prototype.destroy = function() {\n        this._colorTexture = this._colorTexture && this._colorTexture.destroy();\n        return destroyObject(this);\n    };\n\n    return BrdfLutGenerator;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"varying vec2 v_textureCoordinates;\\n\\\nconst float M_PI = 3.141592653589793;\\n\\\n\\n\\\nfloat vdcRadicalInverse(int i)\\n\\\n{\\n\\\n    float r;\\n\\\n    float base = 2.0;\\n\\\n    float value = 0.0;\\n\\\n    float invBase = 1.0 / base;\\n\\\n    float invBi = invBase;\\n\\\n    for (int x = 0; x < 100; x++)\\n\\\n    {\\n\\\n        if (i <= 0)\\n\\\n        {\\n\\\n            break;\\n\\\n        }\\n\\\n        r = mod(float(i), base);\\n\\\n        value += r * invBi;\\n\\\n        invBi *= invBase;\\n\\\n        i = int(float(i) * invBase);\\n\\\n    }\\n\\\n    return value;\\n\\\n}\\n\\\n\\n\\\nvec2 hammersley2D(int i, int N)\\n\\\n{\\n\\\n    return vec2(float(i) / float(N), vdcRadicalInverse(i));\\n\\\n}\\n\\\n\\n\\\nvec3 importanceSampleGGX(vec2 xi, float roughness, vec3 N)\\n\\\n{\\n\\\n    float a = roughness * roughness;\\n\\\n    float phi = 2.0 * M_PI * xi.x;\\n\\\n    float cosTheta = sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y));\\n\\\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\n\\\n    vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\\n\\\n    vec3 upVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\\n\\\n    vec3 tangentX = normalize(cross(upVector, N));\\n\\\n    vec3 tangentY = cross(N, tangentX);\\n\\\n    return tangentX * H.x + tangentY * H.y + N * H.z;\\n\\\n}\\n\\\n\\n\\\nfloat G1_Smith(float NdotV, float k)\\n\\\n{\\n\\\n    return NdotV / (NdotV * (1.0 - k) + k);\\n\\\n}\\n\\\n\\n\\\nfloat G_Smith(float roughness, float NdotV, float NdotL)\\n\\\n{\\n\\\n    float k = roughness * roughness / 2.0;\\n\\\n    return G1_Smith(NdotV, k) * G1_Smith(NdotL, k);\\n\\\n}\\n\\\n\\n\\\nvec2 integrateBrdf(float roughness, float NdotV)\\n\\\n{\\n\\\n    vec3 V = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);\\n\\\n    float A = 0.0;\\n\\\n    float B = 0.0;\\n\\\n    const int NumSamples = 1024;\\n\\\n    for (int i = 0; i < NumSamples; i++)\\n\\\n    {\\n\\\n        vec2 xi = hammersley2D(i, NumSamples);\\n\\\n        vec3 H = importanceSampleGGX(xi, roughness, vec3(0.0, 0.0, 1.0));\\n\\\n        vec3 L = 2.0 * dot(V, H) * H - V;\\n\\\n        float NdotL = clamp(L.z, 0.0, 1.0);\\n\\\n        float NdotH = clamp(H.z, 0.0, 1.0);\\n\\\n        float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\\n        if (NdotL > 0.0)\\n\\\n        {\\n\\\n            float G = G_Smith(roughness, NdotV, NdotL);\\n\\\n            float G_Vis = G * VdotH / (NdotH * NdotV);\\n\\\n            float Fc = pow(1.0 - VdotH, 5.0);\\n\\\n            A += (1.0 - Fc) * G_Vis;\\n\\\n            B += Fc * G_Vis;\\n\\\n        }\\n\\\n    }\\n\\\n    return vec2(A, B) / float(NumSamples);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = vec4(integrateBrdf(1.0 - v_textureCoordinates.y, v_textureCoordinates.x), 0.0, 1.0);\\n\\\n}\\n\\\n\";\n});","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './FrustumGeometry',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './OrthographicFrustum',\n        './PerspectiveFrustum',\n        './PrimitiveType',\n        './Quaternion'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        FrustumGeometry,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        OrthographicFrustum,\n        PerspectiveFrustum,\n        PrimitiveType,\n        Quaternion) {\n    'use strict';\n\n    var PERSPECTIVE = 0;\n    var ORTHOGRAPHIC = 1;\n\n    /**\n     * A description of the outline of a frustum with the given the origin and orientation.\n     *\n     * @alias FrustumOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\n     * @param {Cartesian3} options.origin The origin of the frustum.\n     * @param {Quaternion} options.orientation The orientation of the frustum.\n     */\n    function FrustumOutlineGeometry(options) {\n        \n\n        var frustum = options.frustum;\n        var orientation = options.orientation;\n        var origin = options.origin;\n\n        // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\n        // creating multiple FrustumOutlineGeometrys. This way the near plane of one frustum doesn't overlap\n        // the far plane of another.\n        var drawNearPlane = defaultValue(options._drawNearPlane, true);\n\n        var frustumType;\n        var frustumPackedLength;\n        if (frustum instanceof PerspectiveFrustum) {\n            frustumType = PERSPECTIVE;\n            frustumPackedLength = PerspectiveFrustum.packedLength;\n        } else if (frustum instanceof OrthographicFrustum) {\n            frustumType = ORTHOGRAPHIC;\n            frustumPackedLength = OrthographicFrustum.packedLength;\n        }\n\n        this._frustumType = frustumType;\n        this._frustum = frustum.clone();\n        this._origin = Cartesian3.clone(origin);\n        this._orientation = Quaternion.clone(orientation);\n        this._drawNearPlane = drawNearPlane;\n        this._workerName = 'createFrustumOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {FrustumOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    FrustumOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var frustumType = value._frustumType;\n        var frustum = value._frustum;\n\n        array[startingIndex++] = frustumType;\n\n        if (frustumType === PERSPECTIVE) {\n            PerspectiveFrustum.pack(frustum, array, startingIndex);\n            startingIndex += PerspectiveFrustum.packedLength;\n        } else {\n            OrthographicFrustum.pack(frustum, array, startingIndex);\n            startingIndex += OrthographicFrustum.packedLength;\n        }\n\n        Cartesian3.pack(value._origin, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n        Quaternion.pack(value._orientation, array, startingIndex);\n        startingIndex += Quaternion.packedLength;\n        array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\n\n        return array;\n    };\n\n    var scratchPackPerspective = new PerspectiveFrustum();\n    var scratchPackOrthographic = new OrthographicFrustum();\n    var scratchPackQuaternion = new Quaternion();\n    var scratchPackorigin = new Cartesian3();\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {FrustumOutlineGeometry} [result] The object into which to store the result.\n     */\n    FrustumOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var frustumType = array[startingIndex++];\n\n        var frustum;\n        if (frustumType === PERSPECTIVE) {\n            frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\n            startingIndex += PerspectiveFrustum.packedLength;\n        } else {\n            frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\n            startingIndex += OrthographicFrustum.packedLength;\n        }\n\n        var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\n        startingIndex += Cartesian3.packedLength;\n        var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\n        startingIndex += Quaternion.packedLength;\n        var drawNearPlane = array[startingIndex] === 1.0;\n\n        if (!defined(result)) {\n            return new FrustumOutlineGeometry({\n                frustum : frustum,\n                origin : origin,\n                orientation : orientation,\n                _drawNearPlane : drawNearPlane\n            });\n        }\n\n        var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\n        result._frustum = frustum.clone(frustumResult);\n\n        result._frustumType = frustumType;\n        result._origin = Cartesian3.clone(origin, result._origin);\n        result._orientation = Quaternion.clone(orientation, result._orientation);\n        result._drawNearPlane = drawNearPlane;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a frustum outline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {FrustumOutlineGeometry} frustumGeometry A description of the frustum.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    FrustumOutlineGeometry.createGeometry = function(frustumGeometry) {\n        var frustumType = frustumGeometry._frustumType;\n        var frustum = frustumGeometry._frustum;\n        var origin = frustumGeometry._origin;\n        var orientation = frustumGeometry._orientation;\n        var drawNearPlane = frustumGeometry._drawNearPlane;\n\n        var positions = new Float64Array(3 * 4 * 2);\n        FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\n\n        var attributes = new GeometryAttributes({\n            position : new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            })\n        });\n\n        var offset;\n        var index;\n\n        var numberOfPlanes = drawNearPlane ? 2 : 1;\n        var indices = new Uint16Array(8 * (numberOfPlanes + 1));\n\n        // Build the near/far planes\n        var i = drawNearPlane ? 0 : 1;\n        for (; i < 2; ++i) {\n            offset = drawNearPlane ? i * 8 : 0;\n            index = i * 4;\n\n            indices[offset] = index;\n            indices[offset + 1] = index + 1;\n            indices[offset + 2] = index + 1;\n            indices[offset + 3] = index + 2;\n            indices[offset + 4] = index + 2;\n            indices[offset + 5] = index + 3;\n            indices[offset + 6] = index + 3;\n            indices[offset + 7] = index;\n        }\n\n        // Build the sides of the frustums\n        for (i = 0; i < 2; ++i) {\n            offset = (numberOfPlanes + i) * 8;\n            index = i * 4;\n\n            indices[offset] = index;\n            indices[offset + 1] = index + 4;\n            indices[offset + 2] = index + 1;\n            indices[offset + 3] = index + 5;\n            indices[offset + 4] = index + 2;\n            indices[offset + 5] = index + 6;\n            indices[offset + 6] = index + 3;\n            indices[offset + 7] = index + 7;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : BoundingSphere.fromVertices(positions)\n        });\n    };\n\n    return FrustumOutlineGeometry;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/Cartesian3',\n        '../Core/ComponentDatatype',\n        '../Core/defined',\n        '../Core/FeatureDetection',\n        '../Core/Geometry',\n        '../Core/GeometryAttribute',\n        '../Core/PrimitiveType',\n        '../Renderer/BufferUsage',\n        '../Renderer/DrawCommand',\n        '../Renderer/Pass',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderProgram',\n        '../Renderer/ShaderSource',\n        '../Renderer/VertexArray',\n        '../Shaders/DepthPlaneFS',\n        '../Shaders/DepthPlaneVS',\n        './SceneMode'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        ComponentDatatype,\n        defined,\n        FeatureDetection,\n        Geometry,\n        GeometryAttribute,\n        PrimitiveType,\n        BufferUsage,\n        DrawCommand,\n        Pass,\n        RenderState,\n        ShaderProgram,\n        ShaderSource,\n        VertexArray,\n        DepthPlaneFS,\n        DepthPlaneVS,\n        SceneMode) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function DepthPlane() {\n        this._rs = undefined;\n        this._sp = undefined;\n        this._va = undefined;\n        this._command = undefined;\n        this._mode = undefined;\n        this._useLogDepth = false;\n    }\n\n    var depthQuadScratch = FeatureDetection.supportsTypedArrays() ? new Float32Array(12) : [];\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n\n    function computeDepthQuad(ellipsoid, frameState) {\n        var radii = ellipsoid.radii;\n        var p = frameState.camera.positionWC;\n\n        // Find the corresponding position in the scaled space of the ellipsoid.\n        var q = Cartesian3.multiplyComponents(ellipsoid.oneOverRadii, p, scratchCartesian1);\n\n        var qMagnitude = Cartesian3.magnitude(q);\n        var qUnit = Cartesian3.normalize(q, scratchCartesian2);\n\n        // Determine the east and north directions at q.\n        var eUnit = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, q, scratchCartesian3), scratchCartesian3);\n        var nUnit = Cartesian3.normalize(Cartesian3.cross(qUnit, eUnit, scratchCartesian4), scratchCartesian4);\n\n        // Determine the radius of the 'limb' of the ellipsoid.\n        var wMagnitude = Math.sqrt(Cartesian3.magnitudeSquared(q) - 1.0);\n\n        // Compute the center and offsets.\n        var center = Cartesian3.multiplyByScalar(qUnit, 1.0 / qMagnitude, scratchCartesian1);\n        var scalar = wMagnitude / qMagnitude;\n        var eastOffset = Cartesian3.multiplyByScalar(eUnit, scalar, scratchCartesian2);\n        var northOffset = Cartesian3.multiplyByScalar(nUnit, scalar, scratchCartesian3);\n\n        // A conservative measure for the longitudes would be to use the min/max longitudes of the bounding frustum.\n        var upperLeft = Cartesian3.add(center, northOffset, scratchCartesian4);\n        Cartesian3.subtract(upperLeft, eastOffset, upperLeft);\n        Cartesian3.multiplyComponents(radii, upperLeft, upperLeft);\n        Cartesian3.pack(upperLeft, depthQuadScratch, 0);\n\n        var lowerLeft = Cartesian3.subtract(center, northOffset, scratchCartesian4);\n        Cartesian3.subtract(lowerLeft, eastOffset, lowerLeft);\n        Cartesian3.multiplyComponents(radii, lowerLeft, lowerLeft);\n        Cartesian3.pack(lowerLeft, depthQuadScratch, 3);\n\n        var upperRight = Cartesian3.add(center, northOffset, scratchCartesian4);\n        Cartesian3.add(upperRight, eastOffset, upperRight);\n        Cartesian3.multiplyComponents(radii, upperRight, upperRight);\n        Cartesian3.pack(upperRight, depthQuadScratch, 6);\n\n        var lowerRight = Cartesian3.subtract(center, northOffset, scratchCartesian4);\n        Cartesian3.add(lowerRight, eastOffset, lowerRight);\n        Cartesian3.multiplyComponents(radii, lowerRight, lowerRight);\n        Cartesian3.pack(lowerRight, depthQuadScratch, 9);\n\n        return depthQuadScratch;\n    }\n\n    DepthPlane.prototype.update = function(frameState) {\n        this._mode = frameState.mode;\n        if (frameState.mode !== SceneMode.SCENE3D) {\n            return;\n        }\n\n        var context = frameState.context;\n        var ellipsoid = frameState.mapProjection.ellipsoid;\n        var useLogDepth = frameState.useLogDepth;\n\n        if (!defined(this._command)) {\n            this._rs = RenderState.fromCache({ // Write depth, not color\n                cull : {\n                    enabled : true\n                },\n                depthTest : {\n                    enabled : true\n                },\n                colorMask : {\n                    red : false,\n                    green : false,\n                    blue : false,\n                    alpha : false\n                }\n            });\n\n            this._command = new DrawCommand({\n                renderState : this._rs,\n                boundingVolume : new BoundingSphere(Cartesian3.ZERO, ellipsoid.maximumRadius),\n                pass : Pass.OPAQUE,\n                owner : this\n            });\n        }\n\n        if (!defined(this._sp) || this._useLogDepth !== useLogDepth) {\n            this._useLogDepth = useLogDepth;\n\n            var vs = new ShaderSource({\n                sources : [DepthPlaneVS]\n            });\n            var fs = new ShaderSource({\n                sources : [DepthPlaneFS]\n            });\n            if (useLogDepth) {\n                var extension =\n                    '#ifdef GL_EXT_frag_depth \\n' +\n                    '#extension GL_EXT_frag_depth : enable \\n' +\n                    '#endif \\n\\n';\n\n                fs.sources.push(extension);\n                fs.defines.push('LOG_DEPTH');\n                vs.defines.push('LOG_DEPTH');\n                vs.defines.push('DISABLE_GL_POSITION_LOG_DEPTH');\n            }\n\n            this._sp = ShaderProgram.replaceCache({\n                shaderProgram : this._sp,\n                context : context,\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs,\n                attributeLocations : {\n                    position : 0\n                }\n            });\n\n            this._command.shaderProgram = this._sp;\n        }\n\n        // update depth plane\n        var depthQuad = computeDepthQuad(ellipsoid, frameState);\n\n        // depth plane\n        if (!defined(this._va)) {\n            var geometry = new Geometry({\n                attributes : {\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.FLOAT,\n                        componentsPerAttribute : 3,\n                        values : depthQuad\n                    })\n                },\n                indices : [0, 1, 2, 2, 1, 3],\n                primitiveType : PrimitiveType.TRIANGLES\n            });\n\n            this._va = VertexArray.fromGeometry({\n                context : context,\n                geometry : geometry,\n                attributeLocations : {\n                    position : 0\n                },\n                bufferUsage : BufferUsage.DYNAMIC_DRAW\n            });\n\n            this._command.vertexArray = this._va;\n        } else {\n            this._va.getAttribute(0).vertexBuffer.copyFromArrayView(depthQuad);\n        }\n    };\n\n    DepthPlane.prototype.execute = function(context, passState) {\n        if (this._mode === SceneMode.SCENE3D) {\n            this._command.execute(context, passState);\n        }\n    };\n\n    DepthPlane.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    DepthPlane.prototype.destroy = function() {\n        this._sp = this._sp && this._sp.destroy();\n        this._va = this._va && this._va.destroy();\n    };\n\n    return DepthPlane;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"varying vec4 positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 direction = normalize(positionEC.xyz);\\n\\\n    czm_ray ray = czm_ray(vec3(0.0), direction);\\n\\\n\\n\\\n    vec3 ellipsoid_center = czm_view[3].xyz;\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoid_center, czm_ellipsoidInverseRadii);\\n\\\n    if (!czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    czm_writeLogDepth();\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec4 position;\\n\\\n\\n\\\nvarying vec4 positionEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    positionEC = czm_modelView * position;\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n\\n\\\n    czm_vertexLogDepth();\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Renderer/DrawCommand',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderSource'\n    ], function(\n        defaultValue,\n        defined,\n        DrawCommand,\n        RenderState,\n        ShaderSource) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function DerivedCommand() {}\n\n    var fragDepthRegex = /\\bgl_FragDepthEXT\\b/;\n    var discardRegex = /\\bdiscard\\b/;\n\n    function getDepthOnlyShaderProgram(context, shaderProgram) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, 'depthOnly');\n        if (!defined(shader)) {\n            var attributeLocations = shaderProgram._attributeLocations;\n            var fs = shaderProgram.fragmentShaderSource;\n\n            var i;\n            var writesDepthOrDiscards = false;\n            var sources = fs.sources;\n            var length = sources.length;\n            for (i = 0; i < length; ++i) {\n                if (fragDepthRegex.test(sources[i]) || discardRegex.test(sources[i])) {\n                    writesDepthOrDiscards = true;\n                    break;\n                }\n            }\n\n            var usesLogDepth = false;\n            var defines = fs.defines;\n            length = defines.length;\n            for (i = 0; i < length; ++i) {\n                if (defines[i] === 'LOG_DEPTH') {\n                    usesLogDepth = true;\n                    break;\n                }\n            }\n\n            var source;\n            if (!writesDepthOrDiscards && !usesLogDepth) {\n                source =\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    gl_FragColor = vec4(1.0); \\n' +\n                    '} \\n';\n                fs = new ShaderSource({\n                    sources : [source]\n                });\n            } else if (!writesDepthOrDiscards && usesLogDepth) {\n                source =\n                    '#ifdef GL_EXT_frag_depth \\n' +\n                    '#extension GL_EXT_frag_depth : enable \\n' +\n                    '#endif \\n\\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    gl_FragColor = vec4(1.0); \\n' +\n                    '    czm_writeLogDepth(); \\n' +\n                    '} \\n';\n                fs = new ShaderSource({\n                    defines : ['LOG_DEPTH'],\n                    sources : [source]\n                });\n            }\n\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, 'depthOnly', {\n                vertexShaderSource : shaderProgram.vertexShaderSource,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    function getDepthOnlyRenderState(scene, renderState) {\n        var cache = scene._depthOnlyRenderStateCache;\n        var depthOnlyState = cache[renderState.id];\n        if (!defined(depthOnlyState)) {\n            var rs = RenderState.getState(renderState);\n            rs.depthMask = true;\n            rs.colorMask = {\n                red : false,\n                green : false,\n                blue : false,\n                alpha : false\n            };\n\n            depthOnlyState = RenderState.fromCache(rs);\n            cache[renderState.id] = depthOnlyState;\n        }\n\n        return depthOnlyState;\n    }\n\n    DerivedCommand.createDepthOnlyDerivedCommand = function(scene, command, context, result) {\n        // For a depth only pass, we bind a framebuffer with only a depth attachment (no color attachments),\n        // do not write color, and write depth. If the fragment shader doesn't modify the fragment depth\n        // or discard, the driver can replace the fragment shader with a pass-through shader. We're unsure if this\n        // actually happens so we modify the shader to use a pass-through fragment shader.\n\n        if (!defined(result)) {\n            result = {};\n        }\n\n        var shader;\n        var renderState;\n        if (defined(result.depthOnlyCommand)) {\n            shader = result.depthOnlyCommand.shaderProgram;\n            renderState = result.depthOnlyCommand.renderState;\n        }\n\n        result.depthOnlyCommand = DrawCommand.shallowClone(command, result.depthOnlyCommand);\n\n        if (!defined(shader) || result.shaderProgramId !== command.shaderProgram.id) {\n            result.depthOnlyCommand.shaderProgram = getDepthOnlyShaderProgram(context, command.shaderProgram);\n            result.depthOnlyCommand.renderState = getDepthOnlyRenderState(scene, command.renderState);\n            result.shaderProgramId = command.shaderProgram.id;\n        } else {\n            result.depthOnlyCommand.shaderProgram = shader;\n            result.depthOnlyCommand.renderState = renderState;\n        }\n\n        return result;\n    };\n\n    var writeLogDepthRegex = /\\s+czm_writeLogDepth\\(/;\n    var vertexlogDepthRegex = /\\s+czm_vertexLogDepth\\(/;\n    var extensionRegex = /\\s*#extension\\s+GL_EXT_frag_depth\\s*:\\s*enable/;\n\n    function getLogDepthShaderProgram(context, shaderProgram) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, 'logDepth');\n        if (!defined(shader)) {\n            var attributeLocations = shaderProgram._attributeLocations;\n            var vs = shaderProgram.vertexShaderSource.clone();\n            var fs = shaderProgram.fragmentShaderSource.clone();\n\n            vs.defines = defined(vs.defines) ? vs.defines.slice(0) : [];\n            vs.defines.push('LOG_DEPTH');\n            fs.defines = defined(fs.defines) ? fs.defines.slice(0) : [];\n            fs.defines.push('LOG_DEPTH');\n\n            var i;\n            var logMain;\n            var writesLogDepth = false;\n            var sources = vs.sources;\n            var length = sources.length;\n            for (i = 0; i < length; ++i) {\n                if (vertexlogDepthRegex.test(sources[i])) {\n                    writesLogDepth = true;\n                    break;\n                }\n            }\n\n            if (!writesLogDepth) {\n                for (i = 0; i < length; ++i) {\n                    sources[i] = ShaderSource.replaceMain(sources[i], 'czm_log_depth_main');\n                }\n\n                logMain =\n                    '\\n\\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    czm_log_depth_main(); \\n' +\n                    '    czm_vertexLogDepth(); \\n' +\n                    '} \\n';\n                sources.push(logMain);\n            }\n\n            var addExtension = true;\n            writesLogDepth = false;\n            sources = fs.sources;\n            length = sources.length;\n            for (i = 0; i < length; ++i) {\n                if (writeLogDepthRegex.test(sources[i])) {\n                    writesLogDepth = true;\n                }\n                if (extensionRegex.test(sources[i])) {\n                    addExtension = false;\n                }\n            }\n\n            var logSource = '';\n            if (addExtension) {\n                logSource +=\n                    '#ifdef GL_EXT_frag_depth \\n' +\n                    '#extension GL_EXT_frag_depth : enable \\n' +\n                    '#endif \\n\\n';\n            }\n\n            if (!writesLogDepth) {\n                for (i = 0; i < length; i++) {\n                    sources[i] = ShaderSource.replaceMain(sources[i], 'czm_log_depth_main');\n                }\n\n                logSource +=\n                    '\\n' +\n                    'void main() \\n' +\n                    '{ \\n' +\n                    '    czm_log_depth_main(); \\n' +\n                    '    czm_writeLogDepth(); \\n' +\n                    '} \\n';\n            }\n\n            sources.push(logSource);\n\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, 'logDepth', {\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    DerivedCommand.createLogDepthCommand = function(command, context, result) {\n        if (!defined(result)) {\n            result = {};\n        }\n\n        var shader;\n        if (defined(result.command)) {\n            shader = result.command.shaderProgram;\n        }\n\n        result.command = DrawCommand.shallowClone(command, result.command);\n\n        if (!defined(shader) || result.shaderProgramId !== command.shaderProgram.id) {\n            result.command.shaderProgram = getLogDepthShaderProgram(context, command.shaderProgram);\n            result.shaderProgramId = command.shaderProgram.id;\n        } else {\n            result.command.shaderProgram = shader;\n        }\n\n        return result;\n    };\n\n    function getPickShaderProgram(context, shaderProgram, pickId) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, 'pick');\n        if (!defined(shader)) {\n            var attributeLocations = shaderProgram._attributeLocations;\n            var fs = shaderProgram.fragmentShaderSource;\n\n            var sources = fs.sources;\n            var length = sources.length;\n\n            var newMain =\n                'void main() \\n' +\n                '{ \\n' +\n                '    czm_non_pick_main(); \\n' +\n                '    if (gl_FragColor.a == 0.0) { \\n' +\n                '        discard; \\n' +\n                '    } \\n' +\n                '    gl_FragColor = ' + pickId + '; \\n' +\n                '} \\n';\n            var newSources = new Array(length + 1);\n            for (var i = 0; i < length; ++i) {\n                newSources[i] = ShaderSource.replaceMain(sources[i], 'czm_non_pick_main');\n            }\n            newSources[length] = newMain;\n            fs = new ShaderSource({\n                sources : newSources,\n                defines : fs.defines\n            });\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, 'pick', {\n                vertexShaderSource : shaderProgram.vertexShaderSource,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    function getPickRenderState(scene, renderState) {\n        var cache = scene._pickRenderStateCache;\n        var pickState = cache[renderState.id];\n        if (!defined(pickState)) {\n            var rs = RenderState.getState(renderState);\n            rs.blending.enabled = false;\n\n            // Turns on depth writing for opaque and translucent passes\n            // Overlapping translucent geometry on the globe surface may exhibit z-fighting\n            // during the pick pass which may not match the rendered scene. Once\n            // terrain is on by default and ground primitives are used instead\n            // this will become less of a problem.\n            rs.depthMask = true;\n\n            pickState = RenderState.fromCache(rs);\n            cache[renderState.id] = pickState;\n        }\n\n        return pickState;\n    }\n\n    DerivedCommand.createPickDerivedCommand = function(scene, command, context, result) {\n        if (!defined(result)) {\n            result = {};\n        }\n\n        var shader;\n        var renderState;\n        if (defined(result.pickCommand)) {\n            shader = result.pickCommand.shaderProgram;\n            renderState = result.pickCommand.renderState;\n        }\n\n        result.pickCommand = DrawCommand.shallowClone(command, result.pickCommand);\n\n        if (!defined(shader) || result.shaderProgramId !== command.shaderProgram.id) {\n            result.pickCommand.shaderProgram = getPickShaderProgram(context, command.shaderProgram, command.pickId);\n            result.pickCommand.renderState = getPickRenderState(scene, command.renderState);\n            result.shaderProgramId = command.shaderProgram.id;\n        } else {\n            result.pickCommand.shaderProgram = shader;\n            result.pickCommand.renderState = renderState;\n        }\n\n        return result;\n    };\n\n    function getHdrShaderProgram(context, shaderProgram) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, 'HDR');\n        if (!defined(shader)) {\n            var attributeLocations = shaderProgram._attributeLocations;\n            var vs = shaderProgram.vertexShaderSource.clone();\n            var fs = shaderProgram.fragmentShaderSource.clone();\n\n            vs.defines = defined(vs.defines) ? vs.defines.slice(0) : [];\n            vs.defines.push('HDR');\n            fs.defines = defined(fs.defines) ? fs.defines.slice(0) : [];\n            fs.defines.push('HDR');\n\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, 'HDR', {\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    DerivedCommand.createHdrCommand = function(command, context, result) {\n        if (!defined(result)) {\n            result = {};\n        }\n\n        var shader;\n        if (defined(result.command)) {\n            shader = result.command.shaderProgram;\n        }\n\n        result.command = DrawCommand.shallowClone(command, result.command);\n\n        if (!defined(shader) || result.shaderProgramId !== command.shaderProgram.id) {\n            result.command.shaderProgram = getHdrShaderProgram(context, command.shaderProgram);\n            result.shaderProgramId = command.shaderProgram.id;\n        } else {\n            result.command.shaderProgram = shader;\n        }\n\n        return result;\n    };\n\n    return DerivedCommand;\n});\n","define([\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Math',\n        '../Core/Matrix3',\n        '../Core/Quaternion'\n    ], function(\n        defined,\n        destroyObject,\n        DeveloperError,\n        CesiumMath,\n        Matrix3,\n        Quaternion) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function DeviceOrientationCameraController(scene) {\n        \n\n        this._scene = scene;\n\n        this._lastAlpha = undefined;\n        this._lastBeta = undefined;\n        this._lastGamma = undefined;\n\n        this._alpha = undefined;\n        this._beta = undefined;\n        this._gamma = undefined;\n\n        var that = this;\n\n        function callback(e) {\n            var alpha = e.alpha;\n            if (!defined(alpha)) {\n                that._alpha = undefined;\n                that._beta = undefined;\n                that._gamma = undefined;\n                return;\n            }\n\n            that._alpha = CesiumMath.toRadians(alpha);\n            that._beta = CesiumMath.toRadians(e.beta);\n            that._gamma = CesiumMath.toRadians(e.gamma);\n        }\n\n        window.addEventListener('deviceorientation', callback, false);\n\n        this._removeListener = function() {\n            window.removeEventListener('deviceorientation', callback, false);\n        };\n    }\n\n    var scratchQuaternion1 = new Quaternion();\n    var scratchQuaternion2 = new Quaternion();\n    var scratchMatrix3 = new Matrix3();\n\n    function rotate(camera, alpha, beta, gamma) {\n        var direction = camera.direction;\n        var right = camera.right;\n        var up = camera.up;\n\n        var bQuat = Quaternion.fromAxisAngle(direction, beta, scratchQuaternion2);\n        var gQuat = Quaternion.fromAxisAngle(right, gamma, scratchQuaternion1);\n\n        var rotQuat = Quaternion.multiply(gQuat, bQuat, gQuat);\n\n        var aQuat = Quaternion.fromAxisAngle(up, alpha, scratchQuaternion2);\n        Quaternion.multiply(aQuat, rotQuat, rotQuat);\n\n        var matrix = Matrix3.fromQuaternion(rotQuat, scratchMatrix3);\n        Matrix3.multiplyByVector(matrix, right, right);\n        Matrix3.multiplyByVector(matrix, up, up);\n        Matrix3.multiplyByVector(matrix, direction, direction);\n    }\n\n    DeviceOrientationCameraController.prototype.update = function() {\n        if (!defined(this._alpha)) {\n            return;\n        }\n\n        if (!defined(this._lastAlpha)) {\n            this._lastAlpha = this._alpha;\n            this._lastBeta = this._beta;\n            this._lastGamma = this._gamma;\n        }\n\n        var a = this._lastAlpha - this._alpha;\n        var b = this._lastBeta - this._beta;\n        var g = this._lastGamma - this._gamma;\n\n        rotate(this._scene.camera, -a, b, g);\n\n        this._lastAlpha = this._alpha;\n        this._lastBeta = this._beta;\n        this._lastGamma = this._gamma;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    DeviceOrientationCameraController.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the resources held by this object.  Destroying an object allows for deterministic\n     * release of resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    DeviceOrientationCameraController.prototype.destroy = function() {\n        this._removeListener();\n        return destroyObject(this);\n    };\n\n    return DeviceOrientationCameraController;\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/defined',\n        '../Core/Math',\n        './SceneMode'\n    ], function(\n        Cartesian3,\n        defined,\n        CesiumMath,\n        SceneMode) {\n    'use strict';\n\n    /**\n     * Blends the atmosphere to geometry far from the camera for horizon views. Allows for additional\n     * performance improvements by rendering less geometry and dispatching less terrain requests.\n     *\n     * @alias Fog\n     * @constructor\n     */\n    function Fog() {\n        /**\n         * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enabled = true;\n        /**\n         * A scalar that determines the density of the fog. Terrain that is in full fog are culled.\n         * The density of the fog increases as this number approaches 1.0 and becomes less dense as it approaches zero.\n         * The more dense the fog is, the more aggressively the terrain is culled. For example, if the camera is a height of\n         * 1000.0m above the ellipsoid, increasing the value to 3.0e-3 will cause many tiles close to the viewer be culled.\n         * Decreasing the value will push the fog further from the viewer, but decrease performance as more of the terrain is rendered.\n         * @type {Number}\n         * @default 2.0e-4\n         */\n        this.density = 2.0e-4;\n        /**\n         * A factor used to increase the screen space error of terrain tiles when they are partially in fog. The effect is to reduce\n         * the number of terrain tiles requested for rendering. If set to zero, the feature will be disabled. If the value is increased\n         * for mountainous regions, less tiles will need to be requested, but the terrain meshes near the horizon may be a noticeably\n         * lower resolution. If the value is increased in a relatively flat area, there will be little noticeable change on the horizon.\n         * @type {Number}\n         * @default 2.0\n         */\n        this.screenSpaceErrorFactor = 2.0;\n        /**\n         * The minimum brightness of the fog color from lighting. A value of 0.0 can cause the fog to be completely black. A value of 1.0 will not affect\n         * the brightness at all.\n         * @type {Number}\n         * @default 0.1\n         */\n        this.minimumBrightness = 0.03;\n    }\n\n    // These values were found by sampling the density at certain views and finding at what point culled tiles impacted the view at the horizon.\n    var heightsTable = [359.393, 800.749, 1275.6501, 2151.1192, 3141.7763, 4777.5198, 6281.2493, 12364.307, 15900.765, 49889.0549, 78026.8259, 99260.7344, 120036.3873, 151011.0158, 156091.1953, 203849.3112, 274866.9803, 319916.3149, 493552.0528, 628733.5874];\n    var densityTable = [2.0e-5, 2.0e-4, 1.0e-4, 7.0e-5, 5.0e-5, 4.0e-5, 3.0e-5, 1.9e-5, 1.0e-5, 8.5e-6, 6.2e-6, 5.8e-6, 5.3e-6, 5.2e-6, 5.1e-6, 4.2e-6, 4.0e-6, 3.4e-6, 2.6e-6, 2.2e-6];\n\n    // Scale densities by 1e6 to bring lowest value to ~1. Prevents divide by zero.\n    for (var i = 0; i < densityTable.length; ++i) {\n        densityTable[i] *= 1.0e6;\n    }\n    // Change range to [0, 1].\n    var tableStartDensity = densityTable[1];\n    var tableEndDensity = densityTable[densityTable.length - 1];\n    for (var j = 0; j < densityTable.length; ++j) {\n        densityTable[j] = (densityTable[j] - tableEndDensity) / (tableStartDensity - tableEndDensity);\n    }\n\n    var tableLastIndex = 0;\n\n    function findInterval(height) {\n        var heights = heightsTable;\n        var length = heights.length;\n\n        if (height < heights[0]) {\n            tableLastIndex = 0;\n            return tableLastIndex;\n        } else if (height > heights[length - 1]) {\n            tableLastIndex = length - 2;\n            return tableLastIndex;\n        }\n\n        // Take advantage of temporal coherence by checking current, next and previous intervals\n        // for containment of time.\n        if (height >= heights[tableLastIndex]) {\n            if (tableLastIndex + 1 < length && height < heights[tableLastIndex + 1]) {\n                return tableLastIndex;\n            } else if (tableLastIndex + 2 < length && height < heights[tableLastIndex + 2]) {\n                ++tableLastIndex;\n                return tableLastIndex;\n            }\n        } else if (tableLastIndex - 1 >= 0 && height >= heights[tableLastIndex - 1]) {\n            --tableLastIndex;\n            return tableLastIndex;\n        }\n\n        // The above failed so do a linear search.\n        var i;\n        for (i = 0; i < length - 2; ++i) {\n            if (height >= heights[i] && height < heights[i + 1]) {\n                break;\n            }\n        }\n\n        tableLastIndex = i;\n        return tableLastIndex;\n    }\n\n    var scratchPositionNormal = new Cartesian3();\n\n    Fog.prototype.update = function(frameState) {\n        var enabled = frameState.fog.enabled = this.enabled;\n        if (!enabled) {\n            return;\n        }\n\n        var camera = frameState.camera;\n        var positionCartographic = camera.positionCartographic;\n\n        // Turn off fog in space.\n        if (!defined(positionCartographic) || positionCartographic.height > 800000.0 || frameState.mode !== SceneMode.SCENE3D) {\n            frameState.fog.enabled = false;\n            return;\n        }\n\n        var height = positionCartographic.height;\n        var i = findInterval(height);\n        var t = CesiumMath.clamp((height - heightsTable[i]) / (heightsTable[i + 1] - heightsTable[i]), 0.0, 1.0);\n        var density = CesiumMath.lerp(densityTable[i], densityTable[i + 1], t);\n\n        // Again, scale value to be in the range of densityTable (prevents divide by zero) and change to new range.\n        var startDensity = this.density * 1.0e6;\n        var endDensity = (startDensity / tableStartDensity) * tableEndDensity;\n        density = (density * (startDensity - endDensity)) * 1.0e-6;\n\n        // Fade fog in as the camera tilts toward the horizon.\n        var positionNormal = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n        var dot = Math.abs(Cartesian3.dot(camera.directionWC, positionNormal));\n        density *= 1.0 - dot;\n\n        frameState.fog.density = density;\n        frameState.fog.sse = this.screenSpaceErrorFactor;\n        frameState.fog.minimumBrightness = this.minimumBrightness;\n    };\n\n    return Fog;\n});\n","define([\n        './SceneMode'\n    ], function(\n        SceneMode) {\n    'use strict';\n\n    /**\n     * State information about the current frame.  An instance of this class\n     * is provided to update functions.\n     *\n     * @param {Context} context The rendering context\n     * @param {CreditDisplay} creditDisplay Handles adding and removing credits from an HTML element\n     * @param {JobScheduler} jobScheduler The job scheduler\n     *\n     * @alias FrameState\n     * @constructor\n     *\n     * @private\n     */\n    function FrameState(context, creditDisplay, jobScheduler) {\n        /**\n         * The rendering context.\n         *\n         * @type {Context}\n         */\n        this.context = context;\n\n        /**\n         * An array of rendering commands.\n         *\n         * @type {DrawCommand[]}\n         */\n        this.commandList = [];\n\n        /**\n         * An array of shadow maps.\n         * @type {ShadowMap[]}\n         */\n        this.shadowMaps = [];\n\n        /**\n         * The BRDF look up texture generator used for image-based lighting for PBR models\n         * @type {BrdfLutGenerator}\n         */\n        this.brdfLutGenerator = undefined;\n\n        /**\n         * The environment map used for image-based lighting for PBR models\n         * @type {CubeMap}\n         */\n        this.environmentMap = undefined;\n\n        /**\n         * The spherical harmonic coefficients used for image-based lighting for PBR models.\n         * @type {Cartesian3[]}\n         */\n        this.sphericalHarmonicCoefficients = undefined;\n\n        /**\n         * The specular environment atlas used for image-based lighting for PBR models.\n         * @type {Texture}\n         */\n        this.specularEnvironmentMaps = undefined;\n\n        /**\n         * The maximum level-of-detail of the specular environment atlas used for image-based lighting for PBR models.\n         * @type {Number}\n         */\n        this.specularEnvironmentMapsMaximumLOD = undefined;\n\n        /**\n         * The current mode of the scene.\n         *\n         * @type {SceneMode}\n         * @default {@link SceneMode.SCENE3D}\n         */\n        this.mode = SceneMode.SCENE3D;\n\n        /**\n         * The current morph transition time between 2D/Columbus View and 3D,\n         * with 0.0 being 2D or Columbus View and 1.0 being 3D.\n         *\n         * @type {Number}\n         */\n        this.morphTime = SceneMode.getMorphTime(SceneMode.SCENE3D);\n\n        /**\n         * The current frame number.\n         *\n         * @type {Number}\n         * @default 0\n         */\n        this.frameNumber = 0;\n\n        /**\n         * <code>true</code> if a new frame has been issued and the frame number has been updated.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.newFrame = false;\n\n        /**\n         * The scene's current time.\n         *\n         * @type {JulianDate}\n         * @default undefined\n         */\n        this.time = undefined;\n\n        /**\n         * The job scheduler.\n         *\n         * @type {JobScheduler}\n         */\n        this.jobScheduler = jobScheduler;\n\n        /**\n         * The map projection to use in 2D and Columbus View modes.\n         *\n         * @type {MapProjection}\n         * @default undefined\n         */\n        this.mapProjection = undefined;\n\n        /**\n         * The current camera.\n         *\n         * @type {Camera}\n         * @default undefined\n         */\n        this.camera = undefined;\n\n        /**\n         * The culling volume.\n         *\n         * @type {CullingVolume}\n         * @default undefined\n         */\n        this.cullingVolume = undefined;\n\n        /**\n         * The current occluder.\n         *\n         * @type {Occluder}\n         * @default undefined\n         */\n        this.occluder = undefined;\n\n        /**\n         * The maximum screen-space error used to drive level-of-detail refinement.  Higher\n         * values will provide better performance but lower visual quality.\n         *\n         * @type {Number}\n         * @default 2\n         */\n        this.maximumScreenSpaceError = undefined;\n\n        /**\n         * Ratio between a pixel and a density-independent pixel. Provides a standard unity of\n         * measure for real pixel measurements appropriate to a particular device.\n         *\n         * @type {Number}\n         * @default 1.0\n         */\n        this.pixelRatio = 1.0;\n\n        this.passes = {\n            /**\n             * <code>true</code> if the primitive should update for a render pass, <code>false</code> otherwise.\n             *\n             * @type {Boolean}\n             * @default false\n             */\n            render : false,\n\n            /**\n             * <code>true</code> if the primitive should update for a picking pass, <code>false</code> otherwise.\n             *\n             * @type {Boolean}\n             * @default false\n             */\n            pick : false,\n\n            /**\n             * <code>true</code> if the primitive should update for a depth only pass, <code>false</code> otherwise.\n             * @type {Boolean}\n             * @default false\n             */\n            depth : false,\n\n            /**\n             * <code>true</code> if the primitive should update for a per-feature post-process pass, <code>false</code> otherwise.\n             * @type {Boolean}\n             * @default false\n             */\n            postProcess : false,\n\n            /**\n             * <code>true</code> if the primitive should update for an offscreen pass, <code>false</code> otherwise.\n             * @type {Boolean}\n             * @default false\n             */\n            offscreen : false\n        };\n\n        /**\n        * The credit display.\n         *\n        * @type {CreditDisplay}\n        */\n        this.creditDisplay = creditDisplay;\n\n        /**\n         * An array of functions to be called at the end of the frame.  This array\n         * will be cleared after each frame.\n         * <p>\n         * This allows queueing up events in <code>update</code> functions and\n         * firing them at a time when the subscribers are free to change the\n         * scene state, e.g., manipulate the camera, instead of firing events\n         * directly in <code>update</code> functions.\n         * </p>\n         *\n         * @type {FrameState~AfterRenderCallback[]}\n         *\n         * @example\n         * frameState.afterRender.push(function() {\n         *   // take some action, raise an event, etc.\n         * });\n         */\n        this.afterRender = [];\n\n        /**\n         * Gets whether or not to optimized for 3D only.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.scene3DOnly = false;\n\n        this.fog = {\n            /**\n             * <code>true</code> if fog is enabled, <code>false</code> otherwise.\n             * @type {Boolean}\n             * @default false\n             */\n            enabled : false,\n            /**\n             * A positive number used to mix the color and fog color based on camera distance.\n             *\n             * @type {Number}\n             * @default undefined\n             */\n            density : undefined,\n            /**\n             * A scalar used to modify the screen space error of geometry partially in fog.\n             *\n             * @type {Number}\n             * @default undefined\n             */\n            sse : undefined,\n            /**\n             * The minimum brightness of terrain with fog applied.\n             *\n             * @type {Number}\n             * @default undefined\n             */\n            minimumBrightness : undefined\n        };\n\n        /**\n         * A scalar used to exaggerate the terrain.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.terrainExaggeration = 1.0;\n\n        this.shadowState = {\n            /**\n             * Whether there are any active shadow maps this frame.\n             * @type {Boolean}\n             */\n            shadowsEnabled : true,\n\n            /**\n             * Whether there are any active shadow maps that originate from light sources. Does not\n             * include shadow maps that are used for analytical purposes.\n             */\n            lightShadowsEnabled : true,\n\n            /**\n             * All shadow maps that are enabled this frame.\n             */\n            shadowMaps : [],\n\n            /**\n             * Shadow maps that originate from light sources. Does not include shadow maps that are used for\n             * analytical purposes. Only these shadow maps will be used to generate receive shadows shaders.\n             */\n            lightShadowMaps : [],\n\n            /**\n             * The near plane of the scene's frustum commands. Used for fitting cascaded shadow maps.\n             * @type {Number}\n             */\n            nearPlane : 1.0,\n\n            /**\n             * The far plane of the scene's frustum commands. Used for fitting cascaded shadow maps.\n             * @type {Number}\n             */\n            farPlane : 5000.0,\n\n            /**\n             * The size of the bounding volume that is closest to the camera. This is used to place more shadow detail near the object.\n             * @type {Number}\n             */\n            closestObjectSize : 1000.0,\n\n            /**\n             * The time when a shadow map was last dirty\n             * @type {Number}\n             */\n            lastDirtyTime : 0,\n\n            /**\n             * Whether the shadows maps are out of view this frame\n             * @type {Boolean}\n             */\n            outOfView : true\n        };\n\n        /**\n        * The position of the splitter to use when rendering imagery layers on either side of a splitter.\n        * This value should be between 0.0 and 1.0 with 0 being the far left of the viewport and 1 being the far right of the viewport.\n        * @type {Number}\n        * @default 0.0\n        */\n        this.imagerySplitPosition = 0.0;\n\n        /**\n         * Distances to the near and far planes of the camera frustums\n         * @type {Number[]}\n         * @default []\n         */\n        this.frustumSplits = [];\n\n        /**\n         * The current scene background color\n         *\n         * @type {Color}\n         */\n        this.backgroundColor = undefined;\n\n        /**\n         * The color of the light emitted by the sun.\n         *\n         * @type {Color}\n         */\n        this.sunColor = undefined;\n\n        /**\n         * The distance from the camera at which to disable the depth test of billboards, labels and points\n         * to, for example, prevent clipping against terrain. When set to zero, the depth test should always\n         * be applied. When less than zero, the depth test should never be applied.\n         * @type {Number}\n         */\n        this.minimumDisableDepthTestDistance = undefined;\n\n        /**\n         * When <code>false</code>, 3D Tiles will render normally. When <code>true</code>, classified 3D Tile geometry will render normally and\n         * unclassified 3D Tile geometry will render with the color multiplied with {@link FrameState#invertClassificationColor}.\n         * @type {Boolean}\n         * @default false\n         */\n        this.invertClassification = false;\n\n        /**\n         * The highlight color of unclassified 3D Tile geometry when {@link FrameState#invertClassification} is <code>true</code>.\n         * @type {Color}\n         */\n        this.invertClassificationColor = undefined;\n\n        /**\n         * Whether or not the scene uses a logarithmic depth buffer.\n         *\n         * @type {Boolean}\n         * @default false\n         */\n        this.useLogDepth = false;\n\n        /**\n         * Additional state used to update 3D Tilesets.\n         *\n         * @type {Cesium3DTilePassState}\n         */\n        this.tilesetPassState = undefined;\n    }\n\n    /**\n     * A function that will be called at the end of the frame.\n     *\n     * @callback FrameState~AfterRenderCallback\n     */\n\n    return FrameState;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float z_window = czm_unpackDepth(texture2D(u_depthTexture, v_textureCoordinates));\\n\\\n    z_window = czm_reverseLogDepth(z_window);\\n\\\n    float n_range = czm_depthRange.near;\\n\\\n    float f_range = czm_depthRange.far;\\n\\\n    float z_ndc = (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n\\\n    float scale = pow(z_ndc * 0.5 + 0.5, 8.0);\\n\\\n    gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), scale), 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = czm_packDepth(texture2D(u_depthTexture, v_textureCoordinates).r);\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/ClearCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/Sampler',\n        '../Renderer/ShaderSource',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap',\n        '../Shaders/PostProcessStages/PassThrough',\n        './BlendingState',\n        './StencilConstants',\n        './StencilFunction',\n        './StencilOperation'\n    ], function(\n        Color,\n        defined,\n        defineProperties,\n        destroyObject,\n        PixelFormat,\n        ClearCommand,\n        Framebuffer,\n        PixelDatatype,\n        RenderState,\n        Sampler,\n        ShaderSource,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap,\n        PassThrough,\n        BlendingState,\n        StencilConstants,\n        StencilFunction,\n        StencilOperation) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function InvertClassification() {\n        this.previousFramebuffer = undefined;\n        this._previousFramebuffer = undefined;\n\n        this._texture = undefined;\n        this._classifiedTexture = undefined;\n        this._depthStencilTexture = undefined;\n        this._fbo = undefined;\n        this._fboClassified = undefined;\n\n        this._rsUnclassified = undefined;\n        this._rsClassified = undefined;\n\n        this._unclassifiedCommand = undefined;\n        this._classifiedCommand = undefined;\n        this._translucentCommand = undefined;\n\n        this._clearColorCommand = new ClearCommand({\n            color : new Color(0.0, 0.0, 0.0, 0.0),\n            owner : this\n        });\n        this._clearCommand = new ClearCommand({\n            color : new Color(0.0, 0.0, 0.0, 0.0),\n            depth : 1.0,\n            stencil : 0\n        });\n\n        var that = this;\n        this._uniformMap = {\n            colorTexture : function() {\n                return that._texture;\n            },\n            depthTexture : function() {\n                return that._depthStencilTexture;\n            },\n            classifiedTexture : function() {\n                return that._classifiedTexture;\n            }\n        };\n    }\n\n    defineProperties(InvertClassification.prototype, {\n        unclassifiedCommand : {\n            get : function() {\n                return this._unclassifiedCommand;\n            }\n        }\n    });\n\n    InvertClassification.isTranslucencySupported = function(context) {\n        return context.depthTexture && context.fragmentDepth;\n    };\n\n    var rsUnclassified = {\n        depthMask : false,\n        stencilTest : {\n            enabled : true,\n            frontFunction : StencilFunction.EQUAL,\n            frontOperation : {\n                fail : StencilOperation.KEEP,\n                zFail : StencilOperation.KEEP,\n                zPass : StencilOperation.KEEP\n            },\n            backFunction : StencilFunction.NEVER,\n            reference : 0,\n            mask : StencilConstants.CLASSIFICATION_MASK\n        },\n        blending : BlendingState.ALPHA_BLEND\n    };\n\n    var rsClassified = {\n        depthMask : false,\n        stencilTest : {\n            enabled : true,\n            frontFunction : StencilFunction.NOT_EQUAL,\n            frontOperation : {\n                fail : StencilOperation.KEEP,\n                zFail : StencilOperation.KEEP,\n                zPass : StencilOperation.KEEP\n            },\n            backFunction : StencilFunction.NEVER,\n            reference : 0,\n            mask : StencilConstants.CLASSIFICATION_MASK\n        },\n        blending : BlendingState.ALPHA_BLEND\n    };\n\n    // Set the 3D Tiles bit when rendering back into the scene's framebuffer. This is only needed if\n    // invert classification does not use the scene's depth-stencil texture, which is the case if the invert\n    // classification color is translucent.\n    var rsDefault = {\n        depthMask : true,\n        depthTest : {\n            enabled : true\n        },\n        stencilTest : StencilConstants.setCesium3DTileBit(),\n        stencilMask : StencilConstants.CESIUM_3D_TILE_MASK,\n        blending : BlendingState.ALPHA_BLEND\n    };\n\n    var translucentFS =\n        '#extension GL_EXT_frag_depth : enable\\n'+\n        'uniform sampler2D colorTexture;\\n' +\n        'uniform sampler2D depthTexture;\\n' +\n        'uniform sampler2D classifiedTexture;\\n' +\n        'varying vec2 v_textureCoordinates;\\n' +\n        'void main()\\n' +\n        '{\\n' +\n        '    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n' +\n        '    if (color.a == 0.0)\\n' +\n        '    {\\n' +\n        '        discard;\\n' +\n        '    }\\n' +\n        '    bool isClassified = all(equal(texture2D(classifiedTexture, v_textureCoordinates), vec4(0.0)));\\n' +\n        '#ifdef UNCLASSIFIED\\n' +\n        '    vec4 highlightColor = czm_invertClassificationColor;\\n' +\n        '    if (isClassified)\\n' +\n        '    {\\n' +\n        '        discard;\\n' +\n        '    }\\n' +\n        '#else\\n' +\n        '    vec4 highlightColor = vec4(1.0);\\n' +\n        '    if (!isClassified)\\n' +\n        '    {\\n' +\n        '        discard;\\n' +\n        '    }\\n' +\n        '#endif\\n' +\n        '    gl_FragColor = color * highlightColor;\\n' +\n        '    gl_FragDepthEXT = texture2D(depthTexture, v_textureCoordinates).r;\\n' +\n        '}\\n';\n\n    var opaqueFS =\n        'uniform sampler2D colorTexture;\\n' +\n        'varying vec2 v_textureCoordinates;\\n' +\n        'void main()\\n' +\n        '{\\n' +\n        '    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n' +\n        '    if (color.a == 0.0)\\n' +\n        '    {\\n' +\n        '        discard;\\n' +\n        '    }\\n' +\n        '#ifdef UNCLASSIFIED\\n' +\n        '    gl_FragColor = color * czm_invertClassificationColor;\\n' +\n        '#else\\n' +\n        '    gl_FragColor = color;\\n' +\n        '#endif\\n' +\n        '}\\n';\n\n    InvertClassification.prototype.update = function(context) {\n        var texture = this._texture;\n        var previousFramebufferChanged = !defined(texture) || this.previousFramebuffer !== this._previousFramebuffer;\n        this._previousFramebuffer = this.previousFramebuffer;\n\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight;\n\n        var textureChanged = !defined(texture) || texture.width !== width || texture.height !== height;\n        if (textureChanged || previousFramebufferChanged) {\n            this._texture = this._texture && this._texture.destroy();\n            this._classifiedTexture = this._classifiedTexture && this._classifiedTexture.destroy();\n            this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n            this._texture = new Texture({\n                context : context,\n                width : width,\n                height : height,\n                pixelFormat : PixelFormat.RGBA,\n                pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n                sampler : new Sampler({\n                    wrapS : TextureWrap.CLAMP_TO_EDGE,\n                    wrapT : TextureWrap.CLAMP_TO_EDGE,\n                    minificationFilter : TextureMinificationFilter.LINEAR,\n                    magnificationFilter : TextureMagnificationFilter.LINEAR\n                })\n            });\n\n            if (!defined(this._previousFramebuffer)) {\n                this._classifiedTexture = new Texture({\n                    context : context,\n                    width : width,\n                    height : height,\n                    pixelFormat : PixelFormat.RGBA,\n                    pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n                    sampler : new Sampler({\n                        wrapS : TextureWrap.CLAMP_TO_EDGE,\n                        wrapT : TextureWrap.CLAMP_TO_EDGE,\n                        minificationFilter : TextureMinificationFilter.LINEAR,\n                        magnificationFilter : TextureMagnificationFilter.LINEAR\n                    })\n                });\n                this._depthStencilTexture = new Texture({\n                    context : context,\n                    width : width,\n                    height : height,\n                    pixelFormat : PixelFormat.DEPTH_STENCIL,\n                    pixelDatatype : PixelDatatype.UNSIGNED_INT_24_8\n                });\n            }\n        }\n\n        if (!defined(this._fbo) || textureChanged || previousFramebufferChanged) {\n            this._fbo = this._fbo && this._fbo.destroy();\n            this._fboClassified = this._fboClassified && this._fboClassified.destroy();\n\n            var depthStencilTexture;\n            var depthStencilRenderbuffer;\n            if (defined(this._previousFramebuffer)) {\n                depthStencilTexture = this._previousFramebuffer.depthStencilTexture;\n                depthStencilRenderbuffer = this._previousFramebuffer.depthStencilRenderbuffer;\n            } else {\n                depthStencilTexture = this._depthStencilTexture;\n            }\n\n            this._fbo = new Framebuffer({\n                context : context,\n                colorTextures : [this._texture],\n                depthStencilTexture : depthStencilTexture,\n                depthStencilRenderbuffer : depthStencilRenderbuffer,\n                destroyAttachments : false\n            });\n\n            if (!defined(this._previousFramebuffer)) {\n                this._fboClassified = new Framebuffer({\n                    context : context,\n                    colorTextures : [this._classifiedTexture],\n                    depthStencilTexture : depthStencilTexture,\n                    destroyAttachments : false\n                });\n            }\n        }\n\n        if (!defined(this._rsUnclassified)) {\n            this._rsUnclassified = RenderState.fromCache(rsUnclassified);\n            this._rsClassified = RenderState.fromCache(rsClassified);\n            this._rsDefault = RenderState.fromCache(rsDefault);\n        }\n\n        if (!defined(this._unclassifiedCommand) || previousFramebufferChanged) {\n            if (defined(this._unclassifiedCommand)) {\n                this._unclassifiedCommand.shaderProgram = this._unclassifiedCommand.shaderProgram && this._unclassifiedCommand.shaderProgram.destroy();\n                this._classifiedCommand.shaderProgram = this._classifiedCommand.shaderProgram && this._classifiedCommand.shaderProgram.destroy();\n            }\n\n            var fs = defined(this._previousFramebuffer) ? opaqueFS : translucentFS;\n            var unclassifiedFSSource = new ShaderSource({\n                defines : ['UNCLASSIFIED'],\n                sources : [fs]\n            });\n            var classifiedFSSource = new ShaderSource({\n                sources : [fs]\n            });\n            this._unclassifiedCommand = context.createViewportQuadCommand(unclassifiedFSSource, {\n                renderState : defined(this._previousFramebuffer) ? this._rsUnclassified : this._rsDefault,\n                uniformMap : this._uniformMap,\n                owner : this\n            });\n            this._classifiedCommand = context.createViewportQuadCommand(classifiedFSSource, {\n                renderState : defined(this._previousFramebuffer) ? this._rsClassified : this._rsDefault,\n                uniformMap : this._uniformMap,\n                owner : this\n            });\n\n            if (defined(this._translucentCommand)) {\n                this._translucentCommand.shaderProgram = this._translucentCommand.shaderProgram && this._translucentCommand.shaderProgram.destroy();\n            }\n            if (!defined(this._previousFramebuffer)) {\n                this._translucentCommand = context.createViewportQuadCommand(PassThrough, {\n                    renderState : this._rsUnclassified,\n                    uniformMap : this._uniformMap,\n                    owner : this\n                });\n            }\n        }\n    };\n\n    InvertClassification.prototype.clear = function(context, passState) {\n        var framebuffer = passState.framebuffer;\n\n        if (defined(this._previousFramebuffer)) {\n            passState.framebuffer = this._fbo;\n            this._clearColorCommand.execute(context, passState);\n        } else {\n            passState.framebuffer = this._fbo;\n            this._clearCommand.execute(context, passState);\n            passState.framebuffer = this._fboClassified;\n            this._clearCommand.execute(context, passState);\n        }\n\n        passState.framebuffer = framebuffer;\n    };\n\n    InvertClassification.prototype.executeClassified = function(context, passState) {\n        if (!defined(this._previousFramebuffer)) {\n            var framebuffer = passState.framebuffer;\n\n            passState.framebuffer = this._fboClassified;\n            this._translucentCommand.execute(context, passState);\n\n            passState.framebuffer = framebuffer;\n        }\n        this._classifiedCommand.execute(context, passState);\n    };\n\n    InvertClassification.prototype.executeUnclassified = function(context, passState) {\n        this._unclassifiedCommand.execute(context, passState);\n    };\n\n    InvertClassification.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    InvertClassification.prototype.destroy = function() {\n        this._fbo = this._fbo && this._fbo.destroy();\n        this._texture = this._texture && this._texture.destroy();\n        this._depthStencilTexture = this._depthStencilTexture && this._depthStencilTexture.destroy();\n\n        if (defined(this._unclassifiedCommand)) {\n            this._unclassifiedCommand.shaderProgram = this._unclassifiedCommand.shaderProgram && this._unclassifiedCommand.shaderProgram.destroy();\n            this._classifiedCommand.shaderProgram = this._classifiedCommand.shaderProgram && this._classifiedCommand.shaderProgram.destroy();\n        }\n\n        return destroyObject(this);\n    };\n\n    return InvertClassification;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/getTimestamp',\n        './JobType'\n    ], function(\n        defined,\n        defineProperties,\n        DeveloperError,\n        getTimestamp,\n        JobType) {\n    'use strict';\n\n    function JobTypeBudget(total) {\n        /**\n         * Total budget, in milliseconds, allowed for one frame\n         */\n        this._total = total;\n\n        /**\n         * Time, in milliseconds, used so far during this frame\n         */\n        this.usedThisFrame = 0.0;\n\n        /**\n         * Time, in milliseconds, that other job types stole this frame\n         */\n        this.stolenFromMeThisFrame = 0.0;\n\n        /**\n         * Indicates if this job type was starved this frame, i.e., a job\n         * tried to run but didn't have budget\n         */\n        this.starvedThisFrame = false;\n\n        /**\n         * Indicates if this job was starved last frame.  This prevents it\n         * from being stolen from this frame.\n         */\n        this.starvedLastFrame = false;\n    }\n\n    defineProperties(JobTypeBudget.prototype, {\n        total : {\n            get : function() {\n                return this._total;\n            }\n        }\n    });\n\n    /**\n     * Engine for time slicing jobs during a frame to amortize work over multiple frames.  This supports:\n     * <ul>\n     *   <li>\n     *     Separate budgets for different job types, e.g., texture, shader program, and buffer creation.  This\n     *     allows all job types to make progress each frame.\n     *   </li>\n     *   <li>\n     *     Stealing from other jobs type budgets if they were not exhausted in the previous frame.  This allows\n     *     using the entire budget for all job types each frame even if, for example, all the jobs are the same type.\n     *   </li>\n     *   <li>\n     *     Guaranteed progress on all job types each frame, even if it means exceeding the total budget for the frame.\n     *     This prevents, for example, several expensive texture uploads over many frames from prevent a shader compile.\n     *   </li>\n     * </ul>\n     *\n     * @private\n     */\n    function JobScheduler(budgets) {\n        \n\n        // Total for defaults is half of of one frame at 10 fps\n        var jobBudgets = new Array(JobType.NUMBER_OF_JOB_TYPES);\n        jobBudgets[JobType.TEXTURE] = new JobTypeBudget(defined(budgets) ? budgets[JobType.TEXTURE] : 10.0);\n        // On cache miss, this most likely only allows one shader compile per frame\n        jobBudgets[JobType.PROGRAM] = new JobTypeBudget(defined(budgets) ? budgets[JobType.PROGRAM] : 10.0);\n        jobBudgets[JobType.BUFFER] = new JobTypeBudget(defined(budgets) ? budgets[JobType.BUFFER] : 30.0);\n\n        var length = jobBudgets.length;\n        var i;\n\n        var totalBudget = 0.0;\n        for (i = 0; i < length; ++i) {\n            totalBudget += jobBudgets[i].total;\n        }\n\n        var executedThisFrame = new Array(length);\n        for (i = 0; i < length; ++i) {\n            executedThisFrame[i] = false;\n        }\n\n        this._totalBudget = totalBudget;\n        this._totalUsedThisFrame = 0.0;\n        this._budgets = jobBudgets;\n        this._executedThisFrame = executedThisFrame;\n    }\n\n    // For unit testing\n    JobScheduler.getTimestamp = getTimestamp;\n\n    defineProperties(JobScheduler.prototype, {\n        totalBudget : {\n            get : function() {\n                return this._totalBudget;\n            }\n        }\n    });\n\n    JobScheduler.prototype.disableThisFrame = function() {\n        // Prevent jobs from running this frame\n        this._totalUsedThisFrame = this._totalBudget;\n    };\n\n    JobScheduler.prototype.resetBudgets = function() {\n        var budgets = this._budgets;\n        var length = budgets.length;\n        for (var i = 0; i < length; ++i) {\n            var budget = budgets[i];\n            budget.starvedLastFrame = budget.starvedThisFrame;\n            budget.starvedThisFrame = false;\n            budget.usedThisFrame = 0.0;\n            budget.stolenFromMeThisFrame = 0.0;\n        }\n        this._totalUsedThisFrame = 0.0;\n    };\n\n    JobScheduler.prototype.execute = function(job, jobType) {\n        var budgets = this._budgets;\n        var budget = budgets[jobType];\n\n        // This ensures each job type makes progress each frame by executing at least once\n        var progressThisFrame = this._executedThisFrame[jobType];\n\n        if ((this._totalUsedThisFrame >= this._totalBudget) && progressThisFrame) {\n            // No budget left this frame for jobs of any type\n            budget.starvedThisFrame = true;\n            return false;\n        }\n\n        var stolenBudget;\n\n        if ((budget.usedThisFrame + budget.stolenFromMeThisFrame >= budget.total)) {\n            // No budget remaining for jobs of this type. Try to steal from other job types.\n            var length = budgets.length;\n            var i;\n            for (i = 0; i < length; ++i) {\n                stolenBudget = budgets[i];\n\n                // Steal from this budget if it has time left and it wasn't starved last fame\n                if ((stolenBudget.usedThisFrame + stolenBudget.stolenFromMeThisFrame < stolenBudget.total) &&\n                    (!stolenBudget.starvedLastFrame)) {\n                    break;\n                }\n            }\n\n            if (i === length && progressThisFrame) {\n                // No other job types can give up their budget this frame, and\n                // this job type already progressed this frame\n                return false;\n            }\n\n            if (progressThisFrame) {\n                // It is considered \"starved\" even if it executes using stolen time so that\n                // next frame, no other job types can steal time from it.\n                budget.starvedThisFrame = true;\n            }\n        }\n\n        var startTime = JobScheduler.getTimestamp();\n        job.execute();\n        var duration = JobScheduler.getTimestamp() - startTime;\n\n        // Track both time remaining for this job type and all jobs\n        // so budget stealing does send us way over the total budget.\n        this._totalUsedThisFrame += duration;\n\n        if (stolenBudget) {\n            stolenBudget.stolenFromMeThisFrame += duration;\n        } else {\n            budget.usedThisFrame += duration;\n        }\n        this._executedThisFrame[jobType] = true;\n\n        return true;\n    };\n\n    return JobScheduler;\n});\n","define([\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/getTimestamp',\n        '../Widgets/getElement'\n    ], function(\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        getTimestamp,\n        getElement) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function PerformanceDisplay(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var container = getElement(options.container);\n        \n\n        this._container = container;\n\n        var display = document.createElement('div');\n        display.className = 'cesium-performanceDisplay';\n        var fpsElement = document.createElement('div');\n        fpsElement.className = 'cesium-performanceDisplay-fps';\n        this._fpsText = document.createTextNode('');\n        fpsElement.appendChild(this._fpsText);\n        var msElement = document.createElement('div');\n        msElement.className = 'cesium-performanceDisplay-ms';\n        this._msText = document.createTextNode('');\n        msElement.appendChild(this._msText);\n        display.appendChild(msElement);\n        display.appendChild(fpsElement);\n        this._container.appendChild(display);\n\n        this._lastFpsSampleTime = getTimestamp();\n        this._lastMsSampleTime = getTimestamp();\n        this._fpsFrameCount = 0;\n        this._msFrameCount = 0;\n\n        this._throttled = false;\n        var throttledElement = document.createElement('div');\n        throttledElement.className = 'cesium-performanceDisplay-throttled';\n        this._throttledText = document.createTextNode('');\n        throttledElement.appendChild(this._throttledText);\n        display.appendChild(throttledElement);\n    }\n\n     defineProperties(PerformanceDisplay.prototype, {\n        /**\n         * The display should indicate the FPS is being throttled.\n         * @memberof PerformanceDisplay.prototype\n         *\n         * @type {Boolean}\n         */\n        throttled : {\n            get : function() {\n                return this._throttled;\n            },\n            set : function(value) {\n                if (this._throttled === value) {\n                    return;\n                }\n\n                if (value) {\n                    this._throttledText.nodeValue = '(throttled)';\n                } else {\n                    this._throttledText.nodeValue = '';\n                }\n\n                this._throttled = value;\n            }\n        }\n    });\n\n    /**\n     * Update the display.  This function should only be called once per frame, because\n     * each call records a frame in the internal buffer and redraws the display.\n     *\n     * @param {Boolean} [renderedThisFrame=true] If provided, the FPS count will only update and display if true.\n     */\n    PerformanceDisplay.prototype.update = function(renderedThisFrame) {\n        var time = getTimestamp();\n        var updateDisplay = defaultValue(renderedThisFrame, true);\n\n        this._fpsFrameCount++;\n        var fpsElapsedTime = time - this._lastFpsSampleTime;\n        if (fpsElapsedTime > 1000) {\n            var fps = 'N/A';\n            if (updateDisplay) {\n                fps = this._fpsFrameCount * 1000 / fpsElapsedTime | 0;\n            }\n\n            this._fpsText.nodeValue = fps + ' FPS';\n            this._lastFpsSampleTime = time;\n            this._fpsFrameCount = 0;\n        }\n\n        this._msFrameCount++;\n        var msElapsedTime = time - this._lastMsSampleTime;\n        if (msElapsedTime > 200) {\n            var ms = 'N/A';\n            if (updateDisplay) {\n                ms = (msElapsedTime / this._msFrameCount).toFixed(2);\n            }\n\n            this._msText.nodeValue = ms + ' MS';\n            this._lastMsSampleTime = time;\n            this._msFrameCount = 0;\n        }\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.\n     */\n    PerformanceDisplay.prototype.destroy = function() {\n        return destroyObject(this);\n    };\n\n    return PerformanceDisplay;\n});\n","define([\n        '../Core/Cartesian4',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderSource',\n        '../Renderer/Texture'\n    ], function(\n        Cartesian4,\n        defined,\n        destroyObject,\n        PixelFormat,\n        Framebuffer,\n        PixelDatatype,\n        RenderState,\n        ShaderSource,\n        Texture) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function PickDepth() {\n        this._framebuffer = undefined;\n\n        this._depthTexture = undefined;\n        this._textureToCopy = undefined;\n        this._copyDepthCommand = undefined;\n\n        this._useLogDepth = undefined;\n\n        this._debugPickDepthViewportCommand = undefined;\n    }\n\n    function executeDebugPickDepth(pickDepth, context, passState, useLogDepth) {\n        if (!defined(pickDepth._debugPickDepthViewportCommand) || useLogDepth !== pickDepth._useLogDepth) {\n            var fsSource =\n                'uniform sampler2D u_texture;\\n' +\n                'varying vec2 v_textureCoordinates;\\n' +\n                'void main()\\n' +\n                '{\\n' +\n                '    float z_window = czm_unpackDepth(texture2D(u_texture, v_textureCoordinates));\\n' +\n                '    z_window = czm_reverseLogDepth(z_window); \\n' +\n                '    float n_range = czm_depthRange.near;\\n' +\n                '    float f_range = czm_depthRange.far;\\n' +\n                '    float z_ndc = (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n' +\n                '    float scale = pow(z_ndc * 0.5 + 0.5, 8.0);\\n' +\n                '    gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), scale), 1.0);\\n' +\n                '}\\n';\n            var fs = new ShaderSource({\n                defines : [useLogDepth ? 'LOG_DEPTH' : ''],\n                sources : [fsSource]\n            });\n\n            pickDepth._debugPickDepthViewportCommand = context.createViewportQuadCommand(fs, {\n                uniformMap : {\n                    u_texture : function() {\n                        return pickDepth._depthTexture;\n                    }\n                },\n                owner : pickDepth\n            });\n\n            pickDepth._useLogDepth = useLogDepth;\n        }\n\n        pickDepth._debugPickDepthViewportCommand.execute(context, passState);\n    }\n\n    function destroyTextures(pickDepth) {\n        pickDepth._depthTexture = pickDepth._depthTexture && !pickDepth._depthTexture.isDestroyed() && pickDepth._depthTexture.destroy();\n    }\n\n    function destroyFramebuffers(pickDepth) {\n        pickDepth._framebuffer = pickDepth._framebuffer && !pickDepth._framebuffer.isDestroyed() && pickDepth._framebuffer.destroy();\n    }\n\n    function createTextures(pickDepth, context, width, height) {\n        pickDepth._depthTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE\n        });\n    }\n\n    function createFramebuffers(pickDepth, context, width, height) {\n        destroyTextures(pickDepth);\n        destroyFramebuffers(pickDepth);\n\n        createTextures(pickDepth, context, width, height);\n\n        pickDepth._framebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [pickDepth._depthTexture],\n            destroyAttachments : false\n        });\n    }\n\n    function updateFramebuffers(pickDepth, context, depthTexture) {\n        var width = depthTexture.width;\n        var height = depthTexture.height;\n\n        var texture = pickDepth._depthTexture;\n        var textureChanged = !defined(texture) || texture.width !== width || texture.height !== height;\n        if (!defined(pickDepth._framebuffer) || textureChanged) {\n            createFramebuffers(pickDepth, context, width, height);\n        }\n    }\n\n    function updateCopyCommands(pickDepth, context, depthTexture) {\n        if (!defined(pickDepth._copyDepthCommand)) {\n            var fs =\n                'uniform sampler2D u_texture;\\n' +\n                'varying vec2 v_textureCoordinates;\\n' +\n                'void main()\\n' +\n                '{\\n' +\n                '    gl_FragColor = czm_packDepth(texture2D(u_texture, v_textureCoordinates).r);\\n' +\n                '}\\n';\n            pickDepth._copyDepthCommand = context.createViewportQuadCommand(fs, {\n                renderState : RenderState.fromCache(),\n                uniformMap : {\n                    u_texture : function() {\n                        return pickDepth._textureToCopy;\n                    }\n                },\n                owner : pickDepth\n            });\n        }\n\n        pickDepth._textureToCopy = depthTexture;\n        pickDepth._copyDepthCommand.framebuffer = pickDepth._framebuffer;\n    }\n\n    PickDepth.prototype.executeDebugPickDepth = function(context, passState, useLogDepth) {\n        executeDebugPickDepth(this, context, passState, useLogDepth);\n    };\n\n    PickDepth.prototype.update = function(context, depthTexture) {\n        updateFramebuffers(this, context, depthTexture);\n        updateCopyCommands(this, context, depthTexture);\n    };\n\n    var scratchPackedDepth = new Cartesian4();\n    var packedDepthScale = new Cartesian4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);\n\n    PickDepth.prototype.getDepth = function(context, x, y) {\n        var pixels = context.readPixels({\n            x : x,\n            y : y,\n            width : 1,\n            height : 1,\n            framebuffer : this._framebuffer\n        });\n\n        var packedDepth = Cartesian4.unpack(pixels, 0, scratchPackedDepth);\n        Cartesian4.divideByScalar(packedDepth, 255.0, packedDepth);\n        return Cartesian4.dot(packedDepth, packedDepthScale);\n    };\n\n    PickDepth.prototype.executeCopyDepth = function(context, passState) {\n        this._copyDepthCommand.execute(context, passState);\n    };\n\n    PickDepth.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    PickDepth.prototype.destroy = function() {\n        destroyTextures(this);\n        destroyFramebuffers(this);\n\n        this._copyDepthCommand.shaderProgram = defined(this._copyDepthCommand.shaderProgram) && this._copyDepthCommand.shaderProgram.destroy();\n\n        return destroyObject(this);\n    };\n\n    return PickDepth;\n});\n","define([\n        '../Core/arraySlice',\n        '../Core/Check',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/PixelFormat',\n        '../Renderer/PixelDatatype',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap',\n        '../Shaders/PostProcessStages/PassThrough',\n        './PostProcessStageLibrary',\n        './PostProcessStageTextureCache',\n        './Tonemapper'\n    ], function(\n        arraySlice,\n        Check,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        PixelFormat,\n        PixelDatatype,\n        Sampler,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap,\n        PassThrough,\n        PostProcessStageLibrary,\n        PostProcessStageTextureCache,\n        Tonemapper) {\n    'use strict';\n\n    var stackScratch = [];\n\n    /**\n     * A collection of {@link PostProcessStage}s and/or {@link PostProcessStageComposite}s.\n     * <p>\n     * The input texture for each post-process stage is the texture rendered to by the scene or the texture rendered\n     * to by the previous stage in the collection.\n     * </p>\n     * <p>\n     * If the ambient occlusion or bloom stages are enabled, they will execute before all other stages.\n     * </p>\n     * <p>\n     * If the FXAA stage is enabled, it will execute after all other stages.\n     * </p>\n     *\n     * @alias PostProcessStageCollection\n     * @constructor\n     */\n    function PostProcessStageCollection() {\n        var fxaa = PostProcessStageLibrary.createFXAAStage();\n        var ao = PostProcessStageLibrary.createAmbientOcclusionStage();\n        var bloom = PostProcessStageLibrary.createBloomStage();\n\n        // Auto-exposure is currently disabled because most shaders output a value in [0.0, 1.0].\n        // Some shaders, such as the atmosphere and ground atmosphere, output values slightly over 1.0.\n        this._autoExposureEnabled = false;\n        this._autoExposure = PostProcessStageLibrary.createAutoExposureStage();\n        this._tonemapping = undefined;\n        this._tonemapper = undefined;\n\n        // set tonemapper and tonemapping\n        this.tonemapper = Tonemapper.ACES;\n\n        var tonemapping = this._tonemapping;\n\n        fxaa.enabled = false;\n        ao.enabled = false;\n        bloom.enabled = false;\n        tonemapping.enabled = false; // will be enabled if necessary in update\n\n        var textureCache = new PostProcessStageTextureCache(this);\n\n        var stageNames = {};\n        var stack = stackScratch;\n        stack.push(fxaa, ao, bloom, tonemapping);\n        while (stack.length > 0) {\n            var stage = stack.pop();\n            stageNames[stage.name] = stage;\n            stage._textureCache = textureCache;\n\n            var length = stage.length;\n            if (defined(length)) {\n                for (var i = 0; i < length; ++i) {\n                    stack.push(stage.get(i));\n                }\n            }\n        }\n\n        this._stages = [];\n        this._activeStages = [];\n        this._previousActiveStages = [];\n\n        this._randomTexture = undefined; // For AO\n\n        var that = this;\n        ao.uniforms.randomTexture = function() {\n            return that._randomTexture;\n        };\n\n        this._ao = ao;\n        this._bloom = bloom;\n        this._fxaa = fxaa;\n\n        this._lastLength = undefined;\n        this._aoEnabled = undefined;\n        this._bloomEnabled = undefined;\n        this._tonemappingEnabled = undefined;\n        this._fxaaEnabled = undefined;\n\n        this._stagesRemoved = false;\n        this._textureCacheDirty = false;\n\n        this._stageNames = stageNames;\n        this._textureCache = textureCache;\n    }\n\n    defineProperties(PostProcessStageCollection.prototype, {\n        /**\n         * Determines if all of the post-process stages in the collection are ready to be executed.\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        ready : {\n            get : function() {\n                var readyAndEnabled = false;\n                var stages = this._stages;\n                var length = stages.length;\n                for (var i = length - 1; i >= 0; --i) {\n                    var stage = stages[i];\n                    readyAndEnabled = readyAndEnabled || (stage.ready && stage.enabled);\n                }\n\n                var fxaa = this._fxaa;\n                var ao = this._ao;\n                var bloom = this._bloom;\n                var tonemapping = this._tonemapping;\n\n                readyAndEnabled = readyAndEnabled || (fxaa.ready && fxaa.enabled);\n                readyAndEnabled = readyAndEnabled || (ao.ready && ao.enabled);\n                readyAndEnabled = readyAndEnabled || (bloom.ready && bloom.enabled);\n                readyAndEnabled = readyAndEnabled || (tonemapping.ready && tonemapping.enabled);\n\n                return readyAndEnabled;\n            }\n        },\n        /**\n         * A post-process stage for Fast Approximate Anti-aliasing.\n         * <p>\n         * When enabled, this stage will execute after all others.\n         * </p>\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {PostProcessStage}\n         * @readonly\n         */\n        fxaa : {\n            get : function() {\n                return this._fxaa;\n            }\n        },\n        /**\n         * A post-process stage that applies Horizon-based Ambient Occlusion (HBAO) to the input texture.\n         * <p>\n         * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n         * surface receives light and regardless of the light's position.\n         * </p>\n         * <p>\n         * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n         * <code>stepSize</code>, <code>frustumLength</code>, <code>ambientOcclusionOnly</code>,\n         * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n         * </p>\n         * <ul>\n         * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n         *\n         * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n         * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n         *\n         * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n         * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n         *\n         * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n         *\n         * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n         * The default value is <code>1000.0</code>.</li>\n         *\n         * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n         * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n         * </ul>\n         * <p>\n         * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n         * The blur is applied to the shadows generated from the image to make them smoother.\n         * </p>\n         * <p>\n         * When enabled, this stage will execute before all others.\n         * </p>\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {PostProcessStageComposite}\n         * @readonly\n         */\n        ambientOcclusion : {\n            get : function() {\n                return this._ao;\n            }\n        },\n        /**\n         * A post-process stage for a bloom effect.\n         * <p>\n         * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n         * </p>\n         * <p>\n         * This stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n         * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n         * </p>\n         * <ul>\n         * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n         *\n         * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n         * added to the brightness. The default value is <code>-0.3</code>.</li>\n         *\n         * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n         * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n         * </ul>\n         * <p>\n         * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n         * The blur is applied to the shadows generated from the image to make them smoother.\n         * </p>\n         * <p>\n         * When enabled, this stage will execute before all others.\n         * </p>\n         *\n         * @memberOf PostProcessStageCollection.prototype\n         * @type {PostProcessStageComposite}\n         * @readonly\n         */\n        bloom : {\n            get : function() {\n                return this._bloom;\n            }\n        },\n        /**\n         * The number of post-process stages in this collection.\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                removeStages(this);\n                return this._stages.length;\n            }\n        },\n        /**\n         * A reference to the last texture written to when executing the post-process stages in this collection.\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {Texture}\n         * @readonly\n         * @private\n         */\n        outputTexture : {\n            get : function() {\n                var fxaa = this._fxaa;\n                if (fxaa.enabled && fxaa.ready) {\n                    return this.getOutputTexture(fxaa.name);\n                }\n\n                var stages = this._stages;\n                var length = stages.length;\n                for (var i = length - 1; i >= 0; --i) {\n                    var stage = stages[i];\n                    if (defined(stage) && stage.ready && stage.enabled) {\n                        return this.getOutputTexture(stage.name);\n                    }\n                }\n\n                var tonemapping = this._tonemapping;\n                if (tonemapping.enabled && tonemapping.ready) {\n                    return this.getOutputTexture(tonemapping.name);\n                }\n\n                var bloom = this._bloom;\n                if (bloom.enabled && bloom.ready) {\n                    return this.getOutputTexture(bloom.name);\n                }\n\n                var ao = this._ao;\n                if (ao.enabled && ao.ready) {\n                    return this.getOutputTexture(ao.name);\n                }\n\n                return undefined;\n            }\n        },\n        /**\n         * Whether the collection has a stage that has selected features.\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {Boolean}\n         * @readonly\n         * @private\n         */\n        hasSelected : {\n            get : function() {\n                var stages = arraySlice(this._stages);\n                while (stages.length > 0) {\n                    var stage = stages.pop();\n                    if (!defined(stage)) {\n                        continue;\n                    }\n                    if (defined(stage.selected)) {\n                        return true;\n                    }\n                    var length = stage.length;\n                    if (defined(length)) {\n                        for (var i = 0; i < length; ++i) {\n                            stages.push(stage.get(i));\n                        }\n                    }\n                }\n                return false;\n            }\n        },\n        /**\n         * Gets and sets the tonemapping algorithm used when rendering with high dynamic range.\n         *\n         * @memberof PostProcessStageCollection.prototype\n         * @type {Tonemapper}\n         * @private\n         */\n        tonemapper : {\n            get : function() {\n                return this._tonemapper;\n            },\n            set : function(value) {\n                if (this._tonemapper === value) {\n                    return;\n                }\n                \n\n                if (defined(this._tonemapping)) {\n                    delete this._stageNames[this._tonemapping.name];\n                    this._tonemapping.destroy();\n                }\n\n                var useAutoExposure = this._autoExposureEnabled;\n                var tonemapper;\n\n                switch(value) {\n                    case Tonemapper.REINHARD:\n                        tonemapper = PostProcessStageLibrary.createReinhardTonemappingStage(useAutoExposure);\n                        break;\n                    case Tonemapper.MODIFIED_REINHARD:\n                        tonemapper = PostProcessStageLibrary.createModifiedReinhardTonemappingStage(useAutoExposure);\n                        break;\n                    case Tonemapper.FILMIC:\n                        tonemapper = PostProcessStageLibrary.createFilmicTonemappingStage(useAutoExposure);\n                        break;\n                    default:\n                        tonemapper = PostProcessStageLibrary.createAcesTonemappingStage(useAutoExposure);\n                        break;\n                }\n\n                if (useAutoExposure) {\n                    var autoexposure = this._autoExposure;\n                    tonemapper.uniforms.autoExposure = function() {\n                        return autoexposure.outputTexture;\n                    };\n                }\n\n                this._tonemapper = value;\n                this._tonemapping = tonemapper;\n\n                if (defined(this._stageNames)) {\n                    this._stageNames[tonemapper.name] = tonemapper;\n                    tonemapper._textureCache = this._textureCache;\n                }\n\n                this._textureCacheDirty = true;\n            }\n        }\n    });\n\n    function removeStages(collection) {\n        if (!collection._stagesRemoved) {\n            return;\n        }\n\n        collection._stagesRemoved = false;\n\n        var newStages = [];\n        var stages = collection._stages;\n        var length = stages.length;\n        for (var i = 0, j = 0; i < length; ++i) {\n            var stage = stages[i];\n            if (stage) {\n                stage._index = j++;\n                newStages.push(stage);\n            }\n        }\n\n        collection._stages = newStages;\n    }\n\n    /**\n     * Adds the post-process stage to the collection.\n     *\n     * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to add to the collection.\n     * @return {PostProcessStage|PostProcessStageComposite} The post-process stage that was added to the collection.\n     *\n     * @exception {DeveloperError} The post-process stage has already been added to the collection or does not have a unique name.\n     */\n    PostProcessStageCollection.prototype.add = function(stage) {\n        \n\n        var stageNames = this._stageNames;\n\n        var stack = stackScratch;\n        stack.push(stage);\n        while (stack.length > 0) {\n            var currentStage = stack.pop();\n            \n            stageNames[currentStage.name] = currentStage;\n            currentStage._textureCache = this._textureCache;\n\n            var length = currentStage.length;\n            if (defined(length)) {\n                for (var i = 0; i < length; ++i) {\n                    stack.push(currentStage.get(i));\n                }\n            }\n        }\n\n        var stages = this._stages;\n        stage._index = stages.length;\n        stages.push(stage);\n        this._textureCacheDirty = true;\n        return stage;\n    };\n\n    /**\n     * Removes a post-process stage from the collection and destroys it.\n     *\n     * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage to remove from the collection.\n     * @return {Boolean} Whether the post-process stage was removed.\n     */\n    PostProcessStageCollection.prototype.remove = function(stage) {\n        if (!this.contains(stage)) {\n            return false;\n        }\n\n        var stageNames = this._stageNames;\n\n        var stack = stackScratch;\n        stack.push(stage);\n        while (stack.length > 0) {\n            var currentStage = stack.pop();\n            delete stageNames[currentStage.name];\n\n            var length = currentStage.length;\n            if (defined(length)) {\n                for (var i = 0; i < length; ++i) {\n                    stack.push(currentStage.get(i));\n                }\n            }\n        }\n\n        this._stages[stage._index] = undefined;\n        this._stagesRemoved = true;\n        this._textureCacheDirty = true;\n        stage._index = undefined;\n        stage._textureCache = undefined;\n        stage.destroy();\n        return true;\n    };\n\n    /**\n     * Returns whether the collection contains a post-process stage.\n     *\n     * @param {PostProcessStage|PostProcessStageComposite} stage The post-process stage.\n     * @return {Boolean} Whether the collection contains the post-process stage.\n     */\n    PostProcessStageCollection.prototype.contains = function(stage) {\n        return defined(stage) && defined(stage._index) && stage._textureCache === this._textureCache;\n    };\n\n    /**\n     * Gets the post-process stage at <code>index</code>.\n     *\n     * @param {Number} index The index of the post-process stage.\n     * @return {PostProcessStage|PostProcessStageComposite} The post-process stage at index.\n     */\n    PostProcessStageCollection.prototype.get = function(index) {\n        removeStages(this);\n        var stages = this._stages;\n        \n        return stages[index];\n    };\n\n    /**\n     * Removes all post-process stages from the collection and destroys them.\n     */\n    PostProcessStageCollection.prototype.removeAll = function() {\n        var stages = this._stages;\n        var length = stages.length;\n        for (var i = 0; i < length; ++i) {\n            this.remove(stages[i]);\n        }\n        stages.length = 0;\n    };\n\n    /**\n     * Gets a post-process stage in the collection by its name.\n     *\n     * @param {String} name The name of the post-process stage.\n     * @return {PostProcessStage|PostProcessStageComposite} The post-process stage.\n     *\n     * @private\n     */\n    PostProcessStageCollection.prototype.getStageByName = function(name) {\n        return this._stageNames[name];\n    };\n\n    /**\n     * Called before the post-process stages in the collection are executed. Calls update for each stage and creates WebGL resources.\n     *\n     * @param {Context} context The context.\n     * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n     *\n     * @private\n     */\n    PostProcessStageCollection.prototype.update = function(context, useLogDepth, useHdr) {\n        removeStages(this);\n\n        var previousActiveStages = this._activeStages;\n        var activeStages = this._activeStages = this._previousActiveStages;\n        this._previousActiveStages = previousActiveStages;\n\n        var stages = this._stages;\n        var length = activeStages.length = stages.length;\n\n        var i;\n        var stage;\n        var count = 0;\n        for (i = 0; i < length; ++i) {\n            stage = stages[i];\n            if (stage.ready && stage.enabled && stage._isSupported(context)) {\n                activeStages[count++] = stage;\n            }\n        }\n        activeStages.length = count;\n\n        var activeStagesChanged = count !== previousActiveStages.length;\n        if (!activeStagesChanged) {\n            for (i = 0; i < count; ++i) {\n                if (activeStages[i] !== previousActiveStages[i]) {\n                    activeStagesChanged = true;\n                    break;\n                }\n            }\n        }\n\n        var ao = this._ao;\n        var bloom = this._bloom;\n        var autoexposure = this._autoExposure;\n        var tonemapping = this._tonemapping;\n        var fxaa = this._fxaa;\n\n        tonemapping.enabled = useHdr;\n\n        var aoEnabled = ao.enabled && ao._isSupported(context);\n        var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n        var tonemappingEnabled = tonemapping.enabled && tonemapping._isSupported(context);\n        var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n        if (activeStagesChanged || this._textureCacheDirty || count !== this._lastLength || aoEnabled !== this._aoEnabled ||\n            bloomEnabled !== this._bloomEnabled || tonemappingEnabled !== this._tonemappingEnabled || fxaaEnabled !== this._fxaaEnabled) {\n            // The number of stages to execute has changed.\n            // Update dependencies and recreate framebuffers.\n            this._textureCache.updateDependencies();\n\n            this._lastLength = count;\n            this._aoEnabled = aoEnabled;\n            this._bloomEnabled = bloomEnabled;\n            this._tonemappingEnabled = tonemappingEnabled;\n            this._fxaaEnabled = fxaaEnabled;\n            this._textureCacheDirty = false;\n        }\n\n        if (defined(this._randomTexture) && !aoEnabled) {\n            this._randomTexture.destroy();\n            this._randomTexture = undefined;\n        }\n\n        if (!defined(this._randomTexture) && aoEnabled) {\n            length = 256 * 256 * 3;\n            var random = new Uint8Array(length);\n            for (i = 0; i < length; i += 3) {\n                random[i] = Math.floor(Math.random() * 255.0);\n            }\n\n            this._randomTexture = new Texture({\n                context : context,\n                pixelFormat : PixelFormat.RGB,\n                pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n                source : {\n                    arrayBufferView : random,\n                    width : 256,\n                    height : 256\n                },\n                sampler : new Sampler({\n                    wrapS : TextureWrap.REPEAT,\n                    wrapT : TextureWrap.REPEAT,\n                    minificationFilter : TextureMinificationFilter.NEAREST,\n                    magnificationFilter : TextureMagnificationFilter.NEAREST\n                })\n            });\n        }\n\n        this._textureCache.update(context);\n\n        fxaa.update(context, useLogDepth);\n        ao.update(context, useLogDepth);\n        bloom.update(context, useLogDepth);\n        tonemapping.update(context, useLogDepth);\n\n        if (this._autoExposureEnabled) {\n            autoexposure.update(context, useLogDepth);\n        }\n\n        length = stages.length;\n        for (i = 0; i < length; ++i) {\n            stages[i].update(context, useLogDepth);\n        }\n    };\n\n    /**\n     * Clears all of the framebuffers used by the stages.\n     *\n     * @param {Context} context The context.\n     *\n     * @private\n     */\n    PostProcessStageCollection.prototype.clear = function(context) {\n        this._textureCache.clear(context);\n\n        if (this._autoExposureEnabled) {\n            this._autoExposure.clear(context);\n        }\n    };\n\n    function getOutputTexture(stage) {\n        while (defined(stage.length)) {\n            stage = stage.get(stage.length - 1);\n        }\n        return stage.outputTexture;\n    }\n\n    /**\n     * Gets the output texture of a stage with the given name.\n     *\n     * @param {String} stageName The name of the stage.\n     * @return {Texture|undefined} The texture rendered to by the stage with the given name.\n     *\n     * @private\n     */\n    PostProcessStageCollection.prototype.getOutputTexture = function(stageName) {\n        var stage = this.getStageByName(stageName);\n        if (!defined(stage)) {\n            return undefined;\n        }\n        return getOutputTexture(stage);\n    };\n\n    function execute(stage, context, colorTexture, depthTexture, idTexture) {\n        if (defined(stage.execute)) {\n            stage.execute(context, colorTexture, depthTexture, idTexture);\n            return;\n        }\n\n        var length = stage.length;\n        var i;\n\n        if (stage.inputPreviousStageTexture) {\n            execute(stage.get(0), context, colorTexture, depthTexture, idTexture);\n            for (i = 1; i < length; ++i) {\n                execute(stage.get(i), context, getOutputTexture(stage.get(i - 1)), depthTexture, idTexture);\n            }\n        } else {\n            for (i = 0; i < length; ++i) {\n                execute(stage.get(i), context, colorTexture, depthTexture, idTexture);\n            }\n        }\n    }\n\n    /**\n     * Executes all ready and enabled stages in the collection.\n     *\n     * @param {Context} context The context.\n     * @param {Texture} colorTexture The color texture rendered to by the scene.\n     * @param {Texture} depthTexture The depth texture written to by the scene.\n     * @param {Texture} idTexture The id texture written to by the scene.\n     *\n     * @private\n     */\n    PostProcessStageCollection.prototype.execute = function(context, colorTexture, depthTexture, idTexture) {\n        var activeStages = this._activeStages;\n        var length = activeStages.length;\n\n        var fxaa = this._fxaa;\n        var ao = this._ao;\n        var bloom = this._bloom;\n        var autoexposure = this._autoExposure;\n        var tonemapping = this._tonemapping;\n\n        var aoEnabled = ao.enabled && ao._isSupported(context);\n        var bloomEnabled = bloom.enabled && bloom._isSupported(context);\n        var autoExposureEnabled = this._autoExposureEnabled;\n        var tonemappingEnabled = tonemapping.enabled && tonemapping._isSupported(context);\n        var fxaaEnabled = fxaa.enabled && fxaa._isSupported(context);\n\n        if (!fxaaEnabled && !aoEnabled && !bloomEnabled && !tonemappingEnabled && length === 0) {\n            return;\n        }\n\n        var initialTexture = colorTexture;\n        if (aoEnabled && ao.ready) {\n            execute(ao, context, initialTexture, depthTexture, idTexture);\n            initialTexture = getOutputTexture(ao);\n        }\n        if (bloomEnabled && bloom.ready) {\n            execute(bloom, context, initialTexture, depthTexture, idTexture);\n            initialTexture = getOutputTexture(bloom);\n        }\n        if (autoExposureEnabled && autoexposure.ready) {\n            execute(autoexposure, context, initialTexture, depthTexture, idTexture);\n        }\n        if (tonemappingEnabled && tonemapping.ready) {\n            execute(tonemapping, context, initialTexture, depthTexture, idTexture);\n            initialTexture = getOutputTexture(tonemapping);\n        }\n\n        var lastTexture = initialTexture;\n\n        if (length > 0) {\n            execute(activeStages[0], context, initialTexture, depthTexture, idTexture);\n            for (var i = 1; i < length; ++i) {\n                execute(activeStages[i], context, getOutputTexture(activeStages[i - 1]), depthTexture, idTexture);\n            }\n            lastTexture = getOutputTexture(activeStages[length - 1]);\n        }\n\n        if (fxaaEnabled && fxaa.ready) {\n            execute(fxaa, context, lastTexture, depthTexture, idTexture);\n        }\n    };\n\n    /**\n     * Copies the output of all executed stages to the color texture of a framebuffer.\n     *\n     * @param {Context} context The context.\n     * @param {Framebuffer} framebuffer The framebuffer to copy to.\n     *\n     * @private\n     */\n    PostProcessStageCollection.prototype.copy = function(context, framebuffer) {\n        if (!defined(this._copyColorCommand)) {\n            var that = this;\n            this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n                uniformMap : {\n                    colorTexture : function() {\n                        return that.outputTexture;\n                    }\n                },\n                owner : this\n            });\n        }\n\n        this._copyColorCommand.framebuffer = framebuffer;\n        this._copyColorCommand.execute(context);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see PostProcessStageCollection#destroy\n     */\n    PostProcessStageCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PostProcessStageCollection#isDestroyed\n     */\n    PostProcessStageCollection.prototype.destroy = function() {\n        this._fxaa.destroy();\n        this._ao.destroy();\n        this._bloom.destroy();\n        this._autoExposure.destroy();\n        this._tonemapping.destroy();\n        this.removeAll();\n        this._textureCache = this._textureCache && this._textureCache.destroy();\n        return destroyObject(this);\n    };\n\n    return PostProcessStageCollection;\n});\n","define([\n        '../Core/buildModuleUrl',\n        '../Core/createGuid',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/deprecationWarning',\n        '../Core/destroyObject',\n        '../Core/Ellipsoid',\n        '../Shaders/PostProcessStages/AcesTonemappingStage',\n        '../Shaders/PostProcessStages/AmbientOcclusionGenerate',\n        '../Shaders/PostProcessStages/AmbientOcclusionModulate',\n        '../Shaders/PostProcessStages/BlackAndWhite',\n        '../Shaders/PostProcessStages/BloomComposite',\n        '../Shaders/PostProcessStages/Brightness',\n        '../Shaders/PostProcessStages/ContrastBias',\n        '../Shaders/PostProcessStages/DepthOfField',\n        '../Shaders/PostProcessStages/DepthView',\n        '../Shaders/PostProcessStages/EdgeDetection',\n        '../Shaders/PostProcessStages/FilmicTonemapping',\n        '../Shaders/PostProcessStages/FXAA',\n        '../Shaders/PostProcessStages/GaussianBlur1D',\n        '../Shaders/PostProcessStages/LensFlare',\n        '../Shaders/PostProcessStages/ModifiedReinhardTonemapping',\n        '../Shaders/PostProcessStages/NightVision',\n        '../Shaders/PostProcessStages/ReinhardTonemapping',\n        '../Shaders/PostProcessStages/Silhouette',\n        '../ThirdParty/Shaders/FXAA3_11',\n        './AutoExposure',\n        './PostProcessStage',\n        './PostProcessStageComposite',\n        './PostProcessStageSampleMode'\n    ], function(\n        buildModuleUrl,\n        createGuid,\n        Color,\n        defined,\n        defineProperties,\n        deprecationWarning,\n        destroyObject,\n        Ellipsoid,\n        AcesTonemapping,\n        AmbientOcclusionGenerate,\n        AmbientOcclusionModulate,\n        BlackAndWhite,\n        BloomComposite,\n        Brightness,\n        ContrastBias,\n        DepthOfField,\n        DepthView,\n        EdgeDetection,\n        FilmicTonemapping,\n        FXAA,\n        GaussianBlur1D,\n        LensFlare,\n        ModifiedReinhardTonemapping,\n        NightVision,\n        ReinhardTonemapping,\n        Silhouette,\n        FXAA3_11,\n        AutoExposure,\n        PostProcessStage,\n        PostProcessStageComposite,\n        PostProcessStageSampleMode) {\n    'use strict';\n\n    /**\n     * Contains functions for creating common post-process stages.\n     *\n     * @exports PostProcessStageLibrary\n     */\n    var PostProcessStageLibrary = {};\n\n    function createBlur(name) {\n        var delta = 1.0;\n        var sigma = 2.0;\n        var stepSize = 1.0;\n\n        var blurShader = '#define USE_STEP_SIZE\\n' + GaussianBlur1D;\n        var blurX = new PostProcessStage({\n            name : name + '_x_direction',\n            fragmentShader : blurShader,\n            uniforms: {\n                delta : delta,\n                sigma : sigma,\n                stepSize : stepSize,\n                direction : 0.0\n            },\n            sampleMode : PostProcessStageSampleMode.LINEAR\n        });\n        var blurY = new PostProcessStage({\n            name : name + '_y_direction',\n            fragmentShader : blurShader,\n            uniforms: {\n                delta : delta,\n                sigma : sigma,\n                stepSize : stepSize,\n                direction : 1.0\n            },\n            sampleMode : PostProcessStageSampleMode.LINEAR\n        });\n\n        var uniforms = {};\n        defineProperties(uniforms, {\n            delta : {\n                get : function() {\n                    return blurX.uniforms.delta;\n                },\n                set : function(value) {\n                    var blurXUniforms = blurX.uniforms;\n                    var blurYUniforms = blurY.uniforms;\n                    blurXUniforms.delta = blurYUniforms.delta = value;\n                }\n            },\n            sigma : {\n                get : function() {\n                    return blurX.uniforms.sigma;\n                },\n                set : function(value) {\n                    var blurXUniforms = blurX.uniforms;\n                    var blurYUniforms = blurY.uniforms;\n                    blurXUniforms.sigma = blurYUniforms.sigma = value;\n                }\n            },\n            stepSize : {\n                get : function() {\n                    return blurX.uniforms.stepSize;\n                },\n                set : function(value) {\n                    var blurXUniforms = blurX.uniforms;\n                    var blurYUniforms = blurY.uniforms;\n                    blurXUniforms.stepSize = blurYUniforms.stepSize = value;\n                }\n            }\n        });\n        return new PostProcessStageComposite({\n            name : name,\n            stages : [blurX, blurY],\n            uniforms : uniforms\n        });\n    }\n\n    /**\n     * Creates a post-process stage that applies a Gaussian blur to the input texture. This stage is usually applied in conjunction with another stage.\n     * <p>\n     * This stage has the following uniforms: <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n     * </p>\n     * <p>\n     * <code>delta</code> and <code>sigma</code> are used to compute the weights of a Gaussian filter. The equation is <code>exp((-0.5 * delta * delta) / (sigma * sigma))</code>.\n     * The default value for <code>delta</code> is <code>1.0</code>. The default value for <code>sigma</code> is <code>2.0</code>.\n     * <code>stepSize</code> is the distance to the next texel. The default is <code>1.0</code>.\n     * </p>\n     * @return {PostProcessStageComposite} A post-process stage that applies a Gaussian blur to the input texture.\n     */\n    PostProcessStageLibrary.createBlurStage = function() {\n        return createBlur('czm_blur');\n    };\n\n    /**\n     * Creates a post-process stage that applies a depth of field effect.\n     * <p>\n     * Depth of field simulates camera focus. Objects in the scene that are in focus\n     * will be clear whereas objects not in focus will be blurred.\n     * </p>\n     * <p>\n     * This stage has the following uniforms: <code>focalDistance</code>, <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n     * </p>\n     * <p>\n     * <code>focalDistance</code> is the distance in meters from the camera to set the camera focus.\n     * </p>\n     * <p>\n     * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n     * The blur is applied to the areas out of focus.\n     * </p>\n     * @return {PostProcessStageComposite} A post-process stage that applies a depth of field effect.\n     */\n    PostProcessStageLibrary.createDepthOfFieldStage = function() {\n        var blur = createBlur('czm_depth_of_field_blur');\n        var dof = new PostProcessStage({\n            name : 'czm_depth_of_field_composite',\n            fragmentShader : DepthOfField,\n            uniforms : {\n                focalDistance : 5.0,\n                blurTexture : blur.name\n            }\n        });\n\n        var uniforms = {};\n        defineProperties(uniforms, {\n            focalDistance : {\n                get : function() {\n                    return dof.uniforms.focalDistance;\n                },\n                set : function(value) {\n                    dof.uniforms.focalDistance = value;\n                }\n            },\n            delta : {\n                get : function() {\n                    return blur.uniforms.delta;\n                },\n                set : function(value) {\n                    blur.uniforms.delta = value;\n                }\n            },\n            sigma : {\n                get : function() {\n                    return blur.uniforms.sigma;\n                },\n                set : function(value) {\n                    blur.uniforms.sigma = value;\n                }\n            },\n            stepSize : {\n                get : function() {\n                    return blur.uniforms.stepSize;\n                },\n                set : function(value) {\n                    blur.uniforms.stepSize = value;\n                }\n            }\n        });\n        return new PostProcessStageComposite({\n            name : 'czm_depth_of_field',\n            stages : [blur, dof],\n            inputPreviousStageTexture : false,\n            uniforms : uniforms\n        });\n    };\n\n    /**\n     * Whether or not a depth of field stage is supported.\n     * <p>\n     * This stage requires the WEBGL_depth_texture extension.\n     * </p>\n     *\n     * @param {Scene} scene The scene.\n     * @return {Boolean} Whether this post process stage is supported.\n     *\n     * @see {Context#depthTexture}\n     * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n     */\n    PostProcessStageLibrary.isDepthOfFieldSupported = function(scene) {\n        return scene.context.depthTexture;\n    };\n\n    /**\n     * Creates a post-process stage that detects edges.\n     * <p>\n     * Writes the color to the output texture with alpha set to 1.0 when it is on an edge.\n     * </p>\n     * <p>\n     * This stage has the following uniforms: <code>color</code> and <code>length</code>\n     * </p>\n     * <ul>\n     * <li><code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.</li>\n     * <li><code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.</li>\n     * </ul>\n     * <p>\n     * This stage is not supported in 2D.\n     * </p>\n     * @return {PostProcessStageComposite} A post-process stage that applies an edge detection effect.\n     *\n     * @example\n     * // multiple silhouette effects\n     * var yellowEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n     * yellowEdge.uniforms.color = Cesium.Color.YELLOW;\n     * yellowEdge.selected = [feature0];\n     *\n     * var greenEdge = Cesium.PostProcessLibrary.createEdgeDetectionStage();\n     * greenEdge.uniforms.color = Cesium.Color.LIME;\n     * greenEdge.selected = [feature1];\n     *\n     * // draw edges around feature0 and feature1\n     * postProcessStages.add(Cesium.PostProcessLibrary.createSilhouetteEffect([yellowEdge, greenEdge]);\n     */\n    PostProcessStageLibrary.createEdgeDetectionStage = function() {\n        // unique name generated on call so more than one effect can be added\n        var name = createGuid();\n        return new PostProcessStage({\n            name : 'czm_edge_detection_' + name,\n            fragmentShader : EdgeDetection,\n            uniforms : {\n                length : 0.25,\n                color : Color.clone(Color.BLACK)\n            }\n        });\n    };\n\n    /**\n     * Whether or not an edge detection stage is supported.\n     * <p>\n     * This stage requires the WEBGL_depth_texture extension.\n     * </p>\n     *\n     * @param {Scene} scene The scene.\n     * @return {Boolean} Whether this post process stage is supported.\n     *\n     * @see {Context#depthTexture}\n     * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n     */\n    PostProcessStageLibrary.isEdgeDetectionSupported = function(scene) {\n        return scene.context.depthTexture;\n    };\n\n    function getSilhouetteEdgeDetection(edgeDetectionStages) {\n        if (!defined(edgeDetectionStages)) {\n            return PostProcessStageLibrary.createEdgeDetectionStage();\n        }\n\n        var edgeDetection = new PostProcessStageComposite({\n            name : 'czm_edge_detection_multiple',\n            stages : edgeDetectionStages,\n            inputPreviousStageTexture : false\n        });\n\n        var compositeUniforms = {};\n        var fsDecl = '';\n        var fsLoop = '';\n        for (var i = 0; i < edgeDetectionStages.length; ++i) {\n            fsDecl += 'uniform sampler2D edgeTexture' + i + '; \\n';\n            fsLoop +=\n                '        vec4 edge' + i + ' = texture2D(edgeTexture' + i + ', v_textureCoordinates); \\n' +\n                '        if (edge' + i + '.a > 0.0) \\n' +\n                '        { \\n' +\n                '            color = edge' + i + '; \\n' +\n                '            break; \\n' +\n                '        } \\n';\n            compositeUniforms['edgeTexture' + i] = edgeDetectionStages[i].name;\n        }\n\n        var fs =\n            fsDecl +\n            'varying vec2 v_textureCoordinates; \\n' +\n            'void main() { \\n' +\n            '    vec4 color = vec4(0.0); \\n' +\n            '    for (int i = 0; i < ' + edgeDetectionStages.length + '; i++) \\n' +\n            '    { \\n' +\n            fsLoop +\n            '    } \\n' +\n            '    gl_FragColor = color; \\n' +\n            '} \\n';\n\n        var edgeComposite = new PostProcessStage({\n            name : 'czm_edge_detection_combine',\n            fragmentShader : fs,\n            uniforms : compositeUniforms\n        });\n        return new PostProcessStageComposite({\n            name : 'czm_edge_detection_composite',\n            stages : [edgeDetection, edgeComposite]\n        });\n    }\n\n    /**\n     * Creates a post-process stage that applies a silhouette effect.\n     * <p>\n     * A silhouette effect composites the color from the edge detection pass with input color texture.\n     * </p>\n     * <p>\n     * This stage has the following uniforms when <code>edgeDetectionStages</code> is <code>undefined</code>: <code>color</code> and <code>length</code>\n     * </p>\n     * <p>\n     * <code>color</code> is the color of the highlighted edge. The default is {@link Color#BLACK}.\n     * <code>length</code> is the length of the edges in pixels. The default is <code>0.5</code>.\n     * </p>\n     * @return {PostProcessStageComposite} A post-process stage that applies a silhouette effect.\n     */\n    PostProcessStageLibrary.createSilhouetteStage = function(edgeDetectionStages) {\n        var edgeDetection = getSilhouetteEdgeDetection(edgeDetectionStages);\n        var silhouetteProcess = new PostProcessStage({\n            name : 'czm_silhouette_color_edges',\n            fragmentShader : Silhouette,\n            uniforms : {\n                silhouetteTexture : edgeDetection.name\n            }\n        });\n\n        return new PostProcessStageComposite({\n            name : 'czm_silhouette',\n            stages : [edgeDetection, silhouetteProcess],\n            inputPreviousStageTexture : false,\n            uniforms : edgeDetection.uniforms\n        });\n    };\n\n    /**\n     * Whether or not a silhouette stage is supported.\n     * <p>\n     * This stage requires the WEBGL_depth_texture extension.\n     * </p>\n     *\n     * @param {Scene} scene The scene.\n     * @return {Boolean} Whether this post process stage is supported.\n     *\n     * @see {Context#depthTexture}\n     * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n     */\n    PostProcessStageLibrary.isSilhouetteSupported = function(scene) {\n        return scene.context.depthTexture;\n    };\n\n    /**\n     * Creates a post-process stage that applies a bloom effect to the input texture.\n     * <p>\n     * A bloom effect adds glow effect, makes bright areas brighter, and dark areas darker.\n     * </p>\n     * <p>\n     * This post-process stage has the following uniforms: <code>contrast</code>, <code>brightness</code>, <code>glowOnly</code>,\n     * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code>.\n     * </p>\n     * <ul>\n     * <li><code>contrast</code> is a scalar value in the range [-255.0, 255.0] and affects the contract of the effect. The default value is <code>128.0</code>.</li>\n     * <li><code>brightness</code> is a scalar value. The input texture RGB value is converted to hue, saturation, and brightness (HSB) then this value is\n     * added to the brightness. The default value is <code>-0.3</code>.</li>\n     * <li><code>glowOnly</code> is a boolean value. When <code>true</code>, only the glow effect will be shown. When <code>false</code>, the glow will be added to the input texture.\n     * The default value is <code>false</code>. This is a debug option for viewing the effects when changing the other uniform values.</li>\n     * </ul>\n     * <p>\n     * <code>delta</code>, <code>sigma</code>, and <code>stepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n     * </p>\n     * @return {PostProcessStageComposite} A post-process stage to applies a bloom effect.\n     *\n     * @private\n     */\n    PostProcessStageLibrary.createBloomStage = function() {\n        var contrastBias = new PostProcessStage({\n            name : 'czm_bloom_contrast_bias',\n            fragmentShader : ContrastBias,\n            uniforms : {\n                contrast : 128.0,\n                brightness : -0.3\n            }\n        });\n        var blur = createBlur('czm_bloom_blur');\n        var generateComposite = new PostProcessStageComposite({\n            name : 'czm_bloom_contrast_bias_blur',\n            stages : [contrastBias, blur]\n        });\n\n        var bloomComposite = new PostProcessStage({\n            name : 'czm_bloom_generate_composite',\n            fragmentShader : BloomComposite,\n            uniforms : {\n                glowOnly : false,\n                bloomTexture : generateComposite.name\n            }\n        });\n\n        var uniforms = {};\n        defineProperties(uniforms, {\n            glowOnly : {\n                get : function() {\n                    return bloomComposite.uniforms.glowOnly;\n                },\n                set : function(value) {\n                    bloomComposite.uniforms.glowOnly = value;\n                }\n            },\n            contrast : {\n                get : function() {\n                    return contrastBias.uniforms.contrast;\n                },\n                set : function(value) {\n                    contrastBias.uniforms.contrast = value;\n                }\n            },\n            brightness : {\n                get : function() {\n                    return contrastBias.uniforms.brightness;\n                },\n                set : function(value) {\n                    contrastBias.uniforms.brightness = value;\n                }\n            },\n            delta : {\n                get : function() {\n                    return blur.uniforms.delta;\n                },\n                set : function(value) {\n                    blur.uniforms.delta = value;\n                }\n            },\n            sigma : {\n                get : function() {\n                    return blur.uniforms.sigma;\n                },\n                set : function(value) {\n                    blur.uniforms.sigma = value;\n                }\n            },\n            stepSize : {\n                get : function() {\n                    return blur.uniforms.stepSize;\n                },\n                set : function(value) {\n                    blur.uniforms.stepSize = value;\n                }\n            }\n        });\n\n        return new PostProcessStageComposite({\n            name : 'czm_bloom',\n            stages : [generateComposite, bloomComposite],\n            inputPreviousStageTexture : false,\n            uniforms : uniforms\n        });\n    };\n\n    /**\n     * Creates a post-process stage that Horizon-based Ambient Occlusion (HBAO) to the input texture.\n     * <p>\n     * Ambient occlusion simulates shadows from ambient light. These shadows would always be present when the\n     * surface receives light and regardless of the light's position.\n     * </p>\n     * <p>\n     * The uniforms have the following properties: <code>intensity</code>, <code>bias</code>, <code>lengthCap</code>,\n     * <code>stepSize</code>, <code>frustumLength</code>, <code>randomTexture</code>, <code>ambientOcclusionOnly</code>,\n     * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code>.\n     * </p>\n     * <ul>\n     * <li><code>intensity</code> is a scalar value used to lighten or darken the shadows exponentially. Higher values make the shadows darker. The default value is <code>3.0</code>.</li>\n     * <li><code>bias</code> is a scalar value representing an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value,\n     * sampling stops in the current direction. This is used to remove shadows from near planar edges. The default value is <code>0.1</code>.</li>\n     * <li><code>lengthCap</code> is a scalar value representing a length in meters. If the distance from the current sample to first sample is greater than this value,\n     * sampling stops in the current direction. The default value is <code>0.26</code>.</li>\n     * <li><code>stepSize</code> is a scalar value indicating the distance to the next texel sample in the current direction. The default value is <code>1.95</code>.</li>\n     * <li><code>frustumLength</code> is a scalar value in meters. If the current fragment has a distance from the camera greater than this value, ambient occlusion is not computed for the fragment.\n     * The default value is <code>1000.0</code>.</li>\n     * <li><code>randomTexture</code> is a texture where the red channel is a random value in [0.0, 1.0]. The default value is <code>undefined</code>. This texture needs to be set.</li>\n     * <li><code>ambientOcclusionOnly</code> is a boolean value. When <code>true</code>, only the shadows generated are written to the output. When <code>false</code>, the input texture is modulated\n     * with the ambient occlusion. This is a useful debug option for seeing the effects of changing the uniform values. The default value is <code>false</code>.</li>\n     * </ul>\n     * <p>\n     * <code>delta</code>, <code>sigma</code>, and <code>blurStepSize</code> are the same properties as {@link PostProcessStageLibrary#createBlurStage}.\n     * The blur is applied to the shadows generated from the image to make them smoother.\n     * </p>\n     * @return {PostProcessStageComposite} A post-process stage that applies an ambient occlusion effect.\n     *\n     * @private\n     */\n    PostProcessStageLibrary.createAmbientOcclusionStage = function() {\n        var generate = new PostProcessStage({\n            name : 'czm_ambient_occlusion_generate',\n            fragmentShader : AmbientOcclusionGenerate,\n            uniforms : {\n                intensity : 3.0,\n                bias : 0.1,\n                lengthCap : 0.26,\n                stepSize : 1.95,\n                frustumLength : 1000.0,\n                randomTexture : undefined\n            }\n        });\n        var blur = createBlur('czm_ambient_occlusion_blur');\n        blur.uniforms.stepSize = 0.86;\n        var generateAndBlur = new PostProcessStageComposite({\n            name : 'czm_ambient_occlusion_generate_blur',\n            stages : [generate, blur]\n        });\n\n        var ambientOcclusionModulate = new PostProcessStage({\n            name : 'czm_ambient_occlusion_composite',\n            fragmentShader : AmbientOcclusionModulate,\n            uniforms : {\n                ambientOcclusionOnly : false,\n                ambientOcclusionTexture : generateAndBlur.name\n            }\n        });\n\n        var uniforms = {};\n        defineProperties(uniforms, {\n            intensity : {\n                get : function() {\n                    return generate.uniforms.intensity;\n                },\n                set : function(value) {\n                    generate.uniforms.intensity = value;\n                }\n            },\n            bias : {\n                get : function() {\n                    return generate.uniforms.bias;\n                },\n                set : function(value) {\n                    generate.uniforms.bias = value;\n                }\n            },\n            lengthCap : {\n                get : function() {\n                    return generate.uniforms.lengthCap;\n                },\n                set : function(value) {\n                    generate.uniforms.lengthCap = value;\n                }\n            },\n            stepSize : {\n                get : function() {\n                    return generate.uniforms.stepSize;\n                },\n                set : function(value) {\n                    generate.uniforms.stepSize = value;\n                }\n            },\n            frustumLength : {\n                get : function() {\n                    return generate.uniforms.frustumLength;\n                },\n                set : function(value) {\n                    generate.uniforms.frustumLength = value;\n                }\n            },\n            randomTexture : {\n                get : function() {\n                    return generate.uniforms.randomTexture;\n                },\n                set : function(value) {\n                    generate.uniforms.randomTexture = value;\n                }\n            },\n            delta : {\n                get : function() {\n                    return blur.uniforms.delta;\n                },\n                set : function(value) {\n                    blur.uniforms.delta = value;\n                }\n            },\n            sigma : {\n                get : function() {\n                    return blur.uniforms.sigma;\n                },\n                set : function(value) {\n                    blur.uniforms.sigma = value;\n                }\n            },\n            blurStepSize : {\n                get : function() {\n                    return blur.uniforms.stepSize;\n                },\n                set : function(value) {\n                    blur.uniforms.stepSize = value;\n                }\n            },\n            ambientOcclusionOnly : {\n                get : function() {\n                    return ambientOcclusionModulate.uniforms.ambientOcclusionOnly;\n                },\n                set : function(value) {\n                    ambientOcclusionModulate.uniforms.ambientOcclusionOnly = value;\n                }\n            }\n        });\n\n        return new PostProcessStageComposite({\n            name : 'czm_ambient_occlusion',\n            stages : [generateAndBlur, ambientOcclusionModulate],\n            inputPreviousStageTexture : false,\n            uniforms : uniforms\n        });\n    };\n\n    /**\n     * Whether or not an ambient occlusion stage is supported.\n     * <p>\n     * This stage requires the WEBGL_depth_texture extension.\n     * </p>\n     *\n     * @param {Scene} scene The scene.\n     * @return {Boolean} Whether this post process stage is supported.\n     *\n     * @see {Context#depthTexture}\n     * @see {@link http://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/|WEBGL_depth_texture}\n     */\n    PostProcessStageLibrary.isAmbientOcclusionSupported = function(scene) {\n        return scene.context.depthTexture;\n    };\n\n    var fxaaFS =\n        '#define FXAA_QUALITY_PRESET 39 \\n' +\n        FXAA3_11 + '\\n' +\n        FXAA;\n\n    /**\n     * Creates a post-process stage that applies Fast Approximate Anti-aliasing (FXAA) to the input texture.\n     * @return {PostProcessStage} A post-process stage that applies Fast Approximate Anti-aliasing to the input texture.\n     *\n     * @private\n     */\n    PostProcessStageLibrary.createFXAAStage = function() {\n        return new PostProcessStage({\n            name : 'czm_FXAA',\n            fragmentShader : fxaaFS,\n            sampleMode : PostProcessStageSampleMode.LINEAR\n        });\n    };\n\n    /**\n     * Creates a post-process stage that applies ACES tonemapping operator.\n     * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n     * @return {PostProcessStage} A post-process stage that applies ACES tonemapping operator.\n     * @private\n     */\n    PostProcessStageLibrary.createAcesTonemappingStage = function(useAutoExposure) {\n        var fs = useAutoExposure ? '#define AUTO_EXPOSURE\\n' : '';\n        fs += AcesTonemapping;\n        return new PostProcessStage({\n            name : 'czm_aces',\n            fragmentShader : fs,\n            uniforms : {\n                autoExposure : undefined\n            }\n        });\n    };\n\n    /**\n     * Creates a post-process stage that applies filmic tonemapping operator.\n     * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n     * @return {PostProcessStage} A post-process stage that applies filmic tonemapping operator.\n     * @private\n     */\n    PostProcessStageLibrary.createFilmicTonemappingStage = function(useAutoExposure) {\n        var fs = useAutoExposure ? '#define AUTO_EXPOSURE\\n' : '';\n        fs += FilmicTonemapping;\n        return new PostProcessStage({\n            name : 'czm_filmic',\n            fragmentShader : fs,\n            uniforms : {\n                autoExposure : undefined\n            }\n        });\n    };\n\n    /**\n     * Creates a post-process stage that applies Reinhard tonemapping operator.\n     * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n     * @return {PostProcessStage} A post-process stage that applies Reinhard tonemapping operator.\n     * @private\n     */\n    PostProcessStageLibrary.createReinhardTonemappingStage = function(useAutoExposure) {\n        var fs = useAutoExposure ? '#define AUTO_EXPOSURE\\n' : '';\n        fs += ReinhardTonemapping;\n        return new PostProcessStage({\n            name : 'czm_reinhard',\n            fragmentShader : fs,\n            uniforms : {\n                autoExposure : undefined\n            }\n        });\n    };\n\n    /**\n     * Creates a post-process stage that applies modified Reinhard tonemapping operator.\n     * @param {Boolean} useAutoExposure Whether or not to use auto-exposure.\n     * @return {PostProcessStage} A post-process stage that applies modified Reinhard tonemapping operator.\n     * @private\n     */\n    PostProcessStageLibrary.createModifiedReinhardTonemappingStage = function(useAutoExposure) {\n        var fs = useAutoExposure ? '#define AUTO_EXPOSURE\\n' : '';\n        fs += ModifiedReinhardTonemapping;\n        return new PostProcessStage({\n            name : 'czm_modified_reinhard',\n            fragmentShader : fs,\n            uniforms : {\n                white : Color.WHITE,\n                autoExposure : undefined\n            }\n        });\n    };\n\n    /**\n     * Creates a post-process stage that finds the average luminance of the input texture.\n     * @return {PostProcessStage} A post-process stage that finds the average luminance of the input texture.\n     * @private\n     */\n    PostProcessStageLibrary.createAutoExposureStage = function() {\n        return new AutoExposure();\n    };\n\n    /**\n     * Creates a post-process stage that renders the input texture with black and white gradations.\n     * <p>\n     * This stage has one uniform value, <code>gradations</code>, which scales the luminance of each pixel.\n     * </p>\n     * @return {PostProcessStage} A post-process stage that renders the input texture with black and white gradations.\n     */\n    PostProcessStageLibrary.createBlackAndWhiteStage = function() {\n        return new PostProcessStage({\n            name : 'czm_black_and_white',\n            fragmentShader : BlackAndWhite,\n            uniforms : {\n                gradations : 5.0\n            }\n        });\n    };\n\n    /**\n     * Creates a post-process stage that saturates the input texture.\n     * <p>\n     * This stage has one uniform value, <code>brightness</code>, which scales the saturation of each pixel.\n     * </p>\n     * @return {PostProcessStage} A post-process stage that saturates the input texture.\n     */\n    PostProcessStageLibrary.createBrightnessStage = function() {\n        return new PostProcessStage({\n            name : 'czm_brightness',\n            fragmentShader : Brightness,\n            uniforms : {\n                brightness : 0.5\n            }\n        });\n    };\n\n    /**\n     * Creates a post-process stage that adds a night vision effect to the input texture.\n     * @return {PostProcessStage} A post-process stage that adds a night vision effect to the input texture.\n     */\n    PostProcessStageLibrary.createNightVisionStage = function() {\n        return new PostProcessStage({\n            name : 'czm_night_vision',\n            fragmentShader : NightVision\n        });\n    };\n\n    /**\n     * Creates a post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n     * @return {PostProcessStage} A post-process stage that replaces the input color texture with a black and white texture representing the fragment depth at each pixel.\n     *\n     * @private\n     */\n    PostProcessStageLibrary.createDepthViewStage = function() {\n        return new PostProcessStage({\n            name : 'czm_depth_view',\n            fragmentShader : DepthView\n        });\n    };\n\n    /**\n     * Creates a post-process stage that applies an effect simulating light flaring a camera lens.\n     * <p>\n     * This stage has the following uniforms: <code>dirtTexture</code>, <code>starTexture</code>, <code>intensity</code>, <code>distortion</code>, <code>ghostDispersal</code>,\n     * <code>haloWidth</code>, and <code>earthRadius</code>.\n     * <ul>\n     * <li><code>dirtTexture</code> is a texture sampled to simulate dirt on the lens.</li>\n     * <li><code>starTexture</code> is the texture sampled for the star pattern of the flare.</li>\n     * <li><code>intensity</code> is a scalar multiplied by the result of the lens flare. The default value is <code>2.0</code>.</li>\n     * <li><code>distortion</code> is a scalar value that affects the chromatic effect distortion. The default value is <code>10.0</code>.</li>\n     * <li><code>ghostDispersal</code> is a scalar indicating how far the halo effect is from the center of the texture. The default value is <code>0.4</code>.</li>\n     * <li><code>haloWidth</code> is a scalar representing the width of the halo  from the ghost dispersal. The default value is <code>0.4</code>.</li>\n     * <li><code>earthRadius</code> is the maximum radius of the earth. The default value is <code>Ellipsoid.WGS84.maximumRadius</code>.</li>\n     * </ul>\n     * </p>\n     * @return {PostProcessStage} A post-process stage for applying a lens flare effect.\n     */\n    PostProcessStageLibrary.createLensFlareStage = function() {\n        return new PostProcessStage({\n            name : 'czm_lens_flare',\n            fragmentShader : LensFlare,\n            uniforms : {\n                dirtTexture : require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/LensFlare/DirtMask.jpg'),\n                starTexture : require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/LensFlare/StarBurst.jpg'),\n                intensity : 2.0,\n                distortion : 10.0,\n                ghostDispersal : 0.4,\n                haloWidth : 0.4,\n                earthRadius : Ellipsoid.WGS84.maximumRadius\n            }\n        });\n    };\n\n    return PostProcessStageLibrary;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    color /= texture2D(autoExposure, vec2(0.5)).r;\\n\\\n#endif\\n\\\n    color = czm_acesTonemapping(color);\\n\\\n    color = czm_inverseGamma(color);\\n\\\n\\n\\\n    gl_FragColor = vec4(color, fragmentColor.a);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D randomTexture;\\n\\\nuniform sampler2D depthTexture;\\n\\\nuniform float intensity;\\n\\\nuniform float bias;\\n\\\nuniform float lengthCap;\\n\\\nuniform float stepSize;\\n\\\nuniform float frustumLength;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec4 clipToEye(vec2 uv, float depth)\\n\\\n{\\n\\\n    vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\\n\\\n    vec4 posEC = czm_inverseProjection * vec4(xy, depth, 1.0);\\n\\\n    posEC = posEC / posEC.w;\\n\\\n    return posEC;\\n\\\n}\\n\\\n\\n\\\n//Reconstruct Normal Without Edge Removation\\n\\\nvec3 getNormalXEdge(vec3 posInCamera, float depthU, float depthD, float depthL, float depthR, vec2 pixelSize)\\n\\\n{\\n\\\n    vec4 posInCameraUp = clipToEye(v_textureCoordinates - vec2(0.0, pixelSize.y), depthU);\\n\\\n    vec4 posInCameraDown = clipToEye(v_textureCoordinates + vec2(0.0, pixelSize.y), depthD);\\n\\\n    vec4 posInCameraLeft = clipToEye(v_textureCoordinates - vec2(pixelSize.x, 0.0), depthL);\\n\\\n    vec4 posInCameraRight = clipToEye(v_textureCoordinates + vec2(pixelSize.x, 0.0), depthR);\\n\\\n\\n\\\n    vec3 up = posInCamera.xyz - posInCameraUp.xyz;\\n\\\n    vec3 down = posInCameraDown.xyz - posInCamera.xyz;\\n\\\n    vec3 left = posInCamera.xyz - posInCameraLeft.xyz;\\n\\\n    vec3 right = posInCameraRight.xyz - posInCamera.xyz;\\n\\\n\\n\\\n    vec3 DX = length(left) < length(right) ? left : right;\\n\\\n    vec3 DY = length(up) < length(down) ? up : down;\\n\\\n\\n\\\n    return normalize(cross(DY, DX));\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    vec4 posInCamera = clipToEye(v_textureCoordinates, depth);\\n\\\n\\n\\\n    if (posInCamera.z > frustumLength)\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0);\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    vec2 pixelSize = 1.0 / czm_viewport.zw;\\n\\\n    float depthU = czm_readDepth(depthTexture, v_textureCoordinates- vec2(0.0, pixelSize.y));\\n\\\n    float depthD = czm_readDepth(depthTexture, v_textureCoordinates+ vec2(0.0, pixelSize.y));\\n\\\n    float depthL = czm_readDepth(depthTexture, v_textureCoordinates- vec2(pixelSize.x, 0.0));\\n\\\n    float depthR = czm_readDepth(depthTexture, v_textureCoordinates+ vec2(pixelSize.x, 0.0));\\n\\\n    vec3 normalInCamera = getNormalXEdge(posInCamera.xyz, depthU, depthD, depthL, depthR, pixelSize);\\n\\\n\\n\\\n    float ao = 0.0;\\n\\\n    vec2 sampleDirection = vec2(1.0, 0.0);\\n\\\n    float gapAngle = 90.0 * czm_radiansPerDegree;\\n\\\n\\n\\\n    // RandomNoise\\n\\\n    float randomVal = texture2D(randomTexture, v_textureCoordinates).x;\\n\\\n\\n\\\n    float inverseViewportWidth = 1.0 / czm_viewport.z;\\n\\\n    float inverseViewportHeight = 1.0 / czm_viewport.w;\\n\\\n\\n\\\n    //Loop for each direction\\n\\\n    for (int i = 0; i < 4; i++)\\n\\\n    {\\n\\\n        float newGapAngle = gapAngle * (float(i) + randomVal);\\n\\\n        float cosVal = cos(newGapAngle);\\n\\\n        float sinVal = sin(newGapAngle);\\n\\\n\\n\\\n        //Rotate Sampling Direction\\n\\\n        vec2 rotatedSampleDirection = vec2(cosVal * sampleDirection.x - sinVal * sampleDirection.y, sinVal * sampleDirection.x + cosVal * sampleDirection.y);\\n\\\n        float localAO = 0.0;\\n\\\n        float localStepSize = stepSize;\\n\\\n\\n\\\n        //Loop for each step\\n\\\n        for (int j = 0; j < 6; j++)\\n\\\n        {\\n\\\n            vec2 directionWithStep = vec2(rotatedSampleDirection.x * localStepSize * inverseViewportWidth, rotatedSampleDirection.y * localStepSize * inverseViewportHeight);\\n\\\n            vec2 newCoords = directionWithStep + v_textureCoordinates;\\n\\\n\\n\\\n            //Exception Handling\\n\\\n            if(newCoords.x > 1.0 || newCoords.y > 1.0 || newCoords.x < 0.0 || newCoords.y < 0.0)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float stepDepthInfo = czm_readDepth(depthTexture, newCoords);\\n\\\n            vec4 stepPosInCamera = clipToEye(newCoords, stepDepthInfo);\\n\\\n            vec3 diffVec = stepPosInCamera.xyz - posInCamera.xyz;\\n\\\n            float len = length(diffVec);\\n\\\n\\n\\\n            if (len > lengthCap)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float dotVal = clamp(dot(normalInCamera, normalize(diffVec)), 0.0, 1.0 );\\n\\\n            float weight = len / lengthCap;\\n\\\n            weight = 1.0 - weight * weight;\\n\\\n\\n\\\n            if (dotVal < bias)\\n\\\n            {\\n\\\n                dotVal = 0.0;\\n\\\n            }\\n\\\n\\n\\\n            localAO = max(localAO, dotVal * weight);\\n\\\n            localStepSize += stepSize;\\n\\\n        }\\n\\\n        ao += localAO;\\n\\\n    }\\n\\\n\\n\\\n    ao /= 4.0;\\n\\\n    ao = 1.0 - clamp(ao, 0.0, 1.0);\\n\\\n    ao = pow(ao, intensity);\\n\\\n    gl_FragColor = vec4(vec3(ao), 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D ambientOcclusionTexture;\\n\\\nuniform bool ambientOcclusionOnly;\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 color = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n    vec3 ao = texture2D(ambientOcclusionTexture, v_textureCoordinates).rgb;\\n\\\n    gl_FragColor.rgb = ambientOcclusionOnly ? ao : ao * color;\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform float gradations;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n#ifdef CZM_SELECTED_FEATURE\\n\\\n    if (czm_selected()) {\\n\\\n        gl_FragColor = vec4(rgb, 1.0);\\n\\\n        return;\\n\\\n    }\\n\\\n#endif\\n\\\n    float luminance = czm_luminance(rgb);\\n\\\n    float darkness = luminance * gradations;\\n\\\n    darkness = (darkness - fract(darkness)) / gradations;\\n\\\n    gl_FragColor = vec4(vec3(darkness), 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D bloomTexture;\\n\\\nuniform bool glowOnly;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef CZM_SELECTED_FEATURE\\n\\\n    if (czm_selected()) {\\n\\\n        gl_FragColor = color;\\n\\\n        return;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    vec4 bloom = texture2D(bloomTexture, v_textureCoordinates);\\n\\\n    gl_FragColor = glowOnly ? bloom : bloom + color;\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform float brightness;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n    vec3 target = vec3(0.0);\\n\\\n    gl_FragColor = vec4(mix(target, rgb, brightness), 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform float contrast;\\n\\\nuniform float brightness;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec3 sceneColor = texture2D(colorTexture, v_textureCoordinates).xyz;\\n\\\n    sceneColor = czm_RGBToHSB(sceneColor);\\n\\\n    sceneColor.z += brightness;\\n\\\n    sceneColor = czm_HSBToRGB(sceneColor);\\n\\\n\\n\\\n    float factor = (259.0 * (contrast + 255.0)) / (255.0 * (259.0 - contrast));\\n\\\n    sceneColor = factor * (sceneColor - vec3(0.5)) + vec3(0.5);\\n\\\n    gl_FragColor = vec4(sceneColor, 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D blurTexture;\\n\\\nuniform sampler2D depthTexture;\\n\\\nuniform float focalDistance;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec4 toEye(vec2 uv, float depth)\\n\\\n{\\n\\\n   vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\\n\\\n   vec4 posInCamera = czm_inverseProjection * vec4(xy, depth, 1.0);\\n\\\n   posInCamera = posInCamera / posInCamera.w;\\n\\\n   return posInCamera;\\n\\\n}\\n\\\n\\n\\\nfloat computeDepthBlur(float depth)\\n\\\n{\\n\\\n    float f;\\n\\\n    if (depth < focalDistance)\\n\\\n    {\\n\\\n        f = (focalDistance - depth) / (focalDistance - czm_currentFrustum.x);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        f = (depth - focalDistance) / (czm_currentFrustum.y - focalDistance);\\n\\\n        f = pow(f, 0.1);\\n\\\n    }\\n\\\n    f *= f;\\n\\\n    f = clamp(f, 0.0, 1.0);\\n\\\n    return pow(f, 0.5);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    vec4 posInCamera = toEye(v_textureCoordinates, depth);\\n\\\n    float d = computeDepthBlur(-posInCamera.z);\\n\\\n    gl_FragColor = mix(texture2D(colorTexture, v_textureCoordinates), texture2D(blurTexture, v_textureCoordinates), d);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    gl_FragColor = vec4(vec3(depth), 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D depthTexture;\\n\\\nuniform float length;\\n\\\nuniform vec4 color;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float directions[3];\\n\\\n    directions[0] = -1.0;\\n\\\n    directions[1] = 0.0;\\n\\\n    directions[2] = 1.0;\\n\\\n\\n\\\n    float scalars[3];\\n\\\n    scalars[0] = 3.0;\\n\\\n    scalars[1] = 10.0;\\n\\\n    scalars[2] = 3.0;\\n\\\n\\n\\\n    float padx = 1.0 / czm_viewport.z;\\n\\\n    float pady = 1.0 / czm_viewport.w;\\n\\\n\\n\\\n#ifdef CZM_SELECTED_FEATURE\\n\\\n    bool selected = false;\\n\\\n    for (int i = 0; i < 3; ++i)\\n\\\n    {\\n\\\n        float dir = directions[i];\\n\\\n        selected = selected || czm_selected(vec2(-padx, dir * pady));\\n\\\n        selected = selected || czm_selected(vec2(padx, dir * pady));\\n\\\n        selected = selected || czm_selected(vec2(dir * padx, -pady));\\n\\\n        selected = selected || czm_selected(vec2(dir * padx, pady));\\n\\\n        if (selected)\\n\\\n        {\\n\\\n            break;\\n\\\n        }\\n\\\n    }\\n\\\n    if (!selected)\\n\\\n    {\\n\\\n        gl_FragColor = vec4(color.rgb, 0.0);\\n\\\n        return;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    float horizEdge = 0.0;\\n\\\n    float vertEdge = 0.0;\\n\\\n\\n\\\n    for (int i = 0; i < 3; ++i)\\n\\\n    {\\n\\\n        float dir = directions[i];\\n\\\n        float scale = scalars[i];\\n\\\n\\n\\\n        horizEdge -= texture2D(depthTexture, v_textureCoordinates + vec2(-padx, dir * pady)).x * scale;\\n\\\n        horizEdge += texture2D(depthTexture, v_textureCoordinates + vec2(padx, dir * pady)).x * scale;\\n\\\n\\n\\\n        vertEdge -= texture2D(depthTexture, v_textureCoordinates + vec2(dir * padx, -pady)).x * scale;\\n\\\n        vertEdge += texture2D(depthTexture, v_textureCoordinates + vec2(dir * padx, pady)).x * scale;\\n\\\n    }\\n\\\n\\n\\\n    float len = sqrt(horizEdge * horizEdge + vertEdge * vertEdge);\\n\\\n    gl_FragColor = vec4(color.rgb, len > length ? color.a : 0.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\n// See slides 142 and 143:\\n\\\n//     http://www.gdcvault.com/play/1012459/Uncharted_2__HDR_Lighting\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\\n\\\n    color /= exposure;\\n\\\n#endif\\n\\\n\\n\\\n\tconst float A = 0.22; // shoulder strength\\n\\\n\tconst float B = 0.30; // linear strength\\n\\\n\tconst float C = 0.10; // linear angle\\n\\\n\tconst float D = 0.20; // toe strength\\n\\\n\tconst float E = 0.01; // toe numerator\\n\\\n\tconst float F = 0.30; // toe denominator\\n\\\n\\n\\\n\tconst float white = 11.2; // linear white point value\\n\\\n\\n\\\n\tvec3 c = ((color * (A * color + C * B) + D * E) / (color * ( A * color + B) + D * F)) - E / F;\\n\\\n\tfloat w = ((white * (A * white + C * B) + D * E) / (white * ( A * white + B) + D * F)) - E / F;\\n\\\n\\n\\\n\tc = czm_inverseGamma(c / w);\\n\\\n\tgl_FragColor = vec4(c, fragmentColor.a);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"varying vec2 v_textureCoordinates;\\n\\\n\\n\\\nuniform sampler2D colorTexture;\\n\\\n\\n\\\nconst float fxaaQualitySubpix = 0.5;\\n\\\nconst float fxaaQualityEdgeThreshold = 0.125;\\n\\\nconst float fxaaQualityEdgeThresholdMin = 0.0833;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 fxaaQualityRcpFrame = vec2(1.0) / czm_viewport.zw;\\n\\\n    vec4 color = FxaaPixelShader(\\n\\\n        v_textureCoordinates,\\n\\\n        colorTexture,\\n\\\n        fxaaQualityRcpFrame,\\n\\\n        fxaaQualitySubpix,\\n\\\n        fxaaQualityEdgeThreshold,\\n\\\n        fxaaQualityEdgeThresholdMin);\\n\\\n    float alpha = texture2D(colorTexture, v_textureCoordinates).a;\\n\\\n    gl_FragColor = vec4(color.rgb, alpha);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D dirtTexture;\\n\\\nuniform sampler2D starTexture;\\n\\\nuniform vec2 dirtTextureDimensions;\\n\\\nuniform float distortion;\\n\\\nuniform float ghostDispersal;\\n\\\nuniform float haloWidth;\\n\\\nuniform float earthRadius;\\n\\\nuniform float intensity;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n// whether it is in space or not\\n\\\n// 6500000.0 is Emprical value\\n\\\n#define DISTANCE_TO_SPACE 6500000.0\\n\\\n\\n\\\n// return ndc from world coordinate biased earthRadius\\n\\\nvec4 getNDCFromWC(vec3 WC, float earthRadius)\\n\\\n{\\n\\\n    vec4 positionEC = czm_view * vec4(WC, 1.0);\\n\\\n    positionEC = vec4(positionEC.x + earthRadius , positionEC.y, positionEC.z, 1.0);\\n\\\n    vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n    return czm_viewportOrthographic * vec4(positionWC.xy, -positionWC.z, 1.0);\\n\\\n}\\n\\\n\\n\\\n// Check if current pixel is included Earth\\n\\\n// if then mask it gradually\\n\\\nfloat isInEarth(vec2 texcoord, vec2 sceneSize)\\n\\\n{\\n\\\n    vec2 NDC = texcoord * 2.0 - 1.0;\\n\\\n    vec4 earthPosSC = getNDCFromWC(vec3(0.0), 0.0);\\n\\\n    vec4 earthPosSCEdge = getNDCFromWC(vec3(0.0), earthRadius * 1.5);\\n\\\n    NDC.xy -= earthPosSC.xy;\\n\\\n\\n\\\n    float X = abs(NDC.x) * sceneSize.x;\\n\\\n    float Y = abs(NDC.y) * sceneSize.y;\\n\\\n\\n\\\n    return clamp(0.0, 1.0, max(sqrt(X * X + Y * Y) / max(abs(earthPosSCEdge.x * sceneSize.x), 1.0) - 0.8 , 0.0));\\n\\\n}\\n\\\n\\n\\\n// For Chromatic effect\\n\\\nvec4 textureDistorted(sampler2D tex, vec2 texcoord, vec2 direction, vec3 distortion, bool isSpace)\\n\\\n{\\n\\\n    vec2 sceneSize = czm_viewport.zw;\\n\\\n    vec3 color;\\n\\\n    if(isSpace)\\n\\\n    {\\n\\\n        color.r = isInEarth(texcoord + direction * distortion.r, sceneSize) * texture2D(tex, texcoord + direction * distortion.r).r;\\n\\\n        color.g = isInEarth(texcoord + direction * distortion.g, sceneSize) * texture2D(tex, texcoord + direction * distortion.g).g;\\n\\\n        color.b = isInEarth(texcoord  + direction * distortion.b, sceneSize) * texture2D(tex, texcoord + direction * distortion.b).b;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        color.r = texture2D(tex, texcoord + direction * distortion.r).r;\\n\\\n        color.g = texture2D(tex, texcoord + direction * distortion.g).g;\\n\\\n        color.b = texture2D(tex, texcoord + direction * distortion.b).b;\\n\\\n    }\\n\\\n    return vec4(clamp(color, 0.0, 1.0), 0.0);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 originalColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 rgb = originalColor.rgb;\\n\\\n    bool isSpace = length(czm_viewerPositionWC.xyz) > DISTANCE_TO_SPACE;\\n\\\n\\n\\\n    // Sun position\\n\\\n    vec4 sunPos = czm_morphTime == 1.0 ? vec4(czm_sunPositionWC, 1.0) : vec4(czm_sunPositionColumbusView.zxy, 1.0);\\n\\\n    vec4 sunPositionEC = czm_view * sunPos;\\n\\\n    vec4 sunPositionWC = czm_eyeToWindowCoordinates(sunPositionEC);\\n\\\n    sunPos = czm_viewportOrthographic * vec4(sunPositionWC.xy, -sunPositionWC.z, 1.0);\\n\\\n\\n\\\n    // If sun is not in the screen space, use original color.\\n\\\n    if(!isSpace || !((sunPos.x >= -1.1 && sunPos.x <= 1.1) && (sunPos.y >= -1.1 && sunPos.y <= 1.1)))\\n\\\n    {\\n\\\n        // Lens flare is disabled when not in space until #5932 is fixed.\\n\\\n        //    https://github.com/AnalyticalGraphicsInc/cesium/issues/5932\\n\\\n        gl_FragColor = originalColor;\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    vec2 texcoord = -v_textureCoordinates + vec2(1.0);\\n\\\n    vec2 texelSize = 1.0 / czm_viewport.zw;\\n\\\n    vec3 distortionVec = vec3(-texelSize.x * distortion, 0.0, texelSize.x * distortion);\\n\\\n\\n\\\n    // ghost vector to image centre:\\n\\\n    vec2 ghostVec = (vec2(0.5) - texcoord) * ghostDispersal;\\n\\\n    vec3 direction = normalize(vec3(ghostVec, 0.0));\\n\\\n\\n\\\n    // sample ghosts:\\n\\\n    vec4 result = vec4(0.0);\\n\\\n    vec4 ghost = vec4(0.0);\\n\\\n    for (int i = 0; i < 4; ++i)\\n\\\n    {\\n\\\n        vec2 offset = fract(texcoord + ghostVec * float(i));\\n\\\n        // Only bright spots from the centre of the source image\\n\\\n        ghost += textureDistorted(colorTexture, offset, direction.xy, distortionVec, isSpace);\\n\\\n    }\\n\\\n    result += ghost;\\n\\\n\\n\\\n    // sample halo\\n\\\n    vec2 haloVec = normalize(ghostVec) * haloWidth;\\n\\\n    float weightForHalo = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));\\n\\\n    weightForHalo = pow(1.0 - weightForHalo, 5.0);\\n\\\n\\n\\\n    result += textureDistorted(colorTexture, texcoord + haloVec, direction.xy, distortionVec, isSpace) * weightForHalo * 1.5;\\n\\\n\\n\\\n    vec2 dirtTexCoords = (v_textureCoordinates * czm_viewport.zw) / dirtTextureDimensions;\\n\\\n    if (dirtTexCoords.x > 1.0)\\n\\\n    {\\n\\\n        dirtTexCoords.x = mod(floor(dirtTexCoords.x), 2.0) == 1.0 ? 1.0 - fract(dirtTexCoords.x) :  fract(dirtTexCoords.x);\\n\\\n    }\\n\\\n    if (dirtTexCoords.y > 1.0)\\n\\\n    {\\n\\\n        dirtTexCoords.y = mod(floor(dirtTexCoords.y), 2.0) == 1.0 ? 1.0 - fract(dirtTexCoords.y) :  fract(dirtTexCoords.y);\\n\\\n    }\\n\\\n    result += texture2D(dirtTexture, dirtTexCoords);\\n\\\n\\n\\\n    // Rotating starburst texture's coordinate\\n\\\n    // dot(czm_view[0].xyz, vec3(0.0, 0.0, 1.0)) + dot(czm_view[1].xyz, vec3(0.0, 1.0, 0.0))\\n\\\n    float camrot = czm_view[0].z + czm_view[1].y;\\n\\\n    float cosValue = cos(camrot);\\n\\\n    float sinValue = sin(camrot);\\n\\\n    mat3 rotation = mat3(\\n\\\n        cosValue, -sinValue, 0.0,\\n\\\n        sinValue, cosValue, 0.0,\\n\\\n        0.0, 0.0, 1.0\\n\\\n    );\\n\\\n\\n\\\n    vec3 st1 = vec3(v_textureCoordinates * 2.0 - vec2(1.0), 1.0);\\n\\\n    vec3 st2 = vec3((rotation * st1).xy, 1.0);\\n\\\n    vec3 st3 = st2 * 0.5 + vec3(0.5);\\n\\\n    vec2 lensStarTexcoord = st3.xy;\\n\\\n    float weightForLensFlare = length(vec3(sunPos.xy, 0.0));\\n\\\n    float oneMinusWeightForLensFlare = max(1.0 - weightForLensFlare, 0.0);\\n\\\n\\n\\\n    if (!isSpace)\\n\\\n    {\\n\\\n        result *= oneMinusWeightForLensFlare * intensity * 0.2;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        result *= oneMinusWeightForLensFlare * intensity;\\n\\\n        result *= texture2D(starTexture, lensStarTexcoord) * pow(weightForLensFlare, 1.0) * max((1.0 - length(vec3(st1.xy, 0.0))), 0.0) * 2.0;\\n\\\n    }\\n\\\n\\n\\\n    result += texture2D(colorTexture, v_textureCoordinates);\\n\\\n\\n\\\n    gl_FragColor = result;\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform vec3 white;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\n// See equation 4:\\n\\\n//    http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\\n\\\n    color /= exposure;\\n\\\n#endif\\n\\\n    color = (color * (1.0 + color / white)) / (1.0 + color);\\n\\\n    color = czm_inverseGamma(color);\\n\\\n    gl_FragColor = vec4(color, fragmentColor.a);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nfloat rand(vec2 co)\\n\\\n{\\n\\\n    return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float noiseValue = rand(v_textureCoordinates + sin(czm_frameNumber)) * 0.1;\\n\\\n    vec3 rgb = texture2D(colorTexture, v_textureCoordinates).rgb;\\n\\\n    vec3 green = vec3(0.0, 1.0, 0.0);\\n\\\n    gl_FragColor = vec4((noiseValue + rgb) * green, 1.0);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\nuniform sampler2D autoExposure;\\n\\\n#endif\\n\\\n\\n\\\n// See equation 3:\\n\\\n//    http://www.cs.utah.edu/~reinhard/cdrom/tonemap.pdf\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 fragmentColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 color = fragmentColor.rgb;\\n\\\n#ifdef AUTO_EXPOSURE\\n\\\n    float exposure = texture2D(autoExposure, vec2(0.5)).r;\\n\\\n    color /= exposure;\\n\\\n#endif\\n\\\n    color = color / (1.0 + color);\\n\\\n    color = czm_inverseGamma(color);\\n\\\n    gl_FragColor = vec4(color, fragmentColor.a);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D silhouetteTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    vec4 silhouetteColor = texture2D(silhouetteTexture, v_textureCoordinates);\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    gl_FragColor = mix(color, silhouetteColor, silhouetteColor.a);\\n\\\n}\\n\\\n\";\n});","/**\n * @license\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *  * Redistributions of source code must retain the above copyright\\n\\\n *    notice, this list of conditions and the following disclaimer.\\n\\\n *  * Redistributions in binary form must reproduce the above copyright\\n\\\n *    notice, this list of conditions and the following disclaimer in the\\n\\\n *    documentation and/or other materials provided with the distribution.\\n\\\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\\n\\\n *    contributors may be used to endorse or promote products derived\\n\\\n *    from this software without specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\\n\\\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n\\\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\\n\\\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\n\\\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\n\\\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\n\\\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\\n\\\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n */\\n\\\n\\n\\\n// NVIDIA GameWorks Graphics Samples GitHub link: https://github.com/NVIDIAGameWorks/GraphicsSamples\\n\\\n// Original FXAA 3.11 shader link: https://github.com/NVIDIAGameWorks/GraphicsSamples/blob/master/samples/es3-kepler/FXAA/FXAA3_11.h\\n\\\n\\n\\\n// Steps used to integrate into Cesium:\\n\\\n// * The following defines are set:\\n\\\n//       #define FXAA_PC 1\\n\\\n//       #define FXAA_WEBGL_1 1\\n\\\n//       #define FXAA_GREEN_AS_LUMA 1\\n\\\n//       #define FXAA_EARLY_EXIT 1\\n\\\n//       #define FXAA_GLSL_120 1\\n\\\n// * All other preprocessor directives besides the FXAA_QUALITY__P* directives were removed.\\n\\\n// * Double underscores are invalid for preprocessor directives so replace them with a single underscore. Replace\\n\\\n//   /FXAA_QUALITY__P(.*)/g with /FXAA_QUALITY__P$1/.\\n\\\n// * There are no implicit conversions from ivec* to vec* so replace:\\n\\\n//       #define FxaaInt2 ivec2\\n\\\n//           with\\n\\\n//       #define FxaaInt2 vec2\\n\\\n// * The texture2DLod function is only available in vertex shaders so replace:\\n\\\n//       #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\\n\\\n//       #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\\n\\\n//           with\\n\\\n//       #define FxaaTexTop(t, p) texture2D(t, p)\\n\\\n//       #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\\n\\\n// * FXAA_QUALITY_PRESET is prepended in the javascript code. We may want to expose that setting in the future.\\n\\\n// * The following parameters to FxaaPixelShader are unused and can be removed:\\n\\\n//       fxaaConsolePosPos\\n\\\n//       fxaaConsoleRcpFrameOpt\\n\\\n//       fxaaConsoleRcpFrameOpt2\\n\\\n//       fxaaConsole360RcpFrameOpt2\\n\\\n//       fxaaConsoleEdgeSharpness\\n\\\n//       fxaaConsoleEdgeThreshold\\n\\\n//       fxaaConsoleEdgeThresholdMi\\n\\\n//       fxaaConsole360ConstDir\\n\\\n\\n\\\n//\\n\\\n// Choose the quality preset.\\n\\\n// This needs to be compiled into the shader as it effects code.\\n\\\n// Best option to include multiple presets is to\\n\\\n// in each shader define the preset, then include this file.\\n\\\n//\\n\\\n// OPTIONS\\n\\\n// -----------------------------------------------------------------------\\n\\\n// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\\n\\\n// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\\n\\\n// 39       - no dither, very expensive\\n\\\n//\\n\\\n// NOTES\\n\\\n// -----------------------------------------------------------------------\\n\\\n// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\\n\\\n// 13 = about same speed as FXAA 3.9 and better than 12\\n\\\n// 23 = closest to FXAA 3.9 visually and performance wise\\n\\\n//  _ = the lowest digit is directly related to performance\\n\\\n// _  = the highest digit is directly related to style\\n\\\n//\\n\\\n//#define FXAA_QUALITY_PRESET 12\\n\\\n\\n\\\n\\n\\\n#if (FXAA_QUALITY_PRESET == 10)\\n\\\n    #define FXAA_QUALITY_PS 3\\n\\\n    #define FXAA_QUALITY_P0 1.5\\n\\\n    #define FXAA_QUALITY_P1 3.0\\n\\\n    #define FXAA_QUALITY_P2 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 11)\\n\\\n    #define FXAA_QUALITY_PS 4\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 3.0\\n\\\n    #define FXAA_QUALITY_P3 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 12)\\n\\\n    #define FXAA_QUALITY_PS 5\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 4.0\\n\\\n    #define FXAA_QUALITY_P4 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 13)\\n\\\n    #define FXAA_QUALITY_PS 6\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 4.0\\n\\\n    #define FXAA_QUALITY_P5 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 14)\\n\\\n    #define FXAA_QUALITY_PS 7\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 4.0\\n\\\n    #define FXAA_QUALITY_P6 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 15)\\n\\\n    #define FXAA_QUALITY_PS 8\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 4.0\\n\\\n    #define FXAA_QUALITY_P7 12.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 20)\\n\\\n    #define FXAA_QUALITY_PS 3\\n\\\n    #define FXAA_QUALITY_P0 1.5\\n\\\n    #define FXAA_QUALITY_P1 2.0\\n\\\n    #define FXAA_QUALITY_P2 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 21)\\n\\\n    #define FXAA_QUALITY_PS 4\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 22)\\n\\\n    #define FXAA_QUALITY_PS 5\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 23)\\n\\\n    #define FXAA_QUALITY_PS 6\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 24)\\n\\\n    #define FXAA_QUALITY_PS 7\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 3.0\\n\\\n    #define FXAA_QUALITY_P6 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 25)\\n\\\n    #define FXAA_QUALITY_PS 8\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 4.0\\n\\\n    #define FXAA_QUALITY_P7 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 26)\\n\\\n    #define FXAA_QUALITY_PS 9\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 4.0\\n\\\n    #define FXAA_QUALITY_P8 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 27)\\n\\\n    #define FXAA_QUALITY_PS 10\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 4.0\\n\\\n    #define FXAA_QUALITY_P9 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 28)\\n\\\n    #define FXAA_QUALITY_PS 11\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 4.0\\n\\\n    #define FXAA_QUALITY_P10 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 29)\\n\\\n    #define FXAA_QUALITY_PS 12\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.5\\n\\\n    #define FXAA_QUALITY_P2 2.0\\n\\\n    #define FXAA_QUALITY_P3 2.0\\n\\\n    #define FXAA_QUALITY_P4 2.0\\n\\\n    #define FXAA_QUALITY_P5 2.0\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 2.0\\n\\\n    #define FXAA_QUALITY_P10 4.0\\n\\\n    #define FXAA_QUALITY_P11 8.0\\n\\\n#endif\\n\\\n#if (FXAA_QUALITY_PRESET == 39)\\n\\\n    #define FXAA_QUALITY_PS 12\\n\\\n    #define FXAA_QUALITY_P0 1.0\\n\\\n    #define FXAA_QUALITY_P1 1.0\\n\\\n    #define FXAA_QUALITY_P2 1.0\\n\\\n    #define FXAA_QUALITY_P3 1.0\\n\\\n    #define FXAA_QUALITY_P4 1.0\\n\\\n    #define FXAA_QUALITY_P5 1.5\\n\\\n    #define FXAA_QUALITY_P6 2.0\\n\\\n    #define FXAA_QUALITY_P7 2.0\\n\\\n    #define FXAA_QUALITY_P8 2.0\\n\\\n    #define FXAA_QUALITY_P9 2.0\\n\\\n    #define FXAA_QUALITY_P10 4.0\\n\\\n    #define FXAA_QUALITY_P11 8.0\\n\\\n#endif\\n\\\n\\n\\\n#define FxaaBool bool\\n\\\n#define FxaaFloat float\\n\\\n#define FxaaFloat2 vec2\\n\\\n#define FxaaFloat3 vec3\\n\\\n#define FxaaFloat4 vec4\\n\\\n#define FxaaHalf float\\n\\\n#define FxaaHalf2 vec2\\n\\\n#define FxaaHalf3 vec3\\n\\\n#define FxaaHalf4 vec4\\n\\\n#define FxaaInt2 vec2\\n\\\n#define FxaaTex sampler2D\\n\\\n\\n\\\n#define FxaaSat(x) clamp(x, 0.0, 1.0)\\n\\\n#define FxaaTexTop(t, p) texture2D(t, p)\\n\\\n#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r))\\n\\\n\\n\\\nFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\\n\\\n\\n\\\nFxaaFloat4 FxaaPixelShader(\\n\\\n    //\\n\\\n    // Use noperspective interpolation here (turn off perspective interpolation).\\n\\\n    // {xy} = center of pixel\\n\\\n    FxaaFloat2 pos,\\n\\\n    //\\n\\\n    // Input color texture.\\n\\\n    // {rgb_} = color in linear or perceptual color space\\n\\\n    // if (FXAA_GREEN_AS_LUMA == 0)\\n\\\n    //     {___a} = luma in perceptual color space (not linear)\\n\\\n    FxaaTex tex,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This must be from a constant/uniform.\\n\\\n    // {x_} = 1.0/screenWidthInPixels\\n\\\n    // {_y} = 1.0/screenHeightInPixels\\n\\\n    FxaaFloat2 fxaaQualityRcpFrame,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_SUBPIX define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // Choose the amount of sub-pixel aliasing removal.\\n\\\n    // This can effect sharpness.\\n\\\n    //   1.00 - upper limit (softer)\\n\\\n    //   0.75 - default amount of filtering\\n\\\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\\n\\\n    //   0.25 - almost off\\n\\\n    //   0.00 - completely off\\n\\\n    FxaaFloat fxaaQualitySubpix,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // The minimum amount of local contrast required to apply algorithm.\\n\\\n    //   0.333 - too little (faster)\\n\\\n    //   0.250 - low quality\\n\\\n    //   0.166 - default\\n\\\n    //   0.125 - high quality\\n\\\n    //   0.063 - overkill (slower)\\n\\\n    FxaaFloat fxaaQualityEdgeThreshold,\\n\\\n    //\\n\\\n    // Only used on FXAA Quality.\\n\\\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\\n\\\n    // It is here now to allow easier tuning.\\n\\\n    // Trims the algorithm from processing darks.\\n\\\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\\n\\\n    //   0.0625 - high quality (faster)\\n\\\n    //   0.0312 - visible limit (slower)\\n\\\n    // Special notes when using FXAA_GREEN_AS_LUMA,\\n\\\n    //   Likely want to set this to zero.\\n\\\n    //   As colors that are mostly not-green\\n\\\n    //   will appear very dark in the green channel!\\n\\\n    //   Tune by looking at mostly non-green content,\\n\\\n    //   then start at zero and increase until aliasing is a problem.\\n\\\n    FxaaFloat fxaaQualityEdgeThresholdMin\\n\\\n) {\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posM;\\n\\\n    posM.x = pos.x;\\n\\\n    posM.y = pos.y;\\n\\\n    FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\\n\\\n    #define lumaM rgbyM.y\\n\\\n    FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat maxSM = max(lumaS, lumaM);\\n\\\n    FxaaFloat minSM = min(lumaS, lumaM);\\n\\\n    FxaaFloat maxESM = max(lumaE, maxSM);\\n\\\n    FxaaFloat minESM = min(lumaE, minSM);\\n\\\n    FxaaFloat maxWN = max(lumaN, lumaW);\\n\\\n    FxaaFloat minWN = min(lumaN, lumaW);\\n\\\n    FxaaFloat rangeMax = max(maxWN, maxESM);\\n\\\n    FxaaFloat rangeMin = min(minWN, minESM);\\n\\\n    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\\n\\\n    FxaaFloat range = rangeMax - rangeMin;\\n\\\n    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\\n\\\n    FxaaBool earlyExit = range < rangeMaxClamped;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(earlyExit)\\n\\\n        return rgbyM;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\\n\\\n    FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNS = lumaN + lumaS;\\n\\\n    FxaaFloat lumaWE = lumaW + lumaE;\\n\\\n    FxaaFloat subpixRcpRange = 1.0/range;\\n\\\n    FxaaFloat subpixNSWE = lumaNS + lumaWE;\\n\\\n    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\\n\\\n    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNESE = lumaNE + lumaSE;\\n\\\n    FxaaFloat lumaNWNE = lumaNW + lumaNE;\\n\\\n    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\\n\\\n    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat lumaNWSW = lumaNW + lumaSW;\\n\\\n    FxaaFloat lumaSWSE = lumaSW + lumaSE;\\n\\\n    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\\n\\\n    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\\n\\\n    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\\n\\\n    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\\n\\\n    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\\n\\\n    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\\n\\\n    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;\\n\\\n    FxaaBool horzSpan = edgeHorz >= edgeVert;\\n\\\n    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(!horzSpan) lumaN = lumaW;\\n\\\n    if(!horzSpan) lumaS = lumaE;\\n\\\n    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\\n\\\n    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat gradientN = lumaN - lumaM;\\n\\\n    FxaaFloat gradientS = lumaS - lumaM;\\n\\\n    FxaaFloat lumaNN = lumaN + lumaM;\\n\\\n    FxaaFloat lumaSS = lumaS + lumaM;\\n\\\n    FxaaBool pairN = abs(gradientN) >= abs(gradientS);\\n\\\n    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));\\n\\\n    if(pairN) lengthSign = -lengthSign;\\n\\\n    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posB;\\n\\\n    posB.x = posM.x;\\n\\\n    posB.y = posM.y;\\n\\\n    FxaaFloat2 offNP;\\n\\\n    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\\n\\\n    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\\n\\\n    if(!horzSpan) posB.x += lengthSign * 0.5;\\n\\\n    if( horzSpan) posB.y += lengthSign * 0.5;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat2 posN;\\n\\\n    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\\n\\\n    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\\n\\\n    FxaaFloat2 posP;\\n\\\n    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\\n\\\n    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\\n\\\n    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\\n\\\n    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\\n\\\n    FxaaFloat subpixE = subpixC * subpixC;\\n\\\n    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(!pairN) lumaNN = lumaSS;\\n\\\n    FxaaFloat gradientScaled = gradient * 1.0/4.0;\\n\\\n    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;\\n\\\n    FxaaFloat subpixF = subpixD * subpixE;\\n\\\n    FxaaBool lumaMLTZero = lumaMM < 0.0;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    lumaEndN -= lumaNN * 0.5;\\n\\\n    lumaEndP -= lumaNN * 0.5;\\n\\\n    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\\n\\\n    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\\n\\\n    FxaaBool doneNP = (!doneN) || (!doneP);\\n\\\n    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\\n\\\n    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    if(doneNP) {\\n\\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\\n\\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\\n\\\n        doneNP = (!doneN) || (!doneP);\\n\\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\\n\\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        #if (FXAA_QUALITY_PS > 3)\\n\\\n        if(doneNP) {\\n\\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\\n\\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\\n\\\n            doneNP = (!doneN) || (!doneP);\\n\\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\\n\\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            #if (FXAA_QUALITY_PS > 4)\\n\\\n            if(doneNP) {\\n\\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\\n\\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\\n\\\n                doneNP = (!doneN) || (!doneP);\\n\\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\\n\\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                #if (FXAA_QUALITY_PS > 5)\\n\\\n                if(doneNP) {\\n\\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\\n\\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\\n\\\n                    doneNP = (!doneN) || (!doneP);\\n\\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\\n\\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    #if (FXAA_QUALITY_PS > 6)\\n\\\n                    if(doneNP) {\\n\\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\\n\\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\\n\\\n                        doneNP = (!doneN) || (!doneP);\\n\\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\\n\\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                        #if (FXAA_QUALITY_PS > 7)\\n\\\n                        if(doneNP) {\\n\\\n                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\\n\\\n                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\\n\\\n                            doneNP = (!doneN) || (!doneP);\\n\\\n                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\\n\\\n                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    #if (FXAA_QUALITY_PS > 8)\\n\\\n    if(doneNP) {\\n\\\n        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\\n\\\n        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\\n\\\n        doneNP = (!doneN) || (!doneP);\\n\\\n        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\\n\\\n        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        #if (FXAA_QUALITY_PS > 9)\\n\\\n        if(doneNP) {\\n\\\n            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n            doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n            doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\\n\\\n            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\\n\\\n            doneNP = (!doneN) || (!doneP);\\n\\\n            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\\n\\\n            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            #if (FXAA_QUALITY_PS > 10)\\n\\\n            if(doneNP) {\\n\\\n                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\\n\\\n                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\\n\\\n                doneNP = (!doneN) || (!doneP);\\n\\\n                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\\n\\\n                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                #if (FXAA_QUALITY_PS > 11)\\n\\\n                if(doneNP) {\\n\\\n                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                    doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                    doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\\n\\\n                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\\n\\\n                    doneNP = (!doneN) || (!doneP);\\n\\\n                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\\n\\\n                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    #if (FXAA_QUALITY_PS > 12)\\n\\\n                    if(doneNP) {\\n\\\n                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\\n\\\n                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\\n\\\n                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\\n\\\n                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\\n\\\n                        doneN = abs(lumaEndN) >= gradientScaled;\\n\\\n                        doneP = abs(lumaEndP) >= gradientScaled;\\n\\\n                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\\n\\\n                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\\n\\\n                        doneNP = (!doneN) || (!doneP);\\n\\\n                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\\n\\\n                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    }\\n\\\n                    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                }\\n\\\n                #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            }\\n\\\n            #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        }\\n\\\n        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    }\\n\\\n    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                        }\\n\\\n                        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                    }\\n\\\n                    #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n                }\\n\\\n                #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n            }\\n\\\n            #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n        }\\n\\\n        #endif\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    }\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat dstN = posM.x - posN.x;\\n\\\n    FxaaFloat dstP = posP.x - posM.x;\\n\\\n    if(!horzSpan) dstN = posM.y - posN.y;\\n\\\n    if(!horzSpan) dstP = posP.y - posM.y;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\\n\\\n    FxaaFloat spanLength = (dstP + dstN);\\n\\\n    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\\n\\\n    FxaaFloat spanLengthRcp = 1.0/spanLength;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaBool directionN = dstN < dstP;\\n\\\n    FxaaFloat dst = min(dstN, dstP);\\n\\\n    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\\n\\\n    FxaaFloat subpixG = subpixF * subpixF;\\n\\\n    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\\n\\\n    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;\\n\\\n/*--------------------------------------------------------------------------*/\\n\\\n    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\\n\\\n    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\\n\\\n    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\\n\\\n    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\\n\\\n    return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/Cartesian2',\n        '../Core/Color',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/ClearCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap'\n    ], function(\n        Cartesian2,\n        Color,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        PixelFormat,\n        ClearCommand,\n        Framebuffer,\n        PixelDatatype,\n        Sampler,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap) {\n    'use strict';\n\n    /**\n     * A post process stage that will get the luminance value at each pixel and\n     * uses parallel reduction to compute the average luminance in a 1x1 texture.\n     * This texture can be used as input for tone mapping.\n     *\n     * @constructor\n     * @private\n     */\n    function AutoExposure() {\n        this._uniformMap = undefined;\n        this._command = undefined;\n\n        this._colorTexture = undefined;\n        this._depthTexture = undefined;\n\n        this._ready = false;\n\n        this._name = 'czm_autoexposure';\n\n        this._logDepthChanged = undefined;\n        this._useLogDepth = undefined;\n\n        this._framebuffers = undefined;\n        this._previousLuminance = undefined;\n\n        this._commands = undefined;\n        this._clearCommand = undefined;\n\n        this._minMaxLuminance = new Cartesian2();\n\n        /**\n         * Whether or not to execute this post-process stage when ready.\n         *\n         * @type {Boolean}\n         */\n        this.enabled = true;\n        this._enabled = true;\n\n        /**\n         * The minimum value used to clamp the luminance.\n         *\n         * @type {Number}\n         * @default 0.1\n         */\n        this.minimumLuminance = 0.1;\n\n        /**\n         * The maximum value used to clamp the luminance.\n         *\n         * @type {Number}\n         * @default 10.0\n         */\n        this.maximumLuminance = 10.0;\n    }\n\n    defineProperties(AutoExposure.prototype, {\n        /**\n         * Determines if this post-process stage is ready to be executed. A stage is only executed when both <code>ready</code>\n         * and {@link AutoExposure#enabled} are <code>true</code>. A stage will not be ready while it is waiting on textures\n         * to load.\n         *\n         * @memberof AutoExposure.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        },\n        /**\n         * The unique name of this post-process stage for reference by other stages.\n         *\n         * @memberof AutoExposure.prototype\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n\n        /**\n         * A reference to the texture written to when executing this post process stage.\n         *\n         * @memberof AutoExposure.prototype\n         * @type {Texture}\n         * @readonly\n         * @private\n         */\n        outputTexture : {\n            get : function() {\n                var framebuffers = this._framebuffers;\n                if (!defined(framebuffers)) {\n                    return undefined;\n                }\n                return framebuffers[framebuffers.length - 1].getColorTexture(0);\n            }\n        }\n    });\n\n    function destroyFramebuffers(autoexposure) {\n        var framebuffers = autoexposure._framebuffers;\n        if (!defined(framebuffers)) {\n            return;\n        }\n\n        var length = framebuffers.length;\n        for (var i = 0; i < length; ++i) {\n            framebuffers[i].destroy();\n        }\n        autoexposure._framebuffers = undefined;\n\n        autoexposure._previousLuminance.destroy();\n        autoexposure._previousLuminance = undefined;\n    }\n\n    function createFramebuffers(autoexposure, context) {\n        destroyFramebuffers(autoexposure);\n\n        var width = autoexposure._width;\n        var height = autoexposure._height;\n\n        var pixelFormat = PixelFormat.RGBA;\n        var pixelDatatype = context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT;\n        var sampler = new Sampler({\n            wrapS : TextureWrap.CLAMP_TO_EDGE,\n            wrapT : TextureWrap.CLAMP_TO_EDGE,\n            minificationFilter : TextureMinificationFilter.NEAREST,\n            magnificationFilter : TextureMagnificationFilter.NEAREST\n        });\n\n        var length = Math.ceil(Math.log(Math.max(width, height)) / Math.log(3.0));\n        var framebuffers = new Array(length);\n        for (var i = 0; i < length; ++i) {\n            width = Math.max(Math.ceil(width / 3.0), 1.0);\n            height = Math.max(Math.ceil(height / 3.0), 1.0);\n            framebuffers[i] = new Framebuffer({\n                context : context,\n                colorTextures : [new Texture({\n                    context : context,\n                    width : width,\n                    height : height,\n                    pixelFormat : pixelFormat,\n                    pixelDatatype : pixelDatatype,\n                    sampler : sampler\n                })]\n            });\n        }\n\n        var lastTexture = framebuffers[length - 1].getColorTexture(0);\n        autoexposure._previousLuminance = new Framebuffer({\n            context : context,\n            colorTextures : [new Texture({\n                context : context,\n                width : lastTexture.width,\n                height : lastTexture.height,\n                pixelFormat : pixelFormat,\n                pixelDatatype : pixelDatatype,\n                sampler : sampler\n            })]\n        });\n\n        autoexposure._framebuffers = framebuffers;\n    }\n\n    function destroyCommands(autoexposure) {\n        var commands = autoexposure._commands;\n        if (!defined(commands)) {\n            return;\n        }\n\n        var length = commands.length;\n        for (var i = 0; i < length; ++i) {\n            commands[i].shaderProgram.destroy();\n        }\n        autoexposure._commands = undefined;\n    }\n\n    function createUniformMap(autoexposure, index) {\n        var uniforms;\n        if (index === 0) {\n            uniforms = {\n                colorTexture : function() {\n                    return autoexposure._colorTexture;\n                },\n                colorTextureDimensions : function() {\n                    return autoexposure._colorTexture.dimensions;\n                }\n            };\n        } else {\n            var texture = autoexposure._framebuffers[index - 1].getColorTexture(0);\n            uniforms = {\n                colorTexture : function() {\n                    return texture;\n                },\n                colorTextureDimensions : function() {\n                    return texture.dimensions;\n                }\n            };\n        }\n\n        uniforms.minMaxLuminance = function() {\n            return autoexposure._minMaxLuminance;\n        };\n        uniforms.previousLuminance = function() {\n            return autoexposure._previousLuminance.getColorTexture(0);\n        };\n\n        return uniforms;\n    }\n\n    function getShaderSource(index, length) {\n        var source =\n            'uniform sampler2D colorTexture; \\n' +\n            'varying vec2 v_textureCoordinates; \\n' +\n            'float sampleTexture(vec2 offset) { \\n';\n\n        if (index === 0) {\n            source +=\n                '    vec4 color = texture2D(colorTexture, v_textureCoordinates + offset); \\n' +\n                '    return czm_luminance(color.rgb); \\n';\n        } else {\n            source +=\n                '    return texture2D(colorTexture, v_textureCoordinates + offset).r; \\n';\n        }\n\n        source += '}\\n\\n';\n\n        source +=\n            'uniform vec2 colorTextureDimensions; \\n' +\n            'uniform vec2 minMaxLuminance; \\n' +\n            'uniform sampler2D previousLuminance; \\n' +\n            'void main() { \\n' +\n            '    float color = 0.0; \\n' +\n            '    float xStep = 1.0 / colorTextureDimensions.x; \\n' +\n            '    float yStep = 1.0 / colorTextureDimensions.y; \\n' +\n            '    int count = 0; \\n' +\n            '    for (int i = 0; i < 3; ++i) { \\n' +\n            '        for (int j = 0; j < 3; ++j) { \\n' +\n            '            vec2 offset; \\n' +\n            '            offset.x = -xStep + float(i) * xStep; \\n' +\n            '            offset.y = -yStep + float(j) * yStep; \\n' +\n            '            if (offset.x < 0.0 || offset.x > 1.0 || offset.y < 0.0 || offset.y > 1.0) { \\n' +\n            '                continue; \\n' +\n            '            } \\n' +\n            '            color += sampleTexture(offset); \\n' +\n            '            ++count; \\n' +\n            '        } \\n' +\n            '    } \\n' +\n            '    if (count > 0) { \\n' +\n            '        color /= float(count); \\n' +\n            '    } \\n';\n\n        if (index === length - 1) {\n            source +=\n                '    float previous = texture2D(previousLuminance, vec2(0.5)).r; \\n' +\n                '    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n' +\n                '    color = previous + (color - previous) / (60.0 * 1.5); \\n' +\n                '    color = clamp(color, minMaxLuminance.x, minMaxLuminance.y); \\n';\n        }\n\n        source +=\n            '    gl_FragColor = vec4(color); \\n' +\n            '} \\n';\n        return source;\n    }\n\n    function createCommands(autoexposure, context) {\n        destroyCommands(autoexposure);\n        var framebuffers = autoexposure._framebuffers;\n        var length = framebuffers.length;\n\n        var commands = new Array(length);\n\n        for (var i = 0; i < length; ++i) {\n            commands[i] = context.createViewportQuadCommand(getShaderSource(i, length), {\n                framebuffer : framebuffers[i],\n                uniformMap : createUniformMap(autoexposure, i)\n            });\n        }\n        autoexposure._commands = commands;\n    }\n\n    /**\n     * A function that will be called before execute. Used to clear any textures attached to framebuffers.\n     * @param {Context} context The context.\n     * @private\n     */\n    AutoExposure.prototype.clear = function(context) {\n        var framebuffers = this._framebuffers;\n        if (!defined(framebuffers)) {\n            return;\n        }\n\n        var clearCommand = this._clearCommand;\n        if (!defined(clearCommand)) {\n            clearCommand = this._clearCommand = new ClearCommand({\n                color : new Color(0.0, 0.0, 0.0, 0.0),\n                framebuffer : undefined\n            });\n        }\n\n        var length = framebuffers.length;\n        for (var i = 0; i < length; ++i) {\n            clearCommand.framebuffer = framebuffers[i];\n            clearCommand.execute(context);\n        }\n    };\n\n    /**\n     * A function that will be called before execute. Used to create WebGL resources and load any textures.\n     * @param {Context} context The context.\n     * @private\n     */\n    AutoExposure.prototype.update = function(context) {\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight;\n\n        if (width !== this._width || height !== this._height) {\n            this._width = width;\n            this._height = height;\n\n            createFramebuffers(this, context);\n            createCommands(this, context);\n\n            if (!this._ready) {\n                this._ready = true;\n            }\n        }\n\n        this._minMaxLuminance.x = this.minimumLuminance;\n        this._minMaxLuminance.y = this.maximumLuminance;\n\n        var framebuffers = this._framebuffers;\n        var temp = framebuffers[framebuffers.length - 1];\n        framebuffers[framebuffers.length - 1] = this._previousLuminance;\n        this._commands[this._commands.length - 1].framebuffer = this._previousLuminance;\n        this._previousLuminance = temp;\n    };\n\n    /**\n     * Executes the post-process stage. The color texture is the texture rendered to by the scene or from the previous stage.\n     * @param {Context} context The context.\n     * @param {Texture} colorTexture The input color texture.\n     * @private\n     */\n    AutoExposure.prototype.execute = function(context, colorTexture) {\n        this._colorTexture = colorTexture;\n\n        var commands = this._commands;\n        if (!defined(commands)) {\n            return;\n        }\n\n        var length = commands.length;\n        for (var i = 0; i < length; ++i) {\n            commands[i].execute(context);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see AutoExposure#destroy\n     */\n    AutoExposure.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see AutoExposure#isDestroyed\n     */\n    AutoExposure.prototype.destroy = function() {\n        destroyFramebuffers(this);\n        destroyCommands(this);\n        return destroyObject(this);\n    };\n\n    return AutoExposure;\n});\n","module.exports = __webpack_public_path__ + \"c6ab0a71c7048eb83585b34bd32f4ee0.jpg\";","module.exports = __webpack_public_path__ + \"27faaa4b21b2a66ac3496b20640e571f.jpg\";","define([\n        '../Core/freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * A tonemapping algorithm when rendering with high dynamic range.\n     *\n     * @exports Tonemapper\n     * @private\n     */\n    var Tonemapper = {\n        /**\n         * Use the Reinhard tonemapping operator.\n         *\n         * @type {Number}\n         * @constant\n         */\n        REINHARD : 0,\n\n        /**\n         * Use the modified Reinhard tonemapping operator.\n         *\n         * @type {Number}\n         * @constant\n         */\n        MODIFIED_REINHARD : 1,\n\n        /**\n         * Use the Filmic tonemapping operator.\n         *\n         * @type {Number}\n         * @constant\n         */\n        FILMIC : 2,\n\n        /**\n         * Use the ACES tonemapping operator.\n         *\n         * @type {Number}\n         * @constant\n         */\n        ACES : 3,\n\n        /**\n         * @private\n         */\n        validate : function(tonemapper) {\n            return tonemapper === Tonemapper.REINHARD ||\n                   tonemapper === Tonemapper.MODIFIED_REINHARD ||\n                   tonemapper === Tonemapper.FILMIC ||\n                   tonemapper === Tonemapper.ACES;\n        }\n    };\n\n    return freezeObject(Tonemapper);\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/Cartographic',\n        '../Core/Check',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/EasingFunction',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/OrthographicFrustum',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Core/PerspectiveFrustum',\n        '../Core/Ray',\n        '../Core/ScreenSpaceEventHandler',\n        '../Core/ScreenSpaceEventType',\n        '../Core/Transforms',\n        './Camera',\n        './SceneMode'\n    ], function(\n        Cartesian3,\n        Cartographic,\n        Check,\n        defined,\n        destroyObject,\n        EasingFunction,\n        CesiumMath,\n        Matrix4,\n        OrthographicFrustum,\n        OrthographicOffCenterFrustum,\n        PerspectiveFrustum,\n        Ray,\n        ScreenSpaceEventHandler,\n        ScreenSpaceEventType,\n        Transforms,\n        Camera,\n        SceneMode) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function SceneTransitioner(scene) {\n        \n\n        this._scene = scene;\n        this._currentTweens = [];\n        this._morphHandler = undefined;\n        this._morphCancelled = false;\n        this._completeMorph = undefined;\n        this._morphToOrthographic = false;\n    }\n\n    SceneTransitioner.prototype.completeMorph = function() {\n        if (defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n    };\n\n    SceneTransitioner.prototype.morphTo2D = function(duration, ellipsoid) {\n        if (defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n\n        var scene = this._scene;\n        this._previousMode = scene.mode;\n        this._morphToOrthographic = scene.camera.frustum instanceof OrthographicFrustum;\n\n        if (this._previousMode === SceneMode.SCENE2D || this._previousMode === SceneMode.MORPHING) {\n            return;\n        }\n        this._scene.morphStart.raiseEvent(this, this._previousMode, SceneMode.SCENE2D, true);\n\n        scene._mode = SceneMode.MORPHING;\n        scene.camera._setTransform(Matrix4.IDENTITY);\n\n        if (this._previousMode === SceneMode.COLUMBUS_VIEW) {\n            morphFromColumbusViewTo2D(this, duration);\n        } else {\n            morphFrom3DTo2D(this, duration, ellipsoid);\n        }\n\n        if (duration === 0.0 && defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n    };\n\n    var scratchToCVPosition = new Cartesian3();\n    var scratchToCVDirection = new Cartesian3();\n    var scratchToCVUp = new Cartesian3();\n    var scratchToCVPosition2D = new Cartesian3();\n    var scratchToCVDirection2D = new Cartesian3();\n    var scratchToCVUp2D = new Cartesian3();\n    var scratchToCVSurfacePosition = new Cartesian3();\n    var scratchToCVCartographic = new Cartographic();\n    var scratchToCVToENU = new Matrix4();\n    var scratchToCVFrustumPerspective = new PerspectiveFrustum();\n    var scratchToCVFrustumOrthographic = new OrthographicFrustum();\n    var scratchToCVCamera = {\n        position : undefined,\n        direction : undefined,\n        up : undefined,\n        position2D : undefined,\n        direction2D : undefined,\n        up2D : undefined,\n        frustum : undefined\n    };\n\n    SceneTransitioner.prototype.morphToColumbusView = function(duration, ellipsoid) {\n        if (defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n\n        var scene = this._scene;\n        this._previousMode = scene.mode;\n\n        if (this._previousMode === SceneMode.COLUMBUS_VIEW || this._previousMode === SceneMode.MORPHING) {\n            return;\n        }\n        this._scene.morphStart.raiseEvent(this, this._previousMode, SceneMode.COLUMBUS_VIEW, true);\n\n        scene.camera._setTransform(Matrix4.IDENTITY);\n\n        var position = scratchToCVPosition;\n        var direction = scratchToCVDirection;\n        var up = scratchToCVUp;\n\n        if (duration > 0.0) {\n            position.x = 0.0;\n            position.y = -1.0;\n            position.z = 1.0;\n            position = Cartesian3.multiplyByScalar(Cartesian3.normalize(position, position), 5.0 * ellipsoid.maximumRadius, position);\n\n            Cartesian3.negate(Cartesian3.normalize(position, direction), direction);\n            Cartesian3.cross(Cartesian3.UNIT_X, direction, up);\n        } else {\n            var camera = scene.camera;\n            if (this._previousMode === SceneMode.SCENE2D) {\n                Cartesian3.clone(camera.position, position);\n                position.z = camera.frustum.right - camera.frustum.left;\n                Cartesian3.negate(Cartesian3.UNIT_Z, direction);\n                Cartesian3.clone(Cartesian3.UNIT_Y, up);\n            } else {\n                Cartesian3.clone(camera.positionWC, position);\n                Cartesian3.clone(camera.directionWC, direction);\n                Cartesian3.clone(camera.upWC, up);\n\n                var surfacePoint = ellipsoid.scaleToGeodeticSurface(position, scratchToCVSurfacePosition);\n                var toENU = Transforms.eastNorthUpToFixedFrame(surfacePoint, ellipsoid, scratchToCVToENU);\n                Matrix4.inverseTransformation(toENU, toENU);\n\n                scene.mapProjection.project(ellipsoid.cartesianToCartographic(position, scratchToCVCartographic), position);\n                Matrix4.multiplyByPointAsVector(toENU, direction, direction);\n                Matrix4.multiplyByPointAsVector(toENU, up, up);\n            }\n        }\n\n        var frustum;\n        if (this._morphToOrthographic) {\n            frustum = scratchToCVFrustumOrthographic;\n            frustum.width = scene.camera.frustum.right - scene.camera.frustum.left;\n            frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n        } else {\n            frustum = scratchToCVFrustumPerspective;\n            frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n            frustum.fov = CesiumMath.toRadians(60.0);\n        }\n\n        var cameraCV = scratchToCVCamera;\n        cameraCV.position = position;\n        cameraCV.direction = direction;\n        cameraCV.up = up;\n        cameraCV.frustum = frustum;\n\n        var complete = completeColumbusViewCallback(cameraCV);\n        createMorphHandler(this, complete);\n\n        if (this._previousMode === SceneMode.SCENE2D) {\n            morphFrom2DToColumbusView(this, duration, cameraCV, complete);\n        } else {\n            cameraCV.position2D = Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, position, scratchToCVPosition2D);\n            cameraCV.direction2D = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, direction, scratchToCVDirection2D);\n            cameraCV.up2D = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, up, scratchToCVUp2D);\n\n            scene._mode = SceneMode.MORPHING;\n            morphFrom3DToColumbusView(this, duration, cameraCV, complete);\n        }\n\n        if (duration === 0.0 && defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n    };\n\n    var scratchCVTo3DCamera = {\n        position : new Cartesian3(),\n        direction : new Cartesian3(),\n        up : new Cartesian3(),\n        frustum : undefined\n    };\n    var scratch2DTo3DFrustumPersp = new PerspectiveFrustum();\n\n    SceneTransitioner.prototype.morphTo3D = function(duration, ellipsoid) {\n        if (defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n\n        var scene = this._scene;\n        this._previousMode = scene.mode;\n\n        if (this._previousMode === SceneMode.SCENE3D || this._previousMode === SceneMode.MORPHING) {\n            return;\n        }\n        this._scene.morphStart.raiseEvent(this, this._previousMode, SceneMode.SCENE3D, true);\n\n        scene._mode = SceneMode.MORPHING;\n        scene.camera._setTransform(Matrix4.IDENTITY);\n\n        if (this._previousMode === SceneMode.SCENE2D) {\n            morphFrom2DTo3D(this, duration, ellipsoid);\n        } else {\n            var camera3D;\n            if (duration > 0.0) {\n                camera3D = scratchCVTo3DCamera;\n                Cartesian3.fromDegrees(0.0, 0.0, 5.0 * ellipsoid.maximumRadius, ellipsoid, camera3D.position);\n                Cartesian3.negate(camera3D.position, camera3D.direction);\n                Cartesian3.normalize(camera3D.direction, camera3D.direction);\n                Cartesian3.clone(Cartesian3.UNIT_Z, camera3D.up);\n            } else {\n                camera3D = getColumbusViewTo3DCamera(this, ellipsoid);\n            }\n\n            var frustum;\n            var camera = scene.camera;\n            if (camera.frustum instanceof OrthographicFrustum) {\n                frustum = camera.frustum.clone();\n            } else {\n                frustum = scratch2DTo3DFrustumPersp;\n                frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n                frustum.fov = CesiumMath.toRadians(60.0);\n            }\n            camera3D.frustum = frustum;\n\n            var complete = complete3DCallback(camera3D);\n            createMorphHandler(this, complete);\n\n            morphFromColumbusViewTo3D(this, duration, camera3D, complete);\n        }\n\n        if (duration === 0.0 && defined(this._completeMorph)) {\n            this._completeMorph();\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     */\n    SceneTransitioner.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @example\n     * transitioner = transitioner && transitioner.destroy();\n     */\n    SceneTransitioner.prototype.destroy = function() {\n        destroyMorphHandler(this);\n        return destroyObject(this);\n    };\n\n    function createMorphHandler(transitioner, completeMorphFunction) {\n        if (transitioner._scene.completeMorphOnUserInput) {\n            transitioner._morphHandler = new ScreenSpaceEventHandler(transitioner._scene.canvas, false);\n\n            var completeMorph = function() {\n                transitioner._morphCancelled = true;\n                transitioner._scene.camera.cancelFlight();\n                completeMorphFunction(transitioner);\n            };\n            transitioner._completeMorph = completeMorph;\n            transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.LEFT_DOWN);\n            transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.MIDDLE_DOWN);\n            transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.RIGHT_DOWN);\n            transitioner._morphHandler.setInputAction(completeMorph, ScreenSpaceEventType.WHEEL);\n        }\n    }\n\n    function destroyMorphHandler(transitioner) {\n        var tweens = transitioner._currentTweens;\n        for ( var i = 0; i < tweens.length; ++i) {\n            tweens[i].cancelTween();\n        }\n        transitioner._currentTweens.length = 0;\n        transitioner._morphHandler = transitioner._morphHandler && transitioner._morphHandler.destroy();\n    }\n\n    var scratchCVTo3DCartographic = new Cartographic();\n    var scratchCVTo3DSurfacePoint = new Cartesian3();\n    var scratchCVTo3DFromENU = new Matrix4();\n\n    function getColumbusViewTo3DCamera(transitioner, ellipsoid) {\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var camera3D = scratchCVTo3DCamera;\n        var position = camera3D.position;\n        var direction = camera3D.direction;\n        var up = camera3D.up;\n\n        var positionCarto = scene.mapProjection.unproject(camera.position, scratchCVTo3DCartographic);\n        ellipsoid.cartographicToCartesian(positionCarto, position);\n        var surfacePoint = ellipsoid.scaleToGeodeticSurface(position, scratchCVTo3DSurfacePoint);\n\n        var fromENU = Transforms.eastNorthUpToFixedFrame(surfacePoint, ellipsoid, scratchCVTo3DFromENU);\n\n        Matrix4.multiplyByPointAsVector(fromENU, camera.direction, direction);\n        Matrix4.multiplyByPointAsVector(fromENU, camera.up, up);\n\n        return camera3D;\n    }\n\n    var scratchCVTo3DStartPos = new Cartesian3();\n    var scratchCVTo3DStartDir = new Cartesian3();\n    var scratchCVTo3DStartUp = new Cartesian3();\n    var scratchCVTo3DEndPos = new Cartesian3();\n    var scratchCVTo3DEndDir = new Cartesian3();\n    var scratchCVTo3DEndUp = new Cartesian3();\n\n    function morphFromColumbusViewTo3D(transitioner, duration, endCamera, complete) {\n        duration *= 0.5;\n\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var startPos = Cartesian3.clone(camera.position, scratchCVTo3DStartPos);\n        var startDir = Cartesian3.clone(camera.direction, scratchCVTo3DStartDir);\n        var startUp = Cartesian3.clone(camera.up, scratchCVTo3DStartUp);\n\n        var endPos = Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, endCamera.position, scratchCVTo3DEndPos);\n        var endDir = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D_INVERSE, endCamera.direction, scratchCVTo3DEndDir);\n        var endUp = Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D_INVERSE, endCamera.up, scratchCVTo3DEndUp);\n\n        function update(value) {\n            columbusViewMorph(startPos, endPos, value.time, camera.position);\n            columbusViewMorph(startDir, endDir, value.time, camera.direction);\n            columbusViewMorph(startUp, endUp, value.time, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n            Cartesian3.normalize(camera.right, camera.right);\n        }\n\n        var tween = scene.tweens.add({\n            duration : duration,\n            easingFunction : EasingFunction.QUARTIC_OUT,\n            startObject : {\n                time : 0.0\n            },\n            stopObject : {\n                time : 1.0\n            },\n            update : update,\n            complete : function() {\n                addMorphTimeAnimations(transitioner, scene, 0.0, 1.0, duration, complete);\n            }\n        });\n        transitioner._currentTweens.push(tween);\n    }\n\n    var scratch2DTo3DFrustumOrtho = new OrthographicFrustum();\n    var scratch3DToCVStartPos = new Cartesian3();\n    var scratch3DToCVStartDir = new Cartesian3();\n    var scratch3DToCVStartUp = new Cartesian3();\n    var scratch3DToCVEndPos = new Cartesian3();\n    var scratch3DToCVEndDir = new Cartesian3();\n    var scratch3DToCVEndUp = new Cartesian3();\n\n    function morphFrom2DTo3D(transitioner, duration, ellipsoid) {\n        duration /= 3.0;\n\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var camera3D;\n        if (duration > 0.0) {\n            camera3D = scratchCVTo3DCamera;\n            Cartesian3.fromDegrees(0.0, 0.0, 5.0 * ellipsoid.maximumRadius, ellipsoid, camera3D.position);\n            Cartesian3.negate(camera3D.position, camera3D.direction);\n            Cartesian3.normalize(camera3D.direction, camera3D.direction);\n            Cartesian3.clone(Cartesian3.UNIT_Z, camera3D.up);\n        } else {\n            camera.position.z = camera.frustum.right - camera.frustum.left;\n\n            camera3D = getColumbusViewTo3DCamera(transitioner, ellipsoid);\n        }\n\n        var frustum;\n        if (transitioner._morphToOrthographic) {\n            frustum = scratch2DTo3DFrustumOrtho;\n            frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n            frustum.width = camera.frustum.right - camera.frustum.left;\n        } else {\n            frustum = scratch2DTo3DFrustumPersp;\n            frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n            frustum.fov = CesiumMath.toRadians(60.0);\n        }\n\n        camera3D.frustum = frustum;\n\n        var complete = complete3DCallback(camera3D);\n        createMorphHandler(transitioner, complete);\n\n        var morph;\n        if (transitioner._morphToOrthographic) {\n            morph = function() {\n                morphFromColumbusViewTo3D(transitioner, duration, camera3D, complete);\n            };\n        } else {\n            morph = function() {\n                morphOrthographicToPerspective(transitioner, duration, camera3D, function() {\n                    morphFromColumbusViewTo3D(transitioner, duration, camera3D, complete);\n                });\n            };\n        }\n\n        if (duration > 0.0) {\n            scene._mode = SceneMode.SCENE2D;\n            camera.flyTo({\n                duration : duration,\n                destination : Cartesian3.fromDegrees(0.0, 0.0, 5.0 * ellipsoid.maximumRadius, ellipsoid, scratch3DToCVEndPos),\n                complete : function() {\n                    scene._mode = SceneMode.MORPHING;\n                    morph();\n                }\n            });\n        } else {\n            morph();\n        }\n    }\n\n    function columbusViewMorph(startPosition, endPosition, time, result) {\n        // Just linear for now.\n        return Cartesian3.lerp(startPosition, endPosition, time, result);\n    }\n\n    function morphPerspectiveToOrthographic(transitioner, duration, endCamera, updateHeight, complete) {\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        if (camera.frustum instanceof OrthographicFrustum) {\n            return;\n        }\n\n        var startFOV = camera.frustum.fov;\n        var endFOV = CesiumMath.RADIANS_PER_DEGREE * 0.5;\n        var d = endCamera.position.z * Math.tan(startFOV * 0.5);\n        camera.frustum.far = d / Math.tan(endFOV * 0.5) + 10000000.0;\n\n        function update(value) {\n            camera.frustum.fov = CesiumMath.lerp(startFOV, endFOV, value.time);\n            var height = d / Math.tan(camera.frustum.fov * 0.5);\n            updateHeight(camera, height);\n        }\n        var tween = scene.tweens.add({\n            duration : duration,\n            easingFunction : EasingFunction.QUARTIC_OUT,\n            startObject : {\n                time : 0.0\n            },\n            stopObject : {\n                time : 1.0\n            },\n            update : update,\n            complete : function() {\n                camera.frustum = endCamera.frustum.clone();\n                complete(transitioner);\n            }\n        });\n        transitioner._currentTweens.push(tween);\n    }\n\n    var scratchCVTo2DStartPos = new Cartesian3();\n    var scratchCVTo2DStartDir = new Cartesian3();\n    var scratchCVTo2DStartUp = new Cartesian3();\n    var scratchCVTo2DEndPos = new Cartesian3();\n    var scratchCVTo2DEndDir = new Cartesian3();\n    var scratchCVTo2DEndUp = new Cartesian3();\n    var scratchCVTo2DFrustum = new OrthographicOffCenterFrustum();\n    var scratchCVTo2DRay = new Ray();\n    var scratchCVTo2DPickPos = new Cartesian3();\n    var scratchCVTo2DCamera = {\n        position : undefined,\n        direction : undefined,\n        up : undefined,\n        frustum : undefined\n    };\n\n    function morphFromColumbusViewTo2D(transitioner, duration) {\n        duration *= 0.5;\n\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var startPos = Cartesian3.clone(camera.position, scratchCVTo2DStartPos);\n        var startDir = Cartesian3.clone(camera.direction, scratchCVTo2DStartDir);\n        var startUp = Cartesian3.clone(camera.up, scratchCVTo2DStartUp);\n\n        var endDir = Cartesian3.negate(Cartesian3.UNIT_Z, scratchCVTo2DEndDir);\n        var endUp = Cartesian3.clone(Cartesian3.UNIT_Y, scratchCVTo2DEndUp);\n\n        var endPos = scratchCVTo2DEndPos;\n\n        if (duration > 0.0) {\n            Cartesian3.clone(Cartesian3.ZERO, scratchCVTo2DEndPos);\n            endPos.z = 5.0 * scene.mapProjection.ellipsoid.maximumRadius;\n        } else {\n            Cartesian3.clone(startPos, scratchCVTo2DEndPos);\n\n            var ray = scratchCVTo2DRay;\n            Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, startPos, ray.origin);\n            Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, startDir, ray.direction);\n\n            var globe = scene.globe;\n            if (defined(globe)) {\n                var pickPos = globe.pickWorldCoordinates(ray, scene, scratchCVTo2DPickPos);\n                if (defined(pickPos)) {\n                    Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, pickPos, endPos);\n                    endPos.z += Cartesian3.distance(startPos, endPos);\n                }\n            }\n        }\n\n        var frustum = scratchCVTo2DFrustum;\n        frustum.right = endPos.z * 0.5;\n        frustum.left = -frustum.right;\n        frustum.top = frustum.right * (scene.drawingBufferHeight / scene.drawingBufferWidth);\n        frustum.bottom = -frustum.top;\n\n        var camera2D = scratchCVTo2DCamera;\n        camera2D.position = endPos;\n        camera2D.direction = endDir;\n        camera2D.up = endUp;\n        camera2D.frustum = frustum;\n\n        var complete = complete2DCallback(camera2D);\n        createMorphHandler(transitioner, complete);\n\n        function updateCV(value) {\n            columbusViewMorph(startPos, endPos, value.time, camera.position);\n            columbusViewMorph(startDir, endDir, value.time, camera.direction);\n            columbusViewMorph(startUp, endUp, value.time, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n            Cartesian3.normalize(camera.right, camera.right);\n            camera._adjustOrthographicFrustum(true);\n        }\n\n        function updateHeight(camera, height) {\n            camera.position.z = height;\n        }\n\n        var tween = scene.tweens.add({\n            duration : duration,\n            easingFunction : EasingFunction.QUARTIC_OUT,\n            startObject : {\n                time : 0.0\n            },\n            stopObject : {\n                time : 1.0\n            },\n            update : updateCV,\n            complete : function() {\n                morphPerspectiveToOrthographic(transitioner, duration, camera2D, updateHeight, complete);\n            }\n        });\n        transitioner._currentTweens.push(tween);\n    }\n\n    var scratch3DTo2DCartographic = new Cartographic();\n    var scratch3DTo2DCamera = {\n        position : new Cartesian3(),\n        direction : new Cartesian3(),\n        up : new Cartesian3(),\n        position2D : new Cartesian3(),\n        direction2D : new Cartesian3(),\n        up2D : new Cartesian3(),\n        frustum : new OrthographicOffCenterFrustum()\n    };\n    var scratch3DTo2DEndCamera = {\n        position : new Cartesian3(),\n        direction : new Cartesian3(),\n        up : new Cartesian3(),\n        frustum : undefined\n    };\n    var scratch3DTo2DPickPosition = new Cartesian3();\n    var scratch3DTo2DRay = new Ray();\n    var scratch3DTo2DToENU = new Matrix4();\n    var scratch3DTo2DSurfacePoint = new Cartesian3();\n\n    function morphFrom3DTo2D(transitioner, duration, ellipsoid) {\n        duration *= 0.5;\n\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n        var camera2D = scratch3DTo2DCamera;\n\n        if (duration > 0.0) {\n            Cartesian3.clone(Cartesian3.ZERO, camera2D.position);\n            camera2D.position.z = 5.0 * ellipsoid.maximumRadius;\n            Cartesian3.negate(Cartesian3.UNIT_Z, camera2D.direction);\n            Cartesian3.clone(Cartesian3.UNIT_Y, camera2D.up);\n        } else {\n            ellipsoid.cartesianToCartographic(camera.positionWC, scratch3DTo2DCartographic);\n            scene.mapProjection.project(scratch3DTo2DCartographic, camera2D.position);\n\n            Cartesian3.negate(Cartesian3.UNIT_Z, camera2D.direction);\n            Cartesian3.clone(Cartesian3.UNIT_Y, camera2D.up);\n\n            var ray = scratch3DTo2DRay;\n            Cartesian3.clone(camera2D.position2D, ray.origin);\n            var rayDirection = Cartesian3.clone(camera.directionWC, ray.direction);\n            var surfacePoint = ellipsoid.scaleToGeodeticSurface(camera.positionWC, scratch3DTo2DSurfacePoint);\n            var toENU = Transforms.eastNorthUpToFixedFrame(surfacePoint, ellipsoid, scratch3DTo2DToENU);\n            Matrix4.inverseTransformation(toENU, toENU);\n            Matrix4.multiplyByPointAsVector(toENU, rayDirection, rayDirection);\n            Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, rayDirection, rayDirection);\n\n            var globe = scene.globe;\n            if (defined(globe)) {\n                var pickedPos = globe.pickWorldCoordinates(ray, scene, scratch3DTo2DPickPosition);\n                if (defined(pickedPos)) {\n                    var height = Cartesian3.distance(camera2D.position2D, pickedPos);\n                    pickedPos.x += height;\n                    Cartesian3.clone(pickedPos, camera2D.position2D);\n                }\n            }\n        }\n\n        function updateHeight(camera, height) {\n            camera.position.x = height;\n        }\n\n        Matrix4.multiplyByPoint(Camera.TRANSFORM_2D, camera2D.position, camera2D.position2D);\n        Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, camera2D.direction, camera2D.direction2D);\n        Matrix4.multiplyByPointAsVector(Camera.TRANSFORM_2D, camera2D.up, camera2D.up2D);\n\n        var frustum = camera2D.frustum;\n        frustum.right = camera2D.position.z * 0.5;\n        frustum.left = -frustum.right;\n        frustum.top = frustum.right * (scene.drawingBufferHeight / scene.drawingBufferWidth);\n        frustum.bottom = -frustum.top;\n\n        var endCamera = scratch3DTo2DEndCamera;\n        Matrix4.multiplyByPoint(Camera.TRANSFORM_2D_INVERSE, camera2D.position2D, endCamera.position);\n        Cartesian3.clone(camera2D.direction, endCamera.direction);\n        Cartesian3.clone(camera2D.up, endCamera.up);\n        endCamera.frustum = frustum;\n\n        var complete = complete2DCallback(endCamera);\n        createMorphHandler(transitioner, complete);\n\n        function completeCallback() {\n            morphPerspectiveToOrthographic(transitioner, duration, camera2D, updateHeight, complete);\n        }\n        morphFrom3DToColumbusView(transitioner, duration, camera2D, completeCallback);\n    }\n\n    function morphOrthographicToPerspective(transitioner, duration, cameraCV, complete) {\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var height = camera.frustum.right - camera.frustum.left;\n        camera.frustum = cameraCV.frustum.clone();\n\n        var endFOV = camera.frustum.fov;\n        var startFOV = CesiumMath.RADIANS_PER_DEGREE * 0.5;\n        var d = height * Math.tan(endFOV * 0.5);\n        camera.frustum.far = d / Math.tan(startFOV * 0.5) + 10000000.0;\n        camera.frustum.fov = startFOV;\n\n        function update(value) {\n            camera.frustum.fov = CesiumMath.lerp(startFOV, endFOV, value.time);\n            camera.position.z = d / Math.tan(camera.frustum.fov * 0.5);\n        }\n        var tween = scene.tweens.add({\n            duration : duration,\n            easingFunction : EasingFunction.QUARTIC_OUT,\n            startObject : {\n                time : 0.0\n            },\n            stopObject : {\n                time : 1.0\n            },\n            update : update,\n            complete : function() {\n                complete(transitioner);\n            }\n        });\n        transitioner._currentTweens.push(tween);\n    }\n\n    function morphFrom2DToColumbusView(transitioner, duration, cameraCV, complete) {\n        duration *= 0.5;\n\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var endPos = Cartesian3.clone(cameraCV.position, scratch3DToCVEndPos);\n        var endDir = Cartesian3.clone(cameraCV.direction, scratch3DToCVEndDir);\n        var endUp = Cartesian3.clone(cameraCV.up, scratch3DToCVEndUp);\n\n        scene._mode = SceneMode.MORPHING;\n\n        function morph() {\n            camera.frustum = cameraCV.frustum.clone();\n\n            var startPos = Cartesian3.clone(camera.position, scratch3DToCVStartPos);\n            var startDir = Cartesian3.clone(camera.direction, scratch3DToCVStartDir);\n            var startUp = Cartesian3.clone(camera.up, scratch3DToCVStartUp);\n            startPos.z = endPos.z;\n\n            function update(value) {\n                columbusViewMorph(startPos, endPos, value.time, camera.position);\n                columbusViewMorph(startDir, endDir, value.time, camera.direction);\n                columbusViewMorph(startUp, endUp, value.time, camera.up);\n                Cartesian3.cross(camera.direction, camera.up, camera.right);\n                Cartesian3.normalize(camera.right, camera.right);\n            }\n            var tween = scene.tweens.add({\n                duration : duration,\n                easingFunction : EasingFunction.QUARTIC_OUT,\n                startObject : {\n                    time : 0.0\n                },\n                stopObject : {\n                    time : 1.0\n                },\n                update : update,\n                complete : function() {\n                    complete(transitioner);\n                }\n            });\n            transitioner._currentTweens.push(tween);\n        }\n\n        if (transitioner._morphToOrthographic) {\n            morph();\n        } else {\n            morphOrthographicToPerspective(transitioner, 0.0, cameraCV, morph);\n        }\n    }\n\n    function morphFrom3DToColumbusView(transitioner, duration, endCamera, complete) {\n        var scene = transitioner._scene;\n        var camera = scene.camera;\n\n        var startPos = Cartesian3.clone(camera.position, scratch3DToCVStartPos);\n        var startDir = Cartesian3.clone(camera.direction, scratch3DToCVStartDir);\n        var startUp = Cartesian3.clone(camera.up, scratch3DToCVStartUp);\n\n        var endPos = Cartesian3.clone(endCamera.position2D, scratch3DToCVEndPos);\n        var endDir = Cartesian3.clone(endCamera.direction2D, scratch3DToCVEndDir);\n        var endUp = Cartesian3.clone(endCamera.up2D, scratch3DToCVEndUp);\n\n        function update(value) {\n            columbusViewMorph(startPos, endPos, value.time, camera.position);\n            columbusViewMorph(startDir, endDir, value.time, camera.direction);\n            columbusViewMorph(startUp, endUp, value.time, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n            Cartesian3.normalize(camera.right, camera.right);\n            camera._adjustOrthographicFrustum(true);\n        }\n        var tween = scene.tweens.add({\n            duration : duration,\n            easingFunction : EasingFunction.QUARTIC_OUT,\n            startObject : {\n                time : 0.0\n            },\n            stopObject : {\n                time : 1.0\n            },\n            update : update,\n            complete : function() {\n                addMorphTimeAnimations(transitioner, scene, 1.0, 0.0, duration, complete);\n            }\n        });\n        transitioner._currentTweens.push(tween);\n    }\n\n    function addMorphTimeAnimations(transitioner, scene, start, stop, duration, complete) {\n        // Later, this will be linear and each object will adjust, if desired, in its vertex shader.\n        var options = {\n            object : scene,\n            property : 'morphTime',\n            startValue : start,\n            stopValue : stop,\n            duration : duration,\n            easingFunction : EasingFunction.QUARTIC_OUT\n        };\n\n        if (defined(complete)) {\n            options.complete = function() {\n                complete(transitioner);\n            };\n        }\n\n        var tween = scene.tweens.addProperty(options);\n        transitioner._currentTweens.push(tween);\n    }\n\n    function complete3DCallback(camera3D) {\n        return function(transitioner) {\n            var scene = transitioner._scene;\n            scene._mode = SceneMode.SCENE3D;\n            scene.morphTime = SceneMode.getMorphTime(SceneMode.SCENE3D);\n\n            destroyMorphHandler(transitioner);\n\n            var camera = scene.camera;\n            if (transitioner._previousMode !== SceneMode.MORPHING || transitioner._morphCancelled) {\n                transitioner._morphCancelled = false;\n\n                Cartesian3.clone(camera3D.position, camera.position);\n                Cartesian3.clone(camera3D.direction, camera.direction);\n                Cartesian3.clone(camera3D.up, camera.up);\n                Cartesian3.cross(camera.direction, camera.up, camera.right);\n                Cartesian3.normalize(camera.right, camera.right);\n\n                camera.frustum = camera3D.frustum.clone();\n            }\n\n            var frustum = camera.frustum;\n            if (scene.frameState.useLogDepth) {\n                frustum.near = 0.1;\n                frustum.far = 10000000000.0;\n            }\n\n            var wasMorphing = defined(transitioner._completeMorph);\n            transitioner._completeMorph = undefined;\n            scene.camera.update(scene.mode);\n            transitioner._scene.morphComplete.raiseEvent(transitioner, transitioner._previousMode, SceneMode.SCENE3D, wasMorphing);\n        };\n    }\n\n    function complete2DCallback(camera2D) {\n        return function(transitioner) {\n            var scene = transitioner._scene;\n\n            scene._mode = SceneMode.SCENE2D;\n            scene.morphTime = SceneMode.getMorphTime(SceneMode.SCENE2D);\n\n            destroyMorphHandler(transitioner);\n\n            var camera = scene.camera;\n            Cartesian3.clone(camera2D.position, camera.position);\n            camera.position.z = scene.mapProjection.ellipsoid.maximumRadius * 2.0;\n            Cartesian3.clone(camera2D.direction, camera.direction);\n            Cartesian3.clone(camera2D.up, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n            Cartesian3.normalize(camera.right, camera.right);\n            camera.frustum = camera2D.frustum.clone();\n\n            var wasMorphing = defined(transitioner._completeMorph);\n            transitioner._completeMorph = undefined;\n            scene.camera.update(scene.mode);\n            transitioner._scene.morphComplete.raiseEvent(transitioner, transitioner._previousMode, SceneMode.SCENE2D, wasMorphing);\n        };\n    }\n\n    function completeColumbusViewCallback(cameraCV) {\n        return function(transitioner) {\n            var scene = transitioner._scene;\n            scene._mode = SceneMode.COLUMBUS_VIEW;\n            scene.morphTime = SceneMode.getMorphTime(SceneMode.COLUMBUS_VIEW);\n\n            destroyMorphHandler(transitioner);\n\n            var camera = scene.camera;\n            if (transitioner._previousModeMode !== SceneMode.MORPHING || transitioner._morphCancelled) {\n                transitioner._morphCancelled = false;\n\n                Cartesian3.clone(cameraCV.position, camera.position);\n                Cartesian3.clone(cameraCV.direction, camera.direction);\n                Cartesian3.clone(cameraCV.up, camera.up);\n                Cartesian3.cross(camera.direction, camera.up, camera.right);\n                Cartesian3.normalize(camera.right, camera.right);\n            }\n\n            var frustum = camera.frustum;\n            if (scene.frameState.useLogDepth) {\n                frustum.near = 0.1;\n                frustum.far = 10000000000.0;\n            }\n\n            var wasMorphing = defined(transitioner._completeMorph);\n            transitioner._completeMorph = undefined;\n            scene.camera.update(scene.mode);\n            transitioner._scene.morphComplete.raiseEvent(transitioner, transitioner._previousMode, SceneMode.COLUMBUS_VIEW, wasMorphing);\n        };\n    }\n\n    return SceneTransitioner;\n});\n","define([\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/Cartographic',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Ellipsoid',\n        '../Core/HeadingPitchRoll',\n        '../Core/IntersectionTests',\n        '../Core/isArray',\n        '../Core/KeyboardEventModifier',\n        '../Core/Math',\n        '../Core/Matrix3',\n        '../Core/Matrix4',\n        '../Core/OrthographicFrustum',\n        '../Core/Plane',\n        '../Core/Quaternion',\n        '../Core/Ray',\n        '../Core/Transforms',\n        './CameraEventAggregator',\n        './CameraEventType',\n        './MapMode2D',\n        './SceneMode',\n        './SceneTransforms',\n        './TweenCollection'\n    ], function(\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        defaultValue,\n        defined,\n        destroyObject,\n        DeveloperError,\n        Ellipsoid,\n        HeadingPitchRoll,\n        IntersectionTests,\n        isArray,\n        KeyboardEventModifier,\n        CesiumMath,\n        Matrix3,\n        Matrix4,\n        OrthographicFrustum,\n        Plane,\n        Quaternion,\n        Ray,\n        Transforms,\n        CameraEventAggregator,\n        CameraEventType,\n        MapMode2D,\n        SceneMode,\n        SceneTransforms,\n        TweenCollection) {\n    'use strict';\n\n    /**\n     * Modifies the camera position and orientation based on mouse input to a canvas.\n     * @alias ScreenSpaceCameraController\n     * @constructor\n     *\n     * @param {Scene} scene The scene.\n     */\n    function ScreenSpaceCameraController(scene) {\n        \n\n        /**\n         * If true, inputs are allowed conditionally with the flags enableTranslate, enableZoom,\n         * enableRotate, enableTilt, and enableLook.  If false, all inputs are disabled.\n         *\n         * NOTE: This setting is for temporary use cases, such as camera flights and\n         * drag-selection of regions (see Picking demo).  It is typically set to false at the\n         * start of such events, and set true on completion.  To keep inputs disabled\n         * past the end of camera flights, you must use the other booleans (enableTranslate,\n         * enableZoom, enableRotate, enableTilt, and enableLook).\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableInputs = true;\n        /**\n         * If true, allows the user to pan around the map.  If false, the camera stays locked at the current position.\n         * This flag only applies in 2D and Columbus view modes.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableTranslate = true;\n        /**\n         * If true, allows the user to zoom in and out.  If false, the camera is locked to the current distance from the ellipsoid.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableZoom = true;\n        /**\n         * If true, allows the user to rotate the world which translates the user's position.\n         * This flag only applies in 2D and 3D.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableRotate = true;\n        /**\n         * If true, allows the user to tilt the camera.  If false, the camera is locked to the current heading.\n         * This flag only applies in 3D and Columbus view.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableTilt = true;\n        /**\n         * If true, allows the user to use free-look. If false, the camera view direction can only be changed through translating\n         * or rotating. This flag only applies in 3D and Columbus view modes.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableLook = true;\n        /**\n         * A parameter in the range <code>[0, 1)</code> used to determine how long\n         * the camera will continue to spin because of inertia.\n         * With value of zero, the camera will have no inertia.\n         * @type {Number}\n         * @default 0.9\n         */\n        this.inertiaSpin = 0.9;\n        /**\n         * A parameter in the range <code>[0, 1)</code> used to determine how long\n         * the camera will continue to translate because of inertia.\n         * With value of zero, the camera will have no inertia.\n         * @type {Number}\n         * @default 0.9\n         */\n        this.inertiaTranslate = 0.9;\n        /**\n         * A parameter in the range <code>[0, 1)</code> used to determine how long\n         * the camera will continue to zoom because of inertia.\n         * With value of zero, the camera will have no inertia.\n         * @type {Number}\n         * @default 0.8\n         */\n        this.inertiaZoom = 0.8;\n        /**\n         * A parameter in the range <code>[0, 1)</code> used to limit the range\n         * of various user inputs to a percentage of the window width/height per animation frame.\n         * This helps keep the camera under control in low-frame-rate situations.\n         * @type {Number}\n         * @default 0.1\n         */\n        this.maximumMovementRatio = 0.1;\n        /**\n         * Sets the duration, in seconds, of the bounce back animations in 2D and Columbus view.\n         * @type {Number}\n         * @default 3.0\n         */\n        this.bounceAnimationTime = 3.0;\n        /**\n         * The minimum magnitude, in meters, of the camera position when zooming. Defaults to 1.0.\n         * @type {Number}\n         * @default 1.0\n         */\n        this.minimumZoomDistance = 1.0;\n        /**\n         * The maximum magnitude, in meters, of the camera position when zooming. Defaults to positive infinity.\n         * @type {Number}\n         * @default {@link Number.POSITIVE_INFINITY}\n         */\n        this.maximumZoomDistance = Number.POSITIVE_INFINITY;\n        /**\n         * The input that allows the user to pan around the map. This only applies in 2D and Columbus view modes.\n         * <p>\n         * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n         * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n         * or an array of any of the preceding.\n         * </p>\n         * @type {CameraEventType|Array|undefined}\n         * @default {@link CameraEventType.LEFT_DRAG}\n         */\n        this.translateEventTypes = CameraEventType.LEFT_DRAG;\n        /**\n         * The input that allows the user to zoom in/out.\n         * <p>\n         * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n         * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n         * or an array of any of the preceding.\n         * </p>\n         * @type {CameraEventType|Array|undefined}\n         * @default [{@link CameraEventType.RIGHT_DRAG}, {@link CameraEventType.WHEEL}, {@link CameraEventType.PINCH}]\n         */\n        this.zoomEventTypes = [CameraEventType.RIGHT_DRAG, CameraEventType.WHEEL, CameraEventType.PINCH];\n        /**\n         * The input that allows the user to rotate around the globe or another object. This only applies in 3D and Columbus view modes.\n         * <p>\n         * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n         * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n         * or an array of any of the preceding.\n         * </p>\n         * @type {CameraEventType|Array|undefined}\n         * @default {@link CameraEventType.LEFT_DRAG}\n         */\n        this.rotateEventTypes = CameraEventType.LEFT_DRAG;\n        /**\n         * The input that allows the user to tilt in 3D and Columbus view or twist in 2D.\n         * <p>\n         * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n         * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n         * or an array of any of the preceding.\n         * </p>\n         * @type {CameraEventType|Array|undefined}\n         * @default [{@link CameraEventType.MIDDLE_DRAG}, {@link CameraEventType.PINCH}, {\n         *     eventType : {@link CameraEventType.LEFT_DRAG},\n         *     modifier : {@link KeyboardEventModifier.CTRL}\n         * }, {\n         *     eventType : {@link CameraEventType.RIGHT_DRAG},\n         *     modifier : {@link KeyboardEventModifier.CTRL}\n         * }]\n         */\n        this.tiltEventTypes = [CameraEventType.MIDDLE_DRAG, CameraEventType.PINCH, {\n            eventType : CameraEventType.LEFT_DRAG,\n            modifier : KeyboardEventModifier.CTRL\n        }, {\n            eventType : CameraEventType.RIGHT_DRAG,\n            modifier : KeyboardEventModifier.CTRL\n        }];\n        /**\n         * The input that allows the user to change the direction the camera is viewing. This only applies in 3D and Columbus view modes.\n         * <p>\n         * The type came be a {@link CameraEventType}, <code>undefined</code>, an object with <code>eventType</code>\n         * and <code>modifier</code> properties with types <code>CameraEventType</code> and {@link KeyboardEventModifier},\n         * or an array of any of the preceding.\n         * </p>\n         * @type {CameraEventType|Array|undefined}\n         * @default { eventType : {@link CameraEventType.LEFT_DRAG}, modifier : {@link KeyboardEventModifier.SHIFT} }\n         */\n        this.lookEventTypes = {\n            eventType : CameraEventType.LEFT_DRAG,\n            modifier : KeyboardEventModifier.SHIFT\n        };\n        /**\n         * The minimum height the camera must be before picking the terrain instead of the ellipsoid.\n         * @type {Number}\n         * @default 150000.0\n         */\n        this.minimumPickingTerrainHeight = 150000.0;\n        this._minimumPickingTerrainHeight = this.minimumPickingTerrainHeight;\n        /**\n         * The minimum height the camera must be before testing for collision with terrain.\n         * @type {Number}\n         * @default 10000.0\n         */\n        this.minimumCollisionTerrainHeight = 15000.0;\n        this._minimumCollisionTerrainHeight = this.minimumCollisionTerrainHeight;\n        /**\n         * The minimum height the camera must be before switching from rotating a track ball to\n         * free look when clicks originate on the sky on in space.\n         * @type {Number}\n         * @default 7500000.0\n         */\n        this.minimumTrackBallHeight = 7500000.0;\n        this._minimumTrackBallHeight = this.minimumTrackBallHeight;\n        /**\n         * Enables or disables camera collision detection with terrain.\n         * @type {Boolean}\n         * @default true\n         */\n        this.enableCollisionDetection = true;\n\n        this._scene = scene;\n        this._globe = undefined;\n        this._ellipsoid = undefined;\n\n        this._aggregator = new CameraEventAggregator(scene.canvas);\n\n        this._lastInertiaSpinMovement = undefined;\n        this._lastInertiaZoomMovement = undefined;\n        this._lastInertiaTranslateMovement = undefined;\n        this._lastInertiaTiltMovement = undefined;\n\n        this._tweens = new TweenCollection();\n        this._tween = undefined;\n\n        this._horizontalRotationAxis = undefined;\n\n        this._tiltCenterMousePosition = new Cartesian2(-1.0, -1.0);\n        this._tiltCenter = new Cartesian3();\n        this._rotateMousePosition = new Cartesian2(-1.0, -1.0);\n        this._rotateStartPosition = new Cartesian3();\n        this._strafeStartPosition = new Cartesian3();\n        this._zoomMouseStart = new Cartesian2(-1.0, -1.0);\n        this._zoomWorldPosition = new Cartesian3();\n        this._useZoomWorldPosition = false;\n        this._tiltCVOffMap = false;\n        this._looking = false;\n        this._rotating = false;\n        this._strafing = false;\n        this._zoomingOnVector = false;\n        this._rotatingZoom = false;\n\n        var projection = scene.mapProjection;\n        this._maxCoord = projection.project(new Cartographic(Math.PI, CesiumMath.PI_OVER_TWO));\n\n        // Constants, Make any of these public?\n        this._zoomFactor = 5.0;\n        this._rotateFactor = undefined;\n        this._rotateRateRangeAdjustment = undefined;\n        this._maximumRotateRate = 1.77;\n        this._minimumRotateRate = 1.0 / 5000.0;\n        this._minimumZoomRate = 20.0;\n        this._maximumZoomRate = 5906376272000.0;  // distance from the Sun to Pluto in meters.\n    }\n\n    function decay(time, coefficient) {\n        if (time < 0) {\n            return 0.0;\n        }\n\n        var tau = (1.0 - coefficient) * 25.0;\n        return Math.exp(-tau * time);\n    }\n\n    function sameMousePosition(movement) {\n        return Cartesian2.equalsEpsilon(movement.startPosition, movement.endPosition, CesiumMath.EPSILON14);\n    }\n\n    // If the time between mouse down and mouse up is not between\n    // these thresholds, the camera will not move with inertia.\n    // This value is probably dependent on the browser and/or the\n    // hardware. Should be investigated further.\n    var inertiaMaxClickTimeThreshold = 0.4;\n\n    function maintainInertia(aggregator, type, modifier, decayCoef, action, object, lastMovementName) {\n        var movementState = object[lastMovementName];\n        if (!defined(movementState)) {\n            movementState = object[lastMovementName] = {\n                startPosition : new Cartesian2(),\n                endPosition : new Cartesian2(),\n                motion : new Cartesian2(),\n                active : false\n            };\n        }\n\n        var ts = aggregator.getButtonPressTime(type, modifier);\n        var tr = aggregator.getButtonReleaseTime(type, modifier);\n\n        var threshold = ts && tr && ((tr.getTime() - ts.getTime()) / 1000.0);\n        var now = new Date();\n        var fromNow = tr && ((now.getTime() - tr.getTime()) / 1000.0);\n\n        if (ts && tr && threshold < inertiaMaxClickTimeThreshold) {\n            var d = decay(fromNow, decayCoef);\n\n            if (!movementState.active) {\n                var lastMovement = aggregator.getLastMovement(type, modifier);\n                if (!defined(lastMovement) || sameMousePosition(lastMovement)) {\n                    return;\n                }\n\n                movementState.motion.x = (lastMovement.endPosition.x - lastMovement.startPosition.x) * 0.5;\n                movementState.motion.y = (lastMovement.endPosition.y - lastMovement.startPosition.y) * 0.5;\n\n                movementState.startPosition = Cartesian2.clone(lastMovement.startPosition, movementState.startPosition);\n\n                movementState.endPosition = Cartesian2.multiplyByScalar(movementState.motion, d, movementState.endPosition);\n                movementState.endPosition = Cartesian2.add(movementState.startPosition, movementState.endPosition, movementState.endPosition);\n\n                movementState.active = true;\n            } else {\n                movementState.startPosition = Cartesian2.clone(movementState.endPosition, movementState.startPosition);\n\n                movementState.endPosition = Cartesian2.multiplyByScalar(movementState.motion, d, movementState.endPosition);\n                movementState.endPosition = Cartesian2.add(movementState.startPosition, movementState.endPosition, movementState.endPosition);\n\n                movementState.motion = Cartesian2.clone(Cartesian2.ZERO, movementState.motion);\n            }\n\n            // If value from the decreasing exponential function is close to zero,\n            // the end coordinates may be NaN.\n            if (isNaN(movementState.endPosition.x) || isNaN(movementState.endPosition.y) || Cartesian2.distance(movementState.startPosition, movementState.endPosition) < 0.5) {\n                movementState.active = false;\n                return;\n            }\n\n            if (!aggregator.isButtonDown(type, modifier)) {\n                var startPosition = aggregator.getStartMousePosition(type, modifier);\n                action(object, startPosition, movementState);\n            }\n        } else {\n            movementState.active = false;\n        }\n    }\n\n    var scratchEventTypeArray = [];\n\n    function reactToInput(controller, enabled, eventTypes, action, inertiaConstant, inertiaStateName) {\n        if (!defined(eventTypes)) {\n            return;\n        }\n\n        var aggregator = controller._aggregator;\n\n        if (!isArray(eventTypes)) {\n            scratchEventTypeArray[0] = eventTypes;\n            eventTypes = scratchEventTypeArray;\n        }\n\n        var length = eventTypes.length;\n        for (var i = 0; i < length; ++i) {\n            var eventType = eventTypes[i];\n            var type = defined(eventType.eventType) ? eventType.eventType : eventType;\n            var modifier = eventType.modifier;\n\n            var movement = aggregator.isMoving(type, modifier) && aggregator.getMovement(type, modifier);\n            var startPosition = aggregator.getStartMousePosition(type, modifier);\n\n            if (controller.enableInputs && enabled) {\n                if (movement) {\n                    action(controller, startPosition, movement);\n                } else if (inertiaConstant < 1.0) {\n                    maintainInertia(aggregator, type, modifier, inertiaConstant, action, controller, inertiaStateName);\n                }\n            }\n        }\n    }\n\n    var scratchZoomPickRay = new Ray();\n    var scratchPickCartesian = new Cartesian3();\n    var scratchZoomOffset = new Cartesian2();\n    var scratchZoomDirection = new Cartesian3();\n    var scratchCenterPixel = new Cartesian2();\n    var scratchCenterPosition = new Cartesian3();\n    var scratchPositionNormal = new Cartesian3();\n    var scratchPickNormal = new Cartesian3();\n    var scratchZoomAxis = new Cartesian3();\n    var scratchCameraPositionNormal = new Cartesian3();\n\n    // Scratch variables used in zooming algorithm\n    var scratchTargetNormal = new Cartesian3();\n    var scratchCameraPosition = new Cartesian3();\n    var scratchCameraUpNormal = new Cartesian3();\n    var scratchCameraRightNormal = new Cartesian3();\n    var scratchForwardNormal = new Cartesian3();\n    var scratchPositionToTarget = new Cartesian3();\n    var scratchPositionToTargetNormal = new Cartesian3();\n    var scratchPan = new Cartesian3();\n    var scratchCenterMovement = new Cartesian3();\n    var scratchCenter = new Cartesian3();\n    var scratchCartesian = new Cartesian3();\n    var scratchCartesianTwo = new Cartesian3();\n    var scratchCartesianThree = new Cartesian3();\n    var scratchZoomViewOptions = {\n      orientation: new HeadingPitchRoll()\n    };\n\n    function handleZoom(object, startPosition, movement, zoomFactor, distanceMeasure, unitPositionDotDirection) {\n        var percentage = 1.0;\n        if (defined(unitPositionDotDirection)) {\n            percentage = CesiumMath.clamp(Math.abs(unitPositionDotDirection), 0.25, 1.0);\n        }\n\n        // distanceMeasure should be the height above the ellipsoid.\n        // The zoomRate slows as it approaches the surface and stops minimumZoomDistance above it.\n        var minHeight = object.minimumZoomDistance * percentage;\n        var maxHeight = object.maximumZoomDistance;\n\n        var minDistance = distanceMeasure - minHeight;\n        var zoomRate = zoomFactor * minDistance;\n        zoomRate = CesiumMath.clamp(zoomRate, object._minimumZoomRate, object._maximumZoomRate);\n\n        var diff = movement.endPosition.y - movement.startPosition.y;\n        var rangeWindowRatio = diff / object._scene.canvas.clientHeight;\n        rangeWindowRatio = Math.min(rangeWindowRatio, object.maximumMovementRatio);\n        var distance = zoomRate * rangeWindowRatio;\n\n        if (distance > 0.0 && Math.abs(distanceMeasure - minHeight) < 1.0) {\n            return;\n        }\n\n        if (distance < 0.0 && Math.abs(distanceMeasure - maxHeight) < 1.0) {\n            return;\n        }\n\n        if (distanceMeasure - distance < minHeight) {\n            distance = distanceMeasure - minHeight - 1.0;\n        } else if (distanceMeasure - distance > maxHeight) {\n            distance = distanceMeasure - maxHeight;\n        }\n\n        var scene = object._scene;\n        var camera = scene.camera;\n        var mode = scene.mode;\n\n        var orientation = scratchZoomViewOptions.orientation;\n        orientation.heading = camera.heading;\n        orientation.pitch = camera.pitch;\n        orientation.roll = camera.roll;\n\n        if (camera.frustum instanceof OrthographicFrustum) {\n            if (Math.abs(distance) > 0.0) {\n                camera.zoomIn(distance);\n                camera._adjustOrthographicFrustum();\n            }\n            return;\n        }\n\n        var sameStartPosition = Cartesian2.equals(startPosition, object._zoomMouseStart);\n        var zoomingOnVector = object._zoomingOnVector;\n        var rotatingZoom = object._rotatingZoom;\n        var pickedPosition;\n\n        if (!sameStartPosition) {\n            object._zoomMouseStart = Cartesian2.clone(startPosition, object._zoomMouseStart);\n\n            if (defined(object._globe)) {\n                if (mode === SceneMode.SCENE2D) {\n                    pickedPosition = camera.getPickRay(startPosition, scratchZoomPickRay).origin;\n                    pickedPosition = Cartesian3.fromElements(pickedPosition.y, pickedPosition.z, pickedPosition.x);\n                } else {\n                    pickedPosition = pickGlobe(object, startPosition, scratchPickCartesian);\n                }\n            }\n            if (defined(pickedPosition)) {\n                object._useZoomWorldPosition = true;\n                object._zoomWorldPosition = Cartesian3.clone(pickedPosition, object._zoomWorldPosition);\n            } else {\n                object._useZoomWorldPosition = false;\n            }\n\n            zoomingOnVector = object._zoomingOnVector = false;\n            rotatingZoom = object._rotatingZoom = false;\n        }\n\n        if (!object._useZoomWorldPosition) {\n            camera.zoomIn(distance);\n            return;\n        }\n\n        var zoomOnVector = mode === SceneMode.COLUMBUS_VIEW;\n\n        if (camera.positionCartographic.height < 2000000) {\n            rotatingZoom = true;\n        }\n\n        if (!sameStartPosition || rotatingZoom) {\n            if (mode === SceneMode.SCENE2D) {\n                var worldPosition = object._zoomWorldPosition;\n                var endPosition = camera.position;\n\n                if (!Cartesian3.equals(worldPosition, endPosition) && camera.positionCartographic.height < object._maxCoord.x * 2.0) {\n                    var savedX = camera.position.x;\n\n                    var direction = Cartesian3.subtract(worldPosition, endPosition, scratchZoomDirection);\n                    Cartesian3.normalize(direction, direction);\n\n                    var d = Cartesian3.distance(worldPosition, endPosition) * distance / (camera.getMagnitude() * 0.5);\n                    camera.move(direction, d * 0.5);\n\n                    if ((camera.position.x < 0.0 && savedX > 0.0) || (camera.position.x > 0.0 && savedX < 0.0)) {\n                        pickedPosition = camera.getPickRay(startPosition, scratchZoomPickRay).origin;\n                        pickedPosition = Cartesian3.fromElements(pickedPosition.y, pickedPosition.z, pickedPosition.x);\n                        object._zoomWorldPosition = Cartesian3.clone(pickedPosition, object._zoomWorldPosition);\n                    }\n                }\n            } else if (mode === SceneMode.SCENE3D) {\n                var cameraPositionNormal = Cartesian3.normalize(camera.position, scratchCameraPositionNormal);\n                if (camera.positionCartographic.height < 3000.0 && Math.abs(Cartesian3.dot(camera.direction, cameraPositionNormal)) < 0.6) {\n                    zoomOnVector = true;\n                } else {\n                    var canvas = scene.canvas;\n\n                    var centerPixel = scratchCenterPixel;\n                    centerPixel.x = canvas.clientWidth / 2;\n                    centerPixel.y = canvas.clientHeight / 2;\n                    var centerPosition = pickGlobe(object, centerPixel, scratchCenterPosition);\n                    // If centerPosition is not defined, it means the globe does not cover the center position of screen\n\n                    if (defined(centerPosition) && camera.positionCartographic.height < 1000000) {\n\n                        var cameraPosition = scratchCameraPosition;\n                        Cartesian3.clone(camera.position, cameraPosition);\n                        var target = object._zoomWorldPosition;\n\n                        var targetNormal = scratchTargetNormal;\n\n                        targetNormal = Cartesian3.normalize(target, targetNormal);\n\n                        if (Cartesian3.dot(targetNormal, cameraPositionNormal) < 0.0) {\n                            return;\n                        }\n\n                        var center = scratchCenter;\n                        var forward = scratchForwardNormal;\n                        Cartesian3.clone(camera.direction, forward);\n                        Cartesian3.add(cameraPosition, Cartesian3.multiplyByScalar(forward, 1000, scratchCartesian), center);\n\n                        var positionToTarget = scratchPositionToTarget;\n                        var positionToTargetNormal = scratchPositionToTargetNormal;\n                        Cartesian3.subtract(target, cameraPosition, positionToTarget);\n\n                        Cartesian3.normalize(positionToTarget, positionToTargetNormal);\n\n                        var alphaDot = Cartesian3.dot(cameraPositionNormal, positionToTargetNormal);\n                        if (alphaDot >= 0.0) {\n                            // We zoomed past the target, and this zoom is not valid anymore.\n                            // This line causes the next zoom movement to pick a new starting point.\n                            object._zoomMouseStart.x = -1;\n                            return;\n                        }\n                        var alpha = Math.acos(-alphaDot);\n                        var cameraDistance = Cartesian3.magnitude( cameraPosition );\n                        var targetDistance = Cartesian3.magnitude( target );\n                        var remainingDistance = cameraDistance - distance;\n                        var positionToTargetDistance = Cartesian3.magnitude(positionToTarget);\n\n                        var gamma = Math.asin( CesiumMath.clamp( positionToTargetDistance / targetDistance * Math.sin(alpha), -1.0, 1.0 ) );\n                        var delta = Math.asin( CesiumMath.clamp( remainingDistance / targetDistance * Math.sin(alpha), -1.0, 1.0 ) );\n                        var beta = gamma - delta + alpha;\n\n                        var up = scratchCameraUpNormal;\n                        Cartesian3.normalize(cameraPosition, up);\n                        var right = scratchCameraRightNormal;\n                        right = Cartesian3.cross(positionToTargetNormal, up, right);\n                        right = Cartesian3.normalize(right, right );\n\n                        Cartesian3.normalize( Cartesian3.cross(up, right, scratchCartesian), forward );\n\n                        // Calculate new position to move to\n                        Cartesian3.multiplyByScalar(Cartesian3.normalize(center, scratchCartesian), (Cartesian3.magnitude(center) - distance), center);\n                        Cartesian3.normalize(cameraPosition, cameraPosition);\n                        Cartesian3.multiplyByScalar(cameraPosition, remainingDistance, cameraPosition);\n\n                        // Pan\n                        var pMid = scratchPan;\n                        Cartesian3.multiplyByScalar(Cartesian3.add(\n                            Cartesian3.multiplyByScalar(up, Math.cos(beta) - 1, scratchCartesianTwo),\n                            Cartesian3.multiplyByScalar(forward, Math.sin(beta), scratchCartesianThree),\n                            scratchCartesian\n                        ), remainingDistance, pMid);\n                        Cartesian3.add(cameraPosition, pMid, cameraPosition);\n\n                        Cartesian3.normalize(center, up);\n                        Cartesian3.normalize( Cartesian3.cross(up, right, scratchCartesian), forward );\n\n                        var cMid = scratchCenterMovement;\n                        Cartesian3.multiplyByScalar(Cartesian3.add(\n                            Cartesian3.multiplyByScalar(up, Math.cos(beta) - 1, scratchCartesianTwo),\n                            Cartesian3.multiplyByScalar(forward, Math.sin(beta), scratchCartesianThree),\n                            scratchCartesian\n                        ), Cartesian3.magnitude(center), cMid);\n                        Cartesian3.add(center, cMid, center);\n\n                        // Update camera\n\n                        // Set new position\n                        Cartesian3.clone(cameraPosition, camera.position);\n\n                        // Set new direction\n                        Cartesian3.normalize(Cartesian3.subtract(center, cameraPosition, scratchCartesian), camera.direction);\n                        Cartesian3.clone(camera.direction, camera.direction);\n\n                        // Set new right & up vectors\n                        Cartesian3.cross(camera.direction, camera.up, camera.right);\n                        Cartesian3.cross(camera.right, camera.direction, camera.up);\n\n                        camera.setView(scratchZoomViewOptions);\n                        return;\n                    }\n\n                    if (defined(centerPosition)) {\n                        var positionNormal = Cartesian3.normalize(centerPosition, scratchPositionNormal);\n                        var pickedNormal = Cartesian3.normalize(object._zoomWorldPosition, scratchPickNormal);\n                        var dotProduct = Cartesian3.dot(pickedNormal, positionNormal);\n\n                        if (dotProduct > 0.0 && dotProduct < 1.0) {\n                            var angle = CesiumMath.acosClamped(dotProduct);\n                            var axis = Cartesian3.cross(pickedNormal, positionNormal, scratchZoomAxis);\n\n                            var denom = Math.abs(angle) > CesiumMath.toRadians(20.0) ? camera.positionCartographic.height * 0.75 : camera.positionCartographic.height - distance;\n                            var scalar = distance / denom;\n                            camera.rotate(axis, angle * scalar);\n                        }\n                    } else {\n                        zoomOnVector = true;\n                    }\n                }\n            }\n\n            object._rotatingZoom = !zoomOnVector;\n        }\n\n        if ((!sameStartPosition && zoomOnVector) || zoomingOnVector) {\n            var ray;\n            var zoomMouseStart = SceneTransforms.wgs84ToWindowCoordinates(scene, object._zoomWorldPosition, scratchZoomOffset);\n            if (mode !== SceneMode.COLUMBUS_VIEW && Cartesian2.equals(startPosition, object._zoomMouseStart) && defined(zoomMouseStart)) {\n                ray = camera.getPickRay(zoomMouseStart, scratchZoomPickRay);\n            } else {\n                ray = camera.getPickRay(startPosition, scratchZoomPickRay);\n            }\n\n            var rayDirection = ray.direction;\n            if (mode === SceneMode.COLUMBUS_VIEW || mode === SceneMode.SCENE2D) {\n                Cartesian3.fromElements(rayDirection.y, rayDirection.z, rayDirection.x, rayDirection);\n            }\n\n            camera.move(rayDirection, distance);\n\n            object._zoomingOnVector = true;\n        } else {\n            camera.zoomIn(distance);\n        }\n\n        camera.setView(scratchZoomViewOptions);\n    }\n\n    var translate2DStart = new Ray();\n    var translate2DEnd = new Ray();\n    var scratchTranslateP0 = new Cartesian3();\n\n    function translate2D(controller, startPosition, movement) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var start = camera.getPickRay(movement.startPosition, translate2DStart).origin;\n        var end = camera.getPickRay(movement.endPosition, translate2DEnd).origin;\n\n        start = Cartesian3.fromElements(start.y, start.z, start.x, start);\n        end = Cartesian3.fromElements(end.y, end.z, end.x, end);\n\n        var direction = Cartesian3.subtract(start, end, scratchTranslateP0);\n        var distance = Cartesian3.magnitude(direction);\n\n        if (distance > 0.0) {\n            Cartesian3.normalize(direction, direction);\n            camera.move(direction, distance);\n        }\n    }\n\n    function zoom2D(controller, startPosition, movement) {\n        if (defined(movement.distance)) {\n            movement = movement.distance;\n        }\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        handleZoom(controller, startPosition, movement, controller._zoomFactor, camera.getMagnitude());\n    }\n\n    var twist2DStart = new Cartesian2();\n    var twist2DEnd = new Cartesian2();\n\n    function twist2D(controller, startPosition, movement) {\n        if (defined(movement.angleAndHeight)) {\n            singleAxisTwist2D(controller, startPosition, movement.angleAndHeight);\n            return;\n        }\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var canvas = scene.canvas;\n        var width = canvas.clientWidth;\n        var height = canvas.clientHeight;\n\n        var start = twist2DStart;\n        start.x = (2.0 / width) * movement.startPosition.x - 1.0;\n        start.y = (2.0 / height) * (height - movement.startPosition.y) - 1.0;\n        start = Cartesian2.normalize(start, start);\n\n        var end = twist2DEnd;\n        end.x = (2.0 / width) * movement.endPosition.x - 1.0;\n        end.y = (2.0 / height) * (height - movement.endPosition.y) - 1.0;\n        end = Cartesian2.normalize(end, end);\n\n        var startTheta = CesiumMath.acosClamped(start.x);\n        if (start.y < 0) {\n            startTheta = CesiumMath.TWO_PI - startTheta;\n        }\n        var endTheta = CesiumMath.acosClamped(end.x);\n        if (end.y < 0) {\n            endTheta = CesiumMath.TWO_PI - endTheta;\n        }\n        var theta = endTheta - startTheta;\n\n        camera.twistRight(theta);\n    }\n\n    function singleAxisTwist2D(controller, startPosition, movement) {\n        var rotateRate = controller._rotateFactor * controller._rotateRateRangeAdjustment;\n\n        if (rotateRate > controller._maximumRotateRate) {\n            rotateRate = controller._maximumRotateRate;\n        }\n\n        if (rotateRate < controller._minimumRotateRate) {\n            rotateRate = controller._minimumRotateRate;\n        }\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var canvas = scene.canvas;\n\n        var phiWindowRatio = (movement.endPosition.x - movement.startPosition.x) / canvas.clientWidth;\n        phiWindowRatio = Math.min(phiWindowRatio, controller.maximumMovementRatio);\n\n        var deltaPhi = rotateRate * phiWindowRatio * Math.PI * 4.0;\n\n        camera.twistRight(deltaPhi);\n    }\n\n    function update2D(controller) {\n        var rotatable2D = controller._scene.mapMode2D === MapMode2D.ROTATE;\n        if (!Matrix4.equals(Matrix4.IDENTITY, controller._scene.camera.transform)) {\n            reactToInput(controller, controller.enableZoom, controller.zoomEventTypes, zoom2D, controller.inertiaZoom, '_lastInertiaZoomMovement');\n            if (rotatable2D) {\n                reactToInput(controller, controller.enableRotate, controller.translateEventTypes, twist2D, controller.inertiaSpin, '_lastInertiaSpinMovement');\n            }\n        } else {\n            reactToInput(controller, controller.enableTranslate, controller.translateEventTypes, translate2D, controller.inertiaTranslate, '_lastInertiaTranslateMovement');\n            reactToInput(controller, controller.enableZoom, controller.zoomEventTypes, zoom2D, controller.inertiaZoom, '_lastInertiaZoomMovement');\n            if (rotatable2D) {\n                reactToInput(controller, controller.enableRotate, controller.tiltEventTypes, twist2D, controller.inertiaSpin, '_lastInertiaTiltMovement');\n            }\n        }\n    }\n\n    var pickGlobeScratchRay = new Ray();\n    var scratchDepthIntersection = new Cartesian3();\n    var scratchRayIntersection = new Cartesian3();\n\n    function pickGlobe(controller, mousePosition, result) {\n        var scene = controller._scene;\n        var globe = controller._globe;\n        var camera = scene.camera;\n\n        if (!defined(globe)) {\n            return undefined;\n        }\n\n        var depthIntersection;\n        if (scene.pickPositionSupported) {\n            depthIntersection = scene.pickPositionWorldCoordinates(mousePosition, scratchDepthIntersection);\n        }\n\n        var ray = camera.getPickRay(mousePosition, pickGlobeScratchRay);\n        var rayIntersection = globe.pickWorldCoordinates(ray, scene, scratchRayIntersection);\n\n        var pickDistance = defined(depthIntersection) ? Cartesian3.distance(depthIntersection, camera.positionWC) : Number.POSITIVE_INFINITY;\n        var rayDistance = defined(rayIntersection) ? Cartesian3.distance(rayIntersection, camera.positionWC) : Number.POSITIVE_INFINITY;\n\n        if (pickDistance < rayDistance) {\n            return Cartesian3.clone(depthIntersection, result);\n        }\n\n        return Cartesian3.clone(rayIntersection, result);\n    }\n\n    var translateCVStartRay = new Ray();\n    var translateCVEndRay = new Ray();\n    var translateCVStartPos = new Cartesian3();\n    var translateCVEndPos = new Cartesian3();\n    var translatCVDifference = new Cartesian3();\n    var translateCVOrigin = new Cartesian3();\n    var translateCVPlane = new Plane(Cartesian3.UNIT_X, 0.0);\n    var translateCVStartMouse = new Cartesian2();\n    var translateCVEndMouse = new Cartesian2();\n\n    function translateCV(controller, startPosition, movement) {\n        if (!Cartesian3.equals(startPosition, controller._translateMousePosition)) {\n            controller._looking = false;\n        }\n\n        if (!Cartesian3.equals(startPosition, controller._strafeMousePosition)) {\n            controller._strafing = false;\n        }\n\n        if (controller._looking) {\n            look3D(controller, startPosition, movement);\n            return;\n        }\n\n        if (controller._strafing) {\n            strafe(controller, startPosition, movement);\n            return;\n        }\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var startMouse = Cartesian2.clone(movement.startPosition, translateCVStartMouse);\n        var endMouse = Cartesian2.clone(movement.endPosition, translateCVEndMouse);\n        var startRay = camera.getPickRay(startMouse, translateCVStartRay);\n\n        var origin = Cartesian3.clone(Cartesian3.ZERO, translateCVOrigin);\n        var normal = Cartesian3.UNIT_X;\n\n        var globePos;\n        if (camera.position.z < controller._minimumPickingTerrainHeight) {\n            globePos = pickGlobe(controller, startMouse, translateCVStartPos);\n            if (defined(globePos)) {\n                origin.x = globePos.x;\n            }\n        }\n\n        if (origin.x > camera.position.z && defined(globePos)) {\n            Cartesian3.clone(globePos, controller._strafeStartPosition);\n            controller._strafing = true;\n            strafe(controller, startPosition, movement);\n            controller._strafeMousePosition = Cartesian2.clone(startPosition, controller._strafeMousePosition);\n            return;\n        }\n\n        var plane = Plane.fromPointNormal(origin, normal, translateCVPlane);\n\n        startRay = camera.getPickRay(startMouse, translateCVStartRay);\n        var startPlanePos = IntersectionTests.rayPlane(startRay, plane, translateCVStartPos);\n\n        var endRay = camera.getPickRay(endMouse, translateCVEndRay);\n        var endPlanePos = IntersectionTests.rayPlane(endRay, plane, translateCVEndPos);\n\n        if (!defined(startPlanePos) || !defined(endPlanePos)) {\n            controller._looking = true;\n            look3D(controller, startPosition, movement);\n            Cartesian2.clone(startPosition, controller._translateMousePosition);\n            return;\n        }\n\n        var diff = Cartesian3.subtract(startPlanePos, endPlanePos, translatCVDifference);\n        var temp = diff.x;\n        diff.x = diff.y;\n        diff.y = diff.z;\n        diff.z = temp;\n        var mag = Cartesian3.magnitude(diff);\n        if (mag > CesiumMath.EPSILON6) {\n            Cartesian3.normalize(diff, diff);\n            camera.move(diff, mag);\n        }\n    }\n\n    var rotateCVWindowPos = new Cartesian2();\n    var rotateCVWindowRay = new Ray();\n    var rotateCVCenter = new Cartesian3();\n    var rotateCVVerticalCenter = new Cartesian3();\n    var rotateCVTransform = new Matrix4();\n    var rotateCVVerticalTransform = new Matrix4();\n    var rotateCVOrigin = new Cartesian3();\n    var rotateCVPlane = new Plane(Cartesian3.UNIT_X, 0.0);\n    var rotateCVCartesian3 = new Cartesian3();\n    var rotateCVCart = new Cartographic();\n    var rotateCVOldTransform = new Matrix4();\n    var rotateCVQuaternion = new Quaternion();\n    var rotateCVMatrix = new Matrix3();\n    var tilt3DCartesian3 = new Cartesian3();\n\n    function rotateCV(controller, startPosition, movement) {\n        if (defined(movement.angleAndHeight)) {\n            movement = movement.angleAndHeight;\n        }\n\n        if (!Cartesian2.equals(startPosition, controller._tiltCenterMousePosition)) {\n            controller._tiltCVOffMap = false;\n            controller._looking = false;\n        }\n\n        if (controller._looking) {\n            look3D(controller, startPosition, movement);\n            return;\n        }\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var maxCoord = controller._maxCoord;\n        var onMap = Math.abs(camera.position.x) - maxCoord.x < 0 && Math.abs(camera.position.y) - maxCoord.y < 0;\n\n        if (controller._tiltCVOffMap || !onMap || camera.position.z > controller._minimumPickingTerrainHeight) {\n            controller._tiltCVOffMap = true;\n            rotateCVOnPlane(controller, startPosition, movement);\n        } else {\n            rotateCVOnTerrain(controller, startPosition, movement);\n        }\n    }\n\n    function rotateCVOnPlane(controller, startPosition, movement) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var canvas = scene.canvas;\n\n        var windowPosition = rotateCVWindowPos;\n        windowPosition.x = canvas.clientWidth / 2;\n        windowPosition.y = canvas.clientHeight / 2;\n        var ray = camera.getPickRay(windowPosition, rotateCVWindowRay);\n        var normal = Cartesian3.UNIT_X;\n\n        var position = ray.origin;\n        var direction = ray.direction;\n        var scalar;\n        var normalDotDirection = Cartesian3.dot(normal, direction);\n        if (Math.abs(normalDotDirection) > CesiumMath.EPSILON6) {\n            scalar = -Cartesian3.dot(normal, position) / normalDotDirection;\n        }\n\n        if (!defined(scalar) || scalar <= 0.0) {\n            controller._looking = true;\n            look3D(controller, startPosition, movement);\n            Cartesian2.clone(startPosition, controller._tiltCenterMousePosition);\n            return;\n        }\n\n        var center = Cartesian3.multiplyByScalar(direction, scalar, rotateCVCenter);\n        Cartesian3.add(position, center, center);\n\n        var projection = scene.mapProjection;\n        var ellipsoid = projection.ellipsoid;\n\n        Cartesian3.fromElements(center.y, center.z, center.x, center);\n        var cart = projection.unproject(center, rotateCVCart);\n        ellipsoid.cartographicToCartesian(cart, center);\n\n        var transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, rotateCVTransform);\n\n        var oldGlobe = controller._globe;\n        var oldEllipsoid = controller._ellipsoid;\n        controller._globe = undefined;\n        controller._ellipsoid = Ellipsoid.UNIT_SPHERE;\n        controller._rotateFactor = 1.0;\n        controller._rotateRateRangeAdjustment = 1.0;\n\n        var oldTransform = Matrix4.clone(camera.transform, rotateCVOldTransform);\n        camera._setTransform(transform);\n\n        rotate3D(controller, startPosition, movement, Cartesian3.UNIT_Z);\n\n        camera._setTransform(oldTransform);\n        controller._globe = oldGlobe;\n        controller._ellipsoid = oldEllipsoid;\n\n        var radius = oldEllipsoid.maximumRadius;\n        controller._rotateFactor = 1.0 / radius;\n        controller._rotateRateRangeAdjustment = radius;\n    }\n\n    function rotateCVOnTerrain(controller, startPosition, movement) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        var center;\n        var ray;\n        var normal = Cartesian3.UNIT_X;\n\n        if (Cartesian2.equals(startPosition, controller._tiltCenterMousePosition)) {\n            center = Cartesian3.clone(controller._tiltCenter, rotateCVCenter);\n        } else {\n            if (camera.position.z < controller._minimumPickingTerrainHeight) {\n                center = pickGlobe(controller, startPosition, rotateCVCenter);\n            }\n\n            if (!defined(center)) {\n                ray = camera.getPickRay(startPosition, rotateCVWindowRay);\n                var position = ray.origin;\n                var direction = ray.direction;\n\n                var scalar;\n                var normalDotDirection = Cartesian3.dot(normal, direction);\n                if (Math.abs(normalDotDirection) > CesiumMath.EPSILON6) {\n                    scalar = -Cartesian3.dot(normal, position) / normalDotDirection;\n                }\n\n                if (!defined(scalar) || scalar <= 0.0) {\n                    controller._looking = true;\n                    look3D(controller, startPosition, movement);\n                    Cartesian2.clone(startPosition, controller._tiltCenterMousePosition);\n                    return;\n                }\n\n                center = Cartesian3.multiplyByScalar(direction, scalar, rotateCVCenter);\n                Cartesian3.add(position, center, center);\n            }\n\n            Cartesian2.clone(startPosition, controller._tiltCenterMousePosition);\n            Cartesian3.clone(center, controller._tiltCenter);\n        }\n\n        var canvas = scene.canvas;\n\n        var windowPosition = rotateCVWindowPos;\n        windowPosition.x = canvas.clientWidth / 2;\n        windowPosition.y = controller._tiltCenterMousePosition.y;\n        ray = camera.getPickRay(windowPosition, rotateCVWindowRay);\n\n        var origin = Cartesian3.clone(Cartesian3.ZERO, rotateCVOrigin);\n        origin.x = center.x;\n\n        var plane = Plane.fromPointNormal(origin, normal, rotateCVPlane);\n        var verticalCenter = IntersectionTests.rayPlane(ray, plane, rotateCVVerticalCenter);\n\n        var projection = camera._projection;\n        var ellipsoid = projection.ellipsoid;\n\n        Cartesian3.fromElements(center.y, center.z, center.x, center);\n        var cart = projection.unproject(center, rotateCVCart);\n        ellipsoid.cartographicToCartesian(cart, center);\n\n        var transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, rotateCVTransform);\n\n        var verticalTransform;\n        if (defined(verticalCenter)) {\n            Cartesian3.fromElements(verticalCenter.y, verticalCenter.z, verticalCenter.x, verticalCenter);\n            cart = projection.unproject(verticalCenter, rotateCVCart);\n            ellipsoid.cartographicToCartesian(cart, verticalCenter);\n\n            verticalTransform = Transforms.eastNorthUpToFixedFrame(verticalCenter, ellipsoid, rotateCVVerticalTransform);\n        } else {\n            verticalTransform = transform;\n        }\n\n        var oldGlobe = controller._globe;\n        var oldEllipsoid = controller._ellipsoid;\n        controller._globe = undefined;\n        controller._ellipsoid = Ellipsoid.UNIT_SPHERE;\n        controller._rotateFactor = 1.0;\n        controller._rotateRateRangeAdjustment = 1.0;\n\n        var constrainedAxis = Cartesian3.UNIT_Z;\n\n        var oldTransform = Matrix4.clone(camera.transform, rotateCVOldTransform);\n        camera._setTransform(transform);\n\n        var tangent = Cartesian3.cross(Cartesian3.UNIT_Z, Cartesian3.normalize(camera.position, rotateCVCartesian3), rotateCVCartesian3);\n        var dot = Cartesian3.dot(camera.right, tangent);\n\n        rotate3D(controller, startPosition, movement, constrainedAxis, false, true);\n\n        camera._setTransform(verticalTransform);\n        if (dot < 0.0) {\n            if (movement.startPosition.y > movement.endPosition.y) {\n                constrainedAxis = undefined;\n            }\n\n            var oldConstrainedAxis = camera.constrainedAxis;\n            camera.constrainedAxis = undefined;\n\n            rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n\n            camera.constrainedAxis = oldConstrainedAxis;\n        } else {\n            rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n        }\n\n        if (defined(camera.constrainedAxis)) {\n            var right = Cartesian3.cross(camera.direction, camera.constrainedAxis, tilt3DCartesian3);\n            if (!Cartesian3.equalsEpsilon(right, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\n                if (Cartesian3.dot(right, camera.right) < 0.0) {\n                    Cartesian3.negate(right, right);\n                }\n\n                Cartesian3.cross(right, camera.direction, camera.up);\n                Cartesian3.cross(camera.direction, camera.up, camera.right);\n\n                Cartesian3.normalize(camera.up, camera.up);\n                Cartesian3.normalize(camera.right, camera.right);\n            }\n        }\n\n        camera._setTransform(oldTransform);\n        controller._globe = oldGlobe;\n        controller._ellipsoid = oldEllipsoid;\n\n        var radius = oldEllipsoid.maximumRadius;\n        controller._rotateFactor = 1.0 / radius;\n        controller._rotateRateRangeAdjustment = radius;\n\n        var originalPosition = Cartesian3.clone(camera.positionWC, rotateCVCartesian3);\n        camera._adjustHeightForTerrain();\n\n        if (!Cartesian3.equals(camera.positionWC, originalPosition)) {\n            camera._setTransform(verticalTransform);\n            camera.worldToCameraCoordinatesPoint(originalPosition, originalPosition);\n\n            var magSqrd = Cartesian3.magnitudeSquared(originalPosition);\n            if (Cartesian3.magnitudeSquared(camera.position) > magSqrd) {\n                Cartesian3.normalize(camera.position, camera.position);\n                Cartesian3.multiplyByScalar(camera.position, Math.sqrt(magSqrd), camera.position);\n            }\n\n            var angle = Cartesian3.angleBetween(originalPosition, camera.position);\n            var axis = Cartesian3.cross(originalPosition, camera.position, originalPosition);\n            Cartesian3.normalize(axis, axis);\n\n            var quaternion = Quaternion.fromAxisAngle(axis, angle, rotateCVQuaternion);\n            var rotation = Matrix3.fromQuaternion(quaternion, rotateCVMatrix);\n            Matrix3.multiplyByVector(rotation, camera.direction, camera.direction);\n            Matrix3.multiplyByVector(rotation, camera.up, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n            Cartesian3.cross(camera.right, camera.direction, camera.up);\n\n            camera._setTransform(oldTransform);\n        }\n    }\n\n    var zoomCVWindowPos = new Cartesian2();\n    var zoomCVWindowRay = new Ray();\n    var zoomCVIntersection = new Cartesian3();\n\n    function zoomCV(controller, startPosition, movement) {\n        if (defined(movement.distance)) {\n            movement = movement.distance;\n        }\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var canvas = scene.canvas;\n\n        var windowPosition = zoomCVWindowPos;\n        windowPosition.x = canvas.clientWidth / 2;\n        windowPosition.y = canvas.clientHeight / 2;\n        var ray = camera.getPickRay(windowPosition, zoomCVWindowRay);\n\n        var intersection;\n        if (camera.position.z < controller._minimumPickingTerrainHeight) {\n            intersection = pickGlobe(controller, windowPosition, zoomCVIntersection);\n        }\n\n        var distance;\n        if (defined(intersection)) {\n            distance = Cartesian3.distance(ray.origin, intersection);\n        } else {\n            var normal = Cartesian3.UNIT_X;\n            var position = ray.origin;\n            var direction = ray.direction;\n            distance = -Cartesian3.dot(normal, position) / Cartesian3.dot(normal, direction);\n        }\n\n        handleZoom(controller, startPosition, movement, controller._zoomFactor, distance);\n    }\n\n    function updateCV(controller) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        if (!Matrix4.equals(Matrix4.IDENTITY, camera.transform)) {\n            reactToInput(controller, controller.enableRotate, controller.rotateEventTypes, rotate3D, controller.inertiaSpin, '_lastInertiaSpinMovement');\n            reactToInput(controller, controller.enableZoom, controller.zoomEventTypes, zoom3D, controller.inertiaZoom, '_lastInertiaZoomMovement');\n        } else {\n            var tweens = controller._tweens;\n\n            if (controller._aggregator.anyButtonDown) {\n                tweens.removeAll();\n            }\n\n            reactToInput(controller, controller.enableTilt, controller.tiltEventTypes, rotateCV, controller.inertiaSpin, '_lastInertiaTiltMovement');\n            reactToInput(controller, controller.enableTranslate, controller.translateEventTypes, translateCV, controller.inertiaTranslate, '_lastInertiaTranslateMovement');\n            reactToInput(controller, controller.enableZoom, controller.zoomEventTypes, zoomCV, controller.inertiaZoom, '_lastInertiaZoomMovement');\n            reactToInput(controller, controller.enableLook, controller.lookEventTypes, look3D);\n\n            if (!controller._aggregator.anyButtonDown &&\n                    (!defined(controller._lastInertiaZoomMovement) || !controller._lastInertiaZoomMovement.active) &&\n                    (!defined(controller._lastInertiaTranslateMovement) || !controller._lastInertiaTranslateMovement.active) &&\n                    !tweens.contains(controller._tween)) {\n                var tween = camera.createCorrectPositionTween(controller.bounceAnimationTime);\n                if (defined(tween)) {\n                    controller._tween = tweens.add(tween);\n                }\n            }\n\n            tweens.update();\n        }\n    }\n\n    var scratchStrafeRay = new Ray();\n    var scratchStrafePlane = new Plane(Cartesian3.UNIT_X, 0.0);\n    var scratchStrafeIntersection = new Cartesian3();\n    var scratchStrafeDirection = new Cartesian3();\n    var scratchMousePos = new Cartesian3();\n\n    function strafe(controller, startPosition, movement) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        var mouseStartPosition = pickGlobe(controller, movement.startPosition, scratchMousePos);\n        if (!defined(mouseStartPosition)) {\n            return;\n        }\n\n        var mousePosition = movement.endPosition;\n        var ray = camera.getPickRay(mousePosition, scratchStrafeRay);\n\n        var direction = Cartesian3.clone(camera.direction, scratchStrafeDirection);\n        if (scene.mode === SceneMode.COLUMBUS_VIEW) {\n            Cartesian3.fromElements(direction.z, direction.x, direction.y, direction);\n        }\n\n        var plane = Plane.fromPointNormal(mouseStartPosition, direction, scratchStrafePlane);\n        var intersection = IntersectionTests.rayPlane(ray, plane, scratchStrafeIntersection);\n        if (!defined(intersection)) {\n            return;\n        }\n\n        direction = Cartesian3.subtract(mouseStartPosition, intersection, direction);\n        if (scene.mode === SceneMode.COLUMBUS_VIEW) {\n            Cartesian3.fromElements(direction.y, direction.z, direction.x, direction);\n        }\n\n        Cartesian3.add(camera.position, direction, camera.position);\n    }\n\n    var spin3DPick = new Cartesian3();\n    var scratchCartographic = new Cartographic();\n    var scratchRadii = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchLookUp = new Cartesian3();\n\n    function spin3D(controller, startPosition, movement) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        if (!Matrix4.equals(camera.transform, Matrix4.IDENTITY)) {\n            rotate3D(controller, startPosition, movement);\n            return;\n        }\n\n        var magnitude;\n        var radii;\n        var ellipsoid;\n\n        var up = controller._ellipsoid.geodeticSurfaceNormal(camera.position, scratchLookUp);\n\n        var height = controller._ellipsoid.cartesianToCartographic(camera.positionWC, scratchCartographic).height;\n        var globe = controller._globe;\n\n        var mousePos;\n        var tangentPick = false;\n        if (defined(globe) && height < controller._minimumPickingTerrainHeight) {\n            mousePos = pickGlobe(controller, movement.startPosition, scratchMousePos);\n            if (defined(mousePos)) {\n                var ray = camera.getPickRay(movement.startPosition, pickGlobeScratchRay);\n                var normal = controller._ellipsoid.geodeticSurfaceNormal(mousePos);\n                tangentPick = Math.abs(Cartesian3.dot(ray.direction, normal)) < 0.05;\n\n                if (tangentPick && !controller._looking) {\n                    controller._rotating = false;\n                    controller._strafing = true;\n                }\n            }\n        }\n\n        if (Cartesian2.equals(startPosition, controller._rotateMousePosition)) {\n            if (controller._looking) {\n                look3D(controller, startPosition, movement, up);\n            } else if (controller._rotating) {\n                rotate3D(controller, startPosition, movement);\n            } else if (controller._strafing) {\n                Cartesian3.clone(mousePos, controller._strafeStartPosition);\n                strafe(controller, startPosition, movement);\n            } else {\n                magnitude = Cartesian3.magnitude(controller._rotateStartPosition);\n                radii = scratchRadii;\n                radii.x = radii.y = radii.z = magnitude;\n                ellipsoid = Ellipsoid.fromCartesian3(radii, scratchEllipsoid);\n                pan3D(controller, startPosition, movement, ellipsoid);\n            }\n            return;\n        }\n        controller._looking = false;\n        controller._rotating = false;\n        controller._strafing = false;\n\n        if (defined(globe) && height < controller._minimumPickingTerrainHeight) {\n            if (defined(mousePos)) {\n                if (Cartesian3.magnitude(camera.position) < Cartesian3.magnitude(mousePos)) {\n                    Cartesian3.clone(mousePos, controller._strafeStartPosition);\n\n                    controller._strafing = true;\n                    strafe(controller, startPosition, movement);\n                } else {\n                    magnitude = Cartesian3.magnitude(mousePos);\n                    radii = scratchRadii;\n                    radii.x = radii.y = radii.z = magnitude;\n                    ellipsoid = Ellipsoid.fromCartesian3(radii, scratchEllipsoid);\n                    pan3D(controller, startPosition, movement, ellipsoid);\n\n                    Cartesian3.clone(mousePos, controller._rotateStartPosition);\n                }\n            } else {\n                controller._looking = true;\n                look3D(controller, startPosition, movement, up);\n            }\n        } else if (defined(camera.pickEllipsoid(movement.startPosition, controller._ellipsoid, spin3DPick))) {\n            pan3D(controller, startPosition, movement, controller._ellipsoid);\n            Cartesian3.clone(spin3DPick, controller._rotateStartPosition);\n        } else if (height > controller._minimumTrackBallHeight) {\n            controller._rotating = true;\n            rotate3D(controller, startPosition, movement);\n        } else {\n            controller._looking = true;\n            look3D(controller, startPosition, movement, up);\n        }\n\n        Cartesian2.clone(startPosition, controller._rotateMousePosition);\n    }\n\n    function rotate3D(controller, startPosition, movement, constrainedAxis, rotateOnlyVertical, rotateOnlyHorizontal) {\n        rotateOnlyVertical = defaultValue(rotateOnlyVertical, false);\n        rotateOnlyHorizontal = defaultValue(rotateOnlyHorizontal, false);\n\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var canvas = scene.canvas;\n\n        var oldAxis = camera.constrainedAxis;\n        if (defined(constrainedAxis)) {\n            camera.constrainedAxis = constrainedAxis;\n        }\n\n        var rho = Cartesian3.magnitude(camera.position);\n        var rotateRate = controller._rotateFactor * (rho - controller._rotateRateRangeAdjustment);\n\n        if (rotateRate > controller._maximumRotateRate) {\n            rotateRate = controller._maximumRotateRate;\n        }\n\n        if (rotateRate < controller._minimumRotateRate) {\n            rotateRate = controller._minimumRotateRate;\n        }\n\n        var phiWindowRatio = (movement.startPosition.x - movement.endPosition.x) / canvas.clientWidth;\n        var thetaWindowRatio = (movement.startPosition.y - movement.endPosition.y) / canvas.clientHeight;\n        phiWindowRatio = Math.min(phiWindowRatio, controller.maximumMovementRatio);\n        thetaWindowRatio = Math.min(thetaWindowRatio, controller.maximumMovementRatio);\n\n        var deltaPhi = rotateRate * phiWindowRatio * Math.PI * 2.0;\n        var deltaTheta = rotateRate * thetaWindowRatio * Math.PI;\n\n        if (!rotateOnlyVertical) {\n            camera.rotateRight(deltaPhi);\n        }\n\n        if (!rotateOnlyHorizontal) {\n            camera.rotateUp(deltaTheta);\n        }\n\n        camera.constrainedAxis = oldAxis;\n    }\n\n    var pan3DP0 = Cartesian4.clone(Cartesian4.UNIT_W);\n    var pan3DP1 = Cartesian4.clone(Cartesian4.UNIT_W);\n    var pan3DTemp0 = new Cartesian3();\n    var pan3DTemp1 = new Cartesian3();\n    var pan3DTemp2 = new Cartesian3();\n    var pan3DTemp3 = new Cartesian3();\n    var pan3DStartMousePosition = new Cartesian2();\n    var pan3DEndMousePosition = new Cartesian2();\n\n    function pan3D(controller, startPosition, movement, ellipsoid) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        var startMousePosition = Cartesian2.clone(movement.startPosition, pan3DStartMousePosition);\n        var endMousePosition = Cartesian2.clone(movement.endPosition, pan3DEndMousePosition);\n\n        var p0 = camera.pickEllipsoid(startMousePosition, ellipsoid, pan3DP0);\n        var p1 = camera.pickEllipsoid(endMousePosition, ellipsoid, pan3DP1);\n\n        if (!defined(p0) || !defined(p1)) {\n            controller._rotating = true;\n            rotate3D(controller, startPosition, movement);\n            return;\n        }\n\n        p0 = camera.worldToCameraCoordinates(p0, p0);\n        p1 = camera.worldToCameraCoordinates(p1, p1);\n\n        if (!defined(camera.constrainedAxis)) {\n            Cartesian3.normalize(p0, p0);\n            Cartesian3.normalize(p1, p1);\n            var dot = Cartesian3.dot(p0, p1);\n            var axis = Cartesian3.cross(p0, p1, pan3DTemp0);\n\n            if (dot < 1.0 && !Cartesian3.equalsEpsilon(axis, Cartesian3.ZERO, CesiumMath.EPSILON14)) { // dot is in [0, 1]\n                var angle = Math.acos(dot);\n                camera.rotate(axis, angle);\n            }\n        } else {\n            var basis0 = camera.constrainedAxis;\n            var basis1 = Cartesian3.mostOrthogonalAxis(basis0, pan3DTemp0);\n            Cartesian3.cross(basis1, basis0, basis1);\n            Cartesian3.normalize(basis1, basis1);\n            var basis2 = Cartesian3.cross(basis0, basis1, pan3DTemp1);\n\n            var startRho = Cartesian3.magnitude(p0);\n            var startDot = Cartesian3.dot(basis0, p0);\n            var startTheta = Math.acos(startDot / startRho);\n            var startRej = Cartesian3.multiplyByScalar(basis0, startDot, pan3DTemp2);\n            Cartesian3.subtract(p0, startRej, startRej);\n            Cartesian3.normalize(startRej, startRej);\n\n            var endRho = Cartesian3.magnitude(p1);\n            var endDot = Cartesian3.dot(basis0, p1);\n            var endTheta = Math.acos(endDot / endRho);\n            var endRej = Cartesian3.multiplyByScalar(basis0, endDot, pan3DTemp3);\n            Cartesian3.subtract(p1, endRej, endRej);\n            Cartesian3.normalize(endRej, endRej);\n\n            var startPhi = Math.acos(Cartesian3.dot(startRej, basis1));\n            if (Cartesian3.dot(startRej, basis2) < 0) {\n                startPhi = CesiumMath.TWO_PI - startPhi;\n            }\n\n            var endPhi = Math.acos(Cartesian3.dot(endRej, basis1));\n            if (Cartesian3.dot(endRej, basis2) < 0) {\n                endPhi = CesiumMath.TWO_PI - endPhi;\n            }\n\n            var deltaPhi = startPhi - endPhi;\n\n            var east;\n            if (Cartesian3.equalsEpsilon(basis0, camera.position, CesiumMath.EPSILON2)) {\n                east = camera.right;\n            } else {\n                east = Cartesian3.cross(basis0, camera.position, pan3DTemp0);\n            }\n\n            var planeNormal = Cartesian3.cross(basis0, east, pan3DTemp0);\n            var side0 = Cartesian3.dot(planeNormal, Cartesian3.subtract(p0, basis0, pan3DTemp1));\n            var side1 = Cartesian3.dot(planeNormal, Cartesian3.subtract(p1, basis0, pan3DTemp1));\n\n            var deltaTheta;\n            if (side0 > 0 && side1 > 0) {\n                deltaTheta = endTheta - startTheta;\n            } else if (side0 > 0 && side1 <= 0) {\n                if (Cartesian3.dot(camera.position, basis0) > 0) {\n                    deltaTheta = -startTheta - endTheta;\n                } else {\n                    deltaTheta = startTheta + endTheta;\n                }\n            } else {\n                deltaTheta = startTheta - endTheta;\n            }\n\n            camera.rotateRight(deltaPhi);\n            camera.rotateUp(deltaTheta);\n        }\n    }\n\n    var zoom3DUnitPosition = new Cartesian3();\n    var zoom3DCartographic = new Cartographic();\n\n    function zoom3D(controller, startPosition, movement) {\n        if (defined(movement.distance)) {\n            movement = movement.distance;\n        }\n\n        var ellipsoid = controller._ellipsoid;\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var canvas = scene.canvas;\n\n        var windowPosition = zoomCVWindowPos;\n        windowPosition.x = canvas.clientWidth / 2;\n        windowPosition.y = canvas.clientHeight / 2;\n        var ray = camera.getPickRay(windowPosition, zoomCVWindowRay);\n\n        var intersection;\n        var height = ellipsoid.cartesianToCartographic(camera.position, zoom3DCartographic).height;\n        if (height < controller._minimumPickingTerrainHeight) {\n            intersection = pickGlobe(controller, windowPosition, zoomCVIntersection);\n        }\n\n        var distance;\n        if (defined(intersection)) {\n            distance = Cartesian3.distance(ray.origin, intersection);\n        } else {\n            distance = height;\n        }\n\n        var unitPosition = Cartesian3.normalize(camera.position, zoom3DUnitPosition);\n        handleZoom(controller, startPosition, movement, controller._zoomFactor, distance, Cartesian3.dot(unitPosition, camera.direction));\n    }\n\n    var tilt3DWindowPos = new Cartesian2();\n    var tilt3DRay = new Ray();\n    var tilt3DCenter = new Cartesian3();\n    var tilt3DVerticalCenter = new Cartesian3();\n    var tilt3DTransform = new Matrix4();\n    var tilt3DVerticalTransform = new Matrix4();\n    var tilt3DOldTransform = new Matrix4();\n    var tilt3DQuaternion = new Quaternion();\n    var tilt3DMatrix = new Matrix3();\n    var tilt3DCart = new Cartographic();\n    var tilt3DLookUp = new Cartesian3();\n\n    function tilt3D(controller, startPosition, movement) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        if (!Matrix4.equals(camera.transform, Matrix4.IDENTITY)) {\n            return;\n        }\n\n        if (defined(movement.angleAndHeight)) {\n            movement = movement.angleAndHeight;\n        }\n\n        if (!Cartesian2.equals(startPosition, controller._tiltCenterMousePosition)) {\n            controller._tiltOnEllipsoid = false;\n            controller._looking = false;\n        }\n\n        if (controller._looking) {\n            var up = controller._ellipsoid.geodeticSurfaceNormal(camera.position, tilt3DLookUp);\n            look3D(controller, startPosition, movement, up);\n            return;\n        }\n\n        var ellipsoid = controller._ellipsoid;\n        var cartographic = ellipsoid.cartesianToCartographic(camera.position, tilt3DCart);\n\n        if (controller._tiltOnEllipsoid || cartographic.height > controller._minimumCollisionTerrainHeight) {\n            controller._tiltOnEllipsoid = true;\n            tilt3DOnEllipsoid(controller, startPosition, movement);\n        } else {\n            tilt3DOnTerrain(controller, startPosition, movement);\n        }\n    }\n\n    var tilt3DOnEllipsoidCartographic = new Cartographic();\n\n    function tilt3DOnEllipsoid(controller, startPosition, movement) {\n        var ellipsoid = controller._ellipsoid;\n        var scene = controller._scene;\n        var camera = scene.camera;\n        var minHeight = controller.minimumZoomDistance * 0.25;\n        var height = ellipsoid.cartesianToCartographic(camera.positionWC, tilt3DOnEllipsoidCartographic).height;\n        if (height - minHeight - 1.0 < CesiumMath.EPSILON3 &&\n                movement.endPosition.y - movement.startPosition.y < 0) {\n            return;\n        }\n\n        var canvas = scene.canvas;\n\n        var windowPosition = tilt3DWindowPos;\n        windowPosition.x = canvas.clientWidth / 2;\n        windowPosition.y = canvas.clientHeight / 2;\n        var ray = camera.getPickRay(windowPosition, tilt3DRay);\n\n        var center;\n        var intersection = IntersectionTests.rayEllipsoid(ray, ellipsoid);\n        if (defined(intersection)) {\n            center = Ray.getPoint(ray, intersection.start, tilt3DCenter);\n        } else if (height > controller._minimumTrackBallHeight) {\n            var grazingAltitudeLocation = IntersectionTests.grazingAltitudeLocation(ray, ellipsoid);\n            if (!defined(grazingAltitudeLocation)) {\n                return;\n            }\n            var grazingAltitudeCart = ellipsoid.cartesianToCartographic(grazingAltitudeLocation, tilt3DCart);\n            grazingAltitudeCart.height = 0.0;\n            center = ellipsoid.cartographicToCartesian(grazingAltitudeCart, tilt3DCenter);\n        } else {\n            controller._looking = true;\n            var up = controller._ellipsoid.geodeticSurfaceNormal(camera.position, tilt3DLookUp);\n            look3D(controller, startPosition, movement, up);\n            Cartesian2.clone(startPosition, controller._tiltCenterMousePosition);\n            return;\n        }\n\n        var transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, tilt3DTransform);\n\n        var oldGlobe = controller._globe;\n        var oldEllipsoid = controller._ellipsoid;\n        controller._globe = undefined;\n        controller._ellipsoid = Ellipsoid.UNIT_SPHERE;\n        controller._rotateFactor = 1.0;\n        controller._rotateRateRangeAdjustment = 1.0;\n\n        var oldTransform = Matrix4.clone(camera.transform, tilt3DOldTransform);\n        camera._setTransform(transform);\n\n        rotate3D(controller, startPosition, movement, Cartesian3.UNIT_Z);\n\n        camera._setTransform(oldTransform);\n        controller._globe = oldGlobe;\n        controller._ellipsoid = oldEllipsoid;\n\n        var radius = oldEllipsoid.maximumRadius;\n        controller._rotateFactor = 1.0 / radius;\n        controller._rotateRateRangeAdjustment = radius;\n    }\n\n    function tilt3DOnTerrain(controller, startPosition, movement) {\n        var ellipsoid = controller._ellipsoid;\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        var center;\n        var ray;\n        var intersection;\n\n        if (Cartesian2.equals(startPosition, controller._tiltCenterMousePosition)) {\n            center = Cartesian3.clone(controller._tiltCenter, tilt3DCenter);\n        } else {\n            center = pickGlobe(controller, startPosition, tilt3DCenter);\n\n            if (!defined(center)) {\n                ray = camera.getPickRay(startPosition, tilt3DRay);\n                intersection = IntersectionTests.rayEllipsoid(ray, ellipsoid);\n                if (!defined(intersection)) {\n                    var cartographic = ellipsoid.cartesianToCartographic(camera.position, tilt3DCart);\n                    if (cartographic.height <= controller._minimumTrackBallHeight) {\n                        controller._looking = true;\n                        var up = controller._ellipsoid.geodeticSurfaceNormal(camera.position, tilt3DLookUp);\n                        look3D(controller, startPosition, movement, up);\n                        Cartesian2.clone(startPosition, controller._tiltCenterMousePosition);\n                    }\n                    return;\n                }\n                center = Ray.getPoint(ray, intersection.start, tilt3DCenter);\n            }\n\n            Cartesian2.clone(startPosition, controller._tiltCenterMousePosition);\n            Cartesian3.clone(center, controller._tiltCenter);\n        }\n\n        var canvas = scene.canvas;\n\n        var windowPosition = tilt3DWindowPos;\n        windowPosition.x = canvas.clientWidth / 2;\n        windowPosition.y = controller._tiltCenterMousePosition.y;\n        ray = camera.getPickRay(windowPosition, tilt3DRay);\n\n        var mag = Cartesian3.magnitude(center);\n        var radii = Cartesian3.fromElements(mag, mag, mag, scratchRadii);\n        var newEllipsoid = Ellipsoid.fromCartesian3(radii, scratchEllipsoid);\n\n        intersection = IntersectionTests.rayEllipsoid(ray, newEllipsoid);\n        if (!defined(intersection)) {\n            return;\n        }\n\n        var t = Cartesian3.magnitude(ray.origin) > mag ? intersection.start : intersection.stop;\n        var verticalCenter = Ray.getPoint(ray, t, tilt3DVerticalCenter);\n\n        var transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, tilt3DTransform);\n        var verticalTransform = Transforms.eastNorthUpToFixedFrame(verticalCenter, newEllipsoid, tilt3DVerticalTransform);\n\n        var oldGlobe = controller._globe;\n        var oldEllipsoid = controller._ellipsoid;\n        controller._globe = undefined;\n        controller._ellipsoid = Ellipsoid.UNIT_SPHERE;\n        controller._rotateFactor = 1.0;\n        controller._rotateRateRangeAdjustment = 1.0;\n\n        var constrainedAxis = Cartesian3.UNIT_Z;\n\n        var oldTransform = Matrix4.clone(camera.transform, tilt3DOldTransform);\n        camera._setTransform(transform);\n\n        var tangent = Cartesian3.cross(verticalCenter, camera.positionWC, tilt3DCartesian3);\n        var dot = Cartesian3.dot(camera.rightWC, tangent);\n\n        rotate3D(controller, startPosition, movement, constrainedAxis, false, true);\n\n        camera._setTransform(verticalTransform);\n\n        if (dot < 0.0) {\n            if (movement.startPosition.y > movement.endPosition.y) {\n                constrainedAxis = undefined;\n            }\n\n            var oldConstrainedAxis = camera.constrainedAxis;\n            camera.constrainedAxis = undefined;\n\n            rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n\n            camera.constrainedAxis = oldConstrainedAxis;\n        } else {\n            rotate3D(controller, startPosition, movement, constrainedAxis, true, false);\n        }\n\n        if (defined(camera.constrainedAxis)) {\n            var right = Cartesian3.cross(camera.direction, camera.constrainedAxis, tilt3DCartesian3);\n            if (!Cartesian3.equalsEpsilon(right, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\n                if (Cartesian3.dot(right, camera.right) < 0.0) {\n                    Cartesian3.negate(right, right);\n                }\n\n                Cartesian3.cross(right, camera.direction, camera.up);\n                Cartesian3.cross(camera.direction, camera.up, camera.right);\n\n                Cartesian3.normalize(camera.up, camera.up);\n                Cartesian3.normalize(camera.right, camera.right);\n            }\n        }\n\n        camera._setTransform(oldTransform);\n        controller._globe = oldGlobe;\n        controller._ellipsoid = oldEllipsoid;\n\n        var radius = oldEllipsoid.maximumRadius;\n        controller._rotateFactor = 1.0 / radius;\n        controller._rotateRateRangeAdjustment = radius;\n\n        var originalPosition = Cartesian3.clone(camera.positionWC, tilt3DCartesian3);\n        camera._adjustHeightForTerrain();\n\n        if (!Cartesian3.equals(camera.positionWC, originalPosition)) {\n            camera._setTransform(verticalTransform);\n            camera.worldToCameraCoordinatesPoint(originalPosition, originalPosition);\n\n            var magSqrd = Cartesian3.magnitudeSquared(originalPosition);\n            if (Cartesian3.magnitudeSquared(camera.position) > magSqrd) {\n                Cartesian3.normalize(camera.position, camera.position);\n                Cartesian3.multiplyByScalar(camera.position, Math.sqrt(magSqrd), camera.position);\n            }\n\n            var angle = Cartesian3.angleBetween(originalPosition, camera.position);\n            var axis = Cartesian3.cross(originalPosition, camera.position, originalPosition);\n            Cartesian3.normalize(axis, axis);\n\n            var quaternion = Quaternion.fromAxisAngle(axis, angle, tilt3DQuaternion);\n            var rotation = Matrix3.fromQuaternion(quaternion, tilt3DMatrix);\n            Matrix3.multiplyByVector(rotation, camera.direction, camera.direction);\n            Matrix3.multiplyByVector(rotation, camera.up, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n            Cartesian3.cross(camera.right, camera.direction, camera.up);\n\n            camera._setTransform(oldTransform);\n        }\n    }\n\n    var look3DStartPos = new Cartesian2();\n    var look3DEndPos = new Cartesian2();\n    var look3DStartRay = new Ray();\n    var look3DEndRay = new Ray();\n    var look3DNegativeRot = new Cartesian3();\n    var look3DTan = new Cartesian3();\n\n    function look3D(controller, startPosition, movement, rotationAxis) {\n        var scene = controller._scene;\n        var camera = scene.camera;\n\n        var startPos = look3DStartPos;\n        startPos.x = movement.startPosition.x;\n        startPos.y = 0.0;\n        var endPos = look3DEndPos;\n        endPos.x = movement.endPosition.x;\n        endPos.y = 0.0;\n\n        var startRay = camera.getPickRay(startPos, look3DStartRay);\n        var endRay = camera.getPickRay(endPos, look3DEndRay);\n        var angle = 0.0;\n        var start;\n        var end;\n\n        if (camera.frustum instanceof OrthographicFrustum) {\n            start = startRay.origin;\n            end = endRay.origin;\n\n            Cartesian3.add(camera.direction, start, start);\n            Cartesian3.add(camera.direction, end, end);\n\n            Cartesian3.subtract(start, camera.position, start);\n            Cartesian3.subtract(end, camera.position, end);\n\n            Cartesian3.normalize(start, start);\n            Cartesian3.normalize(end, end);\n        } else {\n            start = startRay.direction;\n            end = endRay.direction;\n        }\n\n        var dot = Cartesian3.dot(start, end);\n        if (dot < 1.0) { // dot is in [0, 1]\n            angle = Math.acos(dot);\n        }\n\n        angle = (movement.startPosition.x > movement.endPosition.x) ? -angle : angle;\n\n        var horizontalRotationAxis = controller._horizontalRotationAxis;\n        if (defined(rotationAxis)) {\n            camera.look(rotationAxis, -angle);\n        } else if (defined(horizontalRotationAxis)) {\n            camera.look(horizontalRotationAxis, -angle);\n        } else {\n            camera.lookLeft(angle);\n        }\n\n        startPos.x = 0.0;\n        startPos.y = movement.startPosition.y;\n        endPos.x = 0.0;\n        endPos.y = movement.endPosition.y;\n\n        startRay = camera.getPickRay(startPos, look3DStartRay);\n        endRay = camera.getPickRay(endPos, look3DEndRay);\n        angle = 0.0;\n\n        if (camera.frustum instanceof OrthographicFrustum) {\n            start = startRay.origin;\n            end = endRay.origin;\n\n            Cartesian3.add(camera.direction, start, start);\n            Cartesian3.add(camera.direction, end, end);\n\n            Cartesian3.subtract(start, camera.position, start);\n            Cartesian3.subtract(end, camera.position, end);\n\n            Cartesian3.normalize(start, start);\n            Cartesian3.normalize(end, end);\n        } else {\n            start = startRay.direction;\n            end = endRay.direction;\n        }\n\n        dot = Cartesian3.dot(start, end);\n        if (dot < 1.0) { // dot is in [0, 1]\n            angle = Math.acos(dot);\n        }\n        angle = (movement.startPosition.y > movement.endPosition.y) ? -angle : angle;\n\n        rotationAxis = defaultValue(rotationAxis, horizontalRotationAxis);\n        if (defined(rotationAxis)) {\n            var direction = camera.direction;\n            var negativeRotationAxis = Cartesian3.negate(rotationAxis, look3DNegativeRot);\n            var northParallel = Cartesian3.equalsEpsilon(direction, rotationAxis, CesiumMath.EPSILON2);\n            var southParallel = Cartesian3.equalsEpsilon(direction, negativeRotationAxis, CesiumMath.EPSILON2);\n            if ((!northParallel && !southParallel)) {\n                dot = Cartesian3.dot(direction, rotationAxis);\n                var angleToAxis = CesiumMath.acosClamped(dot);\n                if (angle > 0 && angle > angleToAxis) {\n                    angle = angleToAxis - CesiumMath.EPSILON4;\n                }\n\n                dot = Cartesian3.dot(direction, negativeRotationAxis);\n                angleToAxis = CesiumMath.acosClamped(dot);\n                if (angle < 0 && -angle > angleToAxis) {\n                    angle = -angleToAxis + CesiumMath.EPSILON4;\n                }\n\n                var tangent = Cartesian3.cross(rotationAxis, direction, look3DTan);\n                camera.look(tangent, angle);\n            } else if ((northParallel && angle < 0) || (southParallel && angle > 0)) {\n                camera.look(camera.right, -angle);\n            }\n        } else {\n            camera.lookUp(angle);\n        }\n    }\n\n    function update3D(controller) {\n        reactToInput(controller, controller.enableRotate, controller.rotateEventTypes, spin3D, controller.inertiaSpin, '_lastInertiaSpinMovement');\n        reactToInput(controller, controller.enableZoom, controller.zoomEventTypes, zoom3D, controller.inertiaZoom, '_lastInertiaZoomMovement');\n        reactToInput(controller, controller.enableTilt, controller.tiltEventTypes, tilt3D, controller.inertiaSpin, '_lastInertiaTiltMovement');\n        reactToInput(controller, controller.enableLook, controller.lookEventTypes, look3D);\n    }\n\n    /**\n     * @private\n     */\n    ScreenSpaceCameraController.prototype.update = function() {\n        if (!Matrix4.equals(this._scene.camera.transform, Matrix4.IDENTITY)) {\n            this._globe = undefined;\n            this._ellipsoid = Ellipsoid.UNIT_SPHERE;\n        } else {\n            this._globe = this._scene.globe;\n            this._ellipsoid = defined(this._globe) ? this._globe.ellipsoid : this._scene.mapProjection.ellipsoid;\n        }\n\n        this._minimumCollisionTerrainHeight = this.minimumCollisionTerrainHeight * this._scene.terrainExaggeration;\n        this._minimumPickingTerrainHeight = this.minimumPickingTerrainHeight * this._scene.terrainExaggeration;\n        this._minimumTrackBallHeight = this.minimumTrackBallHeight * this._scene.terrainExaggeration;\n\n        var radius = this._ellipsoid.maximumRadius;\n        this._rotateFactor = 1.0 / radius;\n        this._rotateRateRangeAdjustment = radius;\n\n        var scene = this._scene;\n        var mode = scene.mode;\n        if (mode === SceneMode.SCENE2D) {\n            update2D(this);\n        } else if (mode === SceneMode.COLUMBUS_VIEW) {\n            this._horizontalRotationAxis = Cartesian3.UNIT_Z;\n            updateCV(this);\n        } else if (mode === SceneMode.SCENE3D) {\n            this._horizontalRotationAxis = undefined;\n            update3D(this);\n        }\n\n        this._aggregator.reset();\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see ScreenSpaceCameraController#destroy\n     */\n    ScreenSpaceCameraController.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes mouse listeners held by this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * controller = controller && controller.destroy();\n     *\n     * @see ScreenSpaceCameraController#isDestroyed\n     */\n    ScreenSpaceCameraController.prototype.destroy = function() {\n        this._tweens.removeAll();\n        this._aggregator = this._aggregator && this._aggregator.destroy();\n        return destroyObject(this);\n    };\n\n    return ScreenSpaceCameraController;\n});\n","define([\n        '../Core/Cartesian2',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/KeyboardEventModifier',\n        '../Core/Math',\n        '../Core/ScreenSpaceEventHandler',\n        '../Core/ScreenSpaceEventType',\n        './CameraEventType'\n    ], function(\n        Cartesian2,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        KeyboardEventModifier,\n        CesiumMath,\n        ScreenSpaceEventHandler,\n        ScreenSpaceEventType,\n        CameraEventType) {\n    'use strict';\n\n    function getKey(type, modifier) {\n        var key = type;\n        if (defined(modifier)) {\n            key += '+' + modifier;\n        }\n        return key;\n    }\n\n    function clonePinchMovement(pinchMovement, result) {\n        Cartesian2.clone(pinchMovement.distance.startPosition, result.distance.startPosition);\n        Cartesian2.clone(pinchMovement.distance.endPosition, result.distance.endPosition);\n\n        Cartesian2.clone(pinchMovement.angleAndHeight.startPosition, result.angleAndHeight.startPosition);\n        Cartesian2.clone(pinchMovement.angleAndHeight.endPosition, result.angleAndHeight.endPosition);\n    }\n\n    function listenToPinch(aggregator, modifier, canvas) {\n        var key = getKey(CameraEventType.PINCH, modifier);\n\n        var update = aggregator._update;\n        var isDown = aggregator._isDown;\n        var eventStartPosition = aggregator._eventStartPosition;\n        var pressTime = aggregator._pressTime;\n        var releaseTime = aggregator._releaseTime;\n\n        update[key] = true;\n        isDown[key] = false;\n        eventStartPosition[key] = new Cartesian2();\n\n        var movement = aggregator._movement[key];\n        if (!defined(movement)) {\n            movement = aggregator._movement[key] = {};\n        }\n\n        movement.distance = {\n            startPosition : new Cartesian2(),\n            endPosition : new Cartesian2()\n        };\n        movement.angleAndHeight = {\n            startPosition : new Cartesian2(),\n            endPosition : new Cartesian2()\n        };\n        movement.prevAngle = 0.0;\n\n        aggregator._eventHandler.setInputAction(function(event) {\n            aggregator._buttonsDown++;\n            isDown[key] = true;\n            pressTime[key] = new Date();\n            // Compute center position and store as start point.\n            Cartesian2.lerp(event.position1, event.position2, 0.5, eventStartPosition[key]);\n        }, ScreenSpaceEventType.PINCH_START, modifier);\n\n        aggregator._eventHandler.setInputAction(function() {\n            aggregator._buttonsDown = Math.max(aggregator._buttonsDown - 1, 0);\n            isDown[key] = false;\n            releaseTime[key] = new Date();\n        }, ScreenSpaceEventType.PINCH_END, modifier);\n\n        aggregator._eventHandler.setInputAction(function(mouseMovement) {\n            if (isDown[key]) {\n                // Aggregate several input events into a single animation frame.\n                if (!update[key]) {\n                    Cartesian2.clone(mouseMovement.distance.endPosition, movement.distance.endPosition);\n                    Cartesian2.clone(mouseMovement.angleAndHeight.endPosition, movement.angleAndHeight.endPosition);\n                } else {\n                    clonePinchMovement(mouseMovement, movement);\n                    update[key] = false;\n                    movement.prevAngle = movement.angleAndHeight.startPosition.x;\n                }\n                // Make sure our aggregation of angles does not \"flip\" over 360 degrees.\n                var angle = movement.angleAndHeight.endPosition.x;\n                var prevAngle = movement.prevAngle;\n                var TwoPI = Math.PI * 2;\n                while (angle >= (prevAngle + Math.PI)) {\n                    angle -= TwoPI;\n                }\n                while (angle < (prevAngle - Math.PI)) {\n                    angle += TwoPI;\n                }\n                movement.angleAndHeight.endPosition.x = -angle * canvas.clientWidth / 12;\n                movement.angleAndHeight.startPosition.x = -prevAngle * canvas.clientWidth / 12;\n            }\n        }, ScreenSpaceEventType.PINCH_MOVE, modifier);\n    }\n\n    function listenToWheel(aggregator, modifier) {\n        var key = getKey(CameraEventType.WHEEL, modifier);\n\n        var update = aggregator._update;\n        update[key] = true;\n\n        var movement = aggregator._movement[key];\n        if (!defined(movement)) {\n            movement = aggregator._movement[key] = {};\n        }\n\n        movement.startPosition = new Cartesian2();\n        movement.endPosition = new Cartesian2();\n\n        aggregator._eventHandler.setInputAction(function(delta) {\n            // TODO: magic numbers\n            var arcLength = 15.0 * CesiumMath.toRadians(delta);\n            if (!update[key]) {\n                movement.endPosition.y = movement.endPosition.y + arcLength;\n            } else {\n                Cartesian2.clone(Cartesian2.ZERO, movement.startPosition);\n                movement.endPosition.x = 0.0;\n                movement.endPosition.y = arcLength;\n                update[key] = false;\n            }\n        }, ScreenSpaceEventType.WHEEL, modifier);\n    }\n\n    function listenMouseButtonDownUp(aggregator, modifier, type) {\n        var key = getKey(type, modifier);\n\n        var isDown = aggregator._isDown;\n        var eventStartPosition = aggregator._eventStartPosition;\n        var pressTime = aggregator._pressTime;\n        var releaseTime = aggregator._releaseTime;\n\n        isDown[key] = false;\n        eventStartPosition[key] = new Cartesian2();\n\n        var lastMovement = aggregator._lastMovement[key];\n        if (!defined(lastMovement)) {\n            lastMovement = aggregator._lastMovement[key] = {\n                startPosition : new Cartesian2(),\n                endPosition : new Cartesian2(),\n                valid : false\n            };\n        }\n\n        var down;\n        var up;\n        if (type === CameraEventType.LEFT_DRAG) {\n            down = ScreenSpaceEventType.LEFT_DOWN;\n            up = ScreenSpaceEventType.LEFT_UP;\n        } else if (type === CameraEventType.RIGHT_DRAG) {\n            down = ScreenSpaceEventType.RIGHT_DOWN;\n            up = ScreenSpaceEventType.RIGHT_UP;\n        } else if (type === CameraEventType.MIDDLE_DRAG) {\n            down = ScreenSpaceEventType.MIDDLE_DOWN;\n            up = ScreenSpaceEventType.MIDDLE_UP;\n        }\n\n        aggregator._eventHandler.setInputAction(function(event) {\n            aggregator._buttonsDown++;\n            lastMovement.valid = false;\n            isDown[key] = true;\n            pressTime[key] = new Date();\n            Cartesian2.clone(event.position, eventStartPosition[key]);\n        }, down, modifier);\n\n        aggregator._eventHandler.setInputAction(function() {\n            aggregator._buttonsDown = Math.max(aggregator._buttonsDown - 1, 0);\n            isDown[key] = false;\n            releaseTime[key] = new Date();\n        }, up, modifier);\n    }\n\n    function cloneMouseMovement(mouseMovement, result) {\n        Cartesian2.clone(mouseMovement.startPosition, result.startPosition);\n        Cartesian2.clone(mouseMovement.endPosition, result.endPosition);\n    }\n\n    function listenMouseMove(aggregator, modifier) {\n        var update = aggregator._update;\n        var movement = aggregator._movement;\n        var lastMovement = aggregator._lastMovement;\n        var isDown = aggregator._isDown;\n\n        for ( var typeName in CameraEventType) {\n            if (CameraEventType.hasOwnProperty(typeName)) {\n                var type = CameraEventType[typeName];\n                if (defined(type)) {\n                    var key = getKey(type, modifier);\n                    update[key] = true;\n\n                    if (!defined(aggregator._lastMovement[key])) {\n                        aggregator._lastMovement[key] = {\n                            startPosition : new Cartesian2(),\n                            endPosition : new Cartesian2(),\n                            valid : false\n                        };\n                    }\n\n                    if (!defined(aggregator._movement[key])) {\n                        aggregator._movement[key] = {\n                            startPosition : new Cartesian2(),\n                            endPosition : new Cartesian2()\n                        };\n                    }\n                }\n            }\n        }\n\n        aggregator._eventHandler.setInputAction(function(mouseMovement) {\n            for ( var typeName in CameraEventType) {\n                if (CameraEventType.hasOwnProperty(typeName)) {\n                    var type = CameraEventType[typeName];\n                    if (defined(type)) {\n                        var key = getKey(type, modifier);\n                        if (isDown[key]) {\n                            if (!update[key]) {\n                                Cartesian2.clone(mouseMovement.endPosition, movement[key].endPosition);\n                            } else {\n                                cloneMouseMovement(movement[key], lastMovement[key]);\n                                lastMovement[key].valid = true;\n                                cloneMouseMovement(mouseMovement, movement[key]);\n                                update[key] = false;\n                            }\n                        }\n                    }\n                }\n            }\n\n            Cartesian2.clone(mouseMovement.endPosition, aggregator._currentMousePosition);\n        }, ScreenSpaceEventType.MOUSE_MOVE, modifier);\n    }\n\n    /**\n     * Aggregates input events. For example, suppose the following inputs are received between frames:\n     * left mouse button down, mouse move, mouse move, left mouse button up. These events will be aggregated into\n     * one event with a start and end position of the mouse.\n     *\n     * @alias CameraEventAggregator\n     * @constructor\n     *\n     * @param {Canvas} [canvas=document] The element to handle events for.\n     *\n     * @see ScreenSpaceEventHandler\n     */\n    function CameraEventAggregator(canvas) {\n        \n\n        this._eventHandler = new ScreenSpaceEventHandler(canvas, true);\n\n        this._update = {};\n        this._movement = {};\n        this._lastMovement = {};\n        this._isDown = {};\n        this._eventStartPosition = {};\n        this._pressTime = {};\n        this._releaseTime = {};\n\n        this._buttonsDown = 0;\n\n        this._currentMousePosition = new Cartesian2();\n\n        listenToWheel(this, undefined);\n        listenToPinch(this, undefined, canvas);\n        listenMouseButtonDownUp(this, undefined, CameraEventType.LEFT_DRAG);\n        listenMouseButtonDownUp(this, undefined, CameraEventType.RIGHT_DRAG);\n        listenMouseButtonDownUp(this, undefined, CameraEventType.MIDDLE_DRAG);\n        listenMouseMove(this, undefined);\n\n        for ( var modifierName in KeyboardEventModifier) {\n            if (KeyboardEventModifier.hasOwnProperty(modifierName)) {\n                var modifier = KeyboardEventModifier[modifierName];\n                if (defined(modifier)) {\n                    listenToWheel(this, modifier);\n                    listenToPinch(this, modifier, canvas);\n                    listenMouseButtonDownUp(this, modifier, CameraEventType.LEFT_DRAG);\n                    listenMouseButtonDownUp(this, modifier, CameraEventType.RIGHT_DRAG);\n                    listenMouseButtonDownUp(this, modifier, CameraEventType.MIDDLE_DRAG);\n                    listenMouseMove(this, modifier);\n                }\n            }\n        }\n    }\n\n    defineProperties(CameraEventAggregator.prototype, {\n        /**\n         * Gets the current mouse position.\n         * @memberof CameraEventAggregator.prototype\n         * @type {Cartesian2}\n         */\n        currentMousePosition : {\n            get : function() {\n                return this._currentMousePosition;\n            }\n        },\n\n        /**\n         * Gets whether any mouse button is down, a touch has started, or the wheel has been moved.\n         * @memberof CameraEventAggregator.prototype\n         * @type {Boolean}\n         */\n        anyButtonDown : {\n            get : function() {\n                var wheelMoved = !this._update[getKey(CameraEventType.WHEEL)] ||\n                                 !this._update[getKey(CameraEventType.WHEEL, KeyboardEventModifier.SHIFT)] ||\n                                 !this._update[getKey(CameraEventType.WHEEL, KeyboardEventModifier.CTRL)] ||\n                                 !this._update[getKey(CameraEventType.WHEEL, KeyboardEventModifier.ALT)];\n                return this._buttonsDown > 0 || wheelMoved;\n            }\n        }\n    });\n\n    /**\n     * Gets if a mouse button down or touch has started and has been moved.\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Boolean} Returns <code>true</code> if a mouse button down or touch has started and has been moved; otherwise, <code>false</code>\n     */\n    CameraEventAggregator.prototype.isMoving = function(type, modifier) {\n        \n\n        var key = getKey(type, modifier);\n        return !this._update[key];\n    };\n\n    /**\n     * Gets the aggregated start and end position of the current event.\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Object} An object with two {@link Cartesian2} properties: <code>startPosition</code> and <code>endPosition</code>.\n     */\n    CameraEventAggregator.prototype.getMovement = function(type, modifier) {\n        \n\n        var key = getKey(type, modifier);\n        var movement = this._movement[key];\n        return movement;\n    };\n\n    /**\n     * Gets the start and end position of the last move event (not the aggregated event).\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Object|undefined} An object with two {@link Cartesian2} properties: <code>startPosition</code> and <code>endPosition</code> or <code>undefined</code>.\n     */\n    CameraEventAggregator.prototype.getLastMovement = function(type, modifier) {\n        \n\n        var key = getKey(type, modifier);\n        var lastMovement = this._lastMovement[key];\n        if (lastMovement.valid) {\n            return lastMovement;\n        }\n\n        return undefined;\n    };\n\n    /**\n     * Gets whether the mouse button is down or a touch has started.\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Boolean} Whether the mouse button is down or a touch has started.\n     */\n    CameraEventAggregator.prototype.isButtonDown = function(type, modifier) {\n        \n\n        var key = getKey(type, modifier);\n        return this._isDown[key];\n    };\n\n    /**\n     * Gets the mouse position that started the aggregation.\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Cartesian2} The mouse position.\n     */\n    CameraEventAggregator.prototype.getStartMousePosition = function(type, modifier) {\n        \n\n        if (type === CameraEventType.WHEEL) {\n            return this._currentMousePosition;\n        }\n\n        var key = getKey(type, modifier);\n        return this._eventStartPosition[key];\n    };\n\n    /**\n     * Gets the time the button was pressed or the touch was started.\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Date} The time the button was pressed or the touch was started.\n     */\n    CameraEventAggregator.prototype.getButtonPressTime = function(type, modifier) {\n        \n\n        var key = getKey(type, modifier);\n        return this._pressTime[key];\n    };\n\n    /**\n     * Gets the time the button was released or the touch was ended.\n     *\n     * @param {CameraEventType} type The camera event type.\n     * @param {KeyboardEventModifier} [modifier] The keyboard modifier.\n     * @returns {Date} The time the button was released or the touch was ended.\n     */\n    CameraEventAggregator.prototype.getButtonReleaseTime = function(type, modifier) {\n        \n\n        var key = getKey(type, modifier);\n        return this._releaseTime[key];\n    };\n\n    /**\n     * Signals that all of the events have been handled and the aggregator should be reset to handle new events.\n     */\n    CameraEventAggregator.prototype.reset = function() {\n        for ( var name in this._update) {\n            if (this._update.hasOwnProperty(name)) {\n                this._update[name] = true;\n            }\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see CameraEventAggregator#destroy\n     */\n    CameraEventAggregator.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes mouse listeners held by this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * handler = handler && handler.destroy();\n     *\n     * @see CameraEventAggregator#isDestroyed\n     */\n    CameraEventAggregator.prototype.destroy = function() {\n        this._eventHandler = this._eventHandler && this._eventHandler.destroy();\n        return destroyObject(this);\n    };\n\n    return CameraEventAggregator;\n});\n","define([\n        '../Core/defined',\n        '../Renderer/ShaderSource'\n    ], function(\n        defined,\n        ShaderSource) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function ShadowMapShader() {\n    }\n\n    ShadowMapShader.getShadowCastShaderKeyword = function(isPointLight, isTerrain, usesDepthTexture, isOpaque) {\n        return 'castShadow ' + isPointLight + ' ' + isTerrain + ' ' + usesDepthTexture + ' ' + isOpaque;\n    };\n\n    ShadowMapShader.createShadowCastVertexShader = function(vs, isPointLight, isTerrain) {\n        var defines = vs.defines.slice(0);\n        var sources = vs.sources.slice(0);\n\n        defines.push('SHADOW_MAP');\n\n        if (isTerrain) {\n            defines.push('GENERATE_POSITION');\n        }\n\n        var positionVaryingName = ShaderSource.findPositionVarying(vs);\n        var hasPositionVarying = defined(positionVaryingName);\n\n        if (isPointLight && !hasPositionVarying) {\n            var length = sources.length;\n            for (var j = 0; j < length; ++j) {\n                sources[j] = ShaderSource.replaceMain(sources[j], 'czm_shadow_cast_main');\n            }\n\n            var shadowVS =\n                'varying vec3 v_positionEC; \\n' +\n                'void main() \\n' +\n                '{ \\n' +\n                '    czm_shadow_cast_main(); \\n' +\n                '    v_positionEC = (czm_inverseProjection * gl_Position).xyz; \\n' +\n                '}';\n            sources.push(shadowVS);\n        }\n\n        return new ShaderSource({\n            defines : defines,\n            sources : sources\n        });\n    };\n\n    ShadowMapShader.createShadowCastFragmentShader = function(fs, isPointLight, usesDepthTexture, opaque) {\n        var defines = fs.defines.slice(0);\n        var sources = fs.sources.slice(0);\n\n        var positionVaryingName = ShaderSource.findPositionVarying(fs);\n        var hasPositionVarying = defined(positionVaryingName);\n        if (!hasPositionVarying) {\n            positionVaryingName = 'v_positionEC';\n        }\n\n        var length = sources.length;\n        for (var i = 0; i < length; ++i) {\n            sources[i] = ShaderSource.replaceMain(sources[i], 'czm_shadow_cast_main');\n        }\n\n        var fsSource = '';\n\n        if (isPointLight) {\n            if (!hasPositionVarying) {\n                fsSource += 'varying vec3 v_positionEC; \\n';\n            }\n            fsSource += 'uniform vec4 shadowMap_lightPositionEC; \\n';\n        }\n\n        if (opaque) {\n            fsSource +=\n                'void main() \\n' +\n                '{ \\n';\n        } else {\n            fsSource +=\n                'void main() \\n' +\n                '{ \\n' +\n                '    czm_shadow_cast_main(); \\n' +\n                '    if (gl_FragColor.a == 0.0) \\n' +\n                '    { \\n' +\n                '       discard; \\n' +\n                '    } \\n';\n        }\n\n        if (isPointLight) {\n            fsSource +=\n                '    float distance = length(' + positionVaryingName + '); \\n' +\n                '    if (distance >= shadowMap_lightPositionEC.w) \\n' +\n                '    { \\n' +\n                '        discard; \\n' +\n                '    } \\n' +\n                '    distance /= shadowMap_lightPositionEC.w; // radius \\n' +\n                '    gl_FragColor = czm_packDepth(distance); \\n';\n        } else if (usesDepthTexture) {\n            fsSource += '    gl_FragColor = vec4(1.0); \\n';\n        } else {\n            fsSource += '    gl_FragColor = czm_packDepth(gl_FragCoord.z); \\n';\n        }\n\n        fsSource += '} \\n';\n\n        sources.push(fsSource);\n\n        return new ShaderSource({\n            defines : defines,\n            sources : sources\n        });\n    };\n\n    ShadowMapShader.getShadowReceiveShaderKeyword = function(shadowMap, castShadows, isTerrain, hasTerrainNormal) {\n        var usesDepthTexture = shadowMap._usesDepthTexture;\n        var polygonOffsetSupported = shadowMap._polygonOffsetSupported;\n        var isPointLight = shadowMap._isPointLight;\n        var isSpotLight = shadowMap._isSpotLight;\n        var hasCascades = shadowMap._numberOfCascades > 1;\n        var debugCascadeColors = shadowMap.debugCascadeColors;\n        var softShadows = shadowMap.softShadows;\n\n        return 'receiveShadow ' + usesDepthTexture + polygonOffsetSupported + isPointLight + isSpotLight +\n               hasCascades + debugCascadeColors + softShadows + castShadows + isTerrain + hasTerrainNormal;\n    };\n\n    ShadowMapShader.createShadowReceiveVertexShader = function(vs, isTerrain, hasTerrainNormal) {\n        var defines = vs.defines.slice(0);\n        var sources = vs.sources.slice(0);\n\n        defines.push('SHADOW_MAP');\n\n        if (isTerrain) {\n            if (hasTerrainNormal) {\n                defines.push('GENERATE_POSITION_AND_NORMAL');\n            } else {\n                defines.push('GENERATE_POSITION');\n            }\n        }\n\n        return new ShaderSource({\n            defines : defines,\n            sources : sources\n        });\n    };\n\n    ShadowMapShader.createShadowReceiveFragmentShader = function(fs, shadowMap, castShadows, isTerrain, hasTerrainNormal) {\n        var normalVaryingName = ShaderSource.findNormalVarying(fs);\n        var hasNormalVarying = (!isTerrain && defined(normalVaryingName)) || (isTerrain && hasTerrainNormal);\n\n        var positionVaryingName = ShaderSource.findPositionVarying(fs);\n        var hasPositionVarying = defined(positionVaryingName);\n\n        var usesDepthTexture = shadowMap._usesDepthTexture;\n        var polygonOffsetSupported = shadowMap._polygonOffsetSupported;\n        var isPointLight = shadowMap._isPointLight;\n        var isSpotLight = shadowMap._isSpotLight;\n        var hasCascades = shadowMap._numberOfCascades > 1;\n        var debugCascadeColors = shadowMap.debugCascadeColors;\n        var softShadows = shadowMap.softShadows;\n        var bias = isPointLight ? shadowMap._pointBias : (isTerrain ? shadowMap._terrainBias : shadowMap._primitiveBias);\n\n        var defines = fs.defines.slice(0);\n        var sources = fs.sources.slice(0);\n\n        var length = sources.length;\n        for (var i = 0; i < length; ++i) {\n            sources[i] = ShaderSource.replaceMain(sources[i], 'czm_shadow_receive_main');\n        }\n\n        if (isPointLight) {\n            defines.push('USE_CUBE_MAP_SHADOW');\n        } else if (usesDepthTexture) {\n            defines.push('USE_SHADOW_DEPTH_TEXTURE');\n        }\n\n        if (softShadows && !isPointLight) {\n            defines.push('USE_SOFT_SHADOWS');\n        }\n\n        // Enable day-night shading so that the globe is dark when the light is below the horizon\n        if (hasCascades && castShadows && isTerrain) {\n            if (hasNormalVarying) {\n                defines.push('ENABLE_VERTEX_LIGHTING');\n            } else {\n                defines.push('ENABLE_DAYNIGHT_SHADING');\n            }\n        }\n\n        if (castShadows && bias.normalShading && hasNormalVarying) {\n            defines.push('USE_NORMAL_SHADING');\n            if (bias.normalShadingSmooth > 0.0) {\n                defines.push('USE_NORMAL_SHADING_SMOOTH');\n            }\n        }\n\n        var fsSource = '';\n\n        if (isPointLight) {\n            fsSource += 'uniform samplerCube shadowMap_textureCube; \\n';\n        } else {\n            fsSource += 'uniform sampler2D shadowMap_texture; \\n';\n        }\n\n        var returnPositionEC;\n        if (hasPositionVarying) {\n            returnPositionEC = '    return vec4(' + positionVaryingName + ', 1.0); \\n';\n        } else {\n            returnPositionEC =\n                '#ifndef LOG_DEPTH \\n' +\n                '    return czm_windowToEyeCoordinates(gl_FragCoord); \\n' +\n                '#else \\n' +\n                '    return vec4(v_logPositionEC, 1.0); \\n' +\n                '#endif \\n';\n        }\n\n        fsSource +=\n            'uniform mat4 shadowMap_matrix; \\n' +\n            'uniform vec3 shadowMap_lightDirectionEC; \\n' +\n            'uniform vec4 shadowMap_lightPositionEC; \\n' +\n            'uniform vec4 shadowMap_normalOffsetScaleDistanceMaxDistanceAndDarkness; \\n' +\n            'uniform vec4 shadowMap_texelSizeDepthBiasAndNormalShadingSmooth; \\n' +\n            '#ifdef LOG_DEPTH \\n' +\n            'varying vec3 v_logPositionEC; \\n' +\n            '#endif \\n' +\n            'vec4 getPositionEC() \\n' +\n            '{ \\n' +\n            returnPositionEC +\n            '} \\n' +\n            'vec3 getNormalEC() \\n' +\n            '{ \\n' +\n            (hasNormalVarying ?\n            '    return normalize(' + normalVaryingName + '); \\n' :\n            '    return vec3(1.0); \\n') +\n            '} \\n' +\n\n            // Offset the shadow position in the direction of the normal for perpendicular and back faces\n            'void applyNormalOffset(inout vec4 positionEC, vec3 normalEC, float nDotL) \\n' +\n            '{ \\n' +\n            (bias.normalOffset && hasNormalVarying ?\n            '    float normalOffset = shadowMap_normalOffsetScaleDistanceMaxDistanceAndDarkness.x; \\n' +\n            '    float normalOffsetScale = 1.0 - nDotL; \\n' +\n            '    vec3 offset = normalOffset * normalOffsetScale * normalEC; \\n' +\n            '    positionEC.xyz += offset; \\n' : '') +\n            '} \\n';\n\n        fsSource +=\n            'void main() \\n' +\n            '{ \\n' +\n            '    czm_shadow_receive_main(); \\n' +\n            '    vec4 positionEC = getPositionEC(); \\n' +\n            '    vec3 normalEC = getNormalEC(); \\n' +\n            '    float depth = -positionEC.z; \\n';\n\n        fsSource +=\n            '    czm_shadowParameters shadowParameters; \\n' +\n            '    shadowParameters.texelStepSize = shadowMap_texelSizeDepthBiasAndNormalShadingSmooth.xy; \\n' +\n            '    shadowParameters.depthBias = shadowMap_texelSizeDepthBiasAndNormalShadingSmooth.z; \\n' +\n            '    shadowParameters.normalShadingSmooth = shadowMap_texelSizeDepthBiasAndNormalShadingSmooth.w; \\n' +\n            '    shadowParameters.darkness = shadowMap_normalOffsetScaleDistanceMaxDistanceAndDarkness.w; \\n';\n\n        if (isTerrain) {\n            // Scale depth bias based on view distance to reduce z-fighting in distant terrain\n            fsSource += '    shadowParameters.depthBias *= max(depth * 0.01, 1.0); \\n';\n        } else if (!polygonOffsetSupported) {\n            // If polygon offset isn't supported push the depth back based on view, however this\n            // causes light leaking at further away views\n            fsSource += '    shadowParameters.depthBias *= mix(1.0, 100.0, depth * 0.0015); \\n';\n        }\n\n        if (isPointLight) {\n            fsSource +=\n                '    vec3 directionEC = positionEC.xyz - shadowMap_lightPositionEC.xyz; \\n' +\n                '    float distance = length(directionEC); \\n' +\n                '    directionEC = normalize(directionEC); \\n' +\n                '    float radius = shadowMap_lightPositionEC.w; \\n' +\n                '    // Stop early if the fragment is beyond the point light radius \\n' +\n                '    if (distance > radius) \\n' +\n                '    { \\n' +\n                '        return; \\n' +\n                '    } \\n' +\n                '    vec3 directionWC  = czm_inverseViewRotation * directionEC; \\n' +\n\n                '    shadowParameters.depth = distance / radius; \\n' +\n                '    shadowParameters.nDotL = clamp(dot(normalEC, -directionEC), 0.0, 1.0); \\n' +\n\n                '    shadowParameters.texCoords = directionWC; \\n' +\n                '    float visibility = czm_shadowVisibility(shadowMap_textureCube, shadowParameters); \\n';\n        } else if (isSpotLight) {\n            fsSource +=\n                '    vec3 directionEC = normalize(positionEC.xyz - shadowMap_lightPositionEC.xyz); \\n' +\n                '    float nDotL = clamp(dot(normalEC, -directionEC), 0.0, 1.0); \\n' +\n                '    applyNormalOffset(positionEC, normalEC, nDotL); \\n' +\n\n                '    vec4 shadowPosition = shadowMap_matrix * positionEC; \\n' +\n                '    // Spot light uses a perspective projection, so perform the perspective divide \\n' +\n                '    shadowPosition /= shadowPosition.w; \\n' +\n\n                '    // Stop early if the fragment is not in the shadow bounds \\n' +\n                '    if (any(lessThan(shadowPosition.xyz, vec3(0.0))) || any(greaterThan(shadowPosition.xyz, vec3(1.0)))) \\n' +\n                '    { \\n' +\n                '        return; \\n' +\n                '    } \\n' +\n\n                '    shadowParameters.texCoords = shadowPosition.xy; \\n' +\n                '    shadowParameters.depth = shadowPosition.z; \\n' +\n                '    shadowParameters.nDotL = nDotL; \\n' +\n\n                '    float visibility = czm_shadowVisibility(shadowMap_texture, shadowParameters); \\n';\n        } else if (hasCascades) {\n            fsSource +=\n                '    float maxDepth = shadowMap_cascadeSplits[1].w; \\n' +\n\n                '    // Stop early if the eye depth exceeds the last cascade \\n' +\n                '    if (depth > maxDepth) \\n' +\n                '    { \\n' +\n                '        return; \\n' +\n                '    } \\n' +\n\n                '    // Get the cascade based on the eye-space depth \\n' +\n                '    vec4 weights = czm_cascadeWeights(depth); \\n' +\n\n                '    // Apply normal offset \\n' +\n                '    float nDotL = clamp(dot(normalEC, shadowMap_lightDirectionEC), 0.0, 1.0); \\n' +\n                '    applyNormalOffset(positionEC, normalEC, nDotL); \\n' +\n\n                '    // Transform position into the cascade \\n' +\n                '    vec4 shadowPosition = czm_cascadeMatrix(weights) * positionEC; \\n' +\n\n                '    // Get visibility \\n' +\n                '    shadowParameters.texCoords = shadowPosition.xy; \\n' +\n                '    shadowParameters.depth = shadowPosition.z; \\n' +\n                '    shadowParameters.nDotL = nDotL; \\n' +\n                '    float visibility = czm_shadowVisibility(shadowMap_texture, shadowParameters); \\n' +\n\n                '    // Fade out shadows that are far away \\n' +\n                '    float shadowMapMaximumDistance = shadowMap_normalOffsetScaleDistanceMaxDistanceAndDarkness.z; \\n' +\n                '    float fade = max((depth - shadowMapMaximumDistance * 0.8) / (shadowMapMaximumDistance * 0.2), 0.0); \\n' +\n                '    visibility = mix(visibility, 1.0, fade); \\n' +\n\n                (debugCascadeColors ?\n                '    // Draw cascade colors for debugging \\n' +\n                '    gl_FragColor *= czm_cascadeColor(weights); \\n' : '');\n        } else {\n            fsSource +=\n                '    float nDotL = clamp(dot(normalEC, shadowMap_lightDirectionEC), 0.0, 1.0); \\n' +\n                '    applyNormalOffset(positionEC, normalEC, nDotL); \\n' +\n                '    vec4 shadowPosition = shadowMap_matrix * positionEC; \\n' +\n\n                '    // Stop early if the fragment is not in the shadow bounds \\n' +\n                '    if (any(lessThan(shadowPosition.xyz, vec3(0.0))) || any(greaterThan(shadowPosition.xyz, vec3(1.0)))) \\n' +\n                '    { \\n' +\n                '        return; \\n' +\n                '    } \\n' +\n\n                '    shadowParameters.texCoords = shadowPosition.xy; \\n' +\n                '    shadowParameters.depth = shadowPosition.z; \\n' +\n                '    shadowParameters.nDotL = nDotL; \\n' +\n                '    float visibility = czm_shadowVisibility(shadowMap_texture, shadowParameters); \\n';\n        }\n\n        fsSource +=\n            '    gl_FragColor.rgb *= visibility; \\n' +\n            '} \\n';\n\n        sources.push(fsSource);\n\n        return new ShaderSource({\n            defines : defines,\n            sources : sources\n        });\n    };\n\n    return ShadowMapShader;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/Cartesian2',\n        '../Core/Cartesian4',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/Transforms',\n        '../Shaders/PostProcessStages/AdditiveBlend',\n        '../Shaders/PostProcessStages/BrightPass',\n        '../Shaders/PostProcessStages/GaussianBlur1D',\n        '../Shaders/PostProcessStages/PassThrough',\n        './PostProcessStage',\n        './PostProcessStageComposite',\n        './PostProcessStageSampleMode',\n        './PostProcessStageTextureCache',\n        './SceneFramebuffer'\n    ], function(\n        BoundingRectangle,\n        Cartesian2,\n        Cartesian4,\n        defined,\n        destroyObject,\n        CesiumMath,\n        Matrix4,\n        Transforms,\n        AdditiveBlend,\n        BrightPass,\n        GaussianBlur1D,\n        PassThrough,\n        PostProcessStage,\n        PostProcessStageComposite,\n        PostProcessStageSampleMode,\n        PostProcessStageTextureCache,\n        SceneFramebuffer) {\n    'use strict';\n\n    function SunPostProcess() {\n        this._sceneFramebuffer = new SceneFramebuffer();\n\n        var scale = 0.125;\n        var stages = new Array(6);\n\n        stages[0] = new PostProcessStage({\n            fragmentShader : PassThrough,\n            textureScale : scale,\n            forcePowerOfTwo : true,\n            sampleMode : PostProcessStageSampleMode.LINEAR\n        });\n\n        var brightPass = stages[1] = new PostProcessStage({\n            fragmentShader : BrightPass,\n            uniforms : {\n                avgLuminance : 0.5, // A guess at the average luminance across the entire scene\n                threshold : 0.25,\n                offset : 0.1\n            },\n            textureScale : scale,\n            forcePowerOfTwo : true\n        });\n\n        var that = this;\n        this._delta = 1.0;\n        this._sigma = 2.0;\n        this._blurStep = new Cartesian2();\n\n        stages[2] = new PostProcessStage({\n            fragmentShader : GaussianBlur1D,\n            uniforms : {\n                step : function() {\n                    that._blurStep.x = that._blurStep.y = 1.0 / brightPass.outputTexture.width;\n                    return that._blurStep;\n                },\n                delta : function() {\n                    return that._delta;\n                },\n                sigma : function() {\n                    return that._sigma;\n                },\n                direction : 0.0\n            },\n            textureScale : scale,\n            forcePowerOfTwo : true\n        });\n\n        stages[3] = new PostProcessStage({\n            fragmentShader : GaussianBlur1D,\n            uniforms : {\n                step : function() {\n                    that._blurStep.x = that._blurStep.y = 1.0 / brightPass.outputTexture.width;\n                    return that._blurStep;\n                },\n                delta : function() {\n                    return that._delta;\n                },\n                sigma : function() {\n                    return that._sigma;\n                },\n                direction : 1.0\n            },\n            textureScale : scale,\n            forcePowerOfTwo : true\n        });\n\n        stages[4] = new PostProcessStage({\n            fragmentShader : PassThrough,\n            sampleMode : PostProcessStageSampleMode.LINEAR\n        });\n\n        this._uCenter = new Cartesian2();\n        this._uRadius = undefined;\n\n        stages[5] = new PostProcessStage({\n            fragmentShader : AdditiveBlend,\n            uniforms : {\n                center : function() {\n                    return that._uCenter;\n                },\n                radius : function() {\n                    return that._uRadius;\n                },\n                colorTexture2 : function() {\n                    return that._sceneFramebuffer.getFramebuffer().getColorTexture(0);\n                }\n            }\n        });\n\n        this._stages = new PostProcessStageComposite({\n            stages : stages\n        });\n\n        var textureCache = new PostProcessStageTextureCache(this);\n        var length = stages.length;\n        for (var i = 0; i < length; ++i) {\n            stages[i]._textureCache = textureCache;\n        }\n\n        this._textureCache = textureCache;\n        this.length = stages.length;\n    }\n\n    SunPostProcess.prototype.get = function(index) {\n        return this._stages.get(index);\n    };\n\n    SunPostProcess.prototype.getStageByName = function(name) {\n        var length = this._stages.length;\n        for (var i = 0; i < length; ++i) {\n            var stage = this._stages.get(i);\n            if (stage.name === name) {\n                return stage;\n            }\n        }\n        return undefined;\n    };\n\n    var sunPositionECScratch = new Cartesian4();\n    var sunPositionWCScratch = new Cartesian2();\n    var sizeScratch = new Cartesian2();\n    var postProcessMatrix4Scratch= new Matrix4();\n\n    function updateSunPosition(postProcess, context, viewport) {\n        var us = context.uniformState;\n        var sunPosition = us.sunPositionWC;\n        var viewMatrix = us.view;\n        var viewProjectionMatrix = us.viewProjection;\n        var projectionMatrix = us.projection;\n\n        // create up sampled render state\n        var viewportTransformation = Matrix4.computeViewportTransformation(viewport, 0.0, 1.0, postProcessMatrix4Scratch);\n        var sunPositionEC = Matrix4.multiplyByPoint(viewMatrix, sunPosition, sunPositionECScratch);\n        var sunPositionWC = Transforms.pointToGLWindowCoordinates(viewProjectionMatrix, viewportTransformation, sunPosition, sunPositionWCScratch);\n\n        sunPositionEC.x += CesiumMath.SOLAR_RADIUS;\n        var limbWC = Transforms.pointToGLWindowCoordinates(projectionMatrix, viewportTransformation, sunPositionEC, sunPositionEC);\n        var sunSize = Cartesian2.magnitude(Cartesian2.subtract(limbWC, sunPositionWC, limbWC)) * 30.0 * 2.0;\n\n        var size = sizeScratch;\n        size.x = sunSize;\n        size.y = sunSize;\n\n        postProcess._uCenter = Cartesian2.clone(sunPositionWC, postProcess._uCenter);\n        postProcess._uRadius = Math.max(size.x, size.y) * 0.15;\n\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight;\n\n        var stages = postProcess._stages;\n        var firstStage = stages.get(0);\n\n        var downSampleWidth = firstStage.outputTexture.width;\n        var downSampleHeight = firstStage.outputTexture.height;\n\n        var downSampleViewport = new BoundingRectangle();\n        downSampleViewport.width = downSampleWidth;\n        downSampleViewport.height = downSampleHeight;\n\n        // create down sampled render state\n        viewportTransformation = Matrix4.computeViewportTransformation(downSampleViewport, 0.0, 1.0, postProcessMatrix4Scratch);\n        sunPositionWC = Transforms.pointToGLWindowCoordinates(viewProjectionMatrix, viewportTransformation, sunPosition, sunPositionWCScratch);\n\n        size.x *= downSampleWidth / width;\n        size.y *= downSampleHeight / height;\n\n        var scissorRectangle = firstStage.scissorRectangle;\n        scissorRectangle.x = Math.max(sunPositionWC.x - size.x * 0.5, 0.0);\n        scissorRectangle.y = Math.max(sunPositionWC.y - size.y * 0.5, 0.0);\n        scissorRectangle.width = Math.min(size.x, width);\n        scissorRectangle.height = Math.min(size.y, height);\n\n        for (var i = 1; i < 4; ++i) {\n            BoundingRectangle.clone(scissorRectangle, stages.get(i).scissorRectangle);\n        }\n    }\n\n    SunPostProcess.prototype.clear = function(context, passState, clearColor) {\n        this._sceneFramebuffer.clear(context, passState, clearColor);\n        this._textureCache.clear(context);\n    };\n\n    SunPostProcess.prototype.update = function(passState) {\n        var context = passState.context;\n        var viewport = passState.viewport;\n\n        var sceneFramebuffer = this._sceneFramebuffer;\n        sceneFramebuffer.update(context, viewport);\n        var framebuffer = sceneFramebuffer.getFramebuffer();\n\n        this._textureCache.update(context);\n        this._stages.update(context, false);\n\n        updateSunPosition(this, context, viewport);\n\n        return framebuffer;\n    };\n\n    SunPostProcess.prototype.execute = function(context) {\n        var colorTexture = this._sceneFramebuffer.getFramebuffer().getColorTexture(0);\n        var stages = this._stages;\n        var length = stages.length;\n        stages.get(0).execute(context, colorTexture);\n        for (var i = 1; i < length; ++i) {\n            stages.get(i).execute(context, stages.get(i - 1).outputTexture);\n        }\n    };\n\n    SunPostProcess.prototype.copy = function(context, framebuffer) {\n        if (!defined(this._copyColorCommand)) {\n            var that = this;\n            this._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n                uniformMap : {\n                    colorTexture : function() {\n                        return that._stages.get(that._stages.length - 1).outputTexture;\n                    }\n                },\n                owner : this\n            });\n        }\n\n        this._copyColorCommand.framebuffer = framebuffer;\n        this._copyColorCommand.execute(context);\n    };\n\n    SunPostProcess.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    SunPostProcess.prototype.destroy = function() {\n        this._textureCache.destroy();\n        this._stages.destroy();\n        return destroyObject(this);\n    };\n\n    return SunPostProcess;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\nuniform sampler2D colorTexture2;\\n\\\n\\n\\\nuniform vec2 center;\\n\\\nuniform float radius;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color0 = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec4 color1 = texture2D(colorTexture2, v_textureCoordinates);\\n\\\n\\n\\\n    float x = length(gl_FragCoord.xy - center) / radius;\\n\\\n    float t = smoothstep(0.5, 0.8, x);\\n\\\n    gl_FragColor = mix(color0 + color1, color1, t);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nuniform float avgLuminance;\\n\\\nuniform float threshold;\\n\\\nuniform float offset;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nfloat key(float avg)\\n\\\n{\\n\\\n    float guess = 1.5 - (1.5 / (avg * 0.1 + 1.0));\\n\\\n    return max(0.0, guess) + 0.1;\\n\\\n}\\n\\\n\\n\\\n// See section 9. \\\"The bright-pass filter\\\" of Realtime HDR Rendering\\n\\\n// http://www.cg.tuwien.ac.at/research/publications/2007/Luksch_2007_RHR/Luksch_2007_RHR-RealtimeHDR%20.pdf\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n\\\n    vec3 xyz = czm_RGBToXYZ(color.rgb);\\n\\\n    float luminance = xyz.r;\\n\\\n\\n\\\n    float scaledLum = key(avgLuminance) * luminance / avgLuminance;\\n\\\n    float brightLum = max(scaledLum - threshold, 0.0);\\n\\\n    float brightness = brightLum / (offset + brightLum);\\n\\\n\\n\\\n    xyz.r = brightness;\\n\\\n    gl_FragColor = vec4(czm_XYZToRGB(xyz), 1.0);\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/BoundingRectangle',\n        '../Core/Cartesian3',\n        '../Core/CullingVolume',\n        '../Core/defined',\n        '../Core/getTimestamp',\n        '../Core/Interval',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/OrthographicFrustum',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Renderer/ClearCommand',\n        '../Renderer/Pass',\n        '../Renderer/PassState',\n        './Camera',\n        './FrustumCommands',\n        './GlobeDepth',\n        './OIT',\n        './PickDepthFramebuffer',\n        './PickFramebuffer',\n        './SceneFramebuffer',\n        './SceneMode',\n        './ShadowMap'\n    ], function(\n        BoundingRectangle,\n        Cartesian3,\n        CullingVolume,\n        defined,\n        getTimestamp,\n        Interval,\n        CesiumMath,\n        Matrix4,\n        OrthographicFrustum,\n        OrthographicOffCenterFrustum,\n        ClearCommand,\n        Pass,\n        PassState,\n        Camera,\n        FrustumCommands,\n        GlobeDepth,\n        OIT,\n        PickDepthFramebuffer,\n        PickFramebuffer,\n        SceneFramebuffer,\n        SceneMode,\n        ShadowMap) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function View(scene, camera, viewport) {\n        var context = scene.context;\n\n        var frustumCommandsList = [];\n\n        // Initial guess at frustums.\n        var near = camera.frustum.near;\n        var far = camera.frustum.far;\n        var farToNearRatio = scene.logarithmicDepthBuffer ? scene.logarithmicDepthFarToNearRatio : scene.farToNearRatio;\n\n        var numFrustums = Math.ceil(Math.log(far / near) / Math.log(farToNearRatio));\n        updateFrustums(near, far, farToNearRatio, numFrustums, scene.logarithmicDepthBuffer, frustumCommandsList, false, undefined);\n\n        var globeDepth;\n        if (context.depthTexture) {\n            globeDepth = new GlobeDepth();\n        }\n\n        var oit;\n        if (scene._useOIT && context.depthTexture) {\n            oit = new OIT(context);\n        }\n\n        var passState = new PassState(context);\n        passState.viewport = BoundingRectangle.clone(viewport);\n\n        this.camera = camera;\n        this._cameraClone = Camera.clone(camera);\n        this._cameraStartFired = false;\n        this._cameraMovedTime = undefined;\n\n        this.viewport = viewport;\n        this.passState = passState;\n        this.pickFramebuffer = new PickFramebuffer(context);\n        this.pickDepthFramebuffer = new PickDepthFramebuffer();\n        this.sceneFramebuffer = new SceneFramebuffer();\n        this.globeDepth = globeDepth;\n        this.oit = oit;\n        this.pickDepths = [];\n        this.debugGlobeDepths = [];\n        this.frustumCommandsList = frustumCommandsList;\n        this.debugFrustumStatistics = undefined;\n        this.updateFrustums = false;\n    }\n\n    var scratchPosition0 = new Cartesian3();\n    var scratchPosition1 = new Cartesian3();\n    function maxComponent(a, b) {\n        var x = Math.max(Math.abs(a.x), Math.abs(b.x));\n        var y = Math.max(Math.abs(a.y), Math.abs(b.y));\n        var z = Math.max(Math.abs(a.z), Math.abs(b.z));\n        return Math.max(Math.max(x, y), z);\n    }\n\n    function cameraEqual(camera0, camera1, epsilon) {\n        var scalar = 1 / Math.max(1, maxComponent(camera0.position, camera1.position));\n        Cartesian3.multiplyByScalar(camera0.position, scalar, scratchPosition0);\n        Cartesian3.multiplyByScalar(camera1.position, scalar, scratchPosition1);\n        return Cartesian3.equalsEpsilon(scratchPosition0, scratchPosition1, epsilon) &&\n               Cartesian3.equalsEpsilon(camera0.direction, camera1.direction, epsilon) &&\n               Cartesian3.equalsEpsilon(camera0.up, camera1.up, epsilon) &&\n               Cartesian3.equalsEpsilon(camera0.right, camera1.right, epsilon) &&\n               Matrix4.equalsEpsilon(camera0.transform, camera1.transform, epsilon) &&\n               camera0.frustum.equalsEpsilon(camera1.frustum, epsilon);\n    }\n\n    View.prototype.checkForCameraUpdates = function(scene) {\n        var camera = this.camera;\n        var cameraClone = this._cameraClone;\n        if (!cameraEqual(camera, cameraClone, CesiumMath.EPSILON15)) {\n            if (!this._cameraStartFired) {\n                camera.moveStart.raiseEvent();\n                this._cameraStartFired = true;\n            }\n            this._cameraMovedTime = getTimestamp();\n            Camera.clone(camera, cameraClone);\n\n            return true;\n        }\n\n        if (this._cameraStartFired && getTimestamp() - this._cameraMovedTime > scene.cameraEventWaitTime) {\n            camera.moveEnd.raiseEvent();\n            this._cameraStartFired = false;\n        }\n\n        return false;\n    };\n\n    function updateFrustums(near, far, farToNearRatio, numFrustums, logDepth, frustumCommandsList, is2D, nearToFarDistance2D) {\n        frustumCommandsList.length = numFrustums;\n        for (var m = 0; m < numFrustums; ++m) {\n            var curNear;\n            var curFar;\n\n            if (is2D) {\n                curNear = Math.min(far - nearToFarDistance2D, near + m * nearToFarDistance2D);\n                curFar = Math.min(far, curNear + nearToFarDistance2D);\n            } else  {\n                curNear = Math.max(near, Math.pow(farToNearRatio, m) * near);\n                curFar = farToNearRatio * curNear;\n                if (!logDepth) {\n                    curFar = Math.min(far, curFar);\n                }\n            }\n\n            var frustumCommands = frustumCommandsList[m];\n            if (!defined(frustumCommands)) {\n                frustumCommands = frustumCommandsList[m] = new FrustumCommands(curNear, curFar);\n            } else {\n                frustumCommands.near = curNear;\n                frustumCommands.far = curFar;\n            }\n        }\n    }\n\n    function insertIntoBin(scene, view, command, distance) {\n        if (scene.debugShowFrustums) {\n            command.debugOverlappingFrustums = 0;\n        }\n\n        var frustumCommandsList = view.frustumCommandsList;\n        var length = frustumCommandsList.length;\n\n        for (var i = 0; i < length; ++i) {\n            var frustumCommands = frustumCommandsList[i];\n            var curNear = frustumCommands.near;\n            var curFar = frustumCommands.far;\n\n            if (distance.start > curFar) {\n                continue;\n            }\n\n            if (distance.stop < curNear) {\n                break;\n            }\n\n            var pass = command.pass;\n            var index = frustumCommands.indices[pass]++;\n            frustumCommands.commands[pass][index] = command;\n\n            if (scene.debugShowFrustums) {\n                command.debugOverlappingFrustums |= (1 << i);\n            }\n\n            if (command.executeInClosestFrustum) {\n                break;\n            }\n        }\n\n        if (scene.debugShowFrustums) {\n            var cf = view.debugFrustumStatistics.commandsInFrustums;\n            cf[command.debugOverlappingFrustums] = defined(cf[command.debugOverlappingFrustums]) ? cf[command.debugOverlappingFrustums] + 1 : 1;\n            ++view.debugFrustumStatistics.totalCommands;\n        }\n\n        scene.updateDerivedCommands(command);\n    }\n\n    var scratchCullingVolume = new CullingVolume();\n    var distances = new Interval();\n\n    View.prototype.createPotentiallyVisibleSet = function(scene) {\n        var frameState = scene.frameState;\n        var camera = frameState.camera;\n        var direction = camera.directionWC;\n        var position = camera.positionWC;\n\n        var computeList = scene._computeCommandList;\n        var overlayList = scene._overlayCommandList;\n        var commandList = frameState.commandList;\n\n        if (scene.debugShowFrustums) {\n            this.debugFrustumStatistics = {\n                totalCommands : 0,\n                commandsInFrustums : {}\n            };\n        }\n\n        var frustumCommandsList = this.frustumCommandsList;\n        var numberOfFrustums = frustumCommandsList.length;\n        var numberOfPasses = Pass.NUMBER_OF_PASSES;\n        for (var n = 0; n < numberOfFrustums; ++n) {\n            for (var p = 0; p < numberOfPasses; ++p) {\n                frustumCommandsList[n].indices[p] = 0;\n            }\n        }\n\n        computeList.length = 0;\n        overlayList.length = 0;\n\n        var near = Number.MAX_VALUE;\n        var far = -Number.MAX_VALUE;\n        var undefBV = false;\n\n        var shadowsEnabled = frameState.shadowState.shadowsEnabled;\n        var shadowNear = Number.MAX_VALUE;\n        var shadowFar = -Number.MAX_VALUE;\n        var shadowClosestObjectSize = Number.MAX_VALUE;\n\n        var occluder = (frameState.mode === SceneMode.SCENE3D) ? frameState.occluder: undefined;\n        var cullingVolume = frameState.cullingVolume;\n\n        // get user culling volume minus the far plane.\n        var planes = scratchCullingVolume.planes;\n        for (var k = 0; k < 5; ++k) {\n            planes[k] = cullingVolume.planes[k];\n        }\n        cullingVolume = scratchCullingVolume;\n\n        var length = commandList.length;\n        for (var i = 0; i < length; ++i) {\n            var command = commandList[i];\n            var pass = command.pass;\n\n            if (pass === Pass.COMPUTE) {\n                computeList.push(command);\n            } else if (pass === Pass.OVERLAY) {\n                overlayList.push(command);\n            } else {\n                var boundingVolume = command.boundingVolume;\n                if (defined(boundingVolume)) {\n                    if (!scene.isVisible(command, cullingVolume, occluder)) {\n                        continue;\n                    }\n\n                    distances = boundingVolume.computePlaneDistances(position, direction, distances);\n                    near = Math.min(near, distances.start);\n                    far = Math.max(far, distances.stop);\n\n                    // Compute a tight near and far plane for commands that receive shadows. This helps compute\n                    // good splits for cascaded shadow maps. Ignore commands that exceed the maximum distance.\n                    // When moving the camera low LOD globe tiles begin to load, whose bounding volumes\n                    // throw off the near/far fitting for the shadow map. Only update for globe tiles that the\n                    // camera isn't inside.\n                    if (shadowsEnabled && command.receiveShadows && (distances.start < ShadowMap.MAXIMUM_DISTANCE) &&\n                        !((pass === Pass.GLOBE) && (distances.start < -100.0) && (distances.stop > 100.0))) {\n\n                        // Get the smallest bounding volume the camera is near. This is used to place more shadow detail near the object.\n                        var size = distances.stop - distances.start;\n                        if ((pass !== Pass.GLOBE) && (distances.start < 100.0)) {\n                            shadowClosestObjectSize = Math.min(shadowClosestObjectSize, size);\n                        }\n                        shadowNear = Math.min(shadowNear, distances.start);\n                        shadowFar = Math.max(shadowFar, distances.stop);\n                    }\n                } else {\n                    // Clear commands don't need a bounding volume - just add the clear to all frustums.\n                    // If another command has no bounding volume, though, we need to use the camera's\n                    // worst-case near and far planes to avoid clipping something important.\n                    distances.start = camera.frustum.near;\n                    distances.stop = camera.frustum.far;\n                    undefBV = !(command instanceof ClearCommand);\n                }\n\n                insertIntoBin(scene, this, command, distances);\n            }\n        }\n\n        if (undefBV) {\n            near = camera.frustum.near;\n            far = camera.frustum.far;\n        } else {\n            // The computed near plane must be between the user defined near and far planes.\n            // The computed far plane must between the user defined far and computed near.\n            // This will handle the case where the computed near plane is further than the user defined far plane.\n            near = Math.min(Math.max(near, camera.frustum.near), camera.frustum.far);\n            far = Math.max(Math.min(far, camera.frustum.far), near);\n\n            if (shadowsEnabled) {\n                shadowNear = Math.min(Math.max(shadowNear, camera.frustum.near), camera.frustum.far);\n                shadowFar = Math.max(Math.min(shadowFar, camera.frustum.far), shadowNear);\n            }\n        }\n\n        // Use the computed near and far for shadows\n        if (shadowsEnabled) {\n            frameState.shadowState.nearPlane = shadowNear;\n            frameState.shadowState.farPlane = shadowFar;\n            frameState.shadowState.closestObjectSize = shadowClosestObjectSize;\n        }\n\n        // Exploit temporal coherence. If the frustums haven't changed much, use the frustums computed\n        // last frame, else compute the new frustums and sort them by frustum again.\n        var is2D = scene.mode === SceneMode.SCENE2D;\n        var logDepth = frameState.useLogDepth;\n        var farToNearRatio = logDepth ? scene.logarithmicDepthFarToNearRatio : scene.farToNearRatio;\n        var numFrustums;\n\n        if (is2D) {\n            // The multifrustum for 2D is uniformly distributed. To avoid z-fighting in 2D,\n            // the camera is moved to just before the frustum and the frustum depth is scaled\n            // to be in [1.0, nearToFarDistance2D].\n            far = Math.min(far, camera.position.z + scene.nearToFarDistance2D);\n            near = Math.min(near, far);\n            numFrustums = Math.ceil(Math.max(1.0, far - near) / scene.nearToFarDistance2D);\n        } else {\n            // The multifrustum for 3D/CV is non-uniformly distributed.\n            numFrustums = Math.ceil(Math.log(far / near) / Math.log(farToNearRatio));\n        }\n\n        if (this.updateFrustums || (near !== Number.MAX_VALUE && (numFrustums !== numberOfFrustums || (frustumCommandsList.length !== 0 &&\n                (near < frustumCommandsList[0].near || (far > frustumCommandsList[numberOfFrustums - 1].far && (logDepth || !CesiumMath.equalsEpsilon(far, frustumCommandsList[numberOfFrustums - 1].far, CesiumMath.EPSILON8)))))))) {\n            this.updateFrustums = false;\n            updateFrustums(near, far, farToNearRatio, numFrustums, logDepth, frustumCommandsList, is2D, scene.nearToFarDistance2D);\n            this.createPotentiallyVisibleSet(scene);\n        }\n\n        var frustumSplits = frameState.frustumSplits;\n        frustumSplits.length = numFrustums + 1;\n        for (var j = 0; j < numFrustums; ++j) {\n            frustumSplits[j] = frustumCommandsList[j].near;\n            if (j === numFrustums - 1) {\n                frustumSplits[j + 1] = frustumCommandsList[j].far;\n            }\n        }\n    };\n\n    View.prototype.destroy = function() {\n        this.pickFramebuffer = this.pickFramebuffer && this.pickFramebuffer.destroy();\n        this.pickDepthFramebuffer = this.pickDepthFramebuffer && this.pickDepthFramebuffer.destroy();\n        this.sceneFramebuffer = this.sceneFramebuffer && this.sceneFramebuffer.destroy();\n        this.globeDepth = this.globeDepth && this.globeDepth.destroy();\n        this.oit = this.oit && this.oit.destroy();\n\n        var i;\n        var length;\n\n        var pickDepths = this.pickDepths;\n        var debugGlobeDepths = this.debugGlobeDepths;\n\n        length = pickDepths.length;\n        for (i = 0; i < length; ++i) {\n            pickDepths[i].destroy();\n        }\n\n        length = debugGlobeDepths.length;\n        for (i = 0; i < length; ++i) {\n            debugGlobeDepths[i].destroy();\n        }\n    };\n\n    return View;\n});\n","define([\n        '../Core/defaultValue',\n        '../Renderer/Pass'\n    ], function(\n        defaultValue,\n        Pass) {\n    'use strict';\n\n    /**\n     * Defines a list of commands whose geometry are bound by near and far distances from the camera.\n     * @alias FrustumCommands\n     * @constructor\n     *\n     * @param {Number} [near=0.0] The lower bound or closest distance from the camera.\n     * @param {Number} [far=0.0] The upper bound or farthest distance from the camera.\n     *\n     * @private\n     */\n    function FrustumCommands(near, far) {\n        this.near = defaultValue(near, 0.0);\n        this.far = defaultValue(far, 0.0);\n\n        var numPasses = Pass.NUMBER_OF_PASSES;\n        var commands = new Array(numPasses);\n        var indices = new Array(numPasses);\n\n        for (var i = 0; i < numPasses; ++i) {\n            commands[i] = [];\n            indices[i] = 0;\n        }\n\n        this.commands = commands;\n        this.indices = indices;\n    }\n\n    return FrustumCommands;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Core/WebGLConstants',\n        '../Renderer/ClearCommand',\n        '../Renderer/DrawCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderSource',\n        '../Renderer/Texture',\n        '../Shaders/AdjustTranslucentFS',\n        '../Shaders/CompositeOITFS',\n        './BlendEquation',\n        './BlendFunction'\n    ], function(\n        BoundingRectangle,\n        Color,\n        defined,\n        destroyObject,\n        PixelFormat,\n        WebGLConstants,\n        ClearCommand,\n        DrawCommand,\n        Framebuffer,\n        PixelDatatype,\n        RenderState,\n        ShaderSource,\n        Texture,\n        AdjustTranslucentFS,\n        CompositeOITFS,\n        BlendEquation,\n        BlendFunction) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function OIT(context) {\n        // We support multipass for the Chrome D3D9 backend and ES 2.0 on mobile.\n        this._translucentMultipassSupport = false;\n        this._translucentMRTSupport = false;\n\n        var extensionsSupported = context.colorBufferFloat && context.depthTexture;\n        this._translucentMRTSupport = context.drawBuffers && extensionsSupported;\n        this._translucentMultipassSupport = !this._translucentMRTSupport && extensionsSupported;\n\n        this._opaqueFBO = undefined;\n        this._opaqueTexture = undefined;\n        this._depthStencilTexture = undefined;\n\n        this._accumulationTexture = undefined;\n\n        this._translucentFBO = undefined;\n        this._alphaFBO = undefined;\n\n        this._adjustTranslucentFBO = undefined;\n        this._adjustAlphaFBO = undefined;\n\n        this._opaqueClearCommand = new ClearCommand({\n            color : new Color(0.0, 0.0, 0.0, 0.0),\n            owner : this\n        });\n        this._translucentMRTClearCommand = new ClearCommand({\n            color : new Color(0.0, 0.0, 0.0, 1.0),\n            owner : this\n        });\n        this._translucentMultipassClearCommand = new ClearCommand({\n            color : new Color(0.0, 0.0, 0.0, 0.0),\n            owner : this\n        });\n        this._alphaClearCommand = new ClearCommand({\n            color : new Color(1.0, 1.0, 1.0, 1.0),\n            owner : this\n        });\n\n        this._translucentRenderStateCache = {};\n        this._alphaRenderStateCache = {};\n\n        this._compositeCommand = undefined;\n        this._adjustTranslucentCommand = undefined;\n        this._adjustAlphaCommand = undefined;\n\n        this._viewport = new BoundingRectangle();\n        this._rs = undefined;\n\n        this._useScissorTest = false;\n        this._scissorRectangle = undefined;\n\n        this._useHDR = false;\n    }\n\n    function destroyTextures(oit) {\n        oit._accumulationTexture = oit._accumulationTexture && !oit._accumulationTexture.isDestroyed() && oit._accumulationTexture.destroy();\n        oit._revealageTexture = oit._revealageTexture && !oit._revealageTexture.isDestroyed() && oit._revealageTexture.destroy();\n    }\n\n    function destroyFramebuffers(oit) {\n        oit._translucentFBO = oit._translucentFBO && !oit._translucentFBO.isDestroyed() && oit._translucentFBO.destroy();\n        oit._alphaFBO = oit._alphaFBO && !oit._alphaFBO.isDestroyed() && oit._alphaFBO.destroy();\n        oit._adjustTranslucentFBO = oit._adjustTranslucentFBO && !oit._adjustTranslucentFBO.isDestroyed() && oit._adjustTranslucentFBO.destroy();\n        oit._adjustAlphaFBO = oit._adjustAlphaFBO && !oit._adjustAlphaFBO.isDestroyed() && oit._adjustAlphaFBO.destroy();\n    }\n\n    function destroyResources(oit) {\n        destroyTextures(oit);\n        destroyFramebuffers(oit);\n    }\n\n    function updateTextures(oit, context, width, height) {\n        destroyTextures(oit);\n\n        oit._accumulationTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.FLOAT\n        });\n\n        // Use zeroed arraybuffer instead of null to initialize texture\n        // to workaround Firefox. Only needed for the second color attachment.\n        var source = new Float32Array(width * height * 4);\n        oit._revealageTexture = new Texture({\n            context : context,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.FLOAT,\n            source : {\n                arrayBufferView : source,\n                width : width,\n                height : height\n            },\n            flipY : false\n        });\n    }\n\n    function updateFramebuffers(oit, context) {\n        destroyFramebuffers(oit);\n\n        var completeFBO = WebGLConstants.FRAMEBUFFER_COMPLETE;\n        var supported = true;\n\n        // if MRT is supported, attempt to make an FBO with multiple color attachments\n        if (oit._translucentMRTSupport) {\n            oit._translucentFBO = new Framebuffer({\n                context : context,\n                colorTextures : [oit._accumulationTexture, oit._revealageTexture],\n                depthStencilTexture : oit._depthStencilTexture,\n                destroyAttachments : false\n            });\n            oit._adjustTranslucentFBO = new Framebuffer({\n                context : context,\n                colorTextures : [oit._accumulationTexture, oit._revealageTexture],\n                destroyAttachments : false\n            });\n\n            if (oit._translucentFBO.status !== completeFBO || oit._adjustTranslucentFBO.status !== completeFBO) {\n                destroyFramebuffers(oit);\n                oit._translucentMRTSupport = false;\n            }\n        }\n\n        // either MRT isn't supported or FBO creation failed, attempt multipass\n        if (!oit._translucentMRTSupport) {\n            oit._translucentFBO = new Framebuffer({\n                context : context,\n                colorTextures : [oit._accumulationTexture],\n                depthStencilTexture : oit._depthStencilTexture,\n                destroyAttachments : false\n            });\n            oit._alphaFBO = new Framebuffer({\n                context : context,\n                colorTextures : [oit._revealageTexture],\n                depthStencilTexture : oit._depthStencilTexture,\n                destroyAttachments : false\n            });\n            oit._adjustTranslucentFBO = new Framebuffer({\n                context : context,\n                colorTextures : [oit._accumulationTexture],\n                destroyAttachments : false\n            });\n            oit._adjustAlphaFBO = new Framebuffer({\n                context : context,\n                colorTextures : [oit._revealageTexture],\n                destroyAttachments : false\n            });\n\n            var translucentComplete = oit._translucentFBO.status === completeFBO;\n            var alphaComplete = oit._alphaFBO.status === completeFBO;\n            var adjustTranslucentComplete = oit._adjustTranslucentFBO.status === completeFBO;\n            var adjustAlphaComplete = oit._adjustAlphaFBO.status === completeFBO;\n            if (!translucentComplete || !alphaComplete || !adjustTranslucentComplete || !adjustAlphaComplete) {\n                destroyResources(oit);\n                oit._translucentMultipassSupport = false;\n                supported = false;\n            }\n        }\n\n        return supported;\n    }\n\n    OIT.prototype.update = function(context, passState, framebuffer, useHDR) {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        this._opaqueFBO = framebuffer;\n        this._opaqueTexture = framebuffer.getColorTexture(0);\n        this._depthStencilTexture = framebuffer.depthStencilTexture;\n\n        var width = this._opaqueTexture.width;\n        var height = this._opaqueTexture.height;\n\n        var accumulationTexture = this._accumulationTexture;\n        var textureChanged = !defined(accumulationTexture) || accumulationTexture.width !== width || accumulationTexture.height !== height || useHDR !== this._useHDR;\n        if (textureChanged) {\n            updateTextures(this, context, width, height);\n        }\n\n        if (!defined(this._translucentFBO) || textureChanged) {\n            if (!updateFramebuffers(this, context)) {\n                // framebuffer creation failed\n                return;\n            }\n        }\n\n        this._useHDR = useHDR;\n\n        var that = this;\n        var fs;\n        var uniformMap;\n\n        if (!defined(this._compositeCommand)) {\n            fs = new ShaderSource({\n                sources : [CompositeOITFS]\n            });\n            if (this._translucentMRTSupport) {\n                fs.defines.push('MRT');\n            }\n\n            uniformMap = {\n                u_opaque : function() {\n                    return that._opaqueTexture;\n                },\n                u_accumulation : function() {\n                    return that._accumulationTexture;\n                },\n                u_revealage : function() {\n                    return that._revealageTexture;\n                }\n            };\n            this._compositeCommand = context.createViewportQuadCommand(fs, {\n                uniformMap : uniformMap,\n                owner : this\n            });\n        }\n\n        if (!defined(this._adjustTranslucentCommand)) {\n            if (this._translucentMRTSupport) {\n                fs = new ShaderSource({\n                    defines : ['MRT'],\n                    sources : [AdjustTranslucentFS]\n                });\n\n                uniformMap = {\n                    u_bgColor : function() {\n                        return that._translucentMRTClearCommand.color;\n                    },\n                    u_depthTexture : function() {\n                        return that._depthStencilTexture;\n                    }\n                };\n\n                this._adjustTranslucentCommand = context.createViewportQuadCommand(fs, {\n                    uniformMap : uniformMap,\n                    owner : this\n                });\n            } else if (this._translucentMultipassSupport) {\n                fs = new ShaderSource({\n                    sources : [AdjustTranslucentFS]\n                });\n\n                uniformMap = {\n                    u_bgColor : function() {\n                        return that._translucentMultipassClearCommand.color;\n                    },\n                    u_depthTexture : function() {\n                        return that._depthStencilTexture;\n                    }\n                };\n\n                this._adjustTranslucentCommand = context.createViewportQuadCommand(fs, {\n                    uniformMap : uniformMap,\n                    owner : this\n                });\n\n                uniformMap = {\n                    u_bgColor : function() {\n                        return that._alphaClearCommand.color;\n                    },\n                    u_depthTexture : function() {\n                        return that._depthStencilTexture;\n                    }\n                };\n\n                this._adjustAlphaCommand = context.createViewportQuadCommand(fs, {\n                    uniformMap : uniformMap,\n                    owner : this\n                });\n            }\n        }\n\n        this._viewport.width = width;\n        this._viewport.height = height;\n\n        var useScissorTest = !BoundingRectangle.equals(this._viewport, passState.viewport);\n        var updateScissor = useScissorTest !== this._useScissorTest;\n        this._useScissorTest = useScissorTest;\n\n        if (!BoundingRectangle.equals(this._scissorRectangle, passState.viewport)) {\n            this._scissorRectangle = BoundingRectangle.clone(passState.viewport, this._scissorRectangle);\n            updateScissor = true;\n        }\n\n        if (!defined(this._rs) || !BoundingRectangle.equals(this._viewport, this._rs.viewport) || updateScissor) {\n            this._rs = RenderState.fromCache({\n                viewport : this._viewport,\n                scissorTest : {\n                    enabled : this._useScissorTest,\n                    rectangle : this._scissorRectangle\n                }\n            });\n        }\n\n        if (defined(this._compositeCommand)) {\n            this._compositeCommand.renderState = this._rs;\n        }\n\n        if (this._adjustTranslucentCommand) {\n            this._adjustTranslucentCommand.renderState = this._rs;\n        }\n\n        if (defined(this._adjustAlphaCommand)) {\n            this._adjustAlphaCommand.renderState = this._rs;\n        }\n    };\n\n    var translucentMRTBlend = {\n        enabled : true,\n        color : new Color(0.0, 0.0, 0.0, 0.0),\n        equationRgb : BlendEquation.ADD,\n        equationAlpha : BlendEquation.ADD,\n        functionSourceRgb : BlendFunction.ONE,\n        functionDestinationRgb : BlendFunction.ONE,\n        functionSourceAlpha : BlendFunction.ZERO,\n        functionDestinationAlpha : BlendFunction.ONE_MINUS_SOURCE_ALPHA\n    };\n\n    var translucentColorBlend = {\n        enabled : true,\n        color : new Color(0.0, 0.0, 0.0, 0.0),\n        equationRgb : BlendEquation.ADD,\n        equationAlpha : BlendEquation.ADD,\n        functionSourceRgb : BlendFunction.ONE,\n        functionDestinationRgb : BlendFunction.ONE,\n        functionSourceAlpha : BlendFunction.ONE,\n        functionDestinationAlpha : BlendFunction.ONE\n    };\n\n    var translucentAlphaBlend = {\n        enabled : true,\n        color : new Color(0.0, 0.0, 0.0, 0.0),\n        equationRgb : BlendEquation.ADD,\n        equationAlpha : BlendEquation.ADD,\n        functionSourceRgb : BlendFunction.ZERO,\n        functionDestinationRgb : BlendFunction.ONE_MINUS_SOURCE_ALPHA,\n        functionSourceAlpha : BlendFunction.ZERO,\n        functionDestinationAlpha : BlendFunction.ONE_MINUS_SOURCE_ALPHA\n    };\n\n    function getTranslucentRenderState(context, translucentBlending, cache, renderState) {\n        var translucentState = cache[renderState.id];\n        if (!defined(translucentState)) {\n            var rs = RenderState.getState(renderState);\n            rs.depthMask = false;\n            rs.blending = translucentBlending;\n\n            translucentState = RenderState.fromCache(rs);\n            cache[renderState.id] = translucentState;\n        }\n\n        return translucentState;\n    }\n\n    function getTranslucentMRTRenderState(oit, context, renderState) {\n        return getTranslucentRenderState(context, translucentMRTBlend, oit._translucentRenderStateCache, renderState);\n    }\n\n    function getTranslucentColorRenderState(oit, context, renderState) {\n        return getTranslucentRenderState(context, translucentColorBlend, oit._translucentRenderStateCache, renderState);\n    }\n\n    function getTranslucentAlphaRenderState(oit, context, renderState) {\n        return getTranslucentRenderState(context, translucentAlphaBlend, oit._alphaRenderStateCache, renderState);\n    }\n\n    var mrtShaderSource =\n        '    vec3 Ci = czm_gl_FragColor.rgb * czm_gl_FragColor.a;\\n' +\n        '    float ai = czm_gl_FragColor.a;\\n' +\n        '    float wzi = czm_alphaWeight(ai);\\n' +\n        '    gl_FragData[0] = vec4(Ci * wzi, ai);\\n' +\n        '    gl_FragData[1] = vec4(ai * wzi);\\n';\n\n    var colorShaderSource =\n        '    vec3 Ci = czm_gl_FragColor.rgb * czm_gl_FragColor.a;\\n' +\n        '    float ai = czm_gl_FragColor.a;\\n' +\n        '    float wzi = czm_alphaWeight(ai);\\n' +\n        '    gl_FragColor = vec4(Ci, ai) * wzi;\\n';\n\n    var alphaShaderSource =\n        '    float ai = czm_gl_FragColor.a;\\n' +\n        '    gl_FragColor = vec4(ai);\\n';\n\n    function getTranslucentShaderProgram(context, shaderProgram, keyword, source) {\n        var shader = context.shaderCache.getDerivedShaderProgram(shaderProgram, keyword);\n        if (!defined(shader)) {\n            var attributeLocations = shaderProgram._attributeLocations;\n\n            var fs = shaderProgram.fragmentShaderSource.clone();\n\n            fs.sources = fs.sources.map(function(source) {\n                source = ShaderSource.replaceMain(source, 'czm_translucent_main');\n                source = source.replace(/gl_FragColor/g, 'czm_gl_FragColor');\n                source = source.replace(/\\bdiscard\\b/g, 'czm_discard = true');\n                source = source.replace(/czm_phong/g, 'czm_translucentPhong');\n                return source;\n            });\n\n            // Discarding the fragment in main is a workaround for ANGLE D3D9\n            // shader compilation errors.\n\n            fs.sources.splice(0, 0,\n                (source.indexOf('gl_FragData') !== -1 ? '#extension GL_EXT_draw_buffers : enable \\n' : '') +\n                'vec4 czm_gl_FragColor;\\n' +\n                'bool czm_discard = false;\\n');\n\n            fs.sources.push(\n                'void main()\\n' +\n                '{\\n' +\n                '    czm_translucent_main();\\n' +\n                '    if (czm_discard)\\n' +\n                '    {\\n' +\n                '        discard;\\n' +\n                '    }\\n' +\n                source +\n                '}\\n');\n\n            shader = context.shaderCache.createDerivedShaderProgram(shaderProgram, keyword, {\n                vertexShaderSource : shaderProgram.vertexShaderSource,\n                fragmentShaderSource : fs,\n                attributeLocations : attributeLocations\n            });\n        }\n\n        return shader;\n    }\n\n    function getTranslucentMRTShaderProgram(context, shaderProgram) {\n        return getTranslucentShaderProgram(context, shaderProgram, 'translucentMRT', mrtShaderSource);\n    }\n\n    function getTranslucentColorShaderProgram(context, shaderProgram) {\n        return getTranslucentShaderProgram(context, shaderProgram, 'translucentMultipass', colorShaderSource);\n    }\n\n    function getTranslucentAlphaShaderProgram(context, shaderProgram) {\n        return getTranslucentShaderProgram(context, shaderProgram, 'alphaMultipass', alphaShaderSource);\n    }\n\n    OIT.prototype.createDerivedCommands = function(command, context, result) {\n        if (!defined(result)) {\n            result = {};\n        }\n\n        if (this._translucentMRTSupport) {\n            var translucentShader;\n            var translucentRenderState;\n            if (defined(result.translucentCommand)) {\n                translucentShader = result.translucentCommand.shaderProgram;\n                translucentRenderState = result.translucentCommand.renderState;\n            }\n\n            result.translucentCommand = DrawCommand.shallowClone(command, result.translucentCommand);\n\n            if (!defined(translucentShader) || result.shaderProgramId !== command.shaderProgram.id) {\n                result.translucentCommand.shaderProgram = getTranslucentMRTShaderProgram(context, command.shaderProgram);\n                result.translucentCommand.renderState = getTranslucentMRTRenderState(this, context, command.renderState);\n                result.shaderProgramId = command.shaderProgram.id;\n            } else {\n                result.translucentCommand.shaderProgram = translucentShader;\n                result.translucentCommand.renderState = translucentRenderState;\n            }\n        } else {\n            var colorShader;\n            var colorRenderState;\n            var alphaShader;\n            var alphaRenderState;\n            if (defined(result.translucentCommand)) {\n                colorShader = result.translucentCommand.shaderProgram;\n                colorRenderState = result.translucentCommand.renderState;\n                alphaShader = result.alphaCommand.shaderProgram;\n                alphaRenderState = result.alphaCommand.renderState;\n            }\n\n            result.translucentCommand = DrawCommand.shallowClone(command, result.translucentCommand);\n            result.alphaCommand = DrawCommand.shallowClone(command, result.alphaCommand);\n\n            if (!defined(colorShader) || result.shaderProgramId !== command.shaderProgram.id) {\n                result.translucentCommand.shaderProgram = getTranslucentColorShaderProgram(context, command.shaderProgram);\n                result.translucentCommand.renderState = getTranslucentColorRenderState(this, context, command.renderState);\n                result.alphaCommand.shaderProgram = getTranslucentAlphaShaderProgram(context, command.shaderProgram);\n                result.alphaCommand.renderState = getTranslucentAlphaRenderState(this, context, command.renderState);\n                result.shaderProgramId = command.shaderProgram.id;\n            } else {\n                result.translucentCommand.shaderProgram = colorShader;\n                result.translucentCommand.renderState = colorRenderState;\n                result.alphaCommand.shaderProgram = alphaShader;\n                result.alphaCommand.renderState = alphaRenderState;\n            }\n        }\n\n        return result;\n    };\n\n    function executeTranslucentCommandsSortedMultipass(oit, scene, executeFunction, passState, commands, invertClassification) {\n        var command;\n        var derivedCommand;\n        var j;\n\n        var context = scene.context;\n        var useLogDepth = scene.frameState.useLogDepth;\n        var useHdr = scene._hdr;\n        var framebuffer = passState.framebuffer;\n        var length = commands.length;\n\n        var lightShadowsEnabled = scene.frameState.shadowState.lightShadowsEnabled;\n\n        passState.framebuffer = oit._adjustTranslucentFBO;\n        oit._adjustTranslucentCommand.execute(context, passState);\n        passState.framebuffer = oit._adjustAlphaFBO;\n        oit._adjustAlphaCommand.execute(context, passState);\n\n        var debugFramebuffer = oit._opaqueFBO;\n        passState.framebuffer = oit._translucentFBO;\n\n        for (j = 0; j < length; ++j) {\n            command = commands[j];\n            command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n            command = useHdr ? command.derivedCommands.hdr.command : command;\n            derivedCommand = (lightShadowsEnabled && command.receiveShadows) ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n            executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n        }\n\n        if (defined(invertClassification)) {\n            command = invertClassification.unclassifiedCommand;\n            derivedCommand = (lightShadowsEnabled && command.receiveShadows) ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n            executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n        }\n\n        passState.framebuffer = oit._alphaFBO;\n\n        for (j = 0; j < length; ++j) {\n            command = commands[j];\n            command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n            command = useHdr ? command.derivedCommands.hdr.command : command;\n            derivedCommand = (lightShadowsEnabled && command.receiveShadows) ? command.derivedCommands.oit.shadows.alphaCommand : command.derivedCommands.oit.alphaCommand;\n            executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n        }\n\n        if (defined(invertClassification)) {\n            command = invertClassification.unclassifiedCommand;\n            derivedCommand = (lightShadowsEnabled && command.receiveShadows) ? command.derivedCommands.oit.shadows.alphaCommand : command.derivedCommands.oit.alphaCommand;\n            executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n        }\n\n        passState.framebuffer = framebuffer;\n    }\n\n    function executeTranslucentCommandsSortedMRT(oit, scene, executeFunction, passState, commands, invertClassification) {\n        var context = scene.context;\n        var useLogDepth = scene.frameState.useLogDepth;\n        var useHdr = scene._hdr;\n        var framebuffer = passState.framebuffer;\n        var length = commands.length;\n\n        var lightShadowsEnabled = scene.frameState.shadowState.lightShadowsEnabled;\n\n        passState.framebuffer = oit._adjustTranslucentFBO;\n        oit._adjustTranslucentCommand.execute(context, passState);\n\n        var debugFramebuffer = oit._opaqueFBO;\n        passState.framebuffer = oit._translucentFBO;\n\n        var command;\n        var derivedCommand;\n\n        for (var j = 0; j < length; ++j) {\n            command = commands[j];\n            command = useLogDepth ? command.derivedCommands.logDepth.command : command;\n            command = useHdr ? command.derivedCommands.hdr.command : command;\n            derivedCommand = (lightShadowsEnabled && command.receiveShadows) ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n            executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n        }\n\n        if (defined(invertClassification)) {\n            command = invertClassification.unclassifiedCommand;\n            derivedCommand = (lightShadowsEnabled && command.receiveShadows) ? command.derivedCommands.oit.shadows.translucentCommand : command.derivedCommands.oit.translucentCommand;\n            executeFunction(derivedCommand, scene, context, passState, debugFramebuffer);\n        }\n\n        passState.framebuffer = framebuffer;\n    }\n\n    OIT.prototype.executeCommands = function(scene, executeFunction, passState, commands, invertClassification) {\n        if (this._translucentMRTSupport) {\n            executeTranslucentCommandsSortedMRT(this, scene, executeFunction, passState, commands, invertClassification);\n            return;\n        }\n\n        executeTranslucentCommandsSortedMultipass(this, scene, executeFunction, passState, commands, invertClassification);\n    };\n\n    OIT.prototype.execute = function(context, passState) {\n        this._compositeCommand.execute(context, passState);\n    };\n\n    OIT.prototype.clear = function(context, passState, clearColor) {\n        var framebuffer = passState.framebuffer;\n\n        passState.framebuffer = this._opaqueFBO;\n        Color.clone(clearColor, this._opaqueClearCommand.color);\n        this._opaqueClearCommand.execute(context, passState);\n\n        passState.framebuffer = this._translucentFBO;\n        var translucentClearCommand = this._translucentMRTSupport ? this._translucentMRTClearCommand : this._translucentMultipassClearCommand;\n        translucentClearCommand.execute(context, passState);\n\n        if (this._translucentMultipassSupport) {\n            passState.framebuffer = this._alphaFBO;\n            this._alphaClearCommand.execute(context, passState);\n        }\n\n        passState.framebuffer = framebuffer;\n    };\n\n    OIT.prototype.isSupported = function() {\n        return this._translucentMRTSupport || this._translucentMultipassSupport;\n    };\n\n    OIT.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    OIT.prototype.destroy = function() {\n        destroyResources(this);\n\n        if (defined(this._compositeCommand)) {\n            this._compositeCommand.shaderProgram = this._compositeCommand.shaderProgram && this._compositeCommand.shaderProgram.destroy();\n        }\n\n        if (defined(this._adjustTranslucentCommand)) {\n            this._adjustTranslucentCommand.shaderProgram = this._adjustTranslucentCommand.shaderProgram && this._adjustTranslucentCommand.shaderProgram.destroy();\n        }\n\n        if (defined(this._adjustAlphaCommand)) {\n            this._adjustAlphaCommand.shaderProgram = this._adjustAlphaCommand.shaderProgram && this._adjustAlphaCommand.shaderProgram.destroy();\n        }\n\n        return destroyObject(this);\n    };\n\n    return OIT;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"#ifdef MRT\\n\\\n#extension GL_EXT_draw_buffers : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 u_bgColor;\\n\\\nuniform sampler2D u_depthTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    if (texture2D(u_depthTexture, v_textureCoordinates).r < 1.0)\\n\\\n    {\\n\\\n#ifdef MRT\\n\\\n        gl_FragData[0] = u_bgColor;\\n\\\n        gl_FragData[1] = vec4(u_bgColor.a);\\n\\\n#else\\n\\\n        gl_FragColor = u_bgColor;\\n\\\n#endif\\n\\\n        return;\\n\\\n    }\\n\\\n    \\n\\\n    discard;\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"/**\\n\\\n * Compositing for Weighted Blended Order-Independent Transparency. See:\\n\\\n * - http://jcgt.org/published/0002/02/09/\\n\\\n * - http://casual-effects.blogspot.com/2014/03/weighted-blended-order-independent.html\\n\\\n */\\n\\\n\\n\\\nuniform sampler2D u_opaque;\\n\\\nuniform sampler2D u_accumulation;\\n\\\nuniform sampler2D u_revealage;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 opaque = texture2D(u_opaque, v_textureCoordinates);\\n\\\n    vec4 accum = texture2D(u_accumulation, v_textureCoordinates);\\n\\\n    float r = texture2D(u_revealage, v_textureCoordinates).r;\\n\\\n\\n\\\n#ifdef MRT\\n\\\n    vec4 transparent = vec4(accum.rgb / clamp(r, 1e-4, 5e4), accum.a);\\n\\\n#else\\n\\\n    vec4 transparent = vec4(accum.rgb / clamp(accum.a, 1e-4, 5e4), r);\\n\\\n#endif\\n\\\n\\n\\\n    gl_FragColor = (1.0 - transparent.a) * transparent + transparent.a * opaque;\\n\\\n\\n\\\n    if (opaque != czm_backgroundColor)\\n\\\n    {\\n\\\n        gl_FragColor.a = 1.0;\\n\\\n    }\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/BoundingRectangle',\n        '../Core/Color',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/Framebuffer',\n        '../Renderer/PassState',\n        '../Renderer/PixelDatatype',\n        '../Renderer/Renderbuffer',\n        '../Renderer/RenderbufferFormat',\n        '../Renderer/Texture'\n    ], function(\n        BoundingRectangle,\n        Color,\n        defaultValue,\n        defined,\n        destroyObject,\n        PixelFormat,\n        Framebuffer,\n        PassState,\n        PixelDatatype,\n        Renderbuffer,\n        RenderbufferFormat,\n        Texture) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function PickDepthFramebuffer() {\n        this._depthStencilTexture = undefined;\n        this._framebuffer = undefined;\n        this._passState = undefined;\n    }\n\n    function destroyResources(pickDepth) {\n        pickDepth._framebuffer = pickDepth._framebuffer && pickDepth._framebuffer.destroy();\n        pickDepth._depthStencilTexture = pickDepth._depthStencilTexture && pickDepth._depthStencilTexture.destroy();\n    }\n\n    function createResources(pickDepth, context) {\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight;\n\n        pickDepth._depthStencilTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.DEPTH_STENCIL,\n            pixelDatatype : PixelDatatype.UNSIGNED_INT_24_8\n        });\n\n        pickDepth._framebuffer = new Framebuffer({\n            context : context,\n            depthStencilTexture : pickDepth._depthStencilTexture,\n            destroyAttachments : false\n        });\n\n        var passState = new PassState(context);\n        passState.blendingEnabled = false;\n        passState.scissorTest = {\n            enabled : true,\n            rectangle : new BoundingRectangle()\n        };\n        passState.viewport = new BoundingRectangle();\n        pickDepth._passState = passState;\n    }\n\n    PickDepthFramebuffer.prototype.update = function(context, drawingBufferPosition, viewport) {\n        var width = viewport.width;\n        var height = viewport.height;\n\n        if (!defined(this._framebuffer) || width !== this._depthStencilTexture.width || height !== this._depthStencilTexture.height) {\n            destroyResources(this);\n            createResources(this, context);\n        }\n\n        var framebuffer = this._framebuffer;\n        var passState = this._passState;\n        passState.framebuffer = framebuffer;\n        passState.viewport.width = width;\n        passState.viewport.height = height;\n        passState.scissorTest.rectangle.x = drawingBufferPosition.x;\n        passState.scissorTest.rectangle.y = height - drawingBufferPosition.y;\n        passState.scissorTest.rectangle.width = 1;\n        passState.scissorTest.rectangle.height = 1;\n\n        return passState;\n    };\n\n    PickDepthFramebuffer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    PickDepthFramebuffer.prototype.destroy = function() {\n        destroyResources(this);\n        return destroyObject(this);\n    };\n\n    return PickDepthFramebuffer;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/Color',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Renderer/Framebuffer',\n        '../Renderer/PassState',\n        '../Renderer/Renderbuffer',\n        '../Renderer/RenderbufferFormat',\n        '../Renderer/Texture'\n    ], function(\n        BoundingRectangle,\n        Color,\n        defaultValue,\n        defined,\n        destroyObject,\n        Framebuffer,\n        PassState,\n        Renderbuffer,\n        RenderbufferFormat,\n        Texture) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function PickFramebuffer(context) {\n        // Override per-command states\n        var passState = new PassState(context);\n        passState.blendingEnabled = false;\n        passState.scissorTest = {\n            enabled : true,\n            rectangle : new BoundingRectangle()\n        };\n        passState.viewport = new BoundingRectangle();\n\n        this._context = context;\n        this._fb = undefined;\n        this._passState = passState;\n        this._width = 0;\n        this._height = 0;\n    }\n    PickFramebuffer.prototype.begin = function(screenSpaceRectangle, viewport) {\n        var context = this._context;\n        var width = viewport.width;\n        var height = viewport.height;\n\n        BoundingRectangle.clone(screenSpaceRectangle, this._passState.scissorTest.rectangle);\n\n        // Initially create or recreate renderbuffers and framebuffer used for picking\n        if ((!defined(this._fb)) || (this._width !== width) || (this._height !== height)) {\n            this._width = width;\n            this._height = height;\n\n            this._fb = this._fb && this._fb.destroy();\n            this._fb = new Framebuffer({\n                context : context,\n                colorTextures : [new Texture({\n                    context : context,\n                    width : width,\n                    height : height\n                })],\n                depthStencilRenderbuffer : new Renderbuffer({\n                    context : context,\n                    width : width,\n                    height : height,\n                    format : RenderbufferFormat.DEPTH_STENCIL\n                })\n            });\n            this._passState.framebuffer = this._fb;\n        }\n\n        this._passState.viewport.width = width;\n        this._passState.viewport.height = height;\n\n        return this._passState;\n    };\n\n    var colorScratch = new Color();\n\n    PickFramebuffer.prototype.end = function(screenSpaceRectangle) {\n        var width = defaultValue(screenSpaceRectangle.width, 1.0);\n        var height = defaultValue(screenSpaceRectangle.height, 1.0);\n\n        var context = this._context;\n        var pixels = context.readPixels({\n            x : screenSpaceRectangle.x,\n            y : screenSpaceRectangle.y,\n            width : width,\n            height : height,\n            framebuffer : this._fb\n        });\n\n        var max = Math.max(width, height);\n        var length = max * max;\n        var halfWidth = Math.floor(width * 0.5);\n        var halfHeight = Math.floor(height * 0.5);\n\n        var x = 0;\n        var y = 0;\n        var dx = 0;\n        var dy = -1;\n\n        // Spiral around the center pixel, this is a workaround until\n        // we can access the depth buffer on all browsers.\n\n        // The region does not have to square and the dimensions do not have to be odd, but\n        // loop iterations would be wasted. Prefer square regions where the size is odd.\n        for (var i = 0; i < length; ++i) {\n            if (-halfWidth <= x && x <= halfWidth && -halfHeight <= y && y <= halfHeight) {\n                var index = 4 * ((halfHeight - y) * width + x + halfWidth);\n\n                colorScratch.red = Color.byteToFloat(pixels[index]);\n                colorScratch.green = Color.byteToFloat(pixels[index + 1]);\n                colorScratch.blue = Color.byteToFloat(pixels[index + 2]);\n                colorScratch.alpha = Color.byteToFloat(pixels[index + 3]);\n\n                var object = context.getObjectByPickColor(colorScratch);\n                if (defined(object)) {\n                    return object;\n                }\n            }\n\n            // if (top right || bottom left corners) || (top left corner) || (bottom right corner + (1, 0))\n            // change spiral direction\n            if (x === y || (x < 0 && -x === y) || (x > 0 && x === 1 - y)) {\n                var temp = dx;\n                dx = -dy;\n                dy = temp;\n            }\n\n            x += dx;\n            y += dy;\n        }\n\n        return undefined;\n    };\n\n    PickFramebuffer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    PickFramebuffer.prototype.destroy = function() {\n        this._fb = this._fb && this._fb.destroy();\n        return destroyObject(this);\n    };\n\n    return PickFramebuffer;\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/Ellipsoid',\n        '../Core/EllipsoidGeometry',\n        '../Core/GeometryPipeline',\n        '../Core/Math',\n        '../Core/VertexFormat',\n        '../Renderer/BufferUsage',\n        '../Renderer/DrawCommand',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderProgram',\n        '../Renderer/ShaderSource',\n        '../Renderer/VertexArray',\n        '../Shaders/SkyAtmosphereFS',\n        '../Shaders/SkyAtmosphereVS',\n        './BlendingState',\n        './CullFace',\n        './ImagerySplitDirection',\n        './SceneMode'\n    ], function(\n        Cartesian3,\n        Cartesian4,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        Ellipsoid,\n        EllipsoidGeometry,\n        GeometryPipeline,\n        CesiumMath,\n        VertexFormat,\n        BufferUsage,\n        DrawCommand,\n        RenderState,\n        ShaderProgram,\n        ShaderSource,\n        VertexArray,\n        SkyAtmosphereFS,\n        SkyAtmosphereVS,\n        BlendingState,\n        CullFace,\n        ImagerySplitDirection,\n        SceneMode) {\n    'use strict';\n\n    /**\n     * An atmosphere drawn around the limb of the provided ellipsoid.  Based on\n     * {@link http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter16.html|Accurate Atmospheric Scattering}\n     * in GPU Gems 2.\n     * <p>\n     * This is only supported in 3D. Atmosphere is faded out when morphing to 2D or Columbus view.\n     * </p>\n     *\n     * @alias SkyAtmosphere\n     * @constructor\n     *\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid that the atmosphere is drawn around.\n     *\n     * @example\n     * scene.skyAtmosphere = new Cesium.SkyAtmosphere();\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Sky%20Atmosphere.html|Sky atmosphere demo in Sandcastle}\n     *\n     * @see Scene.skyAtmosphere\n     */\n    function SkyAtmosphere(ellipsoid) {\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n        /**\n         * Determines if the atmosphere is shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = true;\n\n        this._ellipsoid = ellipsoid;\n        this._command = new DrawCommand({\n            owner : this\n        });\n        this._spSkyFromSpace = undefined;\n        this._spSkyFromAtmosphere = undefined;\n\n        this._spSkyFromSpaceColorCorrect = undefined;\n        this._spSkyFromAtmosphereColorCorrect = undefined;\n\n        /**\n         * The hue shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n         * A hue shift of 1.0 indicates a complete rotation of the hues available.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.hueShift = 0.0;\n\n        /**\n         * The saturation shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n         * A saturation shift of -1.0 is monochrome.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.saturationShift = 0.0;\n\n        /**\n         * The brightness shift to apply to the atmosphere. Defaults to 0.0 (no shift).\n         * A brightness shift of -1.0 is complete darkness, which will let space show through.\n         * @type {Number}\n         * @default 0.0\n         */\n        this.brightnessShift = 0.0;\n\n        /**\n         * The {@link ImagerySplitDirection} to apply, showing the terrain only on\n         * the left or right of the splitter control.\n         *\n         * @type {ImagerySplitDirection}\n         * @default {@link ImagerySplitDirection.NONE}\n         */\n        this.splitDirection = ImagerySplitDirection.NONE;\n        this._splitDirection = undefined;\n\n        this._hueSaturationBrightness = new Cartesian3();\n\n        // camera height, outer radius, inner radius, dynamic atmosphere color flag\n        var cameraAndRadiiAndDynamicAtmosphereColor = new Cartesian4();\n\n        // Toggles whether the sun position is used. 0 treats the sun as always directly overhead.\n        cameraAndRadiiAndDynamicAtmosphereColor.w = 0;\n        cameraAndRadiiAndDynamicAtmosphereColor.y = Cartesian3.maximumComponent(Cartesian3.multiplyByScalar(ellipsoid.radii, 1.025, new Cartesian3()));\n        cameraAndRadiiAndDynamicAtmosphereColor.z = ellipsoid.maximumRadius;\n\n        this._cameraAndRadiiAndDynamicAtmosphereColor = cameraAndRadiiAndDynamicAtmosphereColor;\n\n        var that = this;\n\n        this._command.uniformMap = {\n            u_cameraAndRadiiAndDynamicAtmosphereColor : function() {\n                return that._cameraAndRadiiAndDynamicAtmosphereColor;\n            },\n            u_hsbShift : function() {\n                that._hueSaturationBrightness.x = that.hueShift;\n                that._hueSaturationBrightness.y = that.saturationShift;\n                that._hueSaturationBrightness.z = that.brightnessShift;\n                return that._hueSaturationBrightness;\n            },\n            u_splitDirection : function() {\n                return that.splitDirection;\n            }\n        };\n    }\n\n    defineProperties(SkyAtmosphere.prototype, {\n        /**\n         * Gets the ellipsoid the atmosphere is drawn around.\n         * @memberof SkyAtmosphere.prototype\n         *\n         * @type {Ellipsoid}\n         * @readonly\n         */\n        ellipsoid : {\n            get : function() {\n                return this._ellipsoid;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    SkyAtmosphere.prototype.setDynamicAtmosphereColor = function(enableLighting) {\n        this._cameraAndRadiiAndDynamicAtmosphereColor.w = enableLighting ? 1 : 0;\n    };\n\n    /**\n     * @private\n     */\n    SkyAtmosphere.prototype.update = function(frameState) {\n        if (!this.show) {\n            return undefined;\n        }\n\n        var mode = frameState.mode;\n        if ((mode !== SceneMode.SCENE3D) &&\n            (mode !== SceneMode.MORPHING)) {\n            return undefined;\n        }\n\n        // The atmosphere is only rendered during the render pass; it is not pickable, it doesn't cast shadows, etc.\n        if (!frameState.passes.render) {\n            return undefined;\n        }\n\n        var command = this._command;\n\n        var context = frameState.context;\n\n        if (!defined(command.vertexArray)) {\n            var geometry = EllipsoidGeometry.createGeometry(new EllipsoidGeometry({\n                radii : Cartesian3.multiplyByScalar(this._ellipsoid.radii, 1.025, new Cartesian3()),\n                slicePartitions : 256,\n                stackPartitions : 256,\n                vertexFormat : VertexFormat.POSITION_ONLY\n            }));\n            command.vertexArray = VertexArray.fromGeometry({\n                context : context,\n                geometry : geometry,\n                attributeLocations : GeometryPipeline.createAttributeLocations(geometry),\n                bufferUsage : BufferUsage.STATIC_DRAW\n            });\n            command.renderState = RenderState.fromCache({\n                cull : {\n                    enabled : true,\n                    face : CullFace.FRONT\n                },\n                blending : BlendingState.ALPHA_BLEND,\n                depthMask : false\n            });\n        }\n\n        if (this.splitDirection !== this._splitDirection) {\n            this._spSkyFromSpace = this._spSkyFromSpace && this._spSkyFromSpace.destroy();\n            this._spSkyFromAtmosphere = this._spSkyFromAtmosphere && this._spSkyFromAtmosphere.destroy();\n            this._spSkyFromSpaceColorCorrect = this._spSkyFromSpaceColorCorrect && this._spSkyFromSpaceColorCorrect.destroy();\n            this._spSkyFromAtmosphereColorCorrect = this._spSkyFromAtmosphereColorCorrect && this._spSkyFromAtmosphereColorCorrect.destroy();\n\n            var vs = new ShaderSource({\n                defines : ['SKY_FROM_SPACE'],\n                sources : [SkyAtmosphereVS]\n            });\n\n            var fs = SkyAtmosphereFS;\n            if (this.splitDirection !== ImagerySplitDirection.NONE) {\n                fs = new ShaderSource({\n                    defines : ['SPLIT_ATMOSPHERE'],\n                    sources : [SkyAtmosphereFS]\n                });\n            }\n\n            this._spSkyFromSpace = ShaderProgram.fromCache({\n                context : context,\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs\n            });\n\n            vs = new ShaderSource({\n                defines : ['SKY_FROM_ATMOSPHERE'],\n                sources : [SkyAtmosphereVS]\n            });\n            this._spSkyFromAtmosphere = ShaderProgram.fromCache({\n                context : context,\n                vertexShaderSource : vs,\n                fragmentShaderSource : fs\n            });\n\n            this._splitDirection = this.splitDirection;\n        }\n\n        // Compile the color correcting versions of the shader on demand\n        var useColorCorrect = colorCorrect(this);\n        if (useColorCorrect && (!defined(this._spSkyFromSpaceColorCorrect) || !defined(this._spSkyFromAtmosphereColorCorrect))) {\n            var contextColorCorrect = frameState.context;\n\n            var vsColorCorrect = new ShaderSource({\n                defines : ['SKY_FROM_SPACE'],\n                sources : [SkyAtmosphereVS]\n            });\n            var fsColorCorrect = new ShaderSource({\n                defines : ImagerySplitDirection.NONE ? ['COLOR_CORRECT'] : ['COLOR_CORRECT', 'SPLIT_ATMOSPHERE'],\n                sources : [SkyAtmosphereFS]\n            });\n\n            this._spSkyFromSpaceColorCorrect = ShaderProgram.fromCache({\n                context : contextColorCorrect,\n                vertexShaderSource : vsColorCorrect,\n                fragmentShaderSource : fsColorCorrect\n            });\n            vsColorCorrect = new ShaderSource({\n                defines : ['SKY_FROM_ATMOSPHERE'],\n                sources : [SkyAtmosphereVS]\n            });\n            this._spSkyFromAtmosphereColorCorrect = ShaderProgram.fromCache({\n                context : contextColorCorrect,\n                vertexShaderSource : vsColorCorrect,\n                fragmentShaderSource : fsColorCorrect\n            });\n        }\n\n        var cameraPosition = frameState.camera.positionWC;\n\n        var cameraHeight = Cartesian3.magnitude(cameraPosition);\n        this._cameraAndRadiiAndDynamicAtmosphereColor.x = cameraHeight;\n\n        if (cameraHeight > this._cameraAndRadiiAndDynamicAtmosphereColor.y) {\n            // Camera in space\n            command.shaderProgram = useColorCorrect ? this._spSkyFromSpaceColorCorrect : this._spSkyFromSpace;\n        } else {\n            // Camera in atmosphere\n            command.shaderProgram = useColorCorrect ? this._spSkyFromAtmosphereColorCorrect : this._spSkyFromAtmosphere;\n        }\n\n        return command;\n    };\n\n    function colorCorrect(skyAtmosphere) {\n        return !(CesiumMath.equalsEpsilon(skyAtmosphere.hueShift, 0.0, CesiumMath.EPSILON7) &&\n                 CesiumMath.equalsEpsilon(skyAtmosphere.saturationShift, 0.0, CesiumMath.EPSILON7) &&\n                 CesiumMath.equalsEpsilon(skyAtmosphere.brightnessShift, 0.0, CesiumMath.EPSILON7));\n    }\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see SkyAtmosphere#destroy\n     */\n    SkyAtmosphere.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * skyAtmosphere = skyAtmosphere && skyAtmosphere.destroy();\n     *\n     * @see SkyAtmosphere#isDestroyed\n     */\n    SkyAtmosphere.prototype.destroy = function() {\n        var command = this._command;\n        command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n        this._spSkyFromSpace = this._spSkyFromSpace && this._spSkyFromSpace.destroy();\n        this._spSkyFromAtmosphere = this._spSkyFromAtmosphere && this._spSkyFromAtmosphere.destroy();\n        this._spSkyFromSpaceColorCorrect = this._spSkyFromSpaceColorCorrect && this._spSkyFromSpaceColorCorrect.destroy();\n        this._spSkyFromAtmosphereColorCorrect = this._spSkyFromAtmosphereColorCorrect && this._spSkyFromAtmosphereColorCorrect.destroy();\n        return destroyObject(this);\n    };\n\n    return SkyAtmosphere;\n});\n","/**\n * @license\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of the project nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without\n *   specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Modifications made by Analytical Graphics, Inc.\n */\n//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Analytical Graphics, Inc.\\n\\\n */\\n\\\n\\n\\\n // Code:  http://sponeil.net/\\n\\\n // GPU Gems 2 Article:  http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\nuniform vec3 u_hsbShift; // Hue, saturation, brightness\\n\\\n#endif\\n\\\n\\n\\\nuniform vec4 u_cameraAndRadiiAndDynamicAtmosphereColor; // Camera height, outer radius, inner radius, dynamic atmosphere color flag\\n\\\n\\n\\\n#ifdef SPLIT_ATMOSPHERE\\n\\\nuniform float u_splitDirection;\\n\\\n#endif\\n\\\n\\n\\\nconst float g = -0.95;\\n\\\nconst float g2 = g * g;\\n\\\n\\n\\\nvarying vec3 v_rayleighColor;\\n\\\nvarying vec3 v_mieColor;\\n\\\nvarying vec3 v_toCamera;\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvoid main (void)\\n\\\n{\\n\\\n#ifdef SPLIT_ATMOSPHERE\\n\\\n    float splitPosition = czm_imagerySplitPosition;\\n\\\n    if (u_splitDirection < 0.0 && gl_FragCoord.x > splitPosition) {\\n\\\n        discard;\\n\\\n    } else if (u_splitDirection > 0.0 && gl_FragCoord.x < splitPosition) {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    // Extra normalize added for Android\\n\\\n    float cosAngle = dot(czm_sunDirectionWC, normalize(v_toCamera)) / length(v_toCamera);\\n\\\n    float rayleighPhase = 0.75 * (1.0 + cosAngle * cosAngle);\\n\\\n    float miePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + cosAngle * cosAngle) / pow(1.0 + g2 - 2.0 * g * cosAngle, 1.5);\\n\\\n\\n\\\n    vec3 rgb = rayleighPhase * v_rayleighColor + miePhase * v_mieColor;\\n\\\n\\n\\\n#ifndef HDR\\n\\\n    const float exposure = 1.1;\\n\\\n    rgb = vec3(1.0) - exp(-exposure * rgb);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef COLOR_CORRECT\\n\\\n    // Convert rgb color to hsb\\n\\\n    vec3 hsb = czm_RGBToHSB(rgb);\\n\\\n    // Perform hsb shift\\n\\\n    hsb.x += u_hsbShift.x; // hue\\n\\\n    hsb.y = clamp(hsb.y + u_hsbShift.y, 0.0, 1.0); // saturation\\n\\\n    hsb.z = hsb.z > czm_epsilon7 ? hsb.z + u_hsbShift.z : 0.0; // brightness\\n\\\n    // Convert shifted hsb back to rgb\\n\\\n    rgb = czm_HSBToRGB(hsb);\\n\\\n#endif\\n\\\n\\n\\\n    // Alter alpha based on how close the viewer is to the ground (1.0 = on ground, 0.0 = at edge of atmosphere)\\n\\\n    float atmosphereAlpha = clamp((u_cameraAndRadiiAndDynamicAtmosphereColor.y - u_cameraAndRadiiAndDynamicAtmosphereColor.x) / (u_cameraAndRadiiAndDynamicAtmosphereColor.y - u_cameraAndRadiiAndDynamicAtmosphereColor.z), 0.0, 1.0);\\n\\\n\\n\\\n    // Alter alpha based on time of day (0.0 = night , 1.0 = day)\\n\\\n    float nightAlpha = (u_cameraAndRadiiAndDynamicAtmosphereColor.w > 0.0) ? clamp(dot(normalize(czm_viewerPositionWC), normalize(czm_sunPositionWC)), 0.0, 1.0) : 1.0;\\n\\\n    atmosphereAlpha *= pow(nightAlpha, 0.5);\\n\\\n\\n\\\n    gl_FragColor = vec4(rgb, mix(rgb.b, 1.0, atmosphereAlpha) * smoothstep(0.0, 1.0, czm_morphTime));\\n\\\n}\\n\\\n\";\n});","/**\n * @license\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of the project nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without\n *   specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Modifications made by Analytical Graphics, Inc.\n */\n//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"/**\\n\\\n * @license\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Analytical Graphics, Inc.\\n\\\n */\\n\\\n\\n\\\n // Code:  http://sponeil.net/\\n\\\n // GPU Gems 2 Article:  http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\nattribute vec4 position;\\n\\\n\\n\\\nuniform vec4 u_cameraAndRadiiAndDynamicAtmosphereColor; // Camera height, outer radius, inner radius, dynamic atmosphere color flag\\n\\\n\\n\\\nconst float Kr = 0.0025;\\n\\\nconst float Kr4PI = Kr * 4.0 * czm_pi;\\n\\\nconst float Km = 0.0015;\\n\\\nconst float Km4PI = Km * 4.0 * czm_pi;\\n\\\nconst float ESun = 15.0;\\n\\\nconst float KmESun = Km * ESun;\\n\\\nconst float KrESun = Kr * ESun;\\n\\\nconst vec3 InvWavelength = vec3(\\n\\\n    5.60204474633241,  // Red = 1.0 / Math.pow(0.650, 4.0)\\n\\\n    9.473284437923038, // Green = 1.0 / Math.pow(0.570, 4.0)\\n\\\n    19.643802610477206); // Blue = 1.0 / Math.pow(0.475, 4.0)\\n\\\nconst float rayleighScaleDepth = 0.25;\\n\\\n\\n\\\nconst int nSamples = 2;\\n\\\nconst float fSamples = 2.0;\\n\\\n\\n\\\nvarying vec3 v_rayleighColor;\\n\\\nvarying vec3 v_mieColor;\\n\\\nvarying vec3 v_toCamera;\\n\\\n\\n\\\nfloat scale(float cosAngle)\\n\\\n{\\n\\\n    float x = 1.0 - cosAngle;\\n\\\n    return rayleighScaleDepth  * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    // Unpack attributes\\n\\\n    float cameraHeight = u_cameraAndRadiiAndDynamicAtmosphereColor.x;\\n\\\n    float outerRadius = u_cameraAndRadiiAndDynamicAtmosphereColor.y;\\n\\\n    float innerRadius = u_cameraAndRadiiAndDynamicAtmosphereColor.z;\\n\\\n\\n\\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\n\\\n    vec3 positionV3 = position.xyz;\\n\\\n    vec3 ray = positionV3 - czm_viewerPositionWC;\\n\\\n    float far = length(ray);\\n\\\n    ray /= far;\\n\\\n    float atmosphereScale = 1.0 / (outerRadius - innerRadius);\\n\\\n\\n\\\n#ifdef SKY_FROM_SPACE\\n\\\n    // Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray passing through the atmosphere)\\n\\\n    float B = 2.0 * dot(czm_viewerPositionWC, ray);\\n\\\n    float C = cameraHeight * cameraHeight - outerRadius * outerRadius;\\n\\\n    float det = max(0.0, B*B - 4.0 * C);\\n\\\n    float near = 0.5 * (-B - sqrt(det));\\n\\\n\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    vec3 start = czm_viewerPositionWC + ray * near;\\n\\\n    far -= near;\\n\\\n    float startAngle = dot(ray, start) / outerRadius;\\n\\\n    float startDepth = exp(-1.0 / rayleighScaleDepth );\\n\\\n    float startOffset = startDepth*scale(startAngle);\\n\\\n#else // SKY_FROM_ATMOSPHERE\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    vec3 start = czm_viewerPositionWC;\\n\\\n    float height = length(start);\\n\\\n    float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - cameraHeight));\\n\\\n    float startAngle = dot(ray, start) / height;\\n\\\n    float startOffset = depth*scale(startAngle);\\n\\\n#endif\\n\\\n\\n\\\n    // Initialize the scattering loop variables\\n\\\n    float sampleLength = far / fSamples;\\n\\\n    float scaledLength = sampleLength * atmosphereScale;\\n\\\n    vec3 sampleRay = ray * sampleLength;\\n\\\n    vec3 samplePoint = start + sampleRay * 0.5;\\n\\\n\\n\\\n    // Now loop through the sample rays\\n\\\n    vec3 frontColor = vec3(0.0, 0.0, 0.0);\\n\\\n    vec3 lightDir = (u_cameraAndRadiiAndDynamicAtmosphereColor.w > 0.0) ? czm_sunPositionWC - czm_viewerPositionWC : czm_viewerPositionWC;\\n\\\n    lightDir = normalize(lightDir);\\n\\\n\\n\\\n    for(int i=0; i<nSamples; i++)\\n\\\n    {\\n\\\n        float height = length(samplePoint);\\n\\\n        float depth = exp((atmosphereScale / rayleighScaleDepth ) * (innerRadius - height));\\n\\\n        float fLightAngle = dot(lightDir, samplePoint) / height;\\n\\\n        float fCameraAngle = dot(ray, samplePoint) / height;\\n\\\n        float fScatter = (startOffset + depth*(scale(fLightAngle) - scale(fCameraAngle)));\\n\\\n        vec3 attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\\n\\\n        frontColor += attenuate * (depth * scaledLength);\\n\\\n        samplePoint += sampleRay;\\n\\\n    }\\n\\\n\\n\\\n    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\\n\\\n    v_mieColor = frontColor * KmESun;\\n\\\n    v_rayleighColor = frontColor * (InvWavelength * KrESun);\\n\\\n    v_toCamera = czm_viewerPositionWC - positionV3;\\n\\\n    gl_Position = czm_modelViewProjection * position;\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/BoxGeometry',\n        '../Core/Cartesian3',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/GeometryPipeline',\n        '../Core/Matrix4',\n        '../Core/VertexFormat',\n        '../Renderer/BufferUsage',\n        '../Renderer/CubeMap',\n        '../Renderer/DrawCommand',\n        '../Renderer/loadCubeMap',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderProgram',\n        '../Renderer/ShaderSource',\n        '../Renderer/VertexArray',\n        '../Shaders/SkyBoxFS',\n        '../Shaders/SkyBoxVS',\n        './BlendingState',\n        './SceneMode'\n    ], function(\n        BoxGeometry,\n        Cartesian3,\n        defaultValue,\n        defined,\n        destroyObject,\n        DeveloperError,\n        GeometryPipeline,\n        Matrix4,\n        VertexFormat,\n        BufferUsage,\n        CubeMap,\n        DrawCommand,\n        loadCubeMap,\n        RenderState,\n        ShaderProgram,\n        ShaderSource,\n        VertexArray,\n        SkyBoxFS,\n        SkyBoxVS,\n        BlendingState,\n        SceneMode) {\n    'use strict';\n\n    /**\n     * A sky box around the scene to draw stars.  The sky box is defined using the True Equator Mean Equinox (TEME) axes.\n     * <p>\n     * This is only supported in 3D.  The sky box is faded out when morphing to 2D or Columbus view.  The size of\n     * the sky box must not exceed {@link Scene#maximumCubeMapSize}.\n     * </p>\n     *\n     * @alias SkyBox\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Object} [options.sources] The source URL or <code>Image</code> object for each of the six cube map faces.  See the example below.\n     * @param {Boolean} [options.show=true] Determines if this primitive will be shown.\n     *\n     *\n     * @example\n     * scene.skyBox = new Cesium.SkyBox({\n     *   sources : {\n     *     positiveX : 'skybox_px.png',\n     *     negativeX : 'skybox_nx.png',\n     *     positiveY : 'skybox_py.png',\n     *     negativeY : 'skybox_ny.png',\n     *     positiveZ : 'skybox_pz.png',\n     *     negativeZ : 'skybox_nz.png'\n     *   }\n     * });\n     *\n     * @see Scene#skyBox\n     * @see Transforms.computeTemeToPseudoFixedMatrix\n     */\n    function SkyBox(options) {\n        /**\n         * The sources used to create the cube map faces: an object\n         * with <code>positiveX</code>, <code>negativeX</code>, <code>positiveY</code>,\n         * <code>negativeY</code>, <code>positiveZ</code>, and <code>negativeZ</code> properties.\n         * These can be either URLs or <code>Image</code> objects.\n         *\n         * @type Object\n         * @default undefined\n         */\n        this.sources = options.sources;\n        this._sources = undefined;\n\n        /**\n         * Determines if the sky box will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        this._command = new DrawCommand({\n            modelMatrix : Matrix4.clone(Matrix4.IDENTITY),\n            owner : this\n        });\n        this._cubeMap = undefined;\n\n        this._attributeLocations = undefined;\n        this._useHdr = undefined;\n    }\n\n    /**\n     * Called when {@link Viewer} or {@link CesiumWidget} render the scene to\n     * get the draw commands needed to render this primitive.\n     * <p>\n     * Do not call this function directly.  This is documented just to\n     * list the exceptions that may be propagated when the scene is rendered:\n     * </p>\n     *\n     * @exception {DeveloperError} this.sources is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\n     * @exception {DeveloperError} this.sources properties must all be the same type.\n     */\n    SkyBox.prototype.update = function(frameState, useHdr) {\n        var that = this;\n\n        if (!this.show) {\n            return undefined;\n        }\n\n        if ((frameState.mode !== SceneMode.SCENE3D) &&\n            (frameState.mode !== SceneMode.MORPHING)) {\n            return undefined;\n        }\n\n        // The sky box is only rendered during the render pass; it is not pickable, it doesn't cast shadows, etc.\n        if (!frameState.passes.render) {\n            return undefined;\n        }\n\n        var context = frameState.context;\n\n        if (this._sources !== this.sources) {\n            this._sources = this.sources;\n            var sources = this.sources;\n\n            \n\n            if (typeof sources.positiveX === 'string') {\n                // Given urls for cube-map images.  Load them.\n                loadCubeMap(context, this._sources).then(function(cubeMap) {\n                    that._cubeMap = that._cubeMap && that._cubeMap.destroy();\n                    that._cubeMap = cubeMap;\n                });\n            } else {\n                this._cubeMap = this._cubeMap && this._cubeMap.destroy();\n                this._cubeMap = new CubeMap({\n                    context : context,\n                    source : sources\n                });\n            }\n        }\n\n        var command = this._command;\n\n        if (!defined(command.vertexArray)) {\n            command.uniformMap = {\n                u_cubeMap: function() {\n                    return that._cubeMap;\n                }\n            };\n\n            var geometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n                dimensions : new Cartesian3(2.0, 2.0, 2.0),\n                vertexFormat : VertexFormat.POSITION_ONLY\n            }));\n            var attributeLocations = this._attributeLocations = GeometryPipeline.createAttributeLocations(geometry);\n\n            command.vertexArray = VertexArray.fromGeometry({\n                context : context,\n                geometry : geometry,\n                attributeLocations : attributeLocations,\n                bufferUsage : BufferUsage.STATIC_DRAW\n            });\n\n            command.renderState = RenderState.fromCache({\n                blending : BlendingState.ALPHA_BLEND\n            });\n        }\n\n        if (!defined(command.shaderProgram) || this._useHdr !== useHdr) {\n            var fs = new ShaderSource({\n                defines : [useHdr ? 'HDR' : ''],\n                sources : [SkyBoxFS]\n            });\n            command.shaderProgram = ShaderProgram.fromCache({\n                context : context,\n                vertexShaderSource : SkyBoxVS,\n                fragmentShaderSource : fs,\n                attributeLocations : this._attributeLocations\n            });\n            this._useHdr = useHdr;\n        }\n\n        if (!defined(this._cubeMap)) {\n            return undefined;\n        }\n\n        return command;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see SkyBox#destroy\n     */\n    SkyBox.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * skyBox = skyBox && skyBox.destroy();\n     *\n     * @see SkyBox#isDestroyed\n     */\n    SkyBox.prototype.destroy = function() {\n        var command = this._command;\n        command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n        command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n        this._cubeMap = this._cubeMap && this._cubeMap.destroy();\n        return destroyObject(this);\n    };\n\n    return SkyBox;\n});\n","define([\n        '../Core/Check',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/Resource',\n        '../ThirdParty/when',\n        './CubeMap'\n    ], function(\n        Check,\n        defined,\n        DeveloperError,\n        Resource,\n        when,\n        CubeMap) {\n    'use strict';\n\n    /**\n     * Asynchronously loads six images and creates a cube map.  Returns a promise that\n     * will resolve to a {@link CubeMap} once loaded, or reject if any image fails to load.\n     *\n     * @exports loadCubeMap\n     *\n     * @param {Context} context The context to use to create the cube map.\n     * @param {Object} urls The source URL of each image.  See the example below.\n     * @returns {Promise.<CubeMap>} a promise that will resolve to the requested {@link CubeMap} when loaded.\n     *\n     * @exception {DeveloperError} context is required.\n     * @exception {DeveloperError} urls is required and must have positiveX, negativeX, positiveY, negativeY, positiveZ, and negativeZ properties.\n     *\n     *\n     * @example\n     * Cesium.loadCubeMap(context, {\n     *     positiveX : 'skybox_px.png',\n     *     negativeX : 'skybox_nx.png',\n     *     positiveY : 'skybox_py.png',\n     *     negativeY : 'skybox_ny.png',\n     *     positiveZ : 'skybox_pz.png',\n     *     negativeZ : 'skybox_nz.png'\n     * }).then(function(cubeMap) {\n     *     // use the cubemap\n     * }).otherwise(function(error) {\n     *     // an error occurred\n     * });\n     *\n     * @see {@link http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing}\n     * @see {@link http://wiki.commonjs.org/wiki/Promises/A|CommonJS Promises/A}\n     *\n     * @private\n     */\n    function loadCubeMap(context, urls) {\n        \n\n        // PERFORMANCE_IDEA: Given the size of some cube maps, we should consider tiling them, which\n        // would prevent hiccups when uploading, for example, six 4096x4096 textures to the GPU.\n        //\n        // Also, it is perhaps acceptable to use the context here in the callbacks, but\n        // ideally, we would do it in the primitive's update function.\n        var flipOptions = {\n            flipY : true,\n            preferImageBitmap: true\n        };\n\n        var facePromises = [\n            Resource.createIfNeeded(urls.positiveX).fetchImage(flipOptions),\n            Resource.createIfNeeded(urls.negativeX).fetchImage(flipOptions),\n            Resource.createIfNeeded(urls.positiveY).fetchImage(flipOptions),\n            Resource.createIfNeeded(urls.negativeY).fetchImage(flipOptions),\n            Resource.createIfNeeded(urls.positiveZ).fetchImage(flipOptions),\n            Resource.createIfNeeded(urls.negativeZ).fetchImage(flipOptions)\n        ];\n\n        return when.all(facePromises, function(images) {\n            return new CubeMap({\n                context : context,\n                source : {\n                    positiveX : images[0],\n                    negativeX : images[1],\n                    positiveY : images[2],\n                    negativeY : images[3],\n                    positiveZ : images[4],\n                    negativeZ : images[5]\n                }\n            });\n        });\n    }\n\n    return loadCubeMap;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform samplerCube u_cubeMap;\\n\\\n\\n\\\nvarying vec3 v_texCoord;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = textureCube(u_cubeMap, normalize(v_texCoord));\\n\\\n    gl_FragColor = vec4(czm_gammaCorrect(color).rgb, czm_morphTime);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec3 position;\\n\\\n\\n\\\nvarying vec3 v_texCoord;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 p = czm_viewRotation * (czm_temeToPseudoFixed * (czm_entireFrustum.y * position));\\n\\\n    gl_Position = czm_projection * vec4(p, 1.0);\\n\\\n    v_texCoord = position.xyz;\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/BoundingSphere',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/ComponentDatatype',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/IndexDatatype',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/PixelFormat',\n        '../Core/PrimitiveType',\n        '../Renderer/Buffer',\n        '../Renderer/BufferUsage',\n        '../Renderer/ComputeCommand',\n        '../Renderer/DrawCommand',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderProgram',\n        '../Renderer/Texture',\n        '../Renderer/VertexArray',\n        '../Shaders/SunFS',\n        '../Shaders/SunTextureFS',\n        '../Shaders/SunVS',\n        './BlendingState',\n        './SceneMode',\n        './SceneTransforms'\n    ], function(\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        ComponentDatatype,\n        defined,\n        defineProperties,\n        destroyObject,\n        IndexDatatype,\n        CesiumMath,\n        Matrix4,\n        PixelFormat,\n        PrimitiveType,\n        Buffer,\n        BufferUsage,\n        ComputeCommand,\n        DrawCommand,\n        PixelDatatype,\n        RenderState,\n        ShaderProgram,\n        Texture,\n        VertexArray,\n        SunFS,\n        SunTextureFS,\n        SunVS,\n        BlendingState,\n        SceneMode,\n        SceneTransforms) {\n    'use strict';\n\n    /**\n     * Draws a sun billboard.\n     * <p>This is only supported in 3D and Columbus view.</p>\n     *\n     * @alias Sun\n     * @constructor\n     *\n     *\n     * @example\n     * scene.sun = new Cesium.Sun();\n     *\n     * @see Scene#sun\n     */\n    function Sun() {\n        /**\n         * Determines if the sun will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = true;\n\n        this._drawCommand = new DrawCommand({\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingVolume : new BoundingSphere(),\n            owner : this\n        });\n        this._commands = {\n            drawCommand : this._drawCommand,\n            computeCommand : undefined\n        };\n        this._boundingVolume = new BoundingSphere();\n        this._boundingVolume2D = new BoundingSphere();\n\n        this._texture = undefined;\n        this._drawingBufferWidth = undefined;\n        this._drawingBufferHeight = undefined;\n        this._radiusTS = undefined;\n        this._size = undefined;\n\n        this.glowFactor = 1.0;\n        this._glowFactorDirty = false;\n\n        this._useHdr = undefined;\n\n        var that = this;\n        this._uniformMap = {\n            u_texture : function() {\n                return that._texture;\n            },\n            u_size : function() {\n                return that._size;\n            }\n        };\n    }\n\n    defineProperties(Sun.prototype, {\n        /**\n         * Gets or sets a number that controls how \"bright\" the Sun's lens flare appears\n         * to be.  Zero shows just the Sun's disc without any flare.\n         * Use larger values for a more pronounced flare around the Sun.\n         *\n         * @memberof Sun.prototype\n         * @type {Number}\n         * @default 1.0\n         */\n        glowFactor : {\n            get : function () { return this._glowFactor; },\n            set : function (glowFactor) {\n                glowFactor = Math.max(glowFactor, 0.0);\n                this._glowFactor = glowFactor;\n                this._glowFactorDirty = true;\n            }\n        }\n    });\n\n    var scratchPositionWC = new Cartesian2();\n    var scratchLimbWC = new Cartesian2();\n    var scratchPositionEC = new Cartesian4();\n    var scratchCartesian4 = new Cartesian4();\n\n    /**\n     * @private\n     */\n    Sun.prototype.update = function(frameState, passState, useHdr) {\n        if (!this.show) {\n            return undefined;\n        }\n\n        var mode = frameState.mode;\n        if (mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n            return undefined;\n        }\n\n        if (!frameState.passes.render) {\n            return undefined;\n        }\n\n        var context = frameState.context;\n        var drawingBufferWidth = passState.viewport.width;\n        var drawingBufferHeight = passState.viewport.height;\n\n        if (!defined(this._texture) ||\n                drawingBufferWidth !== this._drawingBufferWidth ||\n                drawingBufferHeight !== this._drawingBufferHeight ||\n                this._glowFactorDirty ||\n                useHdr !== this._useHdr) {\n            this._texture = this._texture && this._texture.destroy();\n            this._drawingBufferWidth = drawingBufferWidth;\n            this._drawingBufferHeight = drawingBufferHeight;\n            this._glowFactorDirty = false;\n            this._useHdr = useHdr;\n\n            var size = Math.max(drawingBufferWidth, drawingBufferHeight);\n            size = Math.pow(2.0, Math.ceil(Math.log(size) / Math.log(2.0)) - 2.0);\n\n            // The size computed above can be less than 1.0 if size < 4.0. This will probably\n            // never happen in practice, but does in the tests. Clamp to 1.0 to prevent WebGL\n            // errors in the tests.\n            size = Math.max(1.0, size);\n\n            var pixelDatatype = useHdr ? (context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT) : PixelDatatype.UNSIGNED_BYTE;\n            this._texture = new Texture({\n                context : context,\n                width : size,\n                height : size,\n                pixelFormat : PixelFormat.RGBA,\n                pixelDatatype : pixelDatatype\n            });\n\n            this._glowLengthTS = this._glowFactor * 5.0;\n            this._radiusTS = (1.0 / (1.0 + 2.0 * this._glowLengthTS)) * 0.5;\n\n            var that = this;\n            var uniformMap = {\n                u_radiusTS : function() {\n                    return that._radiusTS;\n                }\n            };\n\n            this._commands.computeCommand = new ComputeCommand({\n                fragmentShaderSource : SunTextureFS,\n                outputTexture  : this._texture,\n                uniformMap : uniformMap,\n                persists : false,\n                owner : this,\n                postExecute : function() {\n                    that._commands.computeCommand = undefined;\n                }\n            });\n        }\n\n        var drawCommand = this._drawCommand;\n\n        if (!defined(drawCommand.vertexArray)) {\n            var attributeLocations = {\n                direction : 0\n            };\n\n            var directions = new Uint8Array(4 * 2);\n            directions[0] = 0;\n            directions[1] = 0;\n\n            directions[2] = 255;\n            directions[3] = 0.0;\n\n            directions[4] = 255;\n            directions[5] = 255;\n\n            directions[6] = 0.0;\n            directions[7] = 255;\n\n            var vertexBuffer = Buffer.createVertexBuffer({\n                context : context,\n                typedArray : directions,\n                usage : BufferUsage.STATIC_DRAW\n            });\n            var attributes = [{\n                index : attributeLocations.direction,\n                vertexBuffer : vertexBuffer,\n                componentsPerAttribute : 2,\n                normalize : true,\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE\n            }];\n            // Workaround Internet Explorer 11.0.8 lack of TRIANGLE_FAN\n            var indexBuffer = Buffer.createIndexBuffer({\n                context : context,\n                typedArray : new Uint16Array([0, 1, 2, 0, 2, 3]),\n                usage : BufferUsage.STATIC_DRAW,\n                indexDatatype : IndexDatatype.UNSIGNED_SHORT\n            });\n            drawCommand.vertexArray = new VertexArray({\n                context : context,\n                attributes : attributes,\n                indexBuffer : indexBuffer\n            });\n\n            drawCommand.shaderProgram = ShaderProgram.fromCache({\n                context : context,\n                vertexShaderSource : SunVS,\n                fragmentShaderSource : SunFS,\n                attributeLocations : attributeLocations\n            });\n\n            drawCommand.renderState = RenderState.fromCache({\n                blending : BlendingState.ALPHA_BLEND\n            });\n            drawCommand.uniformMap = this._uniformMap;\n        }\n\n        var sunPosition = context.uniformState.sunPositionWC;\n        var sunPositionCV = context.uniformState.sunPositionColumbusView;\n\n        var boundingVolume = this._boundingVolume;\n        var boundingVolume2D = this._boundingVolume2D;\n\n        Cartesian3.clone(sunPosition, boundingVolume.center);\n        boundingVolume2D.center.x = sunPositionCV.z;\n        boundingVolume2D.center.y = sunPositionCV.x;\n        boundingVolume2D.center.z = sunPositionCV.y;\n\n        boundingVolume.radius = CesiumMath.SOLAR_RADIUS + CesiumMath.SOLAR_RADIUS * this._glowLengthTS;\n        boundingVolume2D.radius = boundingVolume.radius;\n\n        if (mode === SceneMode.SCENE3D) {\n            BoundingSphere.clone(boundingVolume, drawCommand.boundingVolume);\n        } else if (mode === SceneMode.COLUMBUS_VIEW) {\n            BoundingSphere.clone(boundingVolume2D, drawCommand.boundingVolume);\n        }\n\n        var position = SceneTransforms.computeActualWgs84Position(frameState, sunPosition, scratchCartesian4);\n\n        var dist = Cartesian3.magnitude(Cartesian3.subtract(position, frameState.camera.position, scratchCartesian4));\n        var projMatrix = context.uniformState.projection;\n\n        var positionEC = scratchPositionEC;\n        positionEC.x = 0;\n        positionEC.y = 0;\n        positionEC.z = -dist;\n        positionEC.w = 1;\n\n        var positionCC = Matrix4.multiplyByVector(projMatrix, positionEC, scratchCartesian4);\n        var positionWC = SceneTransforms.clipToGLWindowCoordinates(passState.viewport, positionCC, scratchPositionWC);\n\n        positionEC.x = CesiumMath.SOLAR_RADIUS;\n        var limbCC = Matrix4.multiplyByVector(projMatrix, positionEC, scratchCartesian4);\n        var limbWC = SceneTransforms.clipToGLWindowCoordinates(passState.viewport, limbCC, scratchLimbWC);\n\n        this._size = Math.ceil(Cartesian2.magnitude(Cartesian2.subtract(limbWC, positionWC, scratchCartesian4)));\n        this._size = 2.0 * this._size * (1.0 + 2.0 * this._glowLengthTS);\n\n        return this._commands;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see Sun#destroy\n     */\n    Sun.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * sun = sun && sun.destroy();\n     *\n     *  @see Sun#isDestroyed\n     */\n    Sun.prototype.destroy = function() {\n        var command = this._drawCommand;\n        command.vertexArray = command.vertexArray && command.vertexArray.destroy();\n        command.shaderProgram = command.shaderProgram && command.shaderProgram.destroy();\n\n        this._texture = this._texture && this._texture.destroy();\n\n        return destroyObject(this);\n    };\n\n    return Sun;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D u_texture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(u_texture, v_textureCoordinates);\\n\\\n    gl_FragColor = czm_gammaCorrect(color);\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform float u_radiusTS;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec2 rotate(vec2 p, vec2 direction)\\n\\\n{\\n\\\n    return vec2(p.x * direction.x - p.y * direction.y, p.x * direction.y + p.y * direction.x);\\n\\\n}\\n\\\n\\n\\\nvec4 addBurst(vec2 position, vec2 direction, float lengthScalar)\\n\\\n{\\n\\\n    vec2 rotatedPosition = rotate(position, direction) * vec2(25.0, 0.75);\\n\\\n    float radius = length(rotatedPosition) * lengthScalar;\\n\\\n    float burst = 1.0 - smoothstep(0.0, 0.55, radius);\\n\\\n    return vec4(burst);\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    float lengthScalar = 2.0 / sqrt(2.0);\\n\\\n    vec2 position = v_textureCoordinates - vec2(0.5);\\n\\\n    float radius = length(position) * lengthScalar;\\n\\\n    float surface = step(radius, u_radiusTS);\\n\\\n    vec4 color = vec4(vec2(1.0), surface + 0.2, surface);\\n\\\n\\n\\\n    float glow = 1.0 - smoothstep(0.0, 0.55, radius);\\n\\\n    color.ba += mix(vec2(0.0), vec2(1.0), glow) * 0.75;\\n\\\n\\n\\\n    vec4 burst = vec4(0.0);\\n\\\n\\n\\\n    // The following loop has been manually unrolled for speed, to\\n\\\n    // avoid sin() and cos().\\n\\\n    //\\n\\\n    //for (float i = 0.4; i < 3.2; i += 1.047) {\\n\\\n    //    vec2 direction = vec2(sin(i), cos(i));\\n\\\n    //    burst += 0.4 * addBurst(position, direction, lengthScalar);\\n\\\n    //\\n\\\n    //    direction = vec2(sin(i - 0.08), cos(i - 0.08));\\n\\\n    //    burst += 0.3 * addBurst(position, direction, lengthScalar);\\n\\\n    //}\\n\\\n\\n\\\n    burst += 0.4 * addBurst(position, vec2(0.38942,  0.92106), lengthScalar);  // angle == 0.4\\n\\\n    burst += 0.4 * addBurst(position, vec2(0.99235,  0.12348), lengthScalar);  // angle == 0.4 + 1.047\\n\\\n    burst += 0.4 * addBurst(position, vec2(0.60327, -0.79754), lengthScalar);  // angle == 0.4 + 1.047 * 2.0\\n\\\n\\n\\\n    burst += 0.3 * addBurst(position, vec2(0.31457,  0.94924), lengthScalar);  // angle == 0.4 - 0.08\\n\\\n    burst += 0.3 * addBurst(position, vec2(0.97931,  0.20239), lengthScalar);  // angle == 0.4 + 1.047 - 0.08\\n\\\n    burst += 0.3 * addBurst(position, vec2(0.66507, -0.74678), lengthScalar);  // angle == 0.4 + 1.047 * 2.0 - 0.08\\n\\\n\\n\\\n    // End of manual loop unrolling.\\n\\\n\\n\\\n    color += clamp(burst, vec4(0.0), vec4(1.0)) * 0.15;\\n\\\n\\n\\\n    gl_FragColor = clamp(color, vec4(0.0), vec4(1.0));\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec2 direction;\\n\\\n\\n\\\nuniform float u_size;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    vec4 position;\\n\\\n    if (czm_morphTime == 1.0)\\n\\\n    {\\n\\\n        position = vec4(czm_sunPositionWC, 1.0);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        position = vec4(czm_sunPositionColumbusView.zxy, 1.0);\\n\\\n    }\\n\\\n    \\n\\\n    vec4 positionEC = czm_view * position;\\n\\\n    vec4 positionWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n    \\n\\\n    vec2 halfSize = vec2(u_size * 0.5);\\n\\\n    halfSize *= ((direction * 2.0) - 1.0);\\n\\\n    \\n\\\n    gl_Position = czm_viewportOrthographic * vec4(positionWC.xy + halfSize, -positionWC.z, 1.0);\\n\\\n    \\n\\\n    v_textureCoordinates = direction;\\n\\\n}\\n\\\n\";\n});","module.exports = __webpack_public_path__ + \"aa1788b9411f5c1262a1e34dc560fc3f.jpg\";","module.exports = __webpack_public_path__ + \"1e6c4242b78b7717e8ffce219d09a402.jpg\";","module.exports = __webpack_public_path__ + \"2f4b61fff1fc654b6a75d19448eeef25.jpg\";","module.exports = __webpack_public_path__ + \"c4725d18f3c291232a047310254e85f2.jpg\";","module.exports = __webpack_public_path__ + \"c7fdec957e0d7d159977a6f405a40738.jpg\";","module.exports = __webpack_public_path__ + \"e4caa789e1de589c08641109a9a59131.jpg\";","define([\n    '../Core/defaultValue',\n    '../Core/defined',\n    '../Core/defineProperties',\n    '../Core/destroyObject',\n    '../Core/Check',\n    '../Core/DeveloperError',\n    './PrimitiveCollection'\n], function(\n    defaultValue,\n    defined,\n    defineProperties,\n    destroyObject,\n    Check,\n    DeveloperError,\n    PrimitiveCollection) {\n    'use strict';\n\n    /**\n     * A primitive collection for helping maintain the order or ground primitives based on a z-index\n     *\n     * @private\n     */\n    function OrderedGroundPrimitiveCollection() {\n        this._length = 0;\n        this._collections = {};\n        this._collectionsArray = [];\n\n        this.show = true;\n    }\n\n    defineProperties(OrderedGroundPrimitiveCollection.prototype, {\n        /**\n         * Gets the number of primitives in the collection.\n         *\n         * @memberof OrderedGroundPrimitiveCollection.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                return this._length;\n            }\n        }\n    });\n\n    /**\n     * Adds a primitive to the collection.\n     *\n     * @param {GroundPrimitive} primitive The primitive to add.\n     * @param {Number} [zIndex = 0] The index of the primitive\n     * @returns {GroundPrimitive} The primitive added to the collection.\n     */\n    OrderedGroundPrimitiveCollection.prototype.add = function(primitive, zIndex) {\n        \n\n        zIndex = defaultValue(zIndex, 0);\n        var collection = this._collections[zIndex];\n        if (!defined(collection)) {\n            collection = new PrimitiveCollection({ destroyPrimitives: false });\n            collection._zIndex = zIndex;\n            this._collections[zIndex] = collection;\n            var array = this._collectionsArray;\n            var i = 0;\n            while (i < array.length && array[i]._zIndex < zIndex) {\n                i++;\n            }\n            array.splice(i, 0, collection);\n        }\n\n        collection.add(primitive);\n        this._length++;\n        primitive._zIndex = zIndex;\n\n        return primitive;\n    };\n\n    /**\n     * Adjusts the z-index\n     * @param {GroundPrimitive} primitive\n     * @param {Number} zIndex\n     */\n    OrderedGroundPrimitiveCollection.prototype.set = function(primitive, zIndex) {\n        \n\n        if (zIndex === primitive._zIndex) {\n            return primitive;\n        }\n\n        this.remove(primitive, true);\n        this.add(primitive, zIndex);\n\n        return primitive;\n    };\n\n    /**\n     * Removes a primitive from the collection.\n     *\n     * @param {Object} primitive The primitive to remove.\n     * @param {Boolean} [doNotDestroy = false]\n     * @returns {Boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n     */\n    OrderedGroundPrimitiveCollection.prototype.remove = function(primitive, doNotDestroy) {\n        if (this.contains(primitive)) {\n            var index = primitive._zIndex;\n            var collection = this._collections[index];\n            var result;\n            if (doNotDestroy) {\n                result = collection.remove(primitive);\n            } else {\n                result = collection.removeAndDestroy(primitive);\n            }\n\n            if (result) {\n                this._length--;\n            }\n\n            if (collection.length === 0) {\n                this._collectionsArray.splice(this._collectionsArray.indexOf(collection), 1);\n                this._collections[index] = undefined;\n                collection.destroy();\n            }\n\n            return result;\n        }\n\n        return false;\n    };\n\n    /**\n     * Removes all primitives in the collection.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see OrderedGroundPrimitiveCollection#destroyPrimitives\n     */\n    OrderedGroundPrimitiveCollection.prototype.removeAll = function() {\n        var collections = this._collectionsArray;\n        for (var i = 0; i < collections.length; i++) {\n            var collection = collections[i];\n            collection.destroyPrimitives = true;\n            collection.destroy();\n        }\n\n        this._collections = {};\n        this._collectionsArray = [];\n        this._length = 0;\n    };\n\n    /**\n     * Determines if this collection contains a primitive.\n     *\n     * @param {Object} primitive The primitive to check for.\n     * @returns {Boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n     */\n    OrderedGroundPrimitiveCollection.prototype.contains = function(primitive) {\n        if (!defined(primitive)) {\n            return false;\n        }\n        var collection = this._collections[primitive._zIndex];\n        return defined(collection) && collection.contains(primitive);\n    };\n\n    /**\n     * @private\n     */\n    OrderedGroundPrimitiveCollection.prototype.update = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        var collections = this._collectionsArray;\n        for (var i = 0 ; i < collections.length; i++) {\n            collections[i].update(frameState);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see OrderedGroundPrimitiveCollection#destroy\n     */\n    OrderedGroundPrimitiveCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n     * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n     * collector to destroy this collection.\n     * <br /><br />\n     * Since destroying a collection destroys all the contained primitives, only destroy a collection\n     * when you are sure no other code is still using any of the contained primitives.\n     * <br /><br />\n     * Once this collection is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * primitives = primitives && primitives.destroy();\n     *\n     * @see OrderedGroundPrimitiveCollection#isDestroyed\n     */\n    OrderedGroundPrimitiveCollection.prototype.destroy = function() {\n        this.removeAll();\n        return destroyObject(this);\n    };\n\n    return OrderedGroundPrimitiveCollection;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/BoundingRectangle',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayCondition',\n        '../Core/NearFarScalar',\n        '../Scene/HeightReference',\n        '../Scene/HorizontalOrigin',\n        '../Scene/VerticalOrigin',\n        './BoundingSphereState',\n        './Property'\n    ], function(\n        AssociativeArray,\n        BoundingRectangle,\n        Cartesian2,\n        Cartesian3,\n        Color,\n        defined,\n        destroyObject,\n        DeveloperError,\n        DistanceDisplayCondition,\n        NearFarScalar,\n        HeightReference,\n        HorizontalOrigin,\n        VerticalOrigin,\n        BoundingSphereState,\n        Property) {\n    'use strict';\n\n    var defaultColor = Color.WHITE;\n    var defaultEyeOffset = Cartesian3.ZERO;\n    var defaultHeightReference = HeightReference.NONE;\n    var defaultPixelOffset = Cartesian2.ZERO;\n    var defaultScale = 1.0;\n    var defaultRotation = 0.0;\n    var defaultAlignedAxis = Cartesian3.ZERO;\n    var defaultHorizontalOrigin = HorizontalOrigin.CENTER;\n    var defaultVerticalOrigin = VerticalOrigin.CENTER;\n    var defaultSizeInMeters = false;\n\n    var positionScratch = new Cartesian3();\n    var colorScratch = new Color();\n    var eyeOffsetScratch = new Cartesian3();\n    var pixelOffsetScratch = new Cartesian2();\n    var scaleByDistanceScratch = new NearFarScalar();\n    var translucencyByDistanceScratch = new NearFarScalar();\n    var pixelOffsetScaleByDistanceScratch = new NearFarScalar();\n    var boundingRectangleScratch = new BoundingRectangle();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.billboard = undefined;\n        this.textureValue = undefined;\n    }\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#billboard} to a {@link Billboard}.\n     * @alias BillboardVisualizer\n     * @constructor\n     *\n     * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function BillboardVisualizer(entityCluster, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n\n        this._cluster = entityCluster;\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    BillboardVisualizer.prototype.update = function(time) {\n        \n\n        var items = this._items.values;\n        var cluster = this._cluster;\n\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var billboardGraphics = entity._billboard;\n            var textureValue;\n            var billboard = item.billboard;\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(billboardGraphics._show, time, true);\n            var position;\n            if (show) {\n                position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n                textureValue = Property.getValueOrUndefined(billboardGraphics._image, time);\n                show = defined(position) && defined(textureValue);\n            }\n\n            if (!show) {\n                //don't bother creating or updating anything else\n                returnPrimitive(item, entity, cluster);\n                continue;\n            }\n\n            if (!Property.isConstant(entity._position)) {\n                cluster._clusterDirty = true;\n            }\n\n            if (!defined(billboard)) {\n                billboard = cluster.getBillboard(entity);\n                billboard.id = entity;\n                billboard.image = undefined;\n                item.billboard = billboard;\n            }\n\n            billboard.show = show;\n            if (!defined(billboard.image) || item.textureValue !== textureValue) {\n                billboard.image = textureValue;\n                item.textureValue = textureValue;\n            }\n            billboard.position = position;\n            billboard.color = Property.getValueOrDefault(billboardGraphics._color, time, defaultColor, colorScratch);\n            billboard.eyeOffset = Property.getValueOrDefault(billboardGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n            billboard.heightReference = Property.getValueOrDefault(billboardGraphics._heightReference, time, defaultHeightReference);\n            billboard.pixelOffset = Property.getValueOrDefault(billboardGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n            billboard.scale = Property.getValueOrDefault(billboardGraphics._scale, time, defaultScale);\n            billboard.rotation = Property.getValueOrDefault(billboardGraphics._rotation, time, defaultRotation);\n            billboard.alignedAxis = Property.getValueOrDefault(billboardGraphics._alignedAxis, time, defaultAlignedAxis);\n            billboard.horizontalOrigin = Property.getValueOrDefault(billboardGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n            billboard.verticalOrigin = Property.getValueOrDefault(billboardGraphics._verticalOrigin, time, defaultVerticalOrigin);\n            billboard.width = Property.getValueOrUndefined(billboardGraphics._width, time);\n            billboard.height = Property.getValueOrUndefined(billboardGraphics._height, time);\n            billboard.scaleByDistance = Property.getValueOrUndefined(billboardGraphics._scaleByDistance, time, scaleByDistanceScratch);\n            billboard.translucencyByDistance = Property.getValueOrUndefined(billboardGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n            billboard.pixelOffsetScaleByDistance = Property.getValueOrUndefined(billboardGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n            billboard.sizeInMeters = Property.getValueOrDefault(billboardGraphics._sizeInMeters, time, defaultSizeInMeters);\n            billboard.distanceDisplayCondition = Property.getValueOrUndefined(billboardGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n            billboard.disableDepthTestDistance = Property.getValueOrUndefined(billboardGraphics._disableDepthTestDistance, time);\n\n            var subRegion = Property.getValueOrUndefined(billboardGraphics._imageSubRegion, time, boundingRectangleScratch);\n            if (defined(subRegion)) {\n                billboard.setImageSubRegion(billboard._imageId, subRegion);\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    BillboardVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var item = this._items.get(entity.id);\n        if (!defined(item) || !defined(item.billboard)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var billboard = item.billboard;\n        if (billboard.heightReference === HeightReference.NONE) {\n            result.center = Cartesian3.clone(billboard.position, result.center);\n        } else {\n            if (!defined(billboard._clampedPosition)) {\n                return BoundingSphereState.PENDING;\n            }\n            result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n        }\n        result.radius = 0;\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    BillboardVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    BillboardVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(BillboardVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entityCollection.values;\n        for (var i = 0; i < entities.length; i++) {\n            this._cluster.removeBillboard(entities[i]);\n        }\n        return destroyObject(this);\n    };\n\n    BillboardVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var items = this._items;\n        var cluster = this._cluster;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._billboard) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._billboard) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                returnPrimitive(items.get(entity.id), entity, cluster);\n                items.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            returnPrimitive(items.get(entity.id), entity, cluster);\n            items.remove(entity.id);\n        }\n    };\n\n    function returnPrimitive(item, entity, cluster) {\n        if (defined(item)) {\n            item.billboard = undefined;\n            cluster.removeBillboard(entity);\n        }\n    }\n\n    return BillboardVisualizer;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/BoundingSphere',\n        '../Core/Check',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/Event',\n        '../Core/EventHelper',\n        '../Scene/ClassificationType',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        '../Scene/ShadowMode',\n        './BoundingSphereState',\n        './BoxGeometryUpdater',\n        './ColorMaterialProperty',\n        './CorridorGeometryUpdater',\n        './CylinderGeometryUpdater',\n        './DynamicGeometryBatch',\n        './EllipseGeometryUpdater',\n        './EllipsoidGeometryUpdater',\n        './Entity',\n        './PlaneGeometryUpdater',\n        './PolygonGeometryUpdater',\n        './PolylineVolumeGeometryUpdater',\n        './RectangleGeometryUpdater',\n        './StaticGeometryColorBatch',\n        './StaticGeometryPerMaterialBatch',\n        './StaticGroundGeometryColorBatch',\n        './StaticGroundGeometryPerMaterialBatch',\n        './StaticOutlineGeometryBatch',\n        './WallGeometryUpdater'\n    ], function(\n        AssociativeArray,\n        BoundingSphere,\n        Check,\n        defaultValue,\n        defined,\n        destroyObject,\n        Event,\n        EventHelper,\n        ClassificationType,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ShadowMode,\n        BoundingSphereState,\n        BoxGeometryUpdater,\n        ColorMaterialProperty,\n        CorridorGeometryUpdater,\n        CylinderGeometryUpdater,\n        DynamicGeometryBatch,\n        EllipseGeometryUpdater,\n        EllipsoidGeometryUpdater,\n        Entity,\n        PlaneGeometryUpdater,\n        PolygonGeometryUpdater,\n        PolylineVolumeGeometryUpdater,\n        RectangleGeometryUpdater,\n        StaticGeometryColorBatch,\n        StaticGeometryPerMaterialBatch,\n        StaticGroundGeometryColorBatch,\n        StaticGroundGeometryPerMaterialBatch,\n        StaticOutlineGeometryBatch,\n        WallGeometryUpdater) {\n    'use strict';\n\n    var emptyArray = [];\n\n    var geometryUpdaters = [BoxGeometryUpdater, CylinderGeometryUpdater, CorridorGeometryUpdater, EllipseGeometryUpdater, EllipsoidGeometryUpdater, PlaneGeometryUpdater,\n                            PolygonGeometryUpdater, PolylineVolumeGeometryUpdater, RectangleGeometryUpdater, WallGeometryUpdater];\n\n    function GeometryUpdaterSet(entity, scene) {\n        this.entity = entity;\n        this.scene = scene;\n        var updaters = new Array(geometryUpdaters.length);\n        var geometryChanged = new Event();\n        function raiseEvent(geometry) {\n            geometryChanged.raiseEvent(geometry);\n        }\n        var eventHelper = new EventHelper();\n        for (var i = 0; i < updaters.length; i++) {\n            var updater = new geometryUpdaters[i](entity, scene);\n            eventHelper.add(updater.geometryChanged, raiseEvent);\n            updaters[i] = updater;\n        }\n        this.updaters = updaters;\n        this.geometryChanged = geometryChanged;\n        this.eventHelper = eventHelper;\n\n        this._removeEntitySubscription = entity.definitionChanged.addEventListener(GeometryUpdaterSet.prototype._onEntityPropertyChanged, this);\n    }\n\n    GeometryUpdaterSet.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        var updaters = this.updaters;\n        for (var i = 0; i < updaters.length; i++) {\n            updaters[i]._onEntityPropertyChanged(entity, propertyName, newValue, oldValue);\n        }\n    };\n\n    GeometryUpdaterSet.prototype.forEach = function (callback) {\n        var updaters = this.updaters;\n        for (var i = 0; i < updaters.length; i++) {\n            callback(updaters[i]);\n        }\n    };\n\n    GeometryUpdaterSet.prototype.destroy = function() {\n        this.eventHelper.removeAll();\n        var updaters = this.updaters;\n        for (var i = 0; i < updaters.length; i++) {\n            updaters[i].destroy();\n        }\n        this._removeEntitySubscription();\n        destroyObject(this);\n    };\n\n    /**\n     * A general purpose visualizer for geometry represented by {@link Primitive} instances.\n     * @alias GeometryVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n     * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n     */\n    function GeometryVisualizer(scene, entityCollection, primitives, groundPrimitives) {\n        \n\n        primitives = defaultValue(primitives, scene.primitives);\n        groundPrimitives = defaultValue(groundPrimitives, scene.groundPrimitives);\n\n        this._scene = scene;\n        this._primitives = primitives;\n        this._groundPrimitives = groundPrimitives;\n        this._entityCollection = undefined;\n        this._addedObjects = new AssociativeArray();\n        this._removedObjects = new AssociativeArray();\n        this._changedObjects = new AssociativeArray();\n\n        var numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n        this._outlineBatches = new Array(numberOfShadowModes*2);\n        this._closedColorBatches = new Array(numberOfShadowModes*2);\n        this._closedMaterialBatches = new Array(numberOfShadowModes*2);\n        this._openColorBatches = new Array(numberOfShadowModes*2);\n        this._openMaterialBatches = new Array(numberOfShadowModes*2);\n\n        var supportsMaterialsforEntitiesOnTerrain = Entity.supportsMaterialsforEntitiesOnTerrain(scene);\n        this._supportsMaterialsforEntitiesOnTerrain = supportsMaterialsforEntitiesOnTerrain;\n\n        var i;\n        for (i = 0; i < numberOfShadowModes; ++i) {\n            this._outlineBatches[i] = new StaticOutlineGeometryBatch(primitives, scene, i, false);\n            this._outlineBatches[numberOfShadowModes + i] = new StaticOutlineGeometryBatch(primitives, scene, i, true);\n\n            this._closedColorBatches[i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, true, i, true);\n            this._closedColorBatches[numberOfShadowModes + i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, true, i, false);\n\n            this._closedMaterialBatches[i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, true, i, true);\n            this._closedMaterialBatches[numberOfShadowModes + i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, true, i, false);\n\n            this._openColorBatches[i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, false, i, true);\n            this._openColorBatches[numberOfShadowModes + i] = new StaticGeometryColorBatch(primitives, PerInstanceColorAppearance, undefined, false, i, false);\n\n            this._openMaterialBatches[i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, false, i, true);\n            this._openMaterialBatches[numberOfShadowModes + i] = new StaticGeometryPerMaterialBatch(primitives, MaterialAppearance, undefined, false, i, false);\n        }\n\n        var numberOfClassificationTypes = ClassificationType.NUMBER_OF_CLASSIFICATION_TYPES;\n        var groundColorBatches = new Array(numberOfClassificationTypes);\n        var groundMaterialBatches = [];\n        if (supportsMaterialsforEntitiesOnTerrain) {\n            for (i = 0; i < numberOfClassificationTypes; ++i) {\n                groundMaterialBatches.push(new StaticGroundGeometryPerMaterialBatch(groundPrimitives, i, MaterialAppearance));\n                groundColorBatches[i] = new StaticGroundGeometryPerMaterialBatch(groundPrimitives, i, PerInstanceColorAppearance);\n            }\n        } else {\n            for (i = 0; i < numberOfClassificationTypes; ++i) {\n                groundColorBatches[i] = new StaticGroundGeometryColorBatch(groundPrimitives, i);\n            }\n        }\n\n        this._groundColorBatches = groundColorBatches;\n        this._groundMaterialBatches = groundMaterialBatches;\n\n        this._dynamicBatch = new DynamicGeometryBatch(primitives, groundPrimitives);\n\n        this._batches = this._outlineBatches.concat(this._closedColorBatches, this._closedMaterialBatches, this._openColorBatches, this._openMaterialBatches, this._groundColorBatches, this._groundMaterialBatches, this._dynamicBatch);\n\n        this._subscriptions = new AssociativeArray();\n        this._updaterSets = new AssociativeArray();\n\n        this._entityCollection = entityCollection;\n        entityCollection.collectionChanged.addEventListener(GeometryVisualizer.prototype._onCollectionChanged, this);\n        this._onCollectionChanged(entityCollection, entityCollection.values, emptyArray);\n    }\n\n    /**\n     * Updates all of the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n     * false if the visualizer is waiting for asynchronous primitives to be created.\n     */\n    GeometryVisualizer.prototype.update = function(time) {\n        \n\n        var addedObjects = this._addedObjects;\n        var added = addedObjects.values;\n        var removedObjects = this._removedObjects;\n        var removed = removedObjects.values;\n        var changedObjects = this._changedObjects;\n        var changed = changedObjects.values;\n\n        var i;\n        var entity;\n        var id;\n        var updaterSet;\n        var that = this;\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            id = entity.id;\n            updaterSet = this._updaterSets.get(id);\n\n            //If in a single update, an entity gets removed and a new instance\n            //re-added with the same id, the updater no longer tracks the\n            //correct entity, we need to both remove the old one and\n            //add the new one, which is done by pushing the entity\n            //onto the removed/added lists.\n            if (updaterSet.entity === entity) {\n                updaterSet.forEach(function(updater) {\n                    that._removeUpdater(updater);\n                    that._insertUpdaterIntoBatch(time, updater);\n                });\n            } else {\n                removed.push(entity);\n                added.push(entity);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            updaterSet = this._updaterSets.get(id);\n            updaterSet.forEach(this._removeUpdater.bind(this));\n            updaterSet.destroy();\n            this._updaterSets.remove(id);\n            this._subscriptions.get(id)();\n            this._subscriptions.remove(id);\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            updaterSet = new GeometryUpdaterSet(entity, this._scene);\n            this._updaterSets.set(id, updaterSet);\n            updaterSet.forEach(function(updater) {\n                that._insertUpdaterIntoBatch(time, updater);\n            });\n            this._subscriptions.set(id, updaterSet.geometryChanged.addEventListener(GeometryVisualizer._onGeometryChanged, this));\n        }\n\n        addedObjects.removeAll();\n        removedObjects.removeAll();\n        changedObjects.removeAll();\n\n        var isUpdated = true;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            isUpdated = batches[i].update(time) && isUpdated;\n        }\n\n        return isUpdated;\n    };\n\n    var getBoundingSphereArrayScratch = [];\n    var getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    GeometryVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var boundingSpheres = getBoundingSphereArrayScratch;\n        var tmp = getBoundingSphereBoundingSphereScratch;\n\n        var count = 0;\n        var state = BoundingSphereState.DONE;\n        var batches = this._batches;\n        var batchesLength = batches.length;\n\n        var id = entity.id;\n        var updaters = this._updaterSets.get(id).updaters;\n\n        for (var j = 0; j < updaters.length; j++) {\n            var updater = updaters[j];\n            for (var i = 0; i < batchesLength; i++) {\n                state = batches[i].getBoundingSphere(updater, tmp);\n                if (state === BoundingSphereState.PENDING) {\n                    return BoundingSphereState.PENDING;\n                } else if (state === BoundingSphereState.DONE) {\n                    boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n                    count++;\n                }\n            }\n        }\n\n        if (count === 0) {\n            return BoundingSphereState.FAILED;\n        }\n\n        boundingSpheres.length = count;\n        BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    GeometryVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    GeometryVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(GeometryVisualizer.prototype._onCollectionChanged, this);\n        this._addedObjects.removeAll();\n        this._removedObjects.removeAll();\n\n        var i;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            batches[i].removeAllPrimitives();\n        }\n\n        var subscriptions = this._subscriptions.values;\n        length = subscriptions.length;\n        for (i = 0; i < length; i++) {\n            subscriptions[i]();\n        }\n        this._subscriptions.removeAll();\n\n        var updaterSets = this._updaterSets.values;\n        length = updaterSets.length;\n        for (i = 0; i < length; i++) {\n            updaterSets[i].destroy();\n        }\n        this._updaterSets.removeAll();\n        return destroyObject(this);\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer.prototype._removeUpdater = function(updater) {\n        //We don't keep track of which batch an updater is in, so just remove it from all of them.\n        var batches = this._batches;\n        var length = batches.length;\n        for (var i = 0; i < length; i++) {\n            batches[i].remove(updater);\n        }\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer.prototype._insertUpdaterIntoBatch = function(time, updater) {\n        if (updater.isDynamic) {\n            this._dynamicBatch.add(time, updater);\n            return;\n        }\n\n        var shadows;\n        if (updater.outlineEnabled || updater.fillEnabled) {\n            shadows = updater.shadowsProperty.getValue(time);\n        }\n\n        var numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n        if (updater.outlineEnabled) {\n            if (defined(updater.terrainOffsetProperty)) {\n                this._outlineBatches[numberOfShadowModes + shadows].add(time, updater);\n            } else {\n                this._outlineBatches[shadows].add(time, updater);\n            }\n        }\n\n        if (updater.fillEnabled) {\n            if (updater.onTerrain) {\n                var classificationType = updater.classificationTypeProperty.getValue(time);\n                if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                    this._groundColorBatches[classificationType].add(time, updater);\n                } else {\n                    // If unsupported, updater will not be on terrain.\n                    this._groundMaterialBatches[classificationType].add(time, updater);\n                }\n            } else if (updater.isClosed) {\n                if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                    if (defined(updater.terrainOffsetProperty)) {\n                        this._closedColorBatches[numberOfShadowModes + shadows].add(time, updater);\n                    } else {\n                        this._closedColorBatches[shadows].add(time, updater);\n                    }\n                } else if (defined(updater.terrainOffsetProperty)) {\n                    this._closedMaterialBatches[numberOfShadowModes + shadows].add(time, updater);\n                } else {\n                    this._closedMaterialBatches[shadows].add(time, updater);\n                }\n            } else if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                if (defined(updater.terrainOffsetProperty)) {\n                    this._openColorBatches[numberOfShadowModes + shadows].add(time, updater);\n                } else {\n                    this._openColorBatches[shadows].add(time, updater);\n                }\n            } else if (defined(updater.terrainOffsetProperty)) {\n                this._openMaterialBatches[numberOfShadowModes + shadows].add(time, updater);\n            } else {\n                this._openMaterialBatches[shadows].add(time, updater);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer._onGeometryChanged = function(updater) {\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var entity = updater.entity;\n        var id = entity.id;\n\n        if (!defined(removedObjects.get(id)) && !defined(changedObjects.get(id))) {\n            changedObjects.set(id, entity);\n        }\n    };\n\n    /**\n     * @private\n     */\n    GeometryVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed) {\n        var addedObjects = this._addedObjects;\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var i;\n        var id;\n        var entity;\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            if (!addedObjects.remove(id)) {\n                removedObjects.set(id, entity);\n                changedObjects.remove(id);\n            }\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            if (removedObjects.remove(id)) {\n                changedObjects.set(id, entity);\n            } else {\n                addedObjects.set(id, entity);\n            }\n        }\n    };\n\n    return GeometryVisualizer;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n    mat3 tangentToEyeMatrix = czm_tangentToEyeSpaceMatrix(v_normalEC, v_tangentEC, v_bitangentEC);\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = tangentToEyeMatrix;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec3 tangent;\\n\\\nattribute vec3 bitangent;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec3 v_tangentEC;\\n\\\nvarying vec3 v_bitangentEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_tangentEC = czm_normal * tangent;                       // tangent in eye coordinates\\n\\\n    v_bitangentEC = czm_normal * bitangent;                   // bitangent in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"varying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec3 positionToEyeEC = -v_positionEC;\\n\\\n\\n\\\n    vec3 normalEC = normalize(v_normalEC);\\n\\\n#ifdef FACE_FORWARD\\n\\\n    normalEC = faceforward(normalEC, vec3(0.0, 0.0, 1.0), -normalEC);\\n\\\n#endif\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    materialInput.st = v_st;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef FLAT\\n\\\n    gl_FragColor = vec4(material.diffuse + material.emission, material.alpha);\\n\\\n#else\\n\\\n    gl_FragColor = czm_phong(normalize(positionToEyeEC), material);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n});","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\nattribute vec3 normal;\\n\\\nattribute vec2 st;\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\nvarying vec3 v_normalEC;\\n\\\nvarying vec2 v_st;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 p = czm_computePosition();\\n\\\n\\n\\\n    v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\\n\\\n    v_normalEC = czm_normal * normal;                         // normal in eye coordinates\\n\\\n    v_st = st;\\n\\\n\\n\\\n    gl_Position = czm_modelViewProjectionRelativeToEye * p;\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/BoxGeometry',\n        '../Core/BoxOutlineGeometry',\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/GeometryInstance',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './heightReferenceOnEntityPropertyChanged',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './Property'\n    ], function(\n        BoxGeometry,\n        BoxOutlineGeometry,\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        defineProperties,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        heightReferenceOnEntityPropertyChanged,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        Property) {\n    'use strict';\n\n    var defaultOffset = Cartesian3.ZERO;\n\n    var offsetScratch = new Cartesian3();\n    var positionScratch = new Cartesian3();\n    var scratchColor = new Color();\n\n    function BoxGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.dimensions = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for boxes.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias BoxGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function BoxGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new BoxGeometryOptions(entity),\n            geometryPropertyName : 'box',\n            observedPropertyNames : ['availability', 'position', 'orientation', 'box']\n        });\n\n        this._onEntityPropertyChanged(entity, 'box', entity.box, undefined);\n    }\n\n    if (defined(Object.create)) {\n        BoxGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        BoxGeometryUpdater.prototype.constructor = BoxGeometryUpdater;\n    }\n\n    defineProperties(BoxGeometryUpdater.prototype, {\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof BoxGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    BoxGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute,\n            color : undefined,\n            offset: undefined\n        };\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : BoxGeometry.fromDimensions(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.box.heightReference, this._options.dimensions.z * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    BoxGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : BoxOutlineGeometry.fromDimensions(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.box.heightReference, this._options.dimensions.z * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    BoxGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    BoxGeometryUpdater.prototype._isHidden = function(entity, box) {\n        return !defined(box.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, box);\n    };\n\n    BoxGeometryUpdater.prototype._isDynamic = function(entity, box) {\n        return !entity.position.isConstant ||  !Property.isConstant(entity.orientation) ||  !box.dimensions.isConstant ||  !Property.isConstant(box.outlineWidth);\n    };\n\n    BoxGeometryUpdater.prototype._setStaticOptions = function(entity, box) {\n        var heightReference = Property.getValueOrDefault(box.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n\n        var options = this._options;\n        options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.dimensions = box.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    BoxGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\n    BoxGeometryUpdater.DynamicGeometryUpdater = DynamicBoxGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicBoxGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicBoxGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicBoxGeometryUpdater.prototype.constructor = DynamicBoxGeometryUpdater;\n    }\n\n    DynamicBoxGeometryUpdater.prototype._isHidden = function(entity, box, time) {\n        var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n        var dimensions = this._options.dimensions;\n        return !defined(position) || !defined(dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, box, time);\n    };\n\n    DynamicBoxGeometryUpdater.prototype._setOptions = function(entity, box, time) {\n        var heightReference = Property.getValueOrDefault(box.heightReference, time, HeightReference.NONE);\n        var options = this._options;\n        options.dimensions = Property.getValueOrUndefined(box.dimensions, time, options.dimensions);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    return BoxGeometryUpdater;\n});\n","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/CorridorGeometry',\n        '../Core/CorridorOutlineGeometry',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/GeometryInstance',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/Rectangle',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/GroundPrimitive',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './GroundGeometryUpdater',\n        './Property'\n    ], function(\n        ApproximateTerrainHeights,\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        CorridorGeometry,\n        CorridorOutlineGeometry,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        Rectangle,\n        ShowGeometryInstanceAttribute,\n        GroundPrimitive,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        GroundGeometryUpdater,\n        Property) {\n    'use strict';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n\n    function CorridorGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.positions = undefined;\n        this.width = undefined;\n        this.cornerType = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for corridors.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias CorridorGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function CorridorGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new CorridorGeometryOptions(entity),\n            geometryPropertyName : 'corridor',\n            observedPropertyNames : ['availability', 'corridor']\n        });\n\n        this._onEntityPropertyChanged(entity, 'corridor', entity.corridor, undefined);\n    }\n\n    if (defined(Object.create)) {\n        CorridorGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        CorridorGeometryUpdater.prototype.constructor = CorridorGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    CorridorGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CorridorGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    CorridorGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined\n        };\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CorridorOutlineGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    CorridorGeometryUpdater.prototype._computeCenter = function(time, result) {\n        var positions = Property.getValueOrUndefined(this._entity.corridor.positions, time);\n        if (!defined(positions) || positions.length === 0) {\n            return;\n        }\n        return Cartesian3.clone(positions[Math.floor(positions.length / 2.0)], result);\n    };\n\n    CorridorGeometryUpdater.prototype._isHidden = function(entity, corridor) {\n        return !defined(corridor.positions) || !defined(corridor.width) || GeometryUpdater.prototype._isHidden.call(this, entity, corridor);\n    };\n\n    CorridorGeometryUpdater.prototype._isDynamic = function(entity, corridor) {\n        return !corridor.positions.isConstant || //\n               !Property.isConstant(corridor.height) || //\n               !Property.isConstant(corridor.extrudedHeight) || //\n               !Property.isConstant(corridor.granularity) || //\n               !Property.isConstant(corridor.width) || //\n               !Property.isConstant(corridor.outlineWidth) || //\n               !Property.isConstant(corridor.cornerType) || //\n               !Property.isConstant(corridor.zIndex) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty));\n    };\n\n    CorridorGeometryUpdater.prototype._setStaticOptions = function(entity, corridor) {\n        var heightValue = Property.getValueOrUndefined(corridor.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(corridor.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(corridor.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(corridor.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        var options = this._options;\n        options.vertexFormat = (this._materialProperty instanceof ColorMaterialProperty) ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.positions = corridor.positions.getValue(Iso8601.MINIMUM_VALUE, options.positions);\n        options.width = corridor.width.getValue(Iso8601.MINIMUM_VALUE);\n        options.granularity = Property.getValueOrUndefined(corridor.granularity, Iso8601.MINIMUM_VALUE);\n        options.cornerType = Property.getValueOrUndefined(corridor.cornerType, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(CorridorGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    CorridorGeometryUpdater.DynamicGeometryUpdater = DynamicCorridorGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicCorridorGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicCorridorGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicCorridorGeometryUpdater.prototype.constructor = DynamicCorridorGeometryUpdater;\n    }\n\n    DynamicCorridorGeometryUpdater.prototype._isHidden = function(entity, corridor, time) {\n        var options = this._options;\n        return !defined(options.positions) || !defined(options.width) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, corridor, time);\n    };\n\n    DynamicCorridorGeometryUpdater.prototype._setOptions = function(entity, corridor, time) {\n        var options = this._options;\n        var heightValue = Property.getValueOrUndefined(corridor.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(corridor.heightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(corridor.extrudedHeight, time);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(corridor.extrudedHeightReference, time, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        options.positions = Property.getValueOrUndefined(corridor.positions, time);\n        options.width = Property.getValueOrUndefined(corridor.width, time);\n        options.granularity = Property.getValueOrUndefined(corridor.granularity, time);\n        options.cornerType = Property.getValueOrUndefined(corridor.cornerType, time);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(CorridorGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    return CorridorGeometryUpdater;\n});\n","define([\n        './arrayFill',\n        './arrayRemoveDuplicates',\n        './BoundingSphere',\n        './Cartesian3',\n        './Cartographic',\n        './Check',\n        './ComponentDatatype',\n        './CornerType',\n        './CorridorGeometryLibrary',\n        './defaultValue',\n        './defined',\n        './defineProperties',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './IndexDatatype',\n        './Math',\n        './PolygonPipeline',\n        './PrimitiveType',\n        './Rectangle',\n        './VertexFormat'\n    ], function(\n        arrayFill,\n        arrayRemoveDuplicates,\n        BoundingSphere,\n        Cartesian3,\n        Cartographic,\n        Check,\n        ComponentDatatype,\n        CornerType,\n        CorridorGeometryLibrary,\n        defaultValue,\n        defined,\n        defineProperties,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        IndexDatatype,\n        CesiumMath,\n        PolygonPipeline,\n        PrimitiveType,\n        Rectangle,\n        VertexFormat) {\n    'use strict';\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n    var cartesian4 = new Cartesian3();\n    var cartesian5 = new Cartesian3();\n    var cartesian6 = new Cartesian3();\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n\n    function scaleToSurface(positions, ellipsoid) {\n        for (var i = 0; i < positions.length; i++) {\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n        }\n        return positions;\n    }\n\n    function addNormals(attr, normal, left, front, back, vertexFormat) {\n        var normals = attr.normals;\n        var tangents = attr.tangents;\n        var bitangents = attr.bitangents;\n        var forward = Cartesian3.normalize(Cartesian3.cross(left, normal, scratch1), scratch1);\n        if (vertexFormat.normal) {\n            CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\n        }\n        if (vertexFormat.tangent) {\n            CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\n        }\n        if (vertexFormat.bitangent) {\n            CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\n        }\n    }\n\n    function combine(computedPositions, vertexFormat, ellipsoid) {\n        var positions = computedPositions.positions;\n        var corners = computedPositions.corners;\n        var endPositions = computedPositions.endPositions;\n        var computedLefts = computedPositions.lefts;\n        var computedNormals = computedPositions.normals;\n        var attributes = new GeometryAttributes();\n        var corner;\n        var leftCount = 0;\n        var rightCount = 0;\n        var i;\n        var indicesLength = 0;\n        var length;\n        for (i = 0; i < positions.length; i += 2) {\n            length = positions[i].length - 3;\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\n            indicesLength += length*2;\n            rightCount += positions[i + 1].length - 3;\n        }\n        leftCount += 3; //add back count for end positions\n        rightCount += 3;\n        for (i = 0; i < corners.length; i++) {\n            corner = corners[i];\n            var leftSide = corners[i].leftPositions;\n            if (defined(leftSide)) {\n                length = leftSide.length;\n                leftCount += length;\n                indicesLength += length;\n            } else {\n                length = corners[i].rightPositions.length;\n                rightCount += length;\n                indicesLength += length;\n            }\n        }\n\n        var addEndPositions = defined(endPositions);\n        var endPositionLength;\n        if (addEndPositions) {\n            endPositionLength = endPositions[0].length - 3;\n            leftCount += endPositionLength;\n            rightCount += endPositionLength;\n            endPositionLength /= 3;\n            indicesLength += endPositionLength * 6;\n        }\n        var size = leftCount + rightCount;\n        var finalPositions = new Float64Array(size);\n        var normals = (vertexFormat.normal) ? new Float32Array(size) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size) : undefined;\n        var attr = {\n            normals : normals,\n            tangents : tangents,\n            bitangents : bitangents\n        };\n        var front = 0;\n        var back = size - 1;\n        var UL, LL, UR, LR;\n        var normal = cartesian1;\n        var left = cartesian2;\n        var rightPos, leftPos;\n        var halfLength = endPositionLength / 2;\n\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\n        var index = 0;\n        if (addEndPositions) { // add rounded end\n            leftPos = cartesian3;\n            rightPos = cartesian4;\n            var firstEndPositions = endPositions[0];\n            normal = Cartesian3.fromArray(computedNormals, 0, normal);\n            left = Cartesian3.fromArray(computedLefts, 0, left);\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                addNormals(attr, normal, left, front, back, vertexFormat);\n\n                LL = front / 3;\n                LR = LL + 1;\n                UL = (back - 2) / 3;\n                UR = UL - 1;\n                indices[index++] = UL;\n                indices[index++] = LL;\n                indices[index++] = UR;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        var posIndex = 0;\n        var compIndex = 0;\n        var rightEdge = positions[posIndex++]; //add first two edges\n        var leftEdge = positions[posIndex++];\n        finalPositions.set(rightEdge, front);\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n        left = Cartesian3.fromArray(computedLefts, compIndex, left);\n        var rightNormal;\n        var leftNormal;\n        length = leftEdge.length - 3;\n        for (i = 0; i < length; i += 3) {\n            rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, i, scratch1), scratch1);\n            leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - i, scratch2), scratch2);\n            normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\n            addNormals(attr, normal, left, front, back, vertexFormat);\n\n            LL = front / 3;\n            LR = LL + 1;\n            UL = (back - 2) / 3;\n            UR = UL - 1;\n            indices[index++] = UL;\n            indices[index++] = LL;\n            indices[index++] = UR;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n\n            front += 3;\n            back -= 3;\n        }\n\n        rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, length, scratch1), scratch1);\n        leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length, scratch2), scratch2);\n        normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\n        compIndex += 3;\n        for (i = 0; i < corners.length; i++) {\n            var j;\n            corner = corners[i];\n            var l = corner.leftPositions;\n            var r = corner.rightPositions;\n            var pivot;\n            var start;\n            var outsidePoint = cartesian6;\n            var previousPoint = cartesian3;\n            var nextPoint = cartesian4;\n            normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\n            if (defined(l)) {\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\n                back -= 3;\n                pivot = LR;\n                start = UR;\n                for (j = 0; j < l.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n                    indices[index++] = pivot;\n                    indices[index++] = start - j - 1;\n                    indices[index++] = start - j;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\n                    previousPoint = Cartesian3.fromArray(finalPositions, (start - j - 1) * 3, previousPoint);\n                    nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\n                    left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\n                    addNormals(attr, normal, left, undefined, back, vertexFormat);\n                    back -= 3;\n                }\n                outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\n                previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start) * 3, previousPoint), outsidePoint, previousPoint);\n                nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint), outsidePoint, nextPoint);\n                left = Cartesian3.normalize(Cartesian3.add(previousPoint, nextPoint, left), left);\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\n                front += 3;\n            } else {\n                addNormals(attr, normal, left, front, undefined, vertexFormat);\n                front += 3;\n                pivot = UR;\n                start = LR;\n                for (j = 0; j < r.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n                    indices[index++] = pivot;\n                    indices[index++] = start + j;\n                    indices[index++] = start + j + 1;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\n                    previousPoint = Cartesian3.fromArray(finalPositions, pivot * 3, previousPoint);\n                    nextPoint = Cartesian3.fromArray(finalPositions, (start + j) * 3, nextPoint);\n                    left = Cartesian3.normalize(Cartesian3.subtract(previousPoint, nextPoint, left), left);\n                    addNormals(attr, normal, left, front, undefined, vertexFormat);\n                    front += 3;\n                }\n                outsidePoint = Cartesian3.fromArray(finalPositions, pivot * 3, outsidePoint);\n                previousPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint), outsidePoint, previousPoint);\n                nextPoint = Cartesian3.subtract(Cartesian3.fromArray(finalPositions, start * 3, nextPoint), outsidePoint, nextPoint);\n                left = Cartesian3.normalize(Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left), left);\n                addNormals(attr, normal, left, undefined, back, vertexFormat);\n                back -= 3;\n            }\n            rightEdge = positions[posIndex++];\n            leftEdge = positions[posIndex++];\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\n            leftEdge.splice(leftEdge.length - 3, 3);\n            finalPositions.set(rightEdge, front);\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\n            length = leftEdge.length - 3;\n\n            compIndex += 3;\n            left = Cartesian3.fromArray(computedLefts, compIndex, left);\n            for (j = 0; j < leftEdge.length; j += 3) {\n                rightNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(rightEdge, j, scratch1), scratch1);\n                leftNormal = ellipsoid.geodeticSurfaceNormal(Cartesian3.fromArray(leftEdge, length - j, scratch2), scratch2);\n                normal = Cartesian3.normalize(Cartesian3.add(rightNormal, leftNormal, normal), normal);\n                addNormals(attr, normal, left, front, back, vertexFormat);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = LL;\n                indices[index++] = UR;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n            front -= 3;\n            back += 3;\n        }\n        normal = Cartesian3.fromArray(computedNormals, computedNormals.length - 3, normal);\n        addNormals(attr, normal, left, front, back, vertexFormat);\n\n        if (addEndPositions) { // add rounded end\n            front += 3;\n            back -= 3;\n            leftPos = cartesian3;\n            rightPos = cartesian4;\n            var lastEndPositions = endPositions[1];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                addNormals(attr, normal, left, front, back, vertexFormat);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = LL;\n                indices[index++] = UR;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        if (vertexFormat.st) {\n            var st = new Float32Array(size / 3 * 2);\n            var rightSt;\n            var leftSt;\n            var stIndex = 0;\n            if (addEndPositions) {\n                leftCount /= 3;\n                rightCount /= 3;\n                var theta = Math.PI / (endPositionLength + 1);\n                leftSt = 1 / (leftCount - endPositionLength + 1);\n                rightSt = 1 / (rightCount - endPositionLength + 1);\n                var a;\n                var halfEndPos = endPositionLength / 2;\n                for (i = halfEndPos + 1; i < endPositionLength + 1; i++) { // lower left rounded end\n                    a = CesiumMath.PI_OVER_TWO + theta * i;\n                    st[stIndex++] = rightSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n                for (i = 1; i < rightCount - endPositionLength + 1; i++) { // bottom edge\n                    st[stIndex++] = i * rightSt;\n                    st[stIndex++] = 0;\n                }\n                for (i = endPositionLength; i > halfEndPos; i--) { // lower right rounded end\n                    a = CesiumMath.PI_OVER_TWO - i * theta;\n                    st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n                for (i = halfEndPos; i > 0; i--) { // upper right rounded end\n                    a = CesiumMath.PI_OVER_TWO - theta * i;\n                    st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n                for (i = leftCount - endPositionLength; i > 0; i--) { // top edge\n                    st[stIndex++] = i * leftSt;\n                    st[stIndex++] = 1;\n                }\n                for (i = 1; i < halfEndPos + 1; i++) { // upper left rounded end\n                    a = CesiumMath.PI_OVER_TWO + theta * i;\n                    st[stIndex++] = leftSt * (1 + Math.cos(a));\n                    st[stIndex++] = 0.5 * (1 + Math.sin(a));\n                }\n            } else {\n                leftCount /= 3;\n                rightCount /= 3;\n                leftSt = 1 / (leftCount - 1);\n                rightSt = 1 / (rightCount - 1);\n                for (i = 0; i < rightCount; i++) { // bottom edge\n                    st[stIndex++] = i * rightSt;\n                    st[stIndex++] = 0;\n                }\n                for (i = leftCount; i > 0; i--) { // top edge\n                    st[stIndex++] = (i - 1) * leftSt;\n                    st[stIndex++] = 1;\n                }\n            }\n\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attr.normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attr.tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : attr.bitangents\n            });\n        }\n\n        return {\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    function extrudedAttributes(attributes, vertexFormat) {\n        if (!vertexFormat.normal && !vertexFormat.tangent && !vertexFormat.bitangent && !vertexFormat.st) {\n            return attributes;\n        }\n        var positions = attributes.position.values;\n        var topNormals;\n        var topBitangents;\n        if (vertexFormat.normal || vertexFormat.bitangent) {\n            topNormals = attributes.normal.values;\n            topBitangents = attributes.bitangent.values;\n        }\n        var size = attributes.position.values.length / 18;\n        var threeSize = size * 3;\n        var twoSize = size * 2;\n        var sixSize = threeSize * 2;\n        var i;\n        if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\n            var normals = (vertexFormat.normal) ? new Float32Array(threeSize * 6) : undefined;\n            var tangents = (vertexFormat.tangent) ? new Float32Array(threeSize * 6) : undefined;\n            var bitangents = (vertexFormat.bitangent) ? new Float32Array(threeSize * 6) : undefined;\n            var topPosition = cartesian1;\n            var bottomPosition = cartesian2;\n            var previousPosition = cartesian3;\n            var normal = cartesian4;\n            var tangent = cartesian5;\n            var bitangent = cartesian6;\n            var attrIndex = sixSize;\n            for (i = 0; i < threeSize; i += 3) {\n                var attrIndexOffset = attrIndex + sixSize;\n                topPosition      = Cartesian3.fromArray(positions, i, topPosition);\n                bottomPosition   = Cartesian3.fromArray(positions, i + threeSize, bottomPosition);\n                previousPosition = Cartesian3.fromArray(positions, (i + 3) % threeSize, previousPosition);\n                bottomPosition   = Cartesian3.subtract(bottomPosition,   topPosition, bottomPosition);\n                previousPosition = Cartesian3.subtract(previousPosition, topPosition, previousPosition);\n                normal = Cartesian3.normalize(Cartesian3.cross(bottomPosition, previousPosition, normal), normal);\n                if (vertexFormat.normal) {\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset + 3);\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\n                    CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\n                }\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\n                    bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\n                    if (vertexFormat.bitangent) {\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset);\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndexOffset + 3);\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex);\n                        CorridorGeometryLibrary.addAttribute(bitangents, bitangent, attrIndex + 3);\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndexOffset + 3);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\n                        CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex + 3);\n                    }\n                }\n                attrIndex += 6;\n            }\n\n            if (vertexFormat.normal) {\n                normals.set(topNormals); //top\n                for (i = 0; i < threeSize; i += 3) { //bottom normals\n                    normals[i + threeSize] = -topNormals[i];\n                    normals[i + threeSize + 1] = -topNormals[i + 1];\n                    normals[i + threeSize + 2] = -topNormals[i + 2];\n                }\n                attributes.normal.values = normals;\n            } else {\n                attributes.normal = undefined;\n            }\n\n            if (vertexFormat.bitangent) {\n                bitangents.set(topBitangents); //top\n                bitangents.set(topBitangents, threeSize); //bottom\n                attributes.bitangent.values = bitangents;\n            } else {\n                attributes.bitangent = undefined;\n            }\n\n            if (vertexFormat.tangent) {\n                var topTangents = attributes.tangent.values;\n                tangents.set(topTangents); //top\n                tangents.set(topTangents, threeSize); //bottom\n                attributes.tangent.values = tangents;\n            }\n        }\n        if (vertexFormat.st) {\n            var topSt = attributes.st.values;\n            var st = new Float32Array(twoSize * 6);\n            st.set(topSt); //top\n            st.set(topSt, twoSize); //bottom\n            var index = twoSize * 2;\n\n            for ( var j = 0; j < 2; j++) {\n                st[index++] = topSt[0];\n                st[index++] = topSt[1];\n                for (i = 2; i < twoSize; i += 2) {\n                    var s = topSt[i];\n                    var t = topSt[i + 1];\n                    st[index++] = s;\n                    st[index++] = t;\n                    st[index++] = s;\n                    st[index++] = t;\n                }\n                st[index++] = topSt[0];\n                st[index++] = topSt[1];\n            }\n            attributes.st.values = st;\n        }\n\n        return attributes;\n    }\n\n    function addWallPositions(positions, index, wallPositions) {\n        wallPositions[index++] = positions[0];\n        wallPositions[index++] = positions[1];\n        wallPositions[index++] = positions[2];\n        for ( var i = 3; i < positions.length; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n            wallPositions[index++] = x;\n            wallPositions[index++] = y;\n            wallPositions[index++] = z;\n            wallPositions[index++] = x;\n            wallPositions[index++] = y;\n            wallPositions[index++] = z;\n        }\n        wallPositions[index++] = positions[0];\n        wallPositions[index++] = positions[1];\n        wallPositions[index++] = positions[2];\n\n        return wallPositions;\n    }\n\n    function computePositionsExtruded(params, vertexFormat) {\n        var topVertexFormat = new VertexFormat({\n            position : vertexFormat.position,\n            normal : (vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume),\n            tangent : vertexFormat.tangent,\n            bitangent : (vertexFormat.normal || vertexFormat.bitangent),\n            st : vertexFormat.st\n        });\n        var ellipsoid = params.ellipsoid;\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\n        var attr = combine(computedPositions, topVertexFormat, ellipsoid);\n        var height = params.height;\n        var extrudedHeight = params.extrudedHeight;\n        var attributes = attr.attributes;\n        var indices = attr.indices;\n        var positions = attributes.position.values;\n        var length = positions.length;\n        var newPositions = new Float64Array(length * 6);\n        var extrudedPositions = new Float64Array(length);\n        extrudedPositions.set(positions);\n        var wallPositions = new Float64Array(length * 4);\n\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\n        wallPositions = addWallPositions(positions, 0, wallPositions);\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\n        wallPositions = addWallPositions(extrudedPositions, length * 2, wallPositions);\n        newPositions.set(positions);\n        newPositions.set(extrudedPositions, length);\n        newPositions.set(wallPositions, length * 2);\n        attributes.position.values = newPositions;\n\n        attributes = extrudedAttributes(attributes, vertexFormat);\n        var i;\n        var size = length / 3;\n        if (params.shadowVolume) {\n            var topNormals = attributes.normal.values;\n            length = topNormals.length;\n\n            var extrudeNormals = new Float32Array(length * 6);\n            for (i = 0; i < length; i ++) {\n                topNormals[i] = -topNormals[i];\n            }\n            //only get normals for bottom layer that's going to be pushed down\n            extrudeNormals.set(topNormals, length); //bottom face\n            extrudeNormals = addWallPositions(topNormals, length*4, extrudeNormals); //bottom wall\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n            if (!vertexFormat.normal) {\n                attributes.normal = undefined;\n            }\n        }\n        if (defined(params.offsetAttribute)) {\n            var applyOffset = new Uint8Array(size * 6);\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\n                applyOffset = arrayFill(applyOffset, 1, size*2, size * 4); // top wall\n            } else {\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\n            }\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var iLength = indices.length;\n        var twoSize = size + size;\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, iLength * 2 + twoSize * 3);\n        newIndices.set(indices);\n        var index = iLength;\n        for (i = 0; i < iLength; i += 3) { // bottom indices\n            var v0 = indices[i];\n            var v1 = indices[i + 1];\n            var v2 = indices[i + 2];\n            newIndices[index++] = v2 + size;\n            newIndices[index++] = v1 + size;\n            newIndices[index++] = v0 + size;\n        }\n\n        var UL, LL, UR, LR;\n\n        for (i = 0; i < twoSize; i += 2) { //wall indices\n            UL = i + twoSize;\n            LL = UL + twoSize;\n            UR = UL + 1;\n            LR = LL + 1;\n            newIndices[index++] = UL;\n            newIndices[index++] = LL;\n            newIndices[index++] = UR;\n            newIndices[index++] = UR;\n            newIndices[index++] = LL;\n            newIndices[index++] = LR;\n        }\n\n        return {\n            attributes : attributes,\n            indices : newIndices\n        };\n    }\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartographic = new Cartographic();\n\n    function computeOffsetPoints(position1, position2, ellipsoid, halfWidth, min, max) {\n        // Compute direction of offset the point\n        var direction = Cartesian3.subtract(position2, position1, scratchCartesian1);\n        Cartesian3.normalize(direction, direction);\n        var normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\n        var offsetDirection = Cartesian3.cross(direction, normal, scratchCartesian1);\n        Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\n\n        var minLat = min.latitude;\n        var minLon = min.longitude;\n        var maxLat = max.latitude;\n        var maxLon = max.longitude;\n\n        // Compute 2 offset points\n        Cartesian3.add(position1, offsetDirection, scratchCartesian2);\n        ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n        var lat = scratchCartographic.latitude;\n        var lon = scratchCartographic.longitude;\n        minLat = Math.min(minLat, lat);\n        minLon = Math.min(minLon, lon);\n        maxLat = Math.max(maxLat, lat);\n        maxLon = Math.max(maxLon, lon);\n\n        Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\n        ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\n\n        lat = scratchCartographic.latitude;\n        lon = scratchCartographic.longitude;\n        minLat = Math.min(minLat, lat);\n        minLon = Math.min(minLon, lon);\n        maxLat = Math.max(maxLat, lat);\n        maxLon = Math.max(maxLon, lon);\n\n        min.latitude = minLat;\n        min.longitude = minLon;\n        max.latitude = maxLat;\n        max.longitude = maxLon;\n    }\n\n    var scratchCartesianOffset = new Cartesian3();\n    var scratchCartesianEnds = new Cartesian3();\n    var scratchCartographicMin = new Cartographic();\n    var scratchCartographicMax = new Cartographic();\n\n    function computeRectangle(positions, ellipsoid, width, cornerType, result) {\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var length = cleanPositions.length;\n        if (length < 2 || width <= 0) {\n            return new Rectangle();\n        }\n        var halfWidth = width * 0.5;\n\n        scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\n        scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\n        scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\n        scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\n\n        var lat, lon;\n        if (cornerType === CornerType.ROUNDED) {\n            // Compute start cap\n            var first = cleanPositions[0];\n            Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\n            Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n            Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\n            Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\n\n            ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\n            lat = scratchCartographic.latitude;\n            lon = scratchCartographic.longitude;\n            scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\n            scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\n            scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\n            scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\n        }\n\n        // Compute the rest\n        for (var i = 0; i < length-1; ++i) {\n            computeOffsetPoints(cleanPositions[i], cleanPositions[i+1], ellipsoid, halfWidth,\n                scratchCartographicMin, scratchCartographicMax);\n        }\n\n        // Compute ending point\n        var last = cleanPositions[length-1];\n        Cartesian3.subtract(last, cleanPositions[length-2], scratchCartesianOffset);\n        Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\n        Cartesian3.multiplyByScalar(scratchCartesianOffset, halfWidth, scratchCartesianOffset);\n        Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\n        computeOffsetPoints(last, scratchCartesianEnds, ellipsoid, halfWidth,\n            scratchCartographicMin, scratchCartographicMax);\n\n        if (cornerType === CornerType.ROUNDED) {\n            // Compute end cap\n            ellipsoid.cartesianToCartographic(scratchCartesianEnds, scratchCartographic);\n            lat = scratchCartographic.latitude;\n            lon = scratchCartographic.longitude;\n            scratchCartographicMin.latitude = Math.min(scratchCartographicMin.latitude, lat);\n            scratchCartographicMin.longitude = Math.min(scratchCartographicMin.longitude, lon);\n            scratchCartographicMax.latitude = Math.max(scratchCartographicMax.latitude, lat);\n            scratchCartographicMax.longitude = Math.max(scratchCartographicMax.longitude, lon);\n        }\n\n        var rectangle = defined(result) ? result : new Rectangle();\n        rectangle.north = scratchCartographicMax.latitude;\n        rectangle.south = scratchCartographicMin.latitude;\n        rectangle.east = scratchCartographicMax.longitude;\n        rectangle.west = scratchCartographicMin.longitude;\n\n        return rectangle;\n    }\n\n    /**\n     * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias CorridorGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n     * @param {Number} options.width The distance between the edges of the corridor in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see CorridorGeometry.createGeometry\n     * @see Packable\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\n     *\n     * @example\n     * var corridor = new Cesium.CorridorGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n     *   width : 100000\n     * });\n     */\n    function CorridorGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._positions = positions;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n        this._width = width;\n        this._height = Math.max(height, extrudedHeight);\n        this._extrudedHeight = Math.min(height, extrudedHeight);\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createCorridorGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n        this._rectangle = undefined;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 7;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CorridorGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CorridorGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        width : undefined,\n        height : undefined,\n        extrudedHeight : undefined,\n        cornerType : undefined,\n        granularity : undefined,\n        shadowVolume: undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CorridorGeometry} [result] The object into which to store the result.\n     * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\n     */\n    CorridorGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var width = array[startingIndex++];\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.width = width;\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            scratchOptions.shadowVolume = shadowVolume;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new CorridorGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._width = width;\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the bounding rectangle given the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\n     * @param {Number} options.width The distance between the edges of the corridor in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     * @param {Rectangle} [result] An object in which to store the result.\n     *\n     * @returns {Rectangle} The result rectangle.\n     */\n    CorridorGeometry.computeRectangle = function(options, result) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        \n\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n\n        return computeRectangle(positions, ellipsoid, width, cornerType, result);\n    };\n\n    /**\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CorridorGeometry} corridorGeometry A description of the corridor.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CorridorGeometry.createGeometry = function(corridorGeometry) {\n        var positions = corridorGeometry._positions;\n        var width = corridorGeometry._width;\n        var ellipsoid = corridorGeometry._ellipsoid;\n\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n        if ((cleanPositions.length < 2) || (width <= 0)) {\n            return;\n        }\n\n        var height = corridorGeometry._height;\n        var extrudedHeight = corridorGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var vertexFormat = corridorGeometry._vertexFormat;\n        var params = {\n            ellipsoid : ellipsoid,\n            positions : cleanPositions,\n            width : width,\n            cornerType : corridorGeometry._cornerType,\n            granularity : corridorGeometry._granularity,\n            saveAttributes: true\n        };\n        var attr;\n        if (extrude) {\n            params.height = height;\n            params.extrudedHeight = extrudedHeight;\n            params.shadowVolume = corridorGeometry._shadowVolume;\n            params.offsetAttribute = corridorGeometry._offsetAttribute;\n            attr = computePositionsExtruded(params, vertexFormat);\n        } else {\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\n            attr = combine(computedPositions, vertexFormat, ellipsoid);\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\n\n            if (defined(corridorGeometry._offsetAttribute)) {\n                var applyOffsetValue = corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                var length = attr.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                arrayFill(applyOffset, applyOffsetValue);\n                attr.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n        var attributes = attr.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\n        if (!vertexFormat.position) {\n            attr.attributes.position.values = undefined;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : attr.indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : corridorGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    CorridorGeometry.createShadowVolume = function(corridorGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = corridorGeometry._granularity;\n        var ellipsoid = corridorGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new CorridorGeometry({\n            positions : corridorGeometry._positions,\n            width : corridorGeometry._width,\n            cornerType : corridorGeometry._cornerType,\n            ellipsoid : ellipsoid,\n            granularity : granularity,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true\n        });\n    };\n\n    defineProperties(CorridorGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    this._rectangle = computeRectangle(this._positions, this._ellipsoid, this._width, this._cornerType);\n                }\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\n         *\n         * Corridors don't support stRotation,\n         * so just return the corners of the original system.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                return [0, 0, 0, 1, 1, 0];\n            }\n        }\n    });\n\n    return CorridorGeometry;\n});\n","define([\n        './arrayFill',\n        './arrayRemoveDuplicates',\n        './BoundingSphere',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './CornerType',\n        './CorridorGeometryLibrary',\n        './defaultValue',\n        './defined',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './IndexDatatype',\n        './Math',\n        './PolygonPipeline',\n        './PrimitiveType'\n    ], function(\n        arrayFill,\n        arrayRemoveDuplicates,\n        BoundingSphere,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        CornerType,\n        CorridorGeometryLibrary,\n        defaultValue,\n        defined,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        IndexDatatype,\n        CesiumMath,\n        PolygonPipeline,\n        PrimitiveType) {\n    'use strict';\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n\n    function scaleToSurface(positions, ellipsoid) {\n        for (var i = 0; i < positions.length; i++) {\n            positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\n        }\n        return positions;\n    }\n\n    function combine(computedPositions, cornerType) {\n        var wallIndices = [];\n        var positions = computedPositions.positions;\n        var corners = computedPositions.corners;\n        var endPositions = computedPositions.endPositions;\n        var attributes = new GeometryAttributes();\n        var corner;\n        var leftCount = 0;\n        var rightCount = 0;\n        var i;\n        var indicesLength = 0;\n        var length;\n        for (i = 0; i < positions.length; i += 2) {\n            length = positions[i].length - 3;\n            leftCount += length; //subtracting 3 to account for duplicate points at corners\n            indicesLength += length / 3 * 4;\n            rightCount += positions[i + 1].length - 3;\n        }\n        leftCount += 3; //add back count for end positions\n        rightCount += 3;\n        for (i = 0; i < corners.length; i++) {\n            corner = corners[i];\n            var leftSide = corners[i].leftPositions;\n            if (defined(leftSide)) {\n                length = leftSide.length;\n                leftCount += length;\n                indicesLength += length / 3 * 2;\n            } else {\n                length = corners[i].rightPositions.length;\n                rightCount += length;\n                indicesLength += length / 3 * 2;\n            }\n        }\n\n        var addEndPositions = defined(endPositions);\n        var endPositionLength;\n        if (addEndPositions) {\n            endPositionLength = endPositions[0].length - 3;\n            leftCount += endPositionLength;\n            rightCount += endPositionLength;\n            endPositionLength /= 3;\n            indicesLength += endPositionLength * 4;\n        }\n        var size = leftCount + rightCount;\n        var finalPositions = new Float64Array(size);\n        var front = 0;\n        var back = size - 1;\n        var UL, LL, UR, LR;\n        var rightPos, leftPos;\n        var halfLength = endPositionLength / 2;\n\n        var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\n        var index = 0;\n\n        indices[index++] = front / 3;\n        indices[index++] = (back - 2) / 3;\n        if (addEndPositions) { // add rounded end\n            wallIndices.push(front / 3);\n            leftPos = cartesian1;\n            rightPos = cartesian2;\n            var firstEndPositions = endPositions[0];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(firstEndPositions, (halfLength - 1 - i) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(firstEndPositions, (halfLength + i) * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n\n                LL = front / 3;\n                LR = LL + 1;\n                UL = (back - 2) / 3;\n                UR = UL - 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n        }\n\n        var posIndex = 0;\n        var rightEdge = positions[posIndex++]; //add first two edges\n        var leftEdge = positions[posIndex++];\n        finalPositions.set(rightEdge, front);\n        finalPositions.set(leftEdge, back - leftEdge.length + 1);\n\n        length = leftEdge.length - 3;\n        wallIndices.push(front / 3, (back - 2) / 3);\n        for (i = 0; i < length; i += 3) {\n            LL = front / 3;\n            LR = LL + 1;\n            UL = (back - 2) / 3;\n            UR = UL - 1;\n            indices[index++] = UL;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n\n            front += 3;\n            back -= 3;\n        }\n\n        for (i = 0; i < corners.length; i++) {\n            var j;\n            corner = corners[i];\n            var l = corner.leftPositions;\n            var r = corner.rightPositions;\n            var start;\n            var outsidePoint = cartesian3;\n            if (defined(l)) {\n                back -= 3;\n                start = UR;\n                wallIndices.push(LR);\n                for (j = 0; j < l.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\n                    indices[index++] = start - j - 1;\n                    indices[index++] = start - j;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, undefined, back);\n                    back -= 3;\n                }\n                wallIndices.push(start - Math.floor(l.length / 6));\n                if (cornerType === CornerType.BEVELED) {\n                    wallIndices.push((back - 2) / 3 + 1);\n                }\n                front += 3;\n            } else {\n                front += 3;\n                start = LR;\n                wallIndices.push(UR);\n                for (j = 0; j < r.length / 3; j++) {\n                    outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\n                    indices[index++] = start + j;\n                    indices[index++] = start + j + 1;\n                    CorridorGeometryLibrary.addAttribute(finalPositions, outsidePoint, front);\n                    front += 3;\n                }\n                wallIndices.push(start + Math.floor(r.length / 6));\n                if (cornerType === CornerType.BEVELED) {\n                    wallIndices.push(front / 3 - 1);\n                }\n                back -= 3;\n            }\n            rightEdge = positions[posIndex++];\n            leftEdge = positions[posIndex++];\n            rightEdge.splice(0, 3); //remove duplicate points added by corner\n            leftEdge.splice(leftEdge.length - 3, 3);\n            finalPositions.set(rightEdge, front);\n            finalPositions.set(leftEdge, back - leftEdge.length + 1);\n            length = leftEdge.length - 3;\n\n            for (j = 0; j < leftEdge.length; j += 3) {\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n                front += 3;\n                back -= 3;\n            }\n            front -= 3;\n            back += 3;\n            wallIndices.push(front / 3, (back - 2) / 3);\n        }\n\n        if (addEndPositions) { // add rounded end\n            front += 3;\n            back -= 3;\n            leftPos = cartesian1;\n            rightPos = cartesian2;\n            var lastEndPositions = endPositions[1];\n            for (i = 0; i < halfLength; i++) {\n                leftPos = Cartesian3.fromArray(lastEndPositions, (endPositionLength - i - 1) * 3, leftPos);\n                rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\n                CorridorGeometryLibrary.addAttribute(finalPositions, leftPos, undefined, back);\n                CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\n\n                LR = front / 3;\n                LL = LR - 1;\n                UR = (back - 2) / 3;\n                UL = UR + 1;\n                indices[index++] = UL;\n                indices[index++] = UR;\n                indices[index++] = LL;\n                indices[index++] = LR;\n\n                front += 3;\n                back -= 3;\n            }\n\n            wallIndices.push(front / 3);\n        } else {\n            wallIndices.push(front / 3, (back - 2) / 3);\n        }\n        indices[index++] = front / 3;\n        indices[index++] = (back - 2) / 3;\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        return {\n            attributes : attributes,\n            indices : indices,\n            wallIndices : wallIndices\n        };\n    }\n\n    function computePositionsExtruded(params) {\n        var ellipsoid = params.ellipsoid;\n        var computedPositions = CorridorGeometryLibrary.computePositions(params);\n        var attr = combine(computedPositions, params.cornerType);\n        var wallIndices = attr.wallIndices;\n        var height = params.height;\n        var extrudedHeight = params.extrudedHeight;\n        var attributes = attr.attributes;\n        var indices = attr.indices;\n        var positions = attributes.position.values;\n        var length = positions.length;\n        var extrudedPositions = new Float64Array(length);\n        extrudedPositions.set(positions);\n        var newPositions = new Float64Array(length * 2);\n\n        positions = PolygonPipeline.scaleToGeodeticHeight(positions, height, ellipsoid);\n        extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(extrudedPositions, extrudedHeight, ellipsoid);\n        newPositions.set(positions);\n        newPositions.set(extrudedPositions, length);\n        attributes.position.values = newPositions;\n\n        length /= 3;\n        if (defined(params.offsetAttribute)) {\n            var applyOffset = new Uint8Array(length * 2);\n            if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, length);\n            } else {\n                var applyOffsetValue = params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, applyOffsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var i;\n        var iLength = indices.length;\n        var newIndices = IndexDatatype.createTypedArray(newPositions.length / 3, (iLength + wallIndices.length) * 2);\n        newIndices.set(indices);\n        var index = iLength;\n        for (i = 0; i < iLength; i += 2) { // bottom indices\n            var v0 = indices[i];\n            var v1 = indices[i + 1];\n            newIndices[index++] = v0 + length;\n            newIndices[index++] = v1 + length;\n        }\n\n        var UL, LL;\n        for (i = 0; i < wallIndices.length; i++) { //wall indices\n            UL = wallIndices[i];\n            LL = UL + length;\n            newIndices[index++] = UL;\n            newIndices[index++] = LL;\n        }\n\n        return {\n            attributes : attributes,\n            indices : newIndices\n        };\n    }\n\n    /**\n     * A description of a corridor outline.\n     *\n     * @alias CorridorOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\n     * @param {Number} options.width The distance between the edges of the corridor outline.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see CorridorOutlineGeometry.createGeometry\n     *\n     * @example\n     * var corridor = new Cesium.CorridorOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\n     *   width : 100000\n     * });\n     */\n    function CorridorOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var width = options.width;\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._positions = positions;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._width = width;\n        this._height = Math.max(height, extrudedHeight);\n        this._extrudedHeight = Math.min(height, extrudedHeight);\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCorridorOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CorridorOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CorridorOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        positions : undefined,\n        ellipsoid : scratchEllipsoid,\n        width : undefined,\n        height : undefined,\n        extrudedHeight : undefined,\n        cornerType : undefined,\n        granularity : undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\n     */\n    CorridorOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var width = array[startingIndex++];\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.width = width;\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CorridorOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._width = width;\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CorridorOutlineGeometry.createGeometry = function(corridorOutlineGeometry) {\n        var positions = corridorOutlineGeometry._positions;\n        var width = corridorOutlineGeometry._width;\n        var ellipsoid = corridorOutlineGeometry._ellipsoid;\n\n        positions = scaleToSurface(positions, ellipsoid);\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n        if ((cleanPositions.length < 2) || (width <= 0)) {\n            return;\n        }\n\n        var height = corridorOutlineGeometry._height;\n        var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var params = {\n            ellipsoid : ellipsoid,\n            positions : cleanPositions,\n            width : width,\n            cornerType : corridorOutlineGeometry._cornerType,\n            granularity : corridorOutlineGeometry._granularity,\n            saveAttributes : false\n        };\n        var attr;\n        if (extrude) {\n            params.height = height;\n            params.extrudedHeight = extrudedHeight;\n            params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\n            attr = computePositionsExtruded(params);\n        } else {\n            var computedPositions = CorridorGeometryLibrary.computePositions(params);\n            attr = combine(computedPositions, params.cornerType);\n            attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(attr.attributes.position.values, height, ellipsoid);\n\n            if (defined(corridorOutlineGeometry._offsetAttribute)) {\n                var length = attr.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = corridorOutlineGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                attr.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n        var attributes = attr.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values, undefined, 3);\n\n        return new Geometry({\n            attributes : attributes,\n            indices : attr.indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : corridorOutlineGeometry._offsetAttribute\n        });\n    };\n\n    return CorridorOutlineGeometry;\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/CylinderGeometry',\n        '../Core/CylinderOutlineGeometry',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/GeometryInstance',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './heightReferenceOnEntityPropertyChanged',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './Property'\n    ], function(\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        CylinderGeometry,\n        CylinderOutlineGeometry,\n        defined,\n        defineProperties,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        heightReferenceOnEntityPropertyChanged,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        Property) {\n    'use strict';\n\n    var defaultOffset = Cartesian3.ZERO;\n\n    var offsetScratch = new Cartesian3();\n    var positionScratch = new Cartesian3();\n    var scratchColor = new Color();\n\n    function CylinderGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.length = undefined;\n        this.topRadius = undefined;\n        this.bottomRadius = undefined;\n        this.slices = undefined;\n        this.numberOfVerticalLines = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for cylinders.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias CylinderGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function CylinderGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity: entity,\n            scene: scene,\n            geometryOptions: new CylinderGeometryOptions(entity),\n            geometryPropertyName: 'cylinder',\n            observedPropertyNames: ['availability', 'position', 'orientation', 'cylinder']\n        });\n\n        this._onEntityPropertyChanged(entity, 'cylinder', entity.cylinder, undefined);\n    }\n\n    if (defined(Object.create)) {\n        CylinderGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        CylinderGeometryUpdater.prototype.constructor = CylinderGeometryUpdater;\n    }\n\n    defineProperties(CylinderGeometryUpdater.prototype, {\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof CylinderGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    CylinderGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute,\n            color : undefined,\n            offset: undefined\n        };\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CylinderGeometry(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.cylinder.heightReference, this._options.length * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    CylinderGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new CylinderOutlineGeometry(this._options),\n            modelMatrix : entity.computeModelMatrixForHeightReference(time, entity.cylinder.heightReference, this._options.length * 0.5, this._scene.mapProjection.ellipsoid),\n            attributes : attributes\n        });\n    };\n\n    CylinderGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    CylinderGeometryUpdater.prototype._isHidden = function(entity, cylinder) {\n        return !defined(entity.position) || !defined(cylinder.length) || !defined(cylinder.topRadius) || !defined(cylinder.bottomRadius) || GeometryUpdater.prototype._isHidden.call(this, entity, cylinder);\n    };\n\n    CylinderGeometryUpdater.prototype._isDynamic = function(entity, cylinder) {\n        return !entity.position.isConstant || //\n                !Property.isConstant(entity.orientation) || //\n                !cylinder.length.isConstant || //\n                !cylinder.topRadius.isConstant || //\n                !cylinder.bottomRadius.isConstant || //\n                !Property.isConstant(cylinder.slices) || //\n                !Property.isConstant(cylinder.outlineWidth) || //\n                !Property.isConstant(cylinder.numberOfVerticalLines);\n    };\n\n    CylinderGeometryUpdater.prototype._setStaticOptions = function(entity, cylinder) {\n        var heightReference = Property.getValueOrDefault(cylinder.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var options = this._options;\n        options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.length = cylinder.length.getValue(Iso8601.MINIMUM_VALUE);\n        options.topRadius = cylinder.topRadius.getValue(Iso8601.MINIMUM_VALUE);\n        options.bottomRadius = cylinder.bottomRadius.getValue(Iso8601.MINIMUM_VALUE);\n        options.slices = Property.getValueOrUndefined(cylinder.slices, Iso8601.MINIMUM_VALUE);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(cylinder.numberOfVerticalLines, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    CylinderGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\n    CylinderGeometryUpdater.DynamicGeometryUpdater = DynamicCylinderGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicCylinderGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicCylinderGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicCylinderGeometryUpdater.prototype.constructor = DynamicCylinderGeometryUpdater;\n    }\n\n    DynamicCylinderGeometryUpdater.prototype._isHidden = function(entity, cylinder, time) {\n        var options = this._options;\n        var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n        return !defined(position) || !defined(options.length) || !defined(options.topRadius) || //\n               !defined(options.bottomRadius) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, cylinder, time);\n    };\n\n    DynamicCylinderGeometryUpdater.prototype._setOptions = function(entity, cylinder, time) {\n        var heightReference = Property.getValueOrDefault(cylinder.heightReference, time, HeightReference.NONE);\n        var options = this._options;\n        options.length = Property.getValueOrUndefined(cylinder.length, time);\n        options.topRadius = Property.getValueOrUndefined(cylinder.topRadius, time);\n        options.bottomRadius = Property.getValueOrUndefined(cylinder.bottomRadius, time);\n        options.slices = Property.getValueOrUndefined(cylinder.slices, time);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(cylinder.numberOfVerticalLines, time);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    return CylinderGeometryUpdater;\n});\n","define([\n        './arrayFill',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './ComponentDatatype',\n        './CylinderGeometryLibrary',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './IndexDatatype',\n        './Math',\n        './PrimitiveType',\n        './VertexFormat'\n    ], function(\n        arrayFill,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        ComponentDatatype,\n        CylinderGeometryLibrary,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        IndexDatatype,\n        CesiumMath,\n        PrimitiveType,\n        VertexFormat) {\n    'use strict';\n\n    var radiusScratch = new Cartesian2();\n    var normalScratch = new Cartesian3();\n    var bitangentScratch = new Cartesian3();\n    var tangentScratch = new Cartesian3();\n    var positionScratch = new Cartesian3();\n\n    /**\n     * A description of a cylinder.\n     *\n     * @alias CylinderGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number} options.length The length of the cylinder.\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\n     *\n     * @see CylinderGeometry.createGeometry\n     *\n     * @example\n     * // create cylinder geometry\n     * var cylinder = new Cesium.CylinderGeometry({\n     *     length: 200000,\n     *     topRadius: 80000,\n     *     bottomRadius: 200000,\n     * });\n     * var geometry = Cesium.CylinderGeometry.createGeometry(cylinder);\n     */\n    function CylinderGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var length = options.length;\n        var topRadius = options.topRadius;\n        var bottomRadius = options.bottomRadius;\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var slices = defaultValue(options.slices, 128);\n\n        \n\n        this._length = length;\n        this._topRadius = topRadius;\n        this._bottomRadius = bottomRadius;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._slices = slices;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCylinderGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    CylinderGeometry.packedLength = VertexFormat.packedLength + 5;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CylinderGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CylinderGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._length;\n        array[startingIndex++] = value._topRadius;\n        array[startingIndex++] = value._bottomRadius;\n        array[startingIndex++] = value._slices;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        vertexFormat : scratchVertexFormat,\n        length : undefined,\n        topRadius : undefined,\n        bottomRadius : undefined,\n        slices : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CylinderGeometry} [result] The object into which to store the result.\n     * @returns {CylinderGeometry} The modified result parameter or a new CylinderGeometry instance if one was not provided.\n     */\n    CylinderGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var length = array[startingIndex++];\n        var topRadius = array[startingIndex++];\n        var bottomRadius = array[startingIndex++];\n        var slices = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.length = length;\n            scratchOptions.topRadius = topRadius;\n            scratchOptions.bottomRadius = bottomRadius;\n            scratchOptions.slices = slices;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CylinderGeometry(scratchOptions);\n        }\n\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._length = length;\n        result._topRadius = topRadius;\n        result._bottomRadius = bottomRadius;\n        result._slices = slices;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a cylinder, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CylinderGeometry} cylinderGeometry A description of the cylinder.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CylinderGeometry.createGeometry = function(cylinderGeometry) {\n        var length = cylinderGeometry._length;\n        var topRadius = cylinderGeometry._topRadius;\n        var bottomRadius = cylinderGeometry._bottomRadius;\n        var vertexFormat = cylinderGeometry._vertexFormat;\n        var slices = cylinderGeometry._slices;\n\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\n            return;\n        }\n\n        var twoSlices = slices + slices;\n        var threeSlices = slices + twoSlices;\n        var numVertices = twoSlices + twoSlices;\n\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, true);\n\n        var st = (vertexFormat.st) ? new Float32Array(numVertices * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(numVertices * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(numVertices * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(numVertices * 3) : undefined;\n\n        var i;\n        var computeNormal = (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent);\n\n        if (computeNormal) {\n            var computeTangent = (vertexFormat.tangent || vertexFormat.bitangent);\n\n            var normalIndex = 0;\n            var tangentIndex = 0;\n            var bitangentIndex = 0;\n\n            var theta = Math.atan2(bottomRadius - topRadius, length);\n            var normal = normalScratch;\n            normal.z = Math.sin(theta);\n            var normalScale = Math.cos(theta);\n            var tangent = tangentScratch;\n            var bitangent = bitangentScratch;\n\n            for (i = 0; i < slices; i++) {\n                var angle = i / slices * CesiumMath.TWO_PI;\n                var x = normalScale * Math.cos(angle);\n                var y = normalScale * Math.sin(angle);\n                if (computeNormal) {\n                    normal.x = x;\n                    normal.y = y;\n\n                    if (computeTangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\n                    }\n\n                    if (vertexFormat.normal) {\n                        normals[normalIndex++] = normal.x;\n                        normals[normalIndex++] = normal.y;\n                        normals[normalIndex++] = normal.z;\n                        normals[normalIndex++] = normal.x;\n                        normals[normalIndex++] = normal.y;\n                        normals[normalIndex++] = normal.z;\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangents[tangentIndex++] = tangent.x;\n                        tangents[tangentIndex++] = tangent.y;\n                        tangents[tangentIndex++] = tangent.z;\n                        tangents[tangentIndex++] = tangent.x;\n                        tangents[tangentIndex++] = tangent.y;\n                        tangents[tangentIndex++] = tangent.z;\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                        bitangents[bitangentIndex++] = bitangent.x;\n                        bitangents[bitangentIndex++] = bitangent.y;\n                        bitangents[bitangentIndex++] = bitangent.z;\n                        bitangents[bitangentIndex++] = bitangent.x;\n                        bitangents[bitangentIndex++] = bitangent.y;\n                        bitangents[bitangentIndex++] = bitangent.z;\n                    }\n                }\n            }\n\n            for (i = 0; i < slices; i++) {\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = -1;\n                }\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = 1;\n                    tangents[tangentIndex++] = 0;\n                    tangents[tangentIndex++] = 0;\n                }\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = 0;\n                    bitangents[bitangentIndex++] = -1;\n                    bitangents[bitangentIndex++] = 0;\n                }\n            }\n\n            for (i = 0; i < slices; i++) {\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = 0;\n                    normals[normalIndex++] = 1;\n                }\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = 1;\n                    tangents[tangentIndex++] = 0;\n                    tangents[tangentIndex++] = 0;\n                }\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = 0;\n                    bitangents[bitangentIndex++] = 1;\n                    bitangents[bitangentIndex++] = 0;\n                }\n            }\n        }\n\n        var numIndices = 12 * slices - 12;\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices);\n        var index = 0;\n        var j = 0;\n        for (i = 0; i < slices - 1; i++) {\n            indices[index++] = j;\n            indices[index++] = j + 2;\n            indices[index++] = j + 3;\n\n            indices[index++] = j;\n            indices[index++] = j + 3;\n            indices[index++] = j + 1;\n\n            j += 2;\n        }\n\n        indices[index++] = twoSlices - 2;\n        indices[index++] = 0;\n        indices[index++] = 1;\n        indices[index++] = twoSlices - 2;\n        indices[index++] = 1;\n        indices[index++] = twoSlices - 1;\n\n        for (i = 1; i < slices - 1; i++) {\n            indices[index++] = twoSlices + i + 1;\n            indices[index++] = twoSlices + i;\n            indices[index++] = twoSlices;\n        }\n\n        for (i = 1; i < slices - 1; i++) {\n            indices[index++] = threeSlices;\n            indices[index++] = threeSlices + i;\n            indices[index++] = threeSlices + i + 1;\n        }\n\n        var textureCoordIndex = 0;\n        if (vertexFormat.st) {\n            var rad = Math.max(topRadius, bottomRadius);\n            for (i = 0; i < numVertices; i++) {\n                var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\n                st[textureCoordIndex++] = (position.x + rad) / (2.0 * rad);\n                st[textureCoordIndex++] = (position.y + rad) / (2.0 * rad);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype: ComponentDatatype.DOUBLE,\n                componentsPerAttribute: 3,\n                values: positions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        radiusScratch.x = length * 0.5;\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\n\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\n\n        if (defined(cylinderGeometry._offsetAttribute)) {\n            length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : cylinderGeometry._offsetAttribute\n        });\n    };\n\n    var unitCylinderGeometry;\n\n    /**\n     * Returns the geometric representation of a unit cylinder, including its vertices, indices, and a bounding sphere.\n     * @returns {Geometry} The computed vertices and indices.\n     *\n     * @private\n     */\n    CylinderGeometry.getUnitCylinder = function() {\n        if (!defined(unitCylinderGeometry)) {\n            unitCylinderGeometry = CylinderGeometry.createGeometry(new CylinderGeometry({\n                topRadius : 1.0,\n                bottomRadius : 1.0,\n                length : 1.0,\n                vertexFormat : VertexFormat.POSITION_ONLY\n            }));\n        }\n        return unitCylinderGeometry;\n    };\n\n    return CylinderGeometry;\n});\n","\ndefine([\n        './arrayFill',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './CylinderGeometryLibrary',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './IndexDatatype',\n        './PrimitiveType'\n    ], function(\n        arrayFill,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        CylinderGeometryLibrary,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        IndexDatatype,\n        PrimitiveType) {\n    'use strict';\n\n    var radiusScratch = new Cartesian2();\n\n    /**\n     * A description of the outline of a cylinder.\n     *\n     * @alias CylinderOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Number} options.length The length of the cylinder.\n     * @param {Number} options.topRadius The radius of the top of the cylinder.\n     * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\n     * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surfaces of the cylinder.\n     *\n     * @exception {DeveloperError} options.length must be greater than 0.\n     * @exception {DeveloperError} options.topRadius must be greater than 0.\n     * @exception {DeveloperError} options.bottomRadius must be greater than 0.\n     * @exception {DeveloperError} bottomRadius and topRadius cannot both equal 0.\n     * @exception {DeveloperError} options.slices must be greater than or equal to 3.\n     *\n     * @see CylinderOutlineGeometry.createGeometry\n     *\n     * @example\n     * // create cylinder geometry\n     * var cylinder = new Cesium.CylinderOutlineGeometry({\n     *     length: 200000,\n     *     topRadius: 80000,\n     *     bottomRadius: 200000,\n     * });\n     * var geometry = Cesium.CylinderOutlineGeometry.createGeometry(cylinder);\n     */\n    function CylinderOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var length = options.length;\n        var topRadius = options.topRadius;\n        var bottomRadius = options.bottomRadius;\n        var slices = defaultValue(options.slices, 128);\n        var numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\n\n        \n\n        this._length = length;\n        this._topRadius = topRadius;\n        this._bottomRadius = bottomRadius;\n        this._slices = slices;\n        this._numberOfVerticalLines = numberOfVerticalLines;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createCylinderOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    CylinderOutlineGeometry.packedLength = 6;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CylinderOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CylinderOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        array[startingIndex++] = value._length;\n        array[startingIndex++] = value._topRadius;\n        array[startingIndex++] = value._bottomRadius;\n        array[startingIndex++] = value._slices;\n        array[startingIndex++] = value._numberOfVerticalLines;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchOptions = {\n        length : undefined,\n        topRadius : undefined,\n        bottomRadius : undefined,\n        slices : undefined,\n        numberOfVerticalLines : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CylinderOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CylinderOutlineGeometry} The modified result parameter or a new CylinderOutlineGeometry instance if one was not provided.\n     */\n    CylinderOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var length = array[startingIndex++];\n        var topRadius = array[startingIndex++];\n        var bottomRadius = array[startingIndex++];\n        var slices = array[startingIndex++];\n        var numberOfVerticalLines = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.length = length;\n            scratchOptions.topRadius = topRadius;\n            scratchOptions.bottomRadius = bottomRadius;\n            scratchOptions.slices = slices;\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new CylinderOutlineGeometry(scratchOptions);\n        }\n\n        result._length = length;\n        result._topRadius = topRadius;\n        result._bottomRadius = bottomRadius;\n        result._slices = slices;\n        result._numberOfVerticalLines = numberOfVerticalLines;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an outline of a cylinder, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CylinderOutlineGeometry} cylinderGeometry A description of the cylinder outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CylinderOutlineGeometry.createGeometry = function(cylinderGeometry) {\n        var length = cylinderGeometry._length;\n        var topRadius = cylinderGeometry._topRadius;\n        var bottomRadius = cylinderGeometry._bottomRadius;\n        var slices = cylinderGeometry._slices;\n        var numberOfVerticalLines = cylinderGeometry._numberOfVerticalLines;\n\n        if ((length <= 0) || (topRadius < 0) || (bottomRadius < 0) || ((topRadius === 0) && (bottomRadius === 0))) {\n            return;\n        }\n\n        var numVertices = slices * 2;\n\n        var positions = CylinderGeometryLibrary.computePositions(length, topRadius, bottomRadius, slices, false);\n        var numIndices = slices * 2;\n        var numSide;\n        if (numberOfVerticalLines > 0) {\n            var numSideLines = Math.min(numberOfVerticalLines, slices);\n            numSide = Math.round(slices / numSideLines);\n            numIndices += numSideLines;\n        }\n\n        var indices = IndexDatatype.createTypedArray(numVertices, numIndices * 2);\n        var index = 0;\n        var i;\n        for (i = 0; i < slices - 1; i++) {\n            indices[index++] = i;\n            indices[index++] = i + 1;\n            indices[index++] = i + slices;\n            indices[index++] = i + 1 + slices;\n        }\n\n        indices[index++] = slices - 1;\n        indices[index++] = 0;\n        indices[index++] = slices + slices - 1;\n        indices[index++] = slices;\n\n        if (numberOfVerticalLines > 0) {\n            for (i = 0; i < slices; i += numSide) {\n                indices[index++] = i;\n                indices[index++] = i + slices;\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positions\n        });\n\n        radiusScratch.x = length * 0.5;\n        radiusScratch.y = Math.max(bottomRadius, topRadius);\n\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, Cartesian2.magnitude(radiusScratch));\n\n        if (defined(cylinderGeometry._offsetAttribute)) {\n            length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : boundingSphere,\n            offsetAttribute : cylinderGeometry._offsetAttribute\n        });\n    };\n\n    return CylinderOutlineGeometry;\n});\n","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/EllipseGeometry',\n        '../Core/EllipseOutlineGeometry',\n        '../Core/GeometryInstance',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/Rectangle',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/GroundPrimitive',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './GroundGeometryUpdater',\n        './Property'\n    ], function(\n        ApproximateTerrainHeights,\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        EllipseGeometry,\n        EllipseOutlineGeometry,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        Rectangle,\n        ShowGeometryInstanceAttribute,\n        GroundPrimitive,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        GroundGeometryUpdater,\n        Property) {\n    'use strict';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n\n    function EllipseGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.center = undefined;\n        this.semiMajorAxis = undefined;\n        this.semiMinorAxis = undefined;\n        this.rotation = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.stRotation = undefined;\n        this.numberOfVerticalLines = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for ellipses.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias EllipseGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function EllipseGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new EllipseGeometryOptions(entity),\n            geometryPropertyName : 'ellipse',\n            observedPropertyNames : ['availability', 'position', 'ellipse']\n        });\n\n        this._onEntityPropertyChanged(entity, 'ellipse', entity.ellipse, undefined);\n    }\n\n    if (defined(Object.create)) {\n        EllipseGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        EllipseGeometryUpdater.prototype.constructor = EllipseGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    EllipseGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipseGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    EllipseGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipseOutlineGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    EllipseGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    EllipseGeometryUpdater.prototype._isHidden = function(entity, ellipse) {\n        var position = entity.position;\n\n        return !defined(position) || !defined(ellipse.semiMajorAxis) || !defined(ellipse.semiMinorAxis) || GeometryUpdater.prototype._isHidden.call(this, entity, ellipse);\n    };\n\n    EllipseGeometryUpdater.prototype._isDynamic = function(entity, ellipse) {\n        return !entity.position.isConstant || //\n               !ellipse.semiMajorAxis.isConstant || //\n               !ellipse.semiMinorAxis.isConstant || //\n               !Property.isConstant(ellipse.rotation) || //\n               !Property.isConstant(ellipse.height) || //\n               !Property.isConstant(ellipse.extrudedHeight) || //\n               !Property.isConstant(ellipse.granularity) || //\n               !Property.isConstant(ellipse.stRotation) || //\n               !Property.isConstant(ellipse.outlineWidth) || //\n               !Property.isConstant(ellipse.numberOfVerticalLines) || //\n               !Property.isConstant(ellipse.zIndex) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty));\n    };\n\n    EllipseGeometryUpdater.prototype._setStaticOptions = function(entity, ellipse) {\n        var heightValue = Property.getValueOrUndefined(ellipse.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(ellipse.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(ellipse.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(ellipse.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        var options = this._options;\n        options.vertexFormat = (this._materialProperty instanceof ColorMaterialProperty) ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.center = entity.position.getValue(Iso8601.MINIMUM_VALUE, options.center);\n        options.semiMajorAxis = ellipse.semiMajorAxis.getValue(Iso8601.MINIMUM_VALUE, options.semiMajorAxis);\n        options.semiMinorAxis = ellipse.semiMinorAxis.getValue(Iso8601.MINIMUM_VALUE, options.semiMinorAxis);\n        options.rotation = Property.getValueOrUndefined(ellipse.rotation, Iso8601.MINIMUM_VALUE);\n        options.granularity = Property.getValueOrUndefined(ellipse.granularity, Iso8601.MINIMUM_VALUE);\n        options.stRotation = Property.getValueOrUndefined(ellipse.stRotation, Iso8601.MINIMUM_VALUE);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(ellipse.numberOfVerticalLines, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(EllipseGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    EllipseGeometryUpdater.DynamicGeometryUpdater = DynamicEllipseGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicEllipseGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicEllipseGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicEllipseGeometryUpdater.prototype.constructor = DynamicEllipseGeometryUpdater;\n    }\n\n    DynamicEllipseGeometryUpdater.prototype._isHidden = function(entity, ellipse, time) {\n        var options = this._options;\n        return !defined(options.center) || !defined(options.semiMajorAxis) || !defined(options.semiMinorAxis) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, ellipse, time);\n    };\n\n    DynamicEllipseGeometryUpdater.prototype._setOptions = function(entity, ellipse, time) {\n        var options = this._options;\n        var heightValue = Property.getValueOrUndefined(ellipse.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(ellipse.heightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(ellipse.extrudedHeight, time);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(ellipse.extrudedHeightReference, time, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        options.center = Property.getValueOrUndefined(entity.position, time, options.center);\n        options.semiMajorAxis = Property.getValueOrUndefined(ellipse.semiMajorAxis, time);\n        options.semiMinorAxis = Property.getValueOrUndefined(ellipse.semiMinorAxis, time);\n        options.rotation = Property.getValueOrUndefined(ellipse.rotation, time);\n        options.granularity = Property.getValueOrUndefined(ellipse.granularity, time);\n        options.stRotation = Property.getValueOrUndefined(ellipse.stRotation, time);\n        options.numberOfVerticalLines = Property.getValueOrUndefined(ellipse.numberOfVerticalLines, time);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(EllipseGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    return EllipseGeometryUpdater;\n});\n","define([\n        './arrayFill',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './Cartographic',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './defineProperties',\n        './DeveloperError',\n        './EllipseGeometryLibrary',\n        './Ellipsoid',\n        './GeographicProjection',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryInstance',\n        './GeometryOffsetAttribute',\n        './GeometryPipeline',\n        './IndexDatatype',\n        './Math',\n        './Matrix3',\n        './PrimitiveType',\n        './Quaternion',\n        './Rectangle',\n        './VertexFormat'\n    ], function(\n        arrayFill,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Cartographic,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        EllipseGeometryLibrary,\n        Ellipsoid,\n        GeographicProjection,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        GeometryPipeline,\n        IndexDatatype,\n        CesiumMath,\n        Matrix3,\n        PrimitiveType,\n        Quaternion,\n        Rectangle,\n        VertexFormat) {\n    'use strict';\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n    var texCoordScratch = new Cartesian2();\n    var textureMatrixScratch = new Matrix3();\n    var tangentMatrixScratch = new Matrix3();\n    var quaternionScratch = new Quaternion();\n\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n\n    var scratchCartographic = new Cartographic();\n    var projectedCenterScratch = new Cartesian3();\n\n    var scratchMinTexCoord = new Cartesian2();\n    var scratchMaxTexCoord = new Cartesian2();\n\n    function computeTopBottomAttributes(positions, options, extrude) {\n        var vertexFormat = options.vertexFormat;\n        var center = options.center;\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var ellipsoid = options.ellipsoid;\n        var stRotation = options.stRotation;\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\n        var shadowVolume = options.shadowVolume;\n\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\n\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\n\n        var textureCoordIndex = 0;\n\n        // Raise positions to a height above the ellipsoid and compute the\n        // texture coordinates, normals, tangents, and bitangents.\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n\n        var projection = new GeographicProjection(ellipsoid);\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\n\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n\n        var textureMatrix = textureMatrixScratch;\n        var tangentMatrix = tangentMatrixScratch;\n        if (stRotation !== 0) {\n            var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n            rotation = Quaternion.fromAxisAngle(geodeticNormal, -stRotation, quaternionScratch);\n            tangentMatrix = Matrix3.fromQuaternion(rotation, tangentMatrix);\n        } else {\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n            tangentMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentMatrix);\n        }\n\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\n\n        var length = positions.length;\n        var bottomOffset = (extrude) ? length : 0;\n        var stOffset = bottomOffset / 3 * 2;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n\n            if (vertexFormat.st) {\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n                if (extrude) {\n                    textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n                    textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n                }\n\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n                normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n                if (shadowVolume) {\n                    extrudeNormals[i + bottomOffset] = -normal.x;\n                    extrudeNormals[i1 + bottomOffset] = -normal.y;\n                    extrudeNormals[i2 + bottomOffset] = -normal.z;\n                }\n\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n                    if (vertexFormat.tangent || vertexFormat.bitangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent), tangent);\n                        Matrix3.multiplyByVector(tangentMatrix, tangent, tangent);\n                    }\n                    if (vertexFormat.normal) {\n                        normals[i] = normal.x;\n                        normals[i1] = normal.y;\n                        normals[i2] = normal.z;\n                        if (extrude) {\n                            normals[i + bottomOffset] = -normal.x;\n                            normals[i1 + bottomOffset] = -normal.y;\n                            normals[i2 + bottomOffset] = -normal.z;\n                        }\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangents[i] = tangent.x;\n                        tangents[i1] = tangent.y;\n                        tangents[i2] = tangent.z;\n                        if (extrude) {\n                            tangents[i + bottomOffset] = -tangent.x;\n                            tangents[i1 + bottomOffset] = -tangent.y;\n                            tangents[i2 + bottomOffset] = -tangent.z;\n                        }\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                        bitangents[i ] = bitangent.x;\n                        bitangents[i1] = bitangent.y;\n                        bitangents[i2] = bitangent.z;\n                        if (extrude) {\n                            bitangents[i + bottomOffset] = bitangent.x;\n                            bitangents[i1 + bottomOffset] = bitangent.y;\n                            bitangents[i2 + bottomOffset] = bitangent.z;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (vertexFormat.st) {\n            length = textureCoordinates.length;\n            for (var k = 0; k < length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            var finalPositions = EllipseGeometryLibrary.raisePositionsToHeight(positions, options, extrude);\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : finalPositions\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (shadowVolume) {\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        if (extrude && defined(options.offsetAttribute)) {\n            var offsetAttribute = new Uint8Array(size);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return attributes;\n    }\n\n    function topIndices(numPts) {\n        // numTriangles in half = 3 + 8 + 12 + ... = -1 + 4 + (4 + 4) + (4 + 4 + 4) + ... = -1 + 4 * (1 + 2 + 3 + ...)\n        //              = -1 + 4 * ((n * ( n + 1)) / 2)\n        // total triangles = 2 * numTrangles in half\n        // indices = total triangles * 3;\n        // Substitute numPts for n above\n\n        var indices = new Array(12 * (numPts * ( numPts + 1)) - 6);\n        var indicesIndex = 0;\n        var prevIndex;\n        var numInterior;\n        var positionIndex;\n        var i;\n        var j;\n        // Indices triangles to the 'right' of the north vector\n\n        prevIndex = 0;\n        positionIndex = 1;\n        for (i = 0; i < 3; i++) {\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        for (i = 2; i < numPts + 1; ++i) {\n            positionIndex = i * (i + 1) - 1;\n            prevIndex = (i - 1) * i - 1;\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n\n            numInterior = 2 * i;\n            for (j = 0; j < numInterior - 1; ++j) {\n\n                indices[indicesIndex++] = positionIndex;\n                indices[indicesIndex++] = prevIndex++;\n                indices[indicesIndex++] = prevIndex;\n\n                indices[indicesIndex++] = positionIndex++;\n                indices[indicesIndex++] = prevIndex;\n                indices[indicesIndex++] = positionIndex;\n            }\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        // Indices for center column of triangles\n        numInterior = numPts * 2;\n        ++positionIndex;\n        ++prevIndex;\n        for (i = 0; i < numInterior - 1; ++i) {\n            indices[indicesIndex++] = positionIndex;\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n\n            indices[indicesIndex++] = positionIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n\n        indices[indicesIndex++] = positionIndex;\n        indices[indicesIndex++] = prevIndex++;\n        indices[indicesIndex++] = prevIndex;\n\n        indices[indicesIndex++] = positionIndex++;\n        indices[indicesIndex++] = prevIndex++;\n        indices[indicesIndex++] = prevIndex;\n\n        // Reverse the process creating indices to the 'left' of the north vector\n        ++prevIndex;\n        for (i = numPts - 1; i > 1; --i) {\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n\n            numInterior = 2 * i;\n            for (j = 0; j < numInterior - 1; ++j) {\n                indices[indicesIndex++] = positionIndex;\n                indices[indicesIndex++] = prevIndex++;\n                indices[indicesIndex++] = prevIndex;\n\n                indices[indicesIndex++] = positionIndex++;\n                indices[indicesIndex++] = prevIndex;\n                indices[indicesIndex++] = positionIndex;\n            }\n\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = positionIndex++;\n        }\n\n        for (i = 0; i < 3; i++) {\n            indices[indicesIndex++] = prevIndex++;\n            indices[indicesIndex++] = prevIndex;\n            indices[indicesIndex++] = positionIndex;\n        }\n        return indices;\n    }\n\n    var boundingSphereCenter = new Cartesian3();\n\n    function computeEllipse(options) {\n        var center = options.center;\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, false);\n        var positions = cep.positions;\n        var numPts = cep.numPts;\n        var attributes = computeTopBottomAttributes(positions, options, false);\n        var indices = topIndices(numPts);\n        indices = IndexDatatype.createTypedArray(positions.length / 3, indices);\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    function computeWallAttributes(positions, options) {\n        var vertexFormat = options.vertexFormat;\n        var center = options.center;\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var ellipsoid = options.ellipsoid;\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var stRotation = options.stRotation;\n        var size = positions.length / 3 * 2;\n\n        var finalPositions = new Float64Array(size * 3);\n        var textureCoordinates = (vertexFormat.st) ? new Float32Array(size * 2) : undefined;\n        var normals = (vertexFormat.normal) ? new Float32Array(size * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(size * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(size * 3) : undefined;\n\n        var shadowVolume = options.shadowVolume;\n        var extrudeNormals = (shadowVolume) ? new Float32Array(size * 3) : undefined;\n\n        var textureCoordIndex = 0;\n\n        // Raise positions to a height above the ellipsoid and compute the\n        // texture coordinates, normals, tangents, and bitangents.\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n\n        var projection = new GeographicProjection(ellipsoid);\n        var projectedCenter = projection.project(ellipsoid.cartesianToCartographic(center, scratchCartographic), projectedCenterScratch);\n\n        var geodeticNormal = ellipsoid.scaleToGeodeticSurface(center, scratchCartesian1);\n        ellipsoid.geodeticSurfaceNormal(geodeticNormal, geodeticNormal);\n        var rotation = Quaternion.fromAxisAngle(geodeticNormal, stRotation, quaternionScratch);\n        var textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrixScratch);\n\n        var minTexCoord = Cartesian2.fromElements(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, scratchMinTexCoord);\n        var maxTexCoord = Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, scratchMaxTexCoord);\n\n        var length = positions.length;\n        var stOffset = length / 3 * 2;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n            var extrudedPosition;\n\n            if (vertexFormat.st) {\n                var rotatedPoint = Matrix3.multiplyByVector(textureMatrix, position, scratchCartesian2);\n                var projectedPoint = projection.project(ellipsoid.cartesianToCartographic(rotatedPoint, scratchCartographic), scratchCartesian3);\n                Cartesian3.subtract(projectedPoint, projectedCenter, projectedPoint);\n\n                texCoordScratch.x = (projectedPoint.x + semiMajorAxis) / (2.0 * semiMajorAxis);\n                texCoordScratch.y = (projectedPoint.y + semiMinorAxis) / (2.0 * semiMinorAxis);\n\n                minTexCoord.x = Math.min(texCoordScratch.x, minTexCoord.x);\n                minTexCoord.y = Math.min(texCoordScratch.y, minTexCoord.y);\n                maxTexCoord.x = Math.max(texCoordScratch.x, maxTexCoord.x);\n                maxTexCoord.y = Math.max(texCoordScratch.y, maxTexCoord.y);\n\n                textureCoordinates[textureCoordIndex + stOffset] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex + 1 + stOffset] = texCoordScratch.y;\n\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.x;\n                textureCoordinates[textureCoordIndex++] = texCoordScratch.y;\n            }\n\n            position = ellipsoid.scaleToGeodeticSurface(position, position);\n            extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n\n            if (shadowVolume) {\n                extrudeNormals[i + length] = -normal.x;\n                extrudeNormals[i1 + length] = -normal.y;\n                extrudeNormals[i2 + length] = -normal.z;\n            }\n\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian4);\n            position = Cartesian3.add(position, scaledNormal, position);\n            scaledNormal = Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\n            extrudedPosition = Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\n\n            if (vertexFormat.position) {\n                finalPositions[i + length] = extrudedPosition.x;\n                finalPositions[i1 + length] = extrudedPosition.y;\n                finalPositions[i2 + length] = extrudedPosition.z;\n\n                finalPositions[i] = position.x;\n                finalPositions[i1] = position.y;\n                finalPositions[i2] = position.z;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n\n                bitangent = Cartesian3.clone(normal, bitangent);\n                var next = Cartesian3.fromArray(positions, (i + 3) % length, scratchCartesian4);\n                Cartesian3.subtract(next, position, next);\n                var bottom = Cartesian3.subtract(extrudedPosition, position, scratchCartesian3);\n\n                normal = Cartesian3.normalize(Cartesian3.cross(bottom, next, normal), normal);\n\n                if (vertexFormat.normal) {\n                    normals[i] = normal.x;\n                    normals[i1] = normal.y;\n                    normals[i2] = normal.z;\n\n                    normals[i + length] = normal.x;\n                    normals[i1 + length] = normal.y;\n                    normals[i2 + length] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                    tangents[i] = tangent.x;\n                    tangents[i1] = tangent.y;\n                    tangents[i2] = tangent.z;\n\n                    tangents[i + length] = tangent.x;\n                    tangents[i + 1 + length] = tangent.y;\n                    tangents[i + 2 + length] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[i ] = bitangent.x;\n                    bitangents[i1] = bitangent.y;\n                    bitangents[i2] = bitangent.z;\n\n                    bitangents[i + length] = bitangent.x;\n                    bitangents[i1 + length] = bitangent.y;\n                    bitangents[i2 + length] = bitangent.z;\n                }\n            }\n        }\n\n        if (vertexFormat.st) {\n            length = textureCoordinates.length;\n            for (var k = 0; k < length; k += 2) {\n                textureCoordinates[k] = (textureCoordinates[k] - minTexCoord.x) / (maxTexCoord.x - minTexCoord.x);\n                textureCoordinates[k + 1] = (textureCoordinates[k + 1] - minTexCoord.y) / (maxTexCoord.y - minTexCoord.y);\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : finalPositions\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (shadowVolume) {\n            attributes.extrudeDirection = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : extrudeNormals\n            });\n        }\n\n        if (defined(options.offsetAttribute)) {\n            var offsetAttribute = new Uint8Array(size);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return attributes;\n    }\n\n    function computeWallIndices(positions) {\n        var length = positions.length / 3;\n        var indices = IndexDatatype.createTypedArray(length, length * 6);\n        var index = 0;\n        for (var i = 0; i < length; i++) {\n            var UL = i;\n            var LL = i + length;\n            var UR = (UL + 1) % length;\n            var LR = UR + length;\n            indices[index++] = UL;\n            indices[index++] = LL;\n            indices[index++] = UR;\n            indices[index++] = UR;\n            indices[index++] = LL;\n            indices[index++] = LR;\n        }\n\n        return indices;\n    }\n\n    var topBoundingSphere = new BoundingSphere();\n    var bottomBoundingSphere = new BoundingSphere();\n\n    function computeExtrudedEllipse(options) {\n        var center = options.center;\n        var ellipsoid = options.ellipsoid;\n        var semiMajorAxis = options.semiMajorAxis;\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\n        topBoundingSphere.radius = semiMajorAxis;\n\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\n        bottomBoundingSphere.radius = semiMajorAxis;\n\n        var cep = EllipseGeometryLibrary.computeEllipsePositions(options, true, true);\n        var positions = cep.positions;\n        var numPts = cep.numPts;\n        var outerPositions = cep.outerPositions;\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\n        var topBottomAttributes = computeTopBottomAttributes(positions, options, true);\n        var indices = topIndices(numPts);\n        var length = indices.length;\n        indices.length = length * 2;\n        var posLength = positions.length / 3;\n        for (var i = 0; i < length; i += 3) {\n            indices[i + length] = indices[i + 2] + posLength;\n            indices[i + 1 + length] = indices[i + 1] + posLength;\n            indices[i + 2 + length] = indices[i] + posLength;\n        }\n\n        var topBottomIndices = IndexDatatype.createTypedArray(posLength * 2 / 3, indices);\n\n        var topBottomGeo = new Geometry({\n            attributes : topBottomAttributes,\n            indices : topBottomIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        var wallAttributes = computeWallAttributes(outerPositions, options);\n        indices = computeWallIndices(outerPositions);\n        var wallIndices = IndexDatatype.createTypedArray(outerPositions.length * 2 / 3, indices);\n\n        var wallGeo = new Geometry({\n            attributes : wallAttributes,\n            indices : wallIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        var geo = GeometryPipeline.combineInstances([\n            new GeometryInstance({\n                geometry : topBottomGeo\n            }),\n            new GeometryInstance({\n                geometry : wallGeo\n            })\n        ]);\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : geo[0].attributes,\n            indices : geo[0].indices\n        };\n    }\n\n    function computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result) {\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\n            center : center,\n            semiMajorAxis : semiMajorAxis,\n            semiMinorAxis : semiMinorAxis,\n            rotation : rotation,\n            granularity : granularity\n        }, false, true);\n        var positionsFlat = cep.outerPositions;\n        var positionsCount = positionsFlat.length / 3;\n        var positions = new Array(positionsCount);\n        for (var i = 0; i < positionsCount; ++i) {\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n        }\n        var rectangle = Rectangle.fromCartesianArray(positions, ellipsoid, result);\n        // Rectangle width goes beyond 180 degrees when the ellipse crosses a pole.\n        // When this happens, make the rectangle into a \"circle\" around the pole\n        if (rectangle.width > CesiumMath.PI) {\n            rectangle.north = rectangle.north > 0.0 ? CesiumMath.PI_OVER_TWO - CesiumMath.EPSILON7 : rectangle.north;\n            rectangle.south = rectangle.south < 0.0 ? CesiumMath.EPSILON7 - CesiumMath.PI_OVER_TWO : rectangle.south;\n            rectangle.east = CesiumMath.PI;\n            rectangle.west = -CesiumMath.PI;\n        }\n        return rectangle;\n    }\n\n    /**\n     * A description of an ellipse on an ellipsoid. Ellipse geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias EllipseGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates counter-clockwise from north.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n     * @exception {DeveloperError} granularity must be greater than zero.\n     *\n     *\n     * @example\n     * // Create an ellipse.\n     * var ellipse = new Cesium.EllipseGeometry({\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n     *   semiMajorAxis : 500000.0,\n     *   semiMinorAxis : 300000.0,\n     *   rotation : Cesium.Math.toRadians(60.0)\n     * });\n     * var geometry = Cesium.EllipseGeometry.createGeometry(ellipse);\n     *\n     * @see EllipseGeometry.createGeometry\n     */\n    function EllipseGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._center = Cartesian3.clone(center);\n        this._semiMajorAxis = semiMajorAxis;\n        this._semiMinorAxis = semiMinorAxis;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._rotation = defaultValue(options.rotation, 0.0);\n        this._stRotation = defaultValue(options.stRotation, 0.0);\n        this._height = Math.max(extrudedHeight, height);\n        this._granularity = granularity;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._extrudedHeight = Math.min(extrudedHeight, height);\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createEllipseGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n\n        this._rectangle = undefined;\n        this._textureCoordinateRotationPoints = undefined;\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipseGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + VertexFormat.packedLength + 9;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipseGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipseGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._center, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._semiMajorAxis;\n        array[startingIndex++] = value._semiMinorAxis;\n        array[startingIndex++] = value._rotation;\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchCenter = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        center : scratchCenter,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        semiMajorAxis : undefined,\n        semiMinorAxis : undefined,\n        rotation : undefined,\n        stRotation : undefined,\n        height : undefined,\n        granularity : undefined,\n        extrudedHeight : undefined,\n        shadowVolume: undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipseGeometry} [result] The object into which to store the result.\n     * @returns {EllipseGeometry} The modified result parameter or a new EllipseGeometry instance if one was not provided.\n     */\n    EllipseGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\n        startingIndex += Cartesian3.packedLength;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var semiMajorAxis = array[startingIndex++];\n        var semiMinorAxis = array[startingIndex++];\n        var rotation = array[startingIndex++];\n        var stRotation = array[startingIndex++];\n        var height = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.granularity = granularity;\n            scratchOptions.stRotation = stRotation;\n            scratchOptions.rotation = rotation;\n            scratchOptions.semiMajorAxis = semiMajorAxis;\n            scratchOptions.semiMinorAxis = semiMinorAxis;\n            scratchOptions.shadowVolume = shadowVolume;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new EllipseGeometry(scratchOptions);\n        }\n\n        result._center = Cartesian3.clone(center, result._center);\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._semiMajorAxis = semiMajorAxis;\n        result._semiMinorAxis = semiMinorAxis;\n        result._rotation = rotation;\n        result._stRotation = stRotation;\n        result._height = height;\n        result._granularity = granularity;\n        result._extrudedHeight = extrudedHeight;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the bounding rectangle based on the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.rotation=0.0] The angle of rotation counter-clockwise from north.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The angular distance between points on the ellipse in radians.\n     * @param {Rectangle} [result] An object in which to store the result\n     *\n     * @returns {Rectangle} The result rectangle\n     */\n    EllipseGeometry.computeRectangle = function(options, result) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var rotation = defaultValue(options.rotation, 0.0);\n\n        \n\n        return computeRectangle(center, semiMajorAxis, semiMinorAxis, rotation, granularity, ellipsoid, result);\n    };\n\n    /**\n     * Computes the geometric representation of a ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipseGeometry} ellipseGeometry A description of the ellipse.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipseGeometry.createGeometry = function(ellipseGeometry) {\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\n            return;\n        }\n\n        var height = ellipseGeometry._height;\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\n        var options = {\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipseGeometry._ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            height : height,\n            granularity : ellipseGeometry._granularity,\n            vertexFormat : ellipseGeometry._vertexFormat,\n            stRotation : ellipseGeometry._stRotation\n        };\n        var geometry;\n        if (extrude) {\n            options.extrudedHeight = extrudedHeight;\n            options.shadowVolume = ellipseGeometry._shadowVolume;\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\n            geometry = computeExtrudedEllipse(options);\n        } else {\n            geometry = computeEllipse(options);\n\n            if (defined(ellipseGeometry._offsetAttribute)) {\n                var length = geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometry.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : geometry.boundingSphere,\n            offsetAttribute : ellipseGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    EllipseGeometry.createShadowVolume = function(ellipseGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = ellipseGeometry._granularity;\n        var ellipsoid = ellipseGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new EllipseGeometry({\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            stRotation : ellipseGeometry._stRotation,\n            granularity : granularity,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true\n        });\n    };\n\n    function textureCoordinateRotationPoints(ellipseGeometry) {\n        var stRotation = -ellipseGeometry._stRotation;\n        if (stRotation === 0.0) {\n            return [0, 0, 0, 1, 1, 0];\n        }\n\n        var cep = EllipseGeometryLibrary.computeEllipsePositions({\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            rotation : ellipseGeometry._rotation,\n            granularity : ellipseGeometry._granularity\n        }, false, true);\n        var positionsFlat = cep.outerPositions;\n        var positionsCount = positionsFlat.length / 3;\n        var positions = new Array(positionsCount);\n        for (var i = 0; i < positionsCount; ++i) {\n            positions[i] = Cartesian3.fromArray(positionsFlat, i * 3);\n        }\n\n        var ellipsoid = ellipseGeometry._ellipsoid;\n        var boundingRectangle = ellipseGeometry.rectangle;\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\n    }\n\n    defineProperties(EllipseGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    this._rectangle = computeRectangle(this._center, this._semiMajorAxis, this._semiMinorAxis, this._rotation, this._granularity, this._ellipsoid);\n                }\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering EllipseGeometries as GroundPrimitives.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                if (!defined(this._textureCoordinateRotationPoints)) {\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\n                }\n                return this._textureCoordinateRotationPoints;\n            }\n        }\n    });\n\n    return EllipseGeometry;\n});\n","define([\n        './arrayFill',\n        './BoundingSphere',\n        './Cartesian3',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './EllipseGeometryLibrary',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './IndexDatatype',\n        './Math',\n        './PrimitiveType'\n    ], function(\n        arrayFill,\n        BoundingSphere,\n        Cartesian3,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        EllipseGeometryLibrary,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        IndexDatatype,\n        CesiumMath,\n        PrimitiveType) {\n    'use strict';\n\n    var scratchCartesian1 = new Cartesian3();\n    var boundingSphereCenter = new Cartesian3();\n\n    function computeEllipse(options) {\n        var center = options.center;\n        boundingSphereCenter = Cartesian3.multiplyByScalar(options.ellipsoid.geodeticSurfaceNormal(center, boundingSphereCenter), options.height, boundingSphereCenter);\n        boundingSphereCenter = Cartesian3.add(center, boundingSphereCenter, boundingSphereCenter);\n        var boundingSphere = new BoundingSphere(boundingSphereCenter, options.semiMajorAxis);\n        var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\n\n        var attributes = new GeometryAttributes({\n            position: new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : EllipseGeometryLibrary.raisePositionsToHeight(positions, options, false)\n            })\n        });\n\n        var length = positions.length / 3;\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\n        var index = 0;\n        for ( var i = 0; i < length; ++i) {\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n        }\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    var topBoundingSphere = new BoundingSphere();\n    var bottomBoundingSphere = new BoundingSphere();\n    function computeExtrudedEllipse(options) {\n        var center = options.center;\n        var ellipsoid = options.ellipsoid;\n        var semiMajorAxis = options.semiMajorAxis;\n        var scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scratchCartesian1), options.height, scratchCartesian1);\n        topBoundingSphere.center = Cartesian3.add(center, scaledNormal, topBoundingSphere.center);\n        topBoundingSphere.radius = semiMajorAxis;\n\n        scaledNormal = Cartesian3.multiplyByScalar(ellipsoid.geodeticSurfaceNormal(center, scaledNormal), options.extrudedHeight, scaledNormal);\n        bottomBoundingSphere.center = Cartesian3.add(center, scaledNormal, bottomBoundingSphere.center);\n        bottomBoundingSphere.radius = semiMajorAxis;\n\n        var positions = EllipseGeometryLibrary.computeEllipsePositions(options, false, true).outerPositions;\n        var attributes = new GeometryAttributes({\n            position: new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : EllipseGeometryLibrary.raisePositionsToHeight(positions, options, true)\n            })\n        });\n\n        positions = attributes.position.values;\n        var boundingSphere = BoundingSphere.union(topBoundingSphere, bottomBoundingSphere);\n        var length = positions.length/3;\n\n        if (defined(options.offsetAttribute)) {\n            var applyOffset = new Uint8Array(length);\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                applyOffset = arrayFill(applyOffset, 1, 0, length / 2);\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                applyOffset = arrayFill(applyOffset, offsetValue);\n            }\n\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        var numberOfVerticalLines = defaultValue(options.numberOfVerticalLines, 16);\n        numberOfVerticalLines = CesiumMath.clamp(numberOfVerticalLines, 0, length/2);\n\n        var indices = IndexDatatype.createTypedArray(length, length * 2 + numberOfVerticalLines * 2);\n\n        length /= 2;\n        var index = 0;\n        var i;\n        for (i = 0; i < length; ++i) {\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n            indices[index++] = i + length;\n            indices[index++] = ((i + 1) % length) + length;\n        }\n\n        var numSide;\n        if (numberOfVerticalLines > 0) {\n            var numSideLines = Math.min(numberOfVerticalLines, length);\n            numSide = Math.round(length / numSideLines);\n\n            var maxI = Math.min(numSide * numberOfVerticalLines, length);\n            for (i = 0; i < maxI; i += numSide) {\n                indices[index++] = i;\n                indices[index++] = i + length;\n            }\n        }\n\n        return {\n            boundingSphere : boundingSphere,\n            attributes : attributes,\n            indices : indices\n        };\n    }\n\n    /**\n     * A description of the outline of an ellipse on an ellipsoid.\n     *\n     * @alias EllipseOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.center The ellipse's center point in the fixed frame.\n     * @param {Number} options.semiMajorAxis The length of the ellipse's semi-major axis in meters.\n     * @param {Number} options.semiMinorAxis The length of the ellipse's semi-minor axis in meters.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the ellipse will be on.\n     * @param {Number} [options.height=0.0] The distance in meters between the ellipse and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the ellipse's extruded face and the ellipsoid surface.\n     * @param {Number} [options.rotation=0.0] The angle from north (counter-clockwise) in radians.\n     * @param {Number} [options.granularity=0.02] The angular distance between points on the ellipse in radians.\n     * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom surface of an extruded ellipse.\n     *\n     * @exception {DeveloperError} semiMajorAxis and semiMinorAxis must be greater than zero.\n     * @exception {DeveloperError} semiMajorAxis must be greater than or equal to the semiMinorAxis.\n     * @exception {DeveloperError} granularity must be greater than zero.\n     *\n     * @see EllipseOutlineGeometry.createGeometry\n     *\n     * @example\n     * var ellipse = new Cesium.EllipseOutlineGeometry({\n     *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n     *   semiMajorAxis : 500000.0,\n     *   semiMinorAxis : 300000.0,\n     *   rotation : Cesium.Math.toRadians(60.0)\n     * });\n     * var geometry = Cesium.EllipseOutlineGeometry.createGeometry(ellipse);\n     */\n    function EllipseOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var center = options.center;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var semiMajorAxis = options.semiMajorAxis;\n        var semiMinorAxis = options.semiMinorAxis;\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n\n        \n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        this._center = Cartesian3.clone(center);\n        this._semiMajorAxis = semiMajorAxis;\n        this._semiMinorAxis = semiMinorAxis;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._rotation = defaultValue(options.rotation, 0.0);\n        this._height = Math.max(extrudedHeight, height);\n        this._granularity = granularity;\n        this._extrudedHeight = Math.min(extrudedHeight, height);\n        this._numberOfVerticalLines = Math.max(defaultValue(options.numberOfVerticalLines, 16), 0);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createEllipseOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipseOutlineGeometry.packedLength = Cartesian3.packedLength + Ellipsoid.packedLength + 8;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipseOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipseOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._center, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._semiMajorAxis;\n        array[startingIndex++] = value._semiMinorAxis;\n        array[startingIndex++] = value._rotation;\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++]   = value._numberOfVerticalLines;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchCenter = new Cartesian3();\n    var scratchEllipsoid = new Ellipsoid();\n    var scratchOptions = {\n        center : scratchCenter,\n        ellipsoid : scratchEllipsoid,\n        semiMajorAxis : undefined,\n        semiMinorAxis : undefined,\n        rotation : undefined,\n        height : undefined,\n        granularity : undefined,\n        extrudedHeight : undefined,\n        numberOfVerticalLines : undefined,\n        offsetAttribute: undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipseOutlineGeometry} [result] The object into which to store the result.\n     * @returns {EllipseOutlineGeometry} The modified result parameter or a new EllipseOutlineGeometry instance if one was not provided.\n     */\n    EllipseOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var center = Cartesian3.unpack(array, startingIndex, scratchCenter);\n        startingIndex += Cartesian3.packedLength;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var semiMajorAxis = array[startingIndex++];\n        var semiMinorAxis = array[startingIndex++];\n        var rotation = array[startingIndex++];\n        var height = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var numberOfVerticalLines = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.height = height;\n            scratchOptions.extrudedHeight = extrudedHeight;\n            scratchOptions.granularity = granularity;\n            scratchOptions.rotation = rotation;\n            scratchOptions.semiMajorAxis = semiMajorAxis;\n            scratchOptions.semiMinorAxis = semiMinorAxis;\n            scratchOptions.numberOfVerticalLines = numberOfVerticalLines;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n            return new EllipseOutlineGeometry(scratchOptions);\n        }\n\n        result._center = Cartesian3.clone(center, result._center);\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._semiMajorAxis = semiMajorAxis;\n        result._semiMinorAxis = semiMinorAxis;\n        result._rotation = rotation;\n        result._height = height;\n        result._granularity = granularity;\n        result._extrudedHeight = extrudedHeight;\n        result._numberOfVerticalLines = numberOfVerticalLines;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an outline of an ellipse on an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipseOutlineGeometry} ellipseGeometry A description of the ellipse.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipseOutlineGeometry.createGeometry = function(ellipseGeometry) {\n        if ((ellipseGeometry._semiMajorAxis <= 0.0) || (ellipseGeometry._semiMinorAxis <= 0.0)) {\n            return;\n        }\n\n        var height = ellipseGeometry._height;\n        var extrudedHeight = ellipseGeometry._extrudedHeight;\n        var extrude = !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        ellipseGeometry._center = ellipseGeometry._ellipsoid.scaleToGeodeticSurface(ellipseGeometry._center, ellipseGeometry._center);\n        var options = {\n            center : ellipseGeometry._center,\n            semiMajorAxis : ellipseGeometry._semiMajorAxis,\n            semiMinorAxis : ellipseGeometry._semiMinorAxis,\n            ellipsoid : ellipseGeometry._ellipsoid,\n            rotation : ellipseGeometry._rotation,\n            height : height,\n            granularity : ellipseGeometry._granularity,\n            numberOfVerticalLines : ellipseGeometry._numberOfVerticalLines\n        };\n        var geometry;\n        if (extrude) {\n            options.extrudedHeight = extrudedHeight;\n            options.offsetAttribute = ellipseGeometry._offsetAttribute;\n            geometry = computeExtrudedEllipse(options);\n        } else {\n            geometry = computeEllipse(options);\n\n            if (defined(ellipseGeometry._offsetAttribute)) {\n                var length = geometry.attributes.position.values.length;\n                var applyOffset = new Uint8Array(length / 3);\n                var offsetValue = ellipseGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                arrayFill(applyOffset, offsetValue);\n                geometry.attributes.applyOffset = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                    componentsPerAttribute : 1,\n                    values: applyOffset\n                });\n            }\n        }\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : geometry.boundingSphere,\n            offsetAttribute : ellipseGeometry._offsetAttribute\n        });\n    };\n\n    return EllipseOutlineGeometry;\n});\n","define([\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/EllipsoidGeometry',\n        '../Core/EllipsoidOutlineGeometry',\n        '../Core/GeometryInstance',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/Matrix4',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        '../Scene/Primitive',\n        '../Scene/SceneMode',\n        './heightReferenceOnEntityPropertyChanged',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defaultValue,\n        defined,\n        defineProperties,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        EllipsoidGeometry,\n        EllipsoidOutlineGeometry,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        Matrix4,\n        ShowGeometryInstanceAttribute,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        Primitive,\n        SceneMode,\n        heightReferenceOnEntityPropertyChanged,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    var defaultMaterial = new ColorMaterialProperty(Color.WHITE);\n    var defaultOffset = Cartesian3.ZERO;\n\n    var offsetScratch = new Cartesian3();\n    var radiiScratch = new Cartesian3();\n    var scratchColor = new Color();\n    var unitSphere = new Cartesian3(1, 1, 1);\n\n    function EllipsoidGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.radii = undefined;\n        this.stackPartitions = undefined;\n        this.slicePartitions = undefined;\n        this.subdivisions = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for ellipsoids.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias EllipsoidGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function EllipsoidGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new EllipsoidGeometryOptions(entity),\n            geometryPropertyName : 'ellipsoid',\n            observedPropertyNames : ['availability', 'position', 'orientation', 'ellipsoid']\n        });\n\n        this._onEntityPropertyChanged(entity, 'ellipsoid', entity.ellipsoid, undefined);\n    }\n\n    if (defined(Object.create)) {\n        EllipsoidGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        EllipsoidGeometryUpdater.prototype.constructor = EllipsoidGeometryUpdater;\n    }\n\n    defineProperties(EllipsoidGeometryUpdater.prototype, {\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof EllipsoidGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @param {Boolean} [skipModelMatrix=false] Whether to compute a model matrix for the geometry instance\n     * @param {Matrix4} [modelMatrixResult] Used to store the result of the model matrix calculation\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    EllipsoidGeometryUpdater.prototype.createFillGeometryInstance = function(time, skipModelMatrix, modelMatrixResult) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute,\n            color : undefined,\n            offset: undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes.color = color;\n        }\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipsoidGeometry(this._options),\n            modelMatrix : skipModelMatrix ? undefined : entity.computeModelMatrixForHeightReference(time, entity.ellipsoid.heightReference, this._options.radii.z * 0.5, this._scene.mapProjection.ellipsoid, modelMatrixResult),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @param {Boolean} [skipModelMatrix=false] Whether to compute a model matrix for the geometry instance\n     * @param {Matrix4} [modelMatrixResult] Used to store the result of the model matrix calculation\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    EllipsoidGeometryUpdater.prototype.createOutlineGeometryInstance = function(time, skipModelMatrix, modelMatrixResult) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new EllipsoidOutlineGeometry(this._options),\n            modelMatrix : skipModelMatrix ? undefined : entity.computeModelMatrixForHeightReference(time, entity.ellipsoid.heightReference, this._options.radii.z * 0.5, this._scene.mapProjection.ellipsoid, modelMatrixResult),\n            attributes : attributes\n        });\n    };\n\n    EllipsoidGeometryUpdater.prototype._computeCenter = function(time, result) {\n        return Property.getValueOrUndefined(this._entity.position, time, result);\n    };\n\n    EllipsoidGeometryUpdater.prototype._isHidden = function(entity, ellipsoid) {\n        return !defined(entity.position) || !defined(ellipsoid.radii) || GeometryUpdater.prototype._isHidden.call(this, entity, ellipsoid);\n    };\n\n    EllipsoidGeometryUpdater.prototype._isDynamic = function(entity, ellipsoid) {\n        return !entity.position.isConstant || //\n               !Property.isConstant(entity.orientation) || //\n               !ellipsoid.radii.isConstant || //\n               !Property.isConstant(ellipsoid.stackPartitions) || //\n               !Property.isConstant(ellipsoid.slicePartitions) || //\n               !Property.isConstant(ellipsoid.outlineWidth) || //\n               !Property.isConstant(ellipsoid.subdivisions);\n    };\n\n    EllipsoidGeometryUpdater.prototype._setStaticOptions = function(entity, ellipsoid) {\n        var heightReference = Property.getValueOrDefault(ellipsoid.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var options = this._options;\n        options.vertexFormat = this._materialProperty instanceof ColorMaterialProperty ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.radii = ellipsoid.radii.getValue(Iso8601.MINIMUM_VALUE, options.radii);\n        options.stackPartitions = Property.getValueOrUndefined(ellipsoid.stackPartitions, Iso8601.MINIMUM_VALUE);\n        options.slicePartitions = Property.getValueOrUndefined(ellipsoid.slicePartitions, Iso8601.MINIMUM_VALUE);\n        options.subdivisions = Property.getValueOrUndefined(ellipsoid.subdivisions, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n    };\n\n    EllipsoidGeometryUpdater.prototype._onEntityPropertyChanged = heightReferenceOnEntityPropertyChanged;\n\n    EllipsoidGeometryUpdater.DynamicGeometryUpdater = DynamicEllipsoidGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicEllipsoidGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n\n        this._scene = geometryUpdater._scene;\n        this._modelMatrix = new Matrix4();\n        this._attributes = undefined;\n        this._outlineAttributes = undefined;\n        this._lastSceneMode = undefined;\n        this._lastShow = undefined;\n        this._lastOutlineShow = undefined;\n        this._lastOutlineWidth = undefined;\n        this._lastOutlineColor = undefined;\n        this._lastOffset = new Cartesian3();\n        this._material = {};\n    }\n\n    if (defined(Object.create)) {\n        DynamicEllipsoidGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicEllipsoidGeometryUpdater.prototype.constructor = DynamicEllipsoidGeometryUpdater;\n    }\n\n    DynamicEllipsoidGeometryUpdater.prototype.update = function(time) {\n        \n\n        var entity = this._entity;\n        var ellipsoid = entity.ellipsoid;\n        if (!entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(ellipsoid.show, time, true)) {\n            if (defined(this._primitive)) {\n                this._primitive.show = false;\n            }\n\n            if (defined(this._outlinePrimitive)) {\n                this._outlinePrimitive.show = false;\n            }\n            return;\n        }\n\n        var radii = Property.getValueOrUndefined(ellipsoid.radii, time, radiiScratch);\n        var modelMatrix = defined(radii) ? entity.computeModelMatrixForHeightReference(time, ellipsoid.heightReference, radii.z * 0.5, this._scene.mapProjection.ellipsoid, this._modelMatrix) : undefined;\n        if (!defined(modelMatrix) || !defined(radii)) {\n            if (defined(this._primitive)) {\n                this._primitive.show = false;\n            }\n\n            if (defined(this._outlinePrimitive)) {\n                this._outlinePrimitive.show = false;\n            }\n            return;\n        }\n\n        //Compute attributes and material.\n        var showFill = Property.getValueOrDefault(ellipsoid.fill, time, true);\n        var showOutline = Property.getValueOrDefault(ellipsoid.outline, time, false);\n        var outlineColor = Property.getValueOrClonedDefault(ellipsoid.outlineColor, time, Color.BLACK, scratchColor);\n        var material = MaterialProperty.getValue(time, defaultValue(ellipsoid.material, defaultMaterial), this._material);\n\n        // Check properties that could trigger a primitive rebuild.\n        var stackPartitions = Property.getValueOrUndefined(ellipsoid.stackPartitions, time);\n        var slicePartitions = Property.getValueOrUndefined(ellipsoid.slicePartitions, time);\n        var subdivisions = Property.getValueOrUndefined(ellipsoid.subdivisions, time);\n        var outlineWidth = Property.getValueOrDefault(ellipsoid.outlineWidth, time, 1.0);\n        var heightReference = Property.getValueOrDefault(ellipsoid.heightReference, time, HeightReference.NONE);\n        var offsetAttribute = heightReference !== HeightReference.NONE ? GeometryOffsetAttribute.ALL : undefined;\n\n        //In 3D we use a fast path by modifying Primitive.modelMatrix instead of regenerating the primitive every frame.\n        //Also check for height reference because this method doesn't work when the height is relative to terrain.\n        var sceneMode = this._scene.mode;\n        var in3D = sceneMode === SceneMode.SCENE3D && heightReference === HeightReference.NONE;\n\n        var options = this._options;\n\n        var shadows = this._geometryUpdater.shadowsProperty.getValue(time);\n\n        var distanceDisplayConditionProperty = this._geometryUpdater.distanceDisplayConditionProperty;\n        var distanceDisplayCondition = distanceDisplayConditionProperty.getValue(time);\n\n        var offset = Property.getValueOrDefault(this._geometryUpdater.terrainOffsetProperty, time, defaultOffset, offsetScratch);\n\n        //We only rebuild the primitive if something other than the radii has changed\n        //For the radii, we use unit sphere and then deform it with a scale matrix.\n        var rebuildPrimitives = !in3D || this._lastSceneMode !== sceneMode || !defined(this._primitive) || //\n                                options.stackPartitions !== stackPartitions || options.slicePartitions !== slicePartitions || //\n                                options.subdivisions !== subdivisions || this._lastOutlineWidth !== outlineWidth || options.offsetAttribute !== offsetAttribute;\n\n        if (rebuildPrimitives) {\n            var primitives = this._primitives;\n            primitives.removeAndDestroy(this._primitive);\n            primitives.removeAndDestroy(this._outlinePrimitive);\n            this._primitive = undefined;\n            this._outlinePrimitive = undefined;\n            this._lastSceneMode = sceneMode;\n            this._lastOutlineWidth = outlineWidth;\n\n            options.stackPartitions = stackPartitions;\n            options.slicePartitions = slicePartitions;\n            options.subdivisions = subdivisions;\n            options.offsetAttribute = offsetAttribute;\n            options.radii = in3D ? unitSphere : radii;\n\n            var appearance = new MaterialAppearance({\n                material : material,\n                translucent : material.isTranslucent(),\n                closed : true\n            });\n            options.vertexFormat = appearance.vertexFormat;\n\n            var fillInstance = this._geometryUpdater.createFillGeometryInstance(time, in3D, this._modelMatrix);\n\n            this._primitive = primitives.add(new Primitive({\n                geometryInstances : fillInstance,\n                appearance : appearance,\n                asynchronous : false,\n                shadows : shadows\n            }));\n\n            var outlineInstance = this._geometryUpdater.createOutlineGeometryInstance(time, in3D, this._modelMatrix);\n            this._outlinePrimitive = primitives.add(new Primitive({\n                geometryInstances : outlineInstance,\n                appearance : new PerInstanceColorAppearance({\n                    flat : true,\n                    translucent : outlineInstance.attributes.color.value[3] !== 255,\n                    renderState : {\n                        lineWidth : this._geometryUpdater._scene.clampLineWidth(outlineWidth)\n                    }\n                }),\n                asynchronous : false,\n                shadows : shadows\n            }));\n\n            this._lastShow = showFill;\n            this._lastOutlineShow = showOutline;\n            this._lastOutlineColor = Color.clone(outlineColor, this._lastOutlineColor);\n            this._lastDistanceDisplayCondition = distanceDisplayCondition;\n            this._lastOffset = Cartesian3.clone(offset, this._lastOffset);\n        } else if (this._primitive.ready) {\n            //Update attributes only.\n            var primitive = this._primitive;\n            var outlinePrimitive = this._outlinePrimitive;\n\n            primitive.show = true;\n            outlinePrimitive.show = true;\n            primitive.appearance.material = material;\n\n            var attributes = this._attributes;\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(entity);\n                this._attributes = attributes;\n            }\n            if (showFill !== this._lastShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(showFill, attributes.show);\n                this._lastShow = showFill;\n            }\n\n            var outlineAttributes = this._outlineAttributes;\n\n            if (!defined(outlineAttributes)) {\n                outlineAttributes = outlinePrimitive.getGeometryInstanceAttributes(entity);\n                this._outlineAttributes = outlineAttributes;\n            }\n\n            if (showOutline !== this._lastOutlineShow) {\n                outlineAttributes.show = ShowGeometryInstanceAttribute.toValue(showOutline, outlineAttributes.show);\n                this._lastOutlineShow = showOutline;\n            }\n\n            if (!Color.equals(outlineColor, this._lastOutlineColor)) {\n                outlineAttributes.color = ColorGeometryInstanceAttribute.toValue(outlineColor, outlineAttributes.color);\n                Color.clone(outlineColor, this._lastOutlineColor);\n            }\n\n            if (!DistanceDisplayCondition.equals(distanceDisplayCondition, this._lastDistanceDisplayCondition)) {\n                attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                outlineAttributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, outlineAttributes.distanceDisplayCondition);\n                DistanceDisplayCondition.clone(distanceDisplayCondition, this._lastDistanceDisplayCondition);\n            }\n\n            if (!Cartesian3.equals(offset, this._lastOffset)) {\n                attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                outlineAttributes.offset  = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                Cartesian3.clone(offset, this._lastOffset);\n            }\n        }\n\n        if (in3D) {\n            //Since we are scaling a unit sphere, we can't let any of the values go to zero.\n            //Instead we clamp them to a small value.  To the naked eye, this produces the same results\n            //that you get passing EllipsoidGeometry a radii with a zero component.\n            radii.x = Math.max(radii.x, 0.001);\n            radii.y = Math.max(radii.y, 0.001);\n            radii.z = Math.max(radii.z, 0.001);\n\n            modelMatrix = Matrix4.multiplyByScale(modelMatrix, radii, modelMatrix);\n            this._primitive.modelMatrix = modelMatrix;\n            this._outlinePrimitive.modelMatrix = modelMatrix;\n        }\n    };\n\n    return EllipsoidGeometryUpdater;\n});\n","define([\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/GeometryInstance',\n        '../Core/Iso8601',\n        '../Core/Math',\n        '../Core/Matrix3',\n        '../Core/Matrix4',\n        '../Core/PlaneGeometry',\n        '../Core/PlaneOutlineGeometry',\n        '../Core/Quaternion',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './Property'\n    ], function(\n        Cartesian2,\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        GeometryInstance,\n        Iso8601,\n        CesiumMath,\n        Matrix3,\n        Matrix4,\n        PlaneGeometry,\n        PlaneOutlineGeometry,\n        Quaternion,\n        ShowGeometryInstanceAttribute,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        Property) {\n    'use strict';\n\n    var positionScratch = new Cartesian3();\n    var scratchColor = new Color();\n\n    function PlaneGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.plane = undefined;\n        this.dimensions = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for planes.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PlaneGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PlaneGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new PlaneGeometryOptions(entity),\n            geometryPropertyName : 'plane',\n            observedPropertyNames : ['availability', 'position', 'orientation', 'plane']\n        });\n\n        this._onEntityPropertyChanged(entity, 'plane', entity.plane, undefined);\n    }\n\n    if (defined(Object.create)) {\n        PlaneGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        PlaneGeometryUpdater.prototype.constructor = PlaneGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PlaneGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes;\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute,\n                color : color\n            };\n        } else {\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute\n            };\n        }\n\n        var planeGraphics = entity.plane;\n        var options = this._options;\n        var modelMatrix = entity.computeModelMatrix(time);\n        var plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n        var dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n\n        options.plane = plane;\n        options.dimensions = dimensions;\n\n        modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, this._scene.mapProjection.ellipsoid, modelMatrix);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PlaneGeometry(this._options),\n            modelMatrix : modelMatrix,\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PlaneGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var planeGraphics = entity.plane;\n        var options = this._options;\n        var modelMatrix = entity.computeModelMatrix(time);\n        var plane = Property.getValueOrDefault(planeGraphics.plane, time, options.plane);\n        var dimensions = Property.getValueOrUndefined(planeGraphics.dimensions, time, options.dimensions);\n\n        options.plane = plane;\n        options.dimensions = dimensions;\n\n        modelMatrix = createPrimitiveMatrix(plane, dimensions, modelMatrix, this._scene.mapProjection.ellipsoid, modelMatrix);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PlaneOutlineGeometry(),\n            modelMatrix : modelMatrix,\n            attributes : {\n                show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n                color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n                distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n            }\n        });\n    };\n\n    PlaneGeometryUpdater.prototype._isHidden = function(entity, plane) {\n        return !defined(plane.plane) || !defined(plane.dimensions) || !defined(entity.position) || GeometryUpdater.prototype._isHidden.call(this, entity, plane);\n    };\n\n    PlaneGeometryUpdater.prototype._getIsClosed = function(options) {\n        return false;\n    };\n\n    PlaneGeometryUpdater.prototype._isDynamic = function(entity, plane) {\n        return !entity.position.isConstant || //\n               !Property.isConstant(entity.orientation) || //\n               !plane.plane.isConstant || //\n               !plane.dimensions.isConstant || //\n               !Property.isConstant(plane.outlineWidth);\n    };\n\n    PlaneGeometryUpdater.prototype._setStaticOptions = function(entity, plane) {\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.plane = plane.plane.getValue(Iso8601.MINIMUM_VALUE, options.plane);\n        options.dimensions = plane.dimensions.getValue(Iso8601.MINIMUM_VALUE, options.dimensions);\n    };\n\n    PlaneGeometryUpdater.DynamicGeometryUpdater = DynamicPlaneGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicPlaneGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicPlaneGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicPlaneGeometryUpdater.prototype.constructor = DynamicPlaneGeometryUpdater;\n    }\n\n    DynamicPlaneGeometryUpdater.prototype._isHidden = function(entity, plane, time) {\n        var options = this._options;\n        var position = Property.getValueOrUndefined(entity.position, time, positionScratch);\n        return !defined(position) || !defined(options.plane) || !defined(options.dimensions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, plane, time);\n    };\n\n    DynamicPlaneGeometryUpdater.prototype._setOptions = function(entity, plane, time) {\n        var options = this._options;\n        options.plane = Property.getValueOrDefault(plane.plane, time, options.plane);\n        options.dimensions = Property.getValueOrUndefined(plane.dimensions, time, options.dimensions);\n    };\n\n    var scratchAxis = new Cartesian3();\n    var scratchAxis2 = new Cartesian3();\n    var scratchTranslation = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchScale = new Cartesian3();\n    var scratchQuaternion = new Quaternion();\n    var scratchMatrix3 = new Matrix3();\n    function createPrimitiveMatrix(plane, dimensions, transform, ellipsoid, result) {\n        var normal = plane.normal;\n        var distance = plane.distance;\n\n        var translation = Cartesian3.multiplyByScalar(normal, -distance, scratchTranslation);\n        translation = Matrix4.multiplyByPoint(transform, translation, translation);\n\n        var transformedNormal = Matrix4.multiplyByPointAsVector(transform, normal, scratchNormal);\n        Cartesian3.normalize(transformedNormal, transformedNormal);\n\n        var up = ellipsoid.geodeticSurfaceNormal(translation, scratchAxis2);\n        if (CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(up, transformedNormal)), 1.0, CesiumMath.EPSILON8)) {\n            up = Cartesian3.clone(Cartesian3.UNIT_Z, up);\n        }\n\n        var left = Cartesian3.cross(up, transformedNormal, scratchAxis);\n        up = Cartesian3.cross(transformedNormal, left, up);\n        Cartesian3.normalize(left, left);\n        Cartesian3.normalize(up, up);\n\n        var rotationMatrix = scratchMatrix3;\n        Matrix3.setColumn(rotationMatrix, 0, left, rotationMatrix);\n        Matrix3.setColumn(rotationMatrix, 1, up, rotationMatrix);\n        Matrix3.setColumn(rotationMatrix, 2, transformedNormal, rotationMatrix);\n        var rotation = Quaternion.fromRotationMatrix(rotationMatrix, scratchQuaternion);\n\n        var scale = Cartesian2.clone(dimensions, scratchScale);\n        scale.z = 1.0;\n\n        return Matrix4.fromTranslationQuaternionRotationScale(translation, rotation, scale, result);\n    }\n\n    /**\n     * @private\n     */\n    PlaneGeometryUpdater.createPrimitiveMatrix = createPrimitiveMatrix;\n\n    return PlaneGeometryUpdater;\n});\n","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './PrimitiveType',\n        './VertexFormat'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        PrimitiveType,\n        VertexFormat) {\n    'use strict';\n\n    /**\n     * Describes geometry representing a plane centered at the origin, with a unit width and length.\n     *\n     * @alias PlaneGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @example\n     * var planeGeometry = new Cesium.PlaneGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\n     * });\n     */\n    function PlaneGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        this._vertexFormat = vertexFormat;\n        this._workerName = 'createPlaneGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    PlaneGeometry.packedLength = VertexFormat.packedLength;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PlaneGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PlaneGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n\n        return array;\n    };\n\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        vertexFormat: scratchVertexFormat\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PlaneGeometry} [result] The object into which to store the result.\n     * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\n     */\n    PlaneGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n\n        if (!defined(result)) {\n            return new PlaneGeometry(scratchOptions);\n        }\n\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n\n        return result;\n    };\n\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\n\n    /**\n     * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PlaneGeometry} planeGeometry A description of the plane.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PlaneGeometry.createGeometry = function(planeGeometry) {\n        var vertexFormat = planeGeometry._vertexFormat;\n\n        var attributes = new GeometryAttributes();\n        var indices;\n        var positions;\n\n        if (vertexFormat.position) {\n            // 4 corner points.  Duplicated 3 times each for each incident edge/face.\n            positions = new Float64Array(4 * 3);\n\n            // +z face\n            positions[0]  = min.x;\n            positions[1]  = min.y;\n            positions[2]  = 0.0;\n            positions[3]  = max.x;\n            positions[4]  = min.y;\n            positions[5]  = 0.0;\n            positions[6]  = max.x;\n            positions[7]  = max.y;\n            positions[8]  = 0.0;\n            positions[9]  = min.x;\n            positions[10] = max.y;\n            positions[11] = 0.0;\n\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n\n            if (vertexFormat.normal) {\n                var normals = new Float32Array(4 * 3);\n\n                // +z face\n                normals[0]  = 0.0;\n                normals[1]  = 0.0;\n                normals[2]  = 1.0;\n                normals[3]  = 0.0;\n                normals[4]  = 0.0;\n                normals[5]  = 1.0;\n                normals[6]  = 0.0;\n                normals[7]  = 0.0;\n                normals[8]  = 1.0;\n                normals[9]  = 0.0;\n                normals[10] = 0.0;\n                normals[11] = 1.0;\n\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.st) {\n                var texCoords = new Float32Array(4 * 2);\n\n                // +z face\n                texCoords[0]  = 0.0;\n                texCoords[1]  = 0.0;\n                texCoords[2]  = 1.0;\n                texCoords[3]  = 0.0;\n                texCoords[4]  = 1.0;\n                texCoords[5]  = 1.0;\n                texCoords[6]  = 0.0;\n                texCoords[7]  = 1.0;\n\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : texCoords\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                var tangents = new Float32Array(4 * 3);\n\n                // +z face\n                tangents[0]  = 1.0;\n                tangents[1]  = 0.0;\n                tangents[2]  = 0.0;\n                tangents[3]  = 1.0;\n                tangents[4]  = 0.0;\n                tangents[5]  = 0.0;\n                tangents[6]  = 1.0;\n                tangents[7]  = 0.0;\n                tangents[8]  = 0.0;\n                tangents[9]  = 1.0;\n                tangents[10] = 0.0;\n                tangents[11] = 0.0;\n\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                var bitangents = new Float32Array(4 * 3);\n\n                // +z face\n                bitangents[0] = 0.0;\n                bitangents[1] = 1.0;\n                bitangents[2] = 0.0;\n                bitangents[3] = 0.0;\n                bitangents[4] = 1.0;\n                bitangents[5] = 0.0;\n                bitangents[6] = 0.0;\n                bitangents[7] = 1.0;\n                bitangents[8] = 0.0;\n                bitangents[9] = 0.0;\n                bitangents[10] = 1.0;\n                bitangents[11] = 0.0;\n\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n\n            // 2 triangles\n            indices = new Uint16Array(2 * 3);\n\n            // +z face\n            indices[0] = 0;\n            indices[1] = 1;\n            indices[2] = 2;\n            indices[3] = 0;\n            indices[4] = 2;\n            indices[5] = 3;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n        });\n    };\n\n    return PlaneGeometry;\n});\n","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './defined',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './PrimitiveType'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        defined,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        PrimitiveType) {\n    'use strict';\n\n    /**\n     * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\n     *\n     * @alias PlaneOutlineGeometry\n     * @constructor\n     *\n     */\n    function PlaneOutlineGeometry() {\n        this._workerName = 'createPlaneOutlineGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    PlaneOutlineGeometry.packedLength = 0;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PlaneOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PlaneOutlineGeometry.pack = function(value, array) {\n        \n\n        return array;\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\n     * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\n     */\n    PlaneOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        if (!defined(result)) {\n            return new PlaneOutlineGeometry();\n        }\n\n        return result;\n    };\n\n    var min = new Cartesian3(-0.5, -0.5, 0.0);\n    var max = new Cartesian3( 0.5,  0.5, 0.0);\n\n    /**\n     * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\n     *\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PlaneOutlineGeometry.createGeometry = function() {\n        var attributes = new GeometryAttributes();\n        var indices = new Uint16Array(4 * 2);\n        var positions = new Float64Array(4 * 3);\n\n        positions[0] = min.x;\n        positions[1] = min.y;\n        positions[2] = min.z;\n        positions[3] = max.x;\n        positions[4] = min.y;\n        positions[5] = min.z;\n        positions[6] = max.x;\n        positions[7] = max.y;\n        positions[8] = min.z;\n        positions[9] = min.x;\n        positions[10] = max.y;\n        positions[11] = min.z;\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positions\n        });\n\n        indices[0] = 0;\n        indices[1] = 1;\n        indices[2] = 1;\n        indices[3] = 2;\n        indices[4] = 2;\n        indices[5] = 3;\n        indices[6] = 3;\n        indices[7] = 0;\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0))\n        });\n    };\n\n    return PlaneOutlineGeometry;\n});\n","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/ArcType',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/CoplanarPolygonGeometry',\n        '../Core/CoplanarPolygonOutlineGeometry',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/EllipsoidTangentPlane',\n        '../Core/GeometryInstance',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/oneTimeWarning',\n        '../Core/PolygonGeometry',\n        '../Core/PolygonOutlineGeometry',\n        '../Core/Rectangle',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './GroundGeometryUpdater',\n        './Property'\n    ], function(\n        ApproximateTerrainHeights,\n        ArcType,\n        Cartesian2,\n        Cartesian3,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        CoplanarPolygonGeometry,\n        CoplanarPolygonOutlineGeometry,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        EllipsoidTangentPlane,\n        GeometryInstance,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        oneTimeWarning,\n        PolygonGeometry,\n        PolygonOutlineGeometry,\n        Rectangle,\n        ShowGeometryInstanceAttribute,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        GroundGeometryUpdater,\n        Property) {\n    'use strict';\n\n    var heightAndPerPositionHeightWarning = 'Entity polygons cannot have both height and perPositionHeight.  height will be ignored';\n    var heightReferenceAndPerPositionHeightWarning = 'heightReference is not supported for entity polygons with perPositionHeight. heightReference will be ignored';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n    var scratch2DPositions = [];\n    var cart2Scratch = new Cartesian2();\n\n    function PolygonGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.polygonHierarchy = undefined;\n        this.perPositionHeight = undefined;\n        this.closeTop = undefined;\n        this.closeBottom = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.stRotation = undefined;\n        this.offsetAttribute = undefined;\n        this.arcType = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for polygons.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PolygonGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PolygonGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new PolygonGeometryOptions(entity),\n            geometryPropertyName : 'polygon',\n            observedPropertyNames : ['availability', 'polygon']\n        });\n\n        this._onEntityPropertyChanged(entity, 'polygon', entity.polygon, undefined);\n    }\n\n    if (defined(Object.create)) {\n        PolygonGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        PolygonGeometryUpdater.prototype.constructor = PolygonGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PolygonGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var options = this._options;\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n        if (defined(options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        var geometry;\n        if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n            geometry = new CoplanarPolygonGeometry(options);\n        } else {\n            geometry = new PolygonGeometry(options);\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : geometry,\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PolygonGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var options = this._options;\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n\n        if (defined(options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        var geometry;\n        if (options.perPositionHeight && !defined(options.extrudedHeight)) {\n            geometry = new CoplanarPolygonOutlineGeometry(options);\n        } else {\n            geometry = new PolygonOutlineGeometry(options);\n        }\n        return new GeometryInstance({\n            id : entity,\n            geometry : geometry,\n            attributes : attributes\n        });\n    };\n\n    PolygonGeometryUpdater.prototype._computeCenter = function(time, result) {\n        var hierarchy = Property.getValueOrUndefined(this._entity.polygon.hierarchy, time);\n        if (!defined(hierarchy)) {\n            return;\n        }\n        var positions = hierarchy.positions;\n        if (positions.length === 0) {\n            return;\n        }\n        var ellipsoid = this._scene.mapProjection.ellipsoid;\n\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, scratch2DPositions);\n\n        var length = positions2D.length;\n        var area = 0;\n        var j = length - 1;\n        var centroid2D = new Cartesian2();\n        for (var i = 0; i < length; j = i++) {\n            var p1 = positions2D[i];\n            var p2 = positions2D[j];\n            var f = p1.x * p2.y - p2.x * p1.y;\n\n            var sum = Cartesian2.add(p1, p2, cart2Scratch);\n            sum = Cartesian2.multiplyByScalar(sum, f, sum);\n            centroid2D = Cartesian2.add(centroid2D, sum, centroid2D);\n\n            area += f;\n        }\n\n        var a = 1.0 / (area * 3.0);\n        centroid2D = Cartesian2.multiplyByScalar(centroid2D, a, centroid2D);\n        return tangentPlane.projectPointOntoEllipsoid(centroid2D, result);\n    };\n\n    PolygonGeometryUpdater.prototype._isHidden = function(entity, polygon) {\n        return !defined(polygon.hierarchy) || GeometryUpdater.prototype._isHidden.call(this, entity, polygon);\n    };\n\n    PolygonGeometryUpdater.prototype._isOnTerrain = function(entity, polygon) {\n        var onTerrain = GroundGeometryUpdater.prototype._isOnTerrain.call(this, entity, polygon);\n        var perPositionHeightProperty = polygon.perPositionHeight;\n        var perPositionHeightEnabled = defined(perPositionHeightProperty) && (perPositionHeightProperty.isConstant ? perPositionHeightProperty.getValue(Iso8601.MINIMUM_VALUE) : true);\n        return onTerrain && !perPositionHeightEnabled;\n    };\n\n    PolygonGeometryUpdater.prototype._isDynamic = function(entity, polygon) {\n        return !polygon.hierarchy.isConstant || //\n               !Property.isConstant(polygon.height) || //\n               !Property.isConstant(polygon.extrudedHeight) || //\n               !Property.isConstant(polygon.granularity) || //\n               !Property.isConstant(polygon.stRotation) || //\n               !Property.isConstant(polygon.outlineWidth) || //\n               !Property.isConstant(polygon.perPositionHeight) || //\n               !Property.isConstant(polygon.closeTop) || //\n               !Property.isConstant(polygon.closeBottom) || //\n               !Property.isConstant(polygon.zIndex) || //\n               !Property.isConstant(polygon.arcType) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty));\n    };\n\n    PolygonGeometryUpdater.prototype._setStaticOptions = function(entity, polygon) {\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n\n        var hierarchyValue = polygon.hierarchy.getValue(Iso8601.MINIMUM_VALUE);\n        var heightValue = Property.getValueOrUndefined(polygon.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(polygon.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(polygon.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(polygon.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var perPositionHeightValue = Property.getValueOrDefault(polygon.perPositionHeight, Iso8601.MINIMUM_VALUE, false);\n\n        heightValue = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        var offsetAttribute;\n        if (perPositionHeightValue) {\n            if (defined(heightValue)) {\n                heightValue = undefined;\n                oneTimeWarning(heightAndPerPositionHeightWarning);\n            }\n            if (heightReferenceValue !== HeightReference.NONE && perPositionHeightValue) {\n                heightValue = undefined;\n                oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n            }\n        } else {\n            if (defined(extrudedHeightValue) && !defined(heightValue)) {\n                heightValue = 0;\n            }\n            offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        }\n\n        options.polygonHierarchy = hierarchyValue;\n        options.granularity = Property.getValueOrUndefined(polygon.granularity, Iso8601.MINIMUM_VALUE);\n        options.stRotation = Property.getValueOrUndefined(polygon.stRotation, Iso8601.MINIMUM_VALUE);\n        options.perPositionHeight = perPositionHeightValue;\n        options.closeTop = Property.getValueOrDefault(polygon.closeTop, Iso8601.MINIMUM_VALUE, true);\n        options.closeBottom = Property.getValueOrDefault(polygon.closeBottom, Iso8601.MINIMUM_VALUE, true);\n        options.offsetAttribute = offsetAttribute;\n        options.height = heightValue;\n        options.arcType = Property.getValueOrDefault(polygon.arcType, Iso8601.MINIMUM_VALUE, ArcType.GEODESIC);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(PolygonGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    PolygonGeometryUpdater.prototype._getIsClosed = function(options) {\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var isExtruded = defined(extrudedHeight) && extrudedHeight !== height;\n        return !options.perPositionHeight && (!isExtruded && height === 0 || (isExtruded && options.closeTop && options.closeBottom));\n    };\n\n    PolygonGeometryUpdater.DynamicGeometryUpdater = DyanmicPolygonGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DyanmicPolygonGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DyanmicPolygonGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DyanmicPolygonGeometryUpdater.prototype.constructor = DyanmicPolygonGeometryUpdater;\n    }\n\n    DyanmicPolygonGeometryUpdater.prototype._isHidden = function(entity, polygon, time) {\n        return !defined(this._options.polygonHierarchy) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polygon, time);\n    };\n\n    DyanmicPolygonGeometryUpdater.prototype._setOptions = function(entity, polygon, time) {\n        var options = this._options;\n\n        options.polygonHierarchy = Property.getValueOrUndefined(polygon.hierarchy, time);\n\n        var heightValue = Property.getValueOrUndefined(polygon.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(polygon.heightReference, time, HeightReference.NONE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(polygon.extrudedHeightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(polygon.extrudedHeight, time);\n        var perPositionHeightValue = Property.getValueOrUndefined(polygon.perPositionHeight, time);\n\n        heightValue = GroundGeometryUpdater.getGeometryHeight(heightValue, extrudedHeightReferenceValue);\n\n        var offsetAttribute;\n        if (perPositionHeightValue) {\n            if (defined(heightValue)) {\n                heightValue = undefined;\n                oneTimeWarning(heightAndPerPositionHeightWarning);\n            }\n            if (heightReferenceValue !== HeightReference.NONE && perPositionHeightValue) {\n                heightValue = undefined;\n                oneTimeWarning(heightReferenceAndPerPositionHeightWarning);\n            }\n        } else {\n            if (defined(extrudedHeightValue) && !defined(heightValue)) {\n                heightValue = 0;\n            }\n\n            offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        }\n\n        options.granularity = Property.getValueOrUndefined(polygon.granularity, time);\n        options.stRotation = Property.getValueOrUndefined(polygon.stRotation, time);\n        options.perPositionHeight = Property.getValueOrUndefined(polygon.perPositionHeight, time);\n        options.closeTop = Property.getValueOrDefault(polygon.closeTop, time, true);\n        options.closeBottom = Property.getValueOrDefault(polygon.closeBottom, time, true);\n        options.offsetAttribute = offsetAttribute;\n        options.height = heightValue;\n        options.arcType = Property.getValueOrDefault(polygon.arcType, time, ArcType.GEODESIC);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(PolygonGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    return PolygonGeometryUpdater;\n});\n","/*global define*/\ndefine([\n        './arrayRemoveDuplicates',\n        './BoundingRectangle',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './CoplanarPolygonGeometryLibrary',\n        './defaultValue',\n        './defined',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryInstance',\n        './GeometryPipeline',\n        './IndexDatatype',\n        './Math',\n        './Matrix3',\n        './PolygonGeometryLibrary',\n        './PolygonPipeline',\n        './PrimitiveType',\n        './Quaternion',\n        './VertexFormat'\n    ], function(\n        arrayRemoveDuplicates,\n        BoundingRectangle,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        CoplanarPolygonGeometryLibrary,\n        defaultValue,\n        defined,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryInstance,\n        GeometryPipeline,\n        IndexDatatype,\n        CesiumMath,\n        Matrix3,\n        PolygonGeometryLibrary,\n        PolygonPipeline,\n        PrimitiveType,\n        Quaternion,\n        VertexFormat) {\n    'use strict';\n\n    var scratchPosition = new Cartesian3();\n    var scratchBR = new BoundingRectangle();\n    var stScratch = new Cartesian2();\n    var textureCoordinatesOrigin = new Cartesian2();\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var centerScratch = new Cartesian3();\n    var axis1Scratch = new Cartesian3();\n    var axis2Scratch = new Cartesian3();\n    var quaternionScratch = new Quaternion();\n    var textureMatrixScratch = new Matrix3();\n    var tangentRotationScratch = new Matrix3();\n    var surfaceNormalScratch = new Cartesian3();\n\n    function createGeometryFromPolygon(polygon, vertexFormat, boundingRectangle, stRotation, projectPointTo2D, normal, tangent, bitangent) {\n        var positions = polygon.positions;\n        var indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n        /* If polygon is completely unrenderable, just use the first three vertices */\n        if (indices.length < 3) {\n            indices = [0, 1, 2];\n        }\n\n        var newIndices = IndexDatatype.createTypedArray(positions.length, indices.length);\n        newIndices.set(indices);\n\n        var textureMatrix = textureMatrixScratch;\n        if (stRotation !== 0.0) {\n            var rotation = Quaternion.fromAxisAngle(normal, stRotation, quaternionScratch);\n            textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n            if (vertexFormat.tangent || vertexFormat.bitangent) {\n                rotation = Quaternion.fromAxisAngle(normal, -stRotation, quaternionScratch);\n                var tangentRotation = Matrix3.fromQuaternion(rotation, tangentRotationScratch);\n\n                tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotation, tangent, tangent), tangent);\n                if (vertexFormat.bitangent) {\n                    bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                }\n            }\n        } else {\n            textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n        }\n\n        var stOrigin = textureCoordinatesOrigin;\n        if (vertexFormat.st) {\n            stOrigin.x = boundingRectangle.x;\n            stOrigin.y = boundingRectangle.y;\n        }\n\n        var length = positions.length;\n        var size = length * 3;\n        var flatPositions = new Float64Array(size);\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n        var textureCoordinates = vertexFormat.st ? new Float32Array(length * 2) : undefined;\n\n        var positionIndex = 0;\n        var normalIndex = 0;\n        var bitangentIndex = 0;\n        var tangentIndex = 0;\n        var stIndex = 0;\n\n        for (var i = 0; i < length; i++) {\n            var position = positions[i];\n            flatPositions[positionIndex++] = position.x;\n            flatPositions[positionIndex++] = position.y;\n            flatPositions[positionIndex++] = position.z;\n\n            if (vertexFormat.st) {\n                var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\n                var st = projectPointTo2D(p, stScratch);\n                Cartesian2.subtract(st, stOrigin, st);\n\n                var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n                var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n                textureCoordinates[stIndex++] = stx;\n                textureCoordinates[stIndex++] = sty;\n            }\n\n            if (vertexFormat.normal) {\n                normals[normalIndex++] = normal.x;\n                normals[normalIndex++] = normal.y;\n                normals[normalIndex++] = normal.z;\n            }\n\n            if (vertexFormat.tangent) {\n                tangents[tangentIndex++] = tangent.x;\n                tangents[tangentIndex++] = tangent.y;\n                tangents[tangentIndex++] = tangent.z;\n            }\n\n            if (vertexFormat.bitangent) {\n                bitangents[bitangentIndex++] = bitangent.x;\n                bitangents[bitangentIndex++] = bitangent.y;\n                bitangents[bitangentIndex++] = bitangent.z;\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : flatPositions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : newIndices,\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n    }\n\n    /**\n     * A description of a polygon composed of arbitrary coplanar positions.\n     *\n     * @alias CoplanarPolygonGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     *\n     * @example\n     * var polygon = new Cesium.CoplanarPolygonGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *      -90.0, 30.0, 0.0,\n     *      -90.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 0.0\n     *   ])\n     * });\n     * var geometry = Cesium.CoplanarPolygonGeometry.createGeometry(polygon);\n     *\n     * @see CoplanarPolygonGeometry.createGeometry\n     */\n    function CoplanarPolygonGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var polygonHierarchy = options.polygonHierarchy;\n        \n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._polygonHierarchy = polygonHierarchy;\n        this._stRotation = defaultValue(options.stRotation, 0.0);\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._workerName = 'createCoplanarPolygonGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + VertexFormat.packedLength + Ellipsoid.packedLength + 2;\n    }\n\n    /**\n     * A description of a coplanar polygon from an array of positions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @returns {CoplanarPolygonGeometry}\n     *\n     * @example\n     * // create a polygon from points\n     * var polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0,\n     *     -75.0, 30.0,\n     *     -70.0, 30.0,\n     *     -68.0, 40.0\n     *   ])\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n     *\n     * @see PolygonGeometry#createGeometry\n     */\n    CoplanarPolygonGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            },\n            vertexFormat : options.vertexFormat,\n            stRotation : options.stRotation,\n            ellipsoid : options.ellipsoid\n        };\n        return new CoplanarPolygonGeometry(newOptions);\n    };\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CoplanarPolygonGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CoplanarPolygonGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        polygonHierarchy : {}\n    };\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n     * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n     */\n    CoplanarPolygonGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var stRotation = array[startingIndex++];\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new CoplanarPolygonGeometry(scratchOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._stRotation = stRotation;\n        result.packedLength = packedLength;\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CoplanarPolygonGeometry.createGeometry = function(polygonGeometry) {\n        var vertexFormat = polygonGeometry._vertexFormat;\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n        var stRotation = polygonGeometry._stRotation;\n\n        var outerPositions = polygonHierarchy.positions;\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\n        if (outerPositions.length < 3) {\n            return;\n        }\n\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n        var axis1 = axis1Scratch;\n        var axis2 = axis2Scratch;\n\n        var validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(outerPositions, centerScratch, axis1, axis2);\n        if (!validGeometry) {\n            return undefined;\n        }\n\n        normal = Cartesian3.cross(axis1, axis2, normal);\n        normal = Cartesian3.normalize(normal, normal);\n\n        if (!Cartesian3.equalsEpsilon(centerScratch, Cartesian3.ZERO, CesiumMath.EPSILON6)) {\n            var surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(centerScratch, surfaceNormalScratch);\n            if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n                normal = Cartesian3.negate(normal, normal);\n                axis1 = Cartesian3.negate(axis1, axis1);\n            }\n        }\n\n        var projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(centerScratch, axis1, axis2);\n        var projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(centerScratch, axis1, axis2);\n\n        if (vertexFormat.tangent) {\n            tangent = Cartesian3.clone(axis1, tangent);\n        }\n        if (vertexFormat.bitangent) {\n            bitangent = Cartesian3.clone(axis2, bitangent);\n        }\n\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, projectPoints, false);\n        var hierarchy = results.hierarchy;\n        var polygons = results.polygons;\n\n        if (hierarchy.length === 0) {\n            return;\n        }\n        outerPositions = hierarchy[0].outerRing;\n\n        var boundingSphere = BoundingSphere.fromPoints(outerPositions);\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(normal, projectPoint, outerPositions, stRotation, scratchBR);\n\n        var geometries = [];\n        for (var i = 0; i < polygons.length; i++) {\n            var geometryInstance = new GeometryInstance({\n                geometry : createGeometryFromPolygon(polygons[i], vertexFormat, boundingRectangle, stRotation, projectPoint, normal, tangent, bitangent)\n            });\n\n            geometries.push(geometryInstance);\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\n\n        var attributes = geometry.attributes;\n        if (!vertexFormat.position) {\n            delete attributes.position;\n        }\n        return new Geometry({\n            attributes : attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere\n        });\n    };\n\n    return CoplanarPolygonGeometry;\n});\n","/*global define*/\ndefine([\n    './arrayRemoveDuplicates',\n    './BoundingSphere',\n    './Cartesian3',\n    './Check',\n    './ComponentDatatype',\n    './CoplanarPolygonGeometryLibrary',\n    './defaultValue',\n    './defined',\n    './Geometry',\n    './GeometryAttribute',\n    './GeometryAttributes',\n    './GeometryInstance',\n    './GeometryPipeline',\n    './IndexDatatype',\n    './PolygonGeometryLibrary',\n    './PolygonPipeline',\n    './PrimitiveType'\n], function(\n    arrayRemoveDuplicates,\n    BoundingSphere,\n    Cartesian3,\n    Check,\n    ComponentDatatype,\n    CoplanarPolygonGeometryLibrary,\n    defaultValue,\n    defined,\n    Geometry,\n    GeometryAttribute,\n    GeometryAttributes,\n    GeometryInstance,\n    GeometryPipeline,\n    IndexDatatype,\n    PolygonGeometryLibrary,\n    PolygonPipeline,\n    PrimitiveType) {\n    'use strict';\n\n    function createGeometryFromPositions(positions){\n        var length = positions.length;\n        var flatPositions = new Float64Array(length * 3);\n        var indices = IndexDatatype.createTypedArray(length, length * 2);\n\n        var positionIndex = 0;\n        var index = 0;\n\n        for (var i = 0; i < length; i++) {\n            var position = positions[i];\n            flatPositions[positionIndex++] = position.x;\n            flatPositions[positionIndex++] = position.y;\n            flatPositions[positionIndex++] = position.z;\n\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n        }\n\n        var attributes = new GeometryAttributes({\n            position: new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : flatPositions\n            })\n        });\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES\n        });\n    }\n\n    /**\n     * A description of the outline of a polygon composed of arbitrary coplanar positions.\n     *\n     * @alias CoplanarPolygonOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     *\n     * @see CoplanarPolygonOutlineGeometry.createGeometry\n     *\n     * @example\n     * var polygonOutline = new Cesium.CoplanarPolygonOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *      -90.0, 30.0, 0.0,\n     *      -90.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 1000.0,\n     *      -80.0, 30.0, 0.0\n     *   ])\n     * });\n     * var geometry = Cesium.CoplanarPolygonOutlineGeometry.createGeometry(polygonOutline);\n     */\n    function CoplanarPolygonOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var polygonHierarchy = options.polygonHierarchy;\n        \n\n        this._polygonHierarchy = polygonHierarchy;\n        this._workerName = 'createCoplanarPolygonOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + 1;\n    }\n\n    /**\n     * A description of a coplanar polygon outline from an array of positions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @returns {CoplanarPolygonOutlineGeometry}\n     */\n    CoplanarPolygonOutlineGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            }\n        };\n        return new CoplanarPolygonOutlineGeometry(newOptions);\n    };\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {CoplanarPolygonOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    CoplanarPolygonOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchOptions = {\n        polygonHierarchy : {}\n    };\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {CoplanarPolygonOutlineGeometry} [result] The object into which to store the result.\n     * @returns {CoplanarPolygonOutlineGeometry} The modified result parameter or a new CoplanarPolygonOutlineGeometry instance if one was not provided.\n     */\n    CoplanarPolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new CoplanarPolygonOutlineGeometry(scratchOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result.packedLength = packedLength;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {CoplanarPolygonOutlineGeometry} polygonGeometry A description of the polygon.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    CoplanarPolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n\n        var outerPositions = polygonHierarchy.positions;\n        outerPositions = arrayRemoveDuplicates(outerPositions, Cartesian3.equalsEpsilon, true);\n        if (outerPositions.length < 3) {\n            return;\n        }\n        var isValid = CoplanarPolygonGeometryLibrary.validOutline(outerPositions);\n        if (!isValid) {\n            return undefined;\n        }\n\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, false);\n\n        if (polygons.length === 0) {\n            return undefined;\n        }\n\n        var geometries = [];\n\n        for (var i = 0; i < polygons.length; i++) {\n            var geometryInstance = new GeometryInstance({\n                geometry : createGeometryFromPositions(polygons[i])\n            });\n            geometries.push(geometryInstance);\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        var boundingSphere = BoundingSphere.fromPoints(polygonHierarchy.positions);\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere\n        });\n    };\n\n    return CoplanarPolygonOutlineGeometry;\n});\n","define([\n        './ArcType',\n        './arrayFill',\n        './BoundingRectangle',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './Cartographic',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './defineProperties',\n        './DeveloperError',\n        './Ellipsoid',\n        './EllipsoidGeodesic',\n        './EllipsoidRhumbLine',\n        './EllipsoidTangentPlane',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryInstance',\n        './GeometryOffsetAttribute',\n        './GeometryPipeline',\n        './IndexDatatype',\n        './Math',\n        './Matrix2',\n        './Matrix3',\n        './PolygonGeometryLibrary',\n        './PolygonPipeline',\n        './Quaternion',\n        './Rectangle',\n        './VertexFormat',\n        './WindingOrder'\n    ], function(\n        ArcType,\n        arrayFill,\n        BoundingRectangle,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Cartographic,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        Ellipsoid,\n        EllipsoidGeodesic,\n        EllipsoidRhumbLine,\n        EllipsoidTangentPlane,\n        Geometry,\n        GeometryAttribute,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        GeometryPipeline,\n        IndexDatatype,\n        CesiumMath,\n        Matrix2,\n        Matrix3,\n        PolygonGeometryLibrary,\n        PolygonPipeline,\n        Quaternion,\n        Rectangle,\n        VertexFormat,\n        WindingOrder) {\n    'use strict';\n\n    var scratchCarto1 = new Cartographic();\n    var scratchCarto2 = new Cartographic();\n    function adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\n        var carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\n        var height = carto1.height;\n        var p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\n        p1Carto.height = height;\n        ellipsoid.cartographicToCartesian(p1Carto, p1);\n\n        var p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\n        p2Carto.height = height - 100;\n        ellipsoid.cartographicToCartesian(p2Carto, p2);\n    }\n\n    var scratchBoundingRectangle = new BoundingRectangle();\n    var scratchPosition = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var p1Scratch = new Cartesian3();\n    var p2Scratch = new Cartesian3();\n    var scratchPerPosNormal = new Cartesian3();\n    var scratchPerPosTangent = new Cartesian3();\n    var scratchPerPosBitangent = new Cartesian3();\n\n    var appendTextureCoordinatesOrigin = new Cartesian2();\n    var appendTextureCoordinatesCartesian2 = new Cartesian2();\n    var appendTextureCoordinatesCartesian3 = new Cartesian3();\n    var appendTextureCoordinatesQuaternion = new Quaternion();\n    var appendTextureCoordinatesMatrix3 = new Matrix3();\n    var tangentMatrixScratch = new Matrix3();\n\n    function computeAttributes(options) {\n        var vertexFormat = options.vertexFormat;\n        var geometry = options.geometry;\n        var shadowVolume = options.shadowVolume;\n        var flatPositions = geometry.attributes.position.values;\n        var length = flatPositions.length;\n        var wall = options.wall;\n        var top = options.top || wall;\n        var bottom = options.bottom || wall;\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n            // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\n            // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\n            var boundingRectangle = options.boundingRectangle;\n            var tangentPlane = options.tangentPlane;\n            var ellipsoid = options.ellipsoid;\n            var stRotation = options.stRotation;\n            var perPositionHeight = options.perPositionHeight;\n\n            var origin = appendTextureCoordinatesOrigin;\n            origin.x = boundingRectangle.x;\n            origin.y = boundingRectangle.y;\n\n            var textureCoordinates = vertexFormat.st ? new Float32Array(2 * (length / 3)) : undefined;\n            var normals;\n            if (vertexFormat.normal) {\n                if (perPositionHeight && top && !wall) {\n                    normals = geometry.attributes.normal.values;\n                } else {\n                    normals = new Float32Array(length);\n                }\n            }\n            var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\n            var bitangents = vertexFormat.bitangent ? new Float32Array(length) : undefined;\n            var extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\n\n            var textureCoordIndex = 0;\n            var attrIndex = 0;\n\n            var normal = scratchNormal;\n            var tangent = scratchTangent;\n            var bitangent = scratchBitangent;\n            var recomputeNormal = true;\n\n            var textureMatrix = appendTextureCoordinatesMatrix3;\n            var tangentRotationMatrix = tangentMatrixScratch;\n            if (stRotation !== 0.0) {\n                var rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, stRotation, appendTextureCoordinatesQuaternion);\n                textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n                rotation = Quaternion.fromAxisAngle(tangentPlane._plane.normal, -stRotation, appendTextureCoordinatesQuaternion);\n                tangentRotationMatrix = Matrix3.fromQuaternion(rotation, tangentRotationMatrix);\n            } else {\n                textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n                tangentRotationMatrix = Matrix3.clone(Matrix3.IDENTITY, tangentRotationMatrix);\n            }\n\n            var bottomOffset = 0;\n            var bottomOffset2 = 0;\n\n            if (top && bottom) {\n                bottomOffset = length / 2;\n                bottomOffset2 = length / 3;\n\n                length /= 2;\n            }\n\n            for ( var i = 0; i < length; i += 3) {\n                var position = Cartesian3.fromArray(flatPositions, i, appendTextureCoordinatesCartesian3);\n\n                if (vertexFormat.st) {\n                    var p = Matrix3.multiplyByVector(textureMatrix, position, scratchPosition);\n                    p = ellipsoid.scaleToGeodeticSurface(p,p);\n                    var st = tangentPlane.projectPointOntoPlane(p, appendTextureCoordinatesCartesian2);\n                    Cartesian2.subtract(st, origin, st);\n\n                    var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n                    var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n                    if (bottom) {\n                        textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\n                        textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\n                    }\n                    if (top) {\n                        textureCoordinates[textureCoordIndex] = stx;\n                        textureCoordinates[textureCoordIndex + 1] = sty;\n                    }\n\n                    textureCoordIndex += 2;\n                }\n\n                if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent || shadowVolume) {\n                    var attrIndex1 = attrIndex + 1;\n                    var attrIndex2 = attrIndex + 2;\n\n                    if (wall) {\n                        if (i + 3 < length) {\n                            var p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\n\n                            if (recomputeNormal) {\n                                var p2 = Cartesian3.fromArray(flatPositions, i + length, p2Scratch);\n                                if (perPositionHeight) {\n                                    adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\n                                }\n                                Cartesian3.subtract(p1, position, p1);\n                                Cartesian3.subtract(p2, position, p2);\n                                normal = Cartesian3.normalize(Cartesian3.cross(p2, p1, normal), normal);\n                                recomputeNormal = false;\n                            }\n\n                            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) { // if we've reached a corner\n                                recomputeNormal = true;\n                            }\n                        }\n\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\n                            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\n                            if (vertexFormat.tangent) {\n                                tangent = Cartesian3.normalize(Cartesian3.cross(bitangent, normal, tangent), tangent);\n                            }\n                        }\n                    } else {\n                        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n                        if (vertexFormat.tangent || vertexFormat.bitangent) {\n                            if (perPositionHeight) {\n                                scratchPerPosNormal = Cartesian3.fromArray(normals, attrIndex, scratchPerPosNormal);\n                                scratchPerPosTangent = Cartesian3.cross(Cartesian3.UNIT_Z, scratchPerPosNormal, scratchPerPosTangent);\n                                scratchPerPosTangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, scratchPerPosTangent, scratchPerPosTangent), scratchPerPosTangent);\n                                if (vertexFormat.bitangent) {\n                                    scratchPerPosBitangent = Cartesian3.normalize(Cartesian3.cross(scratchPerPosNormal, scratchPerPosTangent, scratchPerPosBitangent), scratchPerPosBitangent);\n                                }\n                            }\n\n                            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n                            tangent = Cartesian3.normalize(Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent), tangent);\n                            if (vertexFormat.bitangent) {\n                                bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                            }\n                        }\n                    }\n\n                    if (vertexFormat.normal) {\n                        if (options.wall) {\n                            normals[attrIndex + bottomOffset] = normal.x;\n                            normals[attrIndex1 + bottomOffset] = normal.y;\n                            normals[attrIndex2 + bottomOffset] = normal.z;\n                        } else if (bottom){\n                            normals[attrIndex + bottomOffset] = -normal.x;\n                            normals[attrIndex1 + bottomOffset] = -normal.y;\n                            normals[attrIndex2 + bottomOffset] = -normal.z;\n                        }\n\n                        if ((top && !perPositionHeight) || wall) {\n                            normals[attrIndex] = normal.x;\n                            normals[attrIndex1] = normal.y;\n                            normals[attrIndex2] = normal.z;\n                        }\n                    }\n\n                    if (shadowVolume) {\n                        if (wall) {\n                            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n                        }\n                        extrudeNormals[attrIndex + bottomOffset] = -normal.x;\n                        extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\n                        extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\n                    }\n\n                    if (vertexFormat.tangent) {\n                        if (options.wall) {\n                            tangents[attrIndex + bottomOffset] = tangent.x;\n                            tangents[attrIndex1 + bottomOffset] = tangent.y;\n                            tangents[attrIndex2 + bottomOffset] = tangent.z;\n                        } else if (bottom) {\n                            tangents[attrIndex + bottomOffset] = -tangent.x;\n                            tangents[attrIndex1 + bottomOffset] = -tangent.y;\n                            tangents[attrIndex2 + bottomOffset] = -tangent.z;\n                        }\n\n                        if(top) {\n                            if (perPositionHeight) {\n                                tangents[attrIndex] = scratchPerPosTangent.x;\n                                tangents[attrIndex1] = scratchPerPosTangent.y;\n                                tangents[attrIndex2] = scratchPerPosTangent.z;\n                            } else {\n                                tangents[attrIndex] = tangent.x;\n                                tangents[attrIndex1] = tangent.y;\n                                tangents[attrIndex2] = tangent.z;\n                            }\n                        }\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        if (bottom) {\n                            bitangents[attrIndex + bottomOffset] = bitangent.x;\n                            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\n                            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\n                        }\n                        if (top) {\n                            if (perPositionHeight) {\n                                bitangents[attrIndex] = scratchPerPosBitangent.x;\n                                bitangents[attrIndex1] = scratchPerPosBitangent.y;\n                                bitangents[attrIndex2] = scratchPerPosBitangent.z;\n                            } else {\n                                bitangents[attrIndex] = bitangent.x;\n                                bitangents[attrIndex1] = bitangent.y;\n                                bitangents[attrIndex2] = bitangent.z;\n                            }\n                        }\n                    }\n                    attrIndex += 3;\n                }\n            }\n\n            if (vertexFormat.st) {\n                geometry.attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : textureCoordinates\n                });\n            }\n\n            if (vertexFormat.normal) {\n                geometry.attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                geometry.attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                geometry.attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n\n            if (shadowVolume) {\n                geometry.attributes.extrudeDirection = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : extrudeNormals\n                });\n            }\n        }\n\n        if (options.extrude && defined(options.offsetAttribute)) {\n            var size = flatPositions.length / 3;\n            var offsetAttribute = new Uint8Array(size);\n\n            if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n                if ((top && bottom) || wall) {\n                    offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n                } else if (top) {\n                    offsetAttribute = arrayFill(offsetAttribute, 1);\n                }\n            } else {\n                var offsetValue = options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n            }\n\n            geometry.attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values : offsetAttribute\n            });\n        }\n\n        return geometry;\n    }\n\n    var startCartographicScratch = new Cartographic();\n    var endCartographicScratch = new Cartographic();\n    var idlCross = {\n        westOverIDL : 0.0,\n        eastOverIDL : 0.0\n    };\n    var ellipsoidGeodesic = new EllipsoidGeodesic();\n    function computeRectangle(positions, ellipsoid, arcType, granularity, result) {\n        result = defaultValue(result, new Rectangle());\n        if (!defined(positions) || positions.length < 3) {\n            result.west = 0.0;\n            result.north = 0.0;\n            result.south = 0.0;\n            result.east = 0.0;\n            return result;\n        }\n\n        if (arcType === ArcType.RHUMB) {\n            return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n        }\n\n        if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\n            ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\n        }\n\n        result.west = Number.POSITIVE_INFINITY;\n        result.east = Number.NEGATIVE_INFINITY;\n        result.south = Number.POSITIVE_INFINITY;\n        result.north = Number.NEGATIVE_INFINITY;\n\n        idlCross.westOverIDL = Number.POSITIVE_INFINITY;\n        idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\n\n        var inverseChordLength = 1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n        var positionsLength = positions.length;\n        var endCartographic = ellipsoid.cartesianToCartographic(positions[0], endCartographicScratch);\n        var startCartographic = startCartographicScratch;\n        var swap;\n\n        for (var i = 1; i < positionsLength; i++) {\n            swap = startCartographic;\n            startCartographic = endCartographic;\n            endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\n            ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n            interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross);\n        }\n\n        swap = startCartographic;\n        startCartographic = endCartographic;\n        endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\n        ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n        interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross);\n\n        if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\n            result.west = idlCross.westOverIDL;\n            result.east = idlCross.eastOverIDL;\n\n            if (result.east > CesiumMath.PI) {\n                result.east = result.east - CesiumMath.TWO_PI;\n            }\n            if (result.west > CesiumMath.PI) {\n                result.west = result.west - CesiumMath.TWO_PI;\n            }\n        }\n\n        return result;\n    }\n\n    var interpolatedCartographicScratch = new Cartographic();\n    function interpolateAndGrowRectangle(ellipsoidGeodesic, inverseChordLength, result, idlCross) {\n        var segmentLength = ellipsoidGeodesic.surfaceDistance;\n\n        var numPoints = Math.ceil(segmentLength * inverseChordLength);\n        var subsegmentDistance = numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\n        var interpolationDistance = 0.0;\n\n        for (var i = 0; i < numPoints; i++) {\n            var interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(interpolationDistance, interpolatedCartographicScratch);\n            interpolationDistance += subsegmentDistance;\n            var longitude = interpolatedCartographic.longitude;\n            var latitude = interpolatedCartographic.latitude;\n\n            result.west = Math.min(result.west, longitude);\n            result.east = Math.max(result.east, longitude);\n            result.south = Math.min(result.south, latitude);\n            result.north = Math.max(result.north, latitude);\n\n            var lonAdjusted = longitude >= 0 ?  longitude : longitude +  CesiumMath.TWO_PI;\n            idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\n            idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\n        }\n    }\n\n    var createGeometryFromPositionsExtrudedPositions = [];\n\n    function createGeometryFromPositionsExtruded(ellipsoid, polygon, granularity, hierarchy, perPositionHeight, closeTop, closeBottom, vertexFormat, arcType) {\n        var geos = {\n            walls : []\n        };\n        var i;\n\n        if (closeTop || closeBottom) {\n            var topGeo = PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygon, granularity, perPositionHeight, vertexFormat, arcType);\n\n            var edgePoints = topGeo.attributes.position.values;\n            var indices = topGeo.indices;\n            var numPositions;\n            var newIndices;\n\n            if (closeTop && closeBottom) {\n                var topBottomPositions = edgePoints.concat(edgePoints);\n\n                numPositions = topBottomPositions.length / 3;\n\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length * 2);\n                newIndices.set(indices);\n                var ilength = indices.length;\n\n                var length = numPositions / 2;\n\n                for (i = 0; i < ilength; i += 3) {\n                    var i0 = newIndices[i] + length;\n                    var i1 = newIndices[i + 1] + length;\n                    var i2 = newIndices[i + 2] + length;\n\n                    newIndices[i + ilength] = i2;\n                    newIndices[i + 1 + ilength] = i1;\n                    newIndices[i + 2 + ilength] = i0;\n                }\n\n                topGeo.attributes.position.values = topBottomPositions;\n                if (perPositionHeight && vertexFormat.normal) {\n                    var normals = topGeo.attributes.normal.values;\n                    topGeo.attributes.normal.values = new Float32Array(topBottomPositions.length);\n                    topGeo.attributes.normal.values.set(normals);\n                }\n                topGeo.indices = newIndices;\n            } else if (closeBottom) {\n                numPositions = edgePoints.length / 3;\n                newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\n\n                for (i = 0; i < indices.length; i += 3) {\n                    newIndices[i] = indices[i + 2];\n                    newIndices[i + 1] = indices[i + 1];\n                    newIndices[i + 2] = indices[i];\n                }\n\n                topGeo.indices = newIndices;\n            }\n\n            geos.topAndBottom = new GeometryInstance({\n                geometry : topGeo\n            });\n        }\n\n        var outerRing = hierarchy.outerRing;\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(outerRing, createGeometryFromPositionsExtrudedPositions);\n\n        var windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (windingOrder === WindingOrder.CLOCKWISE) {\n            outerRing = outerRing.slice().reverse();\n        }\n\n        var wallGeo = PolygonGeometryLibrary.computeWallGeometry(outerRing, ellipsoid, granularity, perPositionHeight, arcType);\n        geos.walls.push(new GeometryInstance({\n            geometry : wallGeo\n        }));\n\n        var holes = hierarchy.holes;\n        for (i = 0; i < holes.length; i++) {\n            var hole = holes[i];\n\n            tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n            positions2D = tangentPlane.projectPointsOntoPlane(hole, createGeometryFromPositionsExtrudedPositions);\n\n            windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n            if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\n                hole = hole.slice().reverse();\n            }\n\n            wallGeo = PolygonGeometryLibrary.computeWallGeometry(hole, ellipsoid, granularity, perPositionHeight, arcType);\n            geos.walls.push(new GeometryInstance({\n                geometry : wallGeo\n            }));\n        }\n\n        return geos;\n    }\n\n    /**\n     * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @alias PolygonGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     *\n     * @see PolygonGeometry#createGeometry\n     * @see PolygonGeometry#fromPositions\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n     *\n     * @example\n     * // 1. create a polygon from points\n     * var polygon = new Cesium.PolygonGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   )\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n     *\n     * // 2. create a nested polygon with holes\n     * var polygonWithHole = new Cesium.PolygonGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -109.0, 30.0,\n     *       -95.0, 30.0,\n     *       -95.0, 40.0,\n     *       -109.0, 40.0\n     *     ]),\n     *     [new Cesium.PolygonHierarchy(\n     *       Cesium.Cartesian3.fromDegreesArray([\n     *         -107.0, 31.0,\n     *         -107.0, 39.0,\n     *         -97.0, 39.0,\n     *         -97.0, 31.0\n     *       ]),\n     *       [new Cesium.PolygonHierarchy(\n     *         Cesium.Cartesian3.fromDegreesArray([\n     *           -105.0, 33.0,\n     *           -99.0, 33.0,\n     *           -99.0, 37.0,\n     *           -105.0, 37.0\n     *         ]),\n     *         [new Cesium.PolygonHierarchy(\n     *           Cesium.Cartesian3.fromDegreesArray([\n     *             -103.0, 34.0,\n     *             -101.0, 34.0,\n     *             -101.0, 36.0,\n     *             -103.0, 36.0\n     *           ])\n     *         )]\n     *       )]\n     *     )]\n     *   )\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\n     *\n     * // 3. create extruded polygon\n     * var extrudedPolygon = new Cesium.PolygonGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   ),\n     *   extrudedHeight: 300000\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\n     */\n    function PolygonGeometry(options) {\n        \n\n        var polygonHierarchy = options.polygonHierarchy;\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var stRotation = defaultValue(options.stRotation, 0.0);\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        if (!perPositionHeightExtrude) {\n            var h = Math.max(height, extrudedHeight);\n            extrudedHeight = Math.min(height, extrudedHeight);\n            height = h;\n        }\n\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._granularity = granularity;\n        this._stRotation = stRotation;\n        this._height = height;\n        this._extrudedHeight = extrudedHeight;\n        this._closeTop = defaultValue(options.closeTop, true);\n        this._closeBottom = defaultValue(options.closeBottom, true);\n        this._polygonHierarchy = polygonHierarchy;\n        this._perPositionHeight = perPositionHeight;\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\n        this._shadowVolume = defaultValue(options.shadowVolume, false);\n        this._workerName = 'createPolygonGeometry';\n        this._offsetAttribute = options.offsetAttribute;\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n        this._rectangle = undefined;\n        this._textureCoordinateRotationPoints = undefined;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + VertexFormat.packedLength + 12;\n    }\n\n    /**\n     * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @param {Number} [options.height=0.0] The height of the polygon.\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n     * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     * @returns {PolygonGeometry}\n     *\n     *\n     * @example\n     * // create a polygon from points\n     * var polygon = Cesium.PolygonGeometry.fromPositions({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0,\n     *     -75.0, 30.0,\n     *     -70.0, 30.0,\n     *     -68.0, 40.0\n     *   ])\n     * });\n     * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n     *\n     * @see PolygonGeometry#createGeometry\n     */\n    PolygonGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            },\n            height : options.height,\n            extrudedHeight : options.extrudedHeight,\n            vertexFormat : options.vertexFormat,\n            stRotation : options.stRotation,\n            ellipsoid : options.ellipsoid,\n            granularity : options.granularity,\n            perPositionHeight : options.perPositionHeight,\n            closeTop : options.closeTop,\n            closeBottom : options.closeBottom,\n            offsetAttribute : options.offsetAttribute,\n            arcType : options.arcType\n        };\n        return new PolygonGeometry(newOptions);\n    };\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolygonGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolygonGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._stRotation;\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n        array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\n        array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\n        array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n        array[startingIndex++] = value._arcType;\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n\n    //Only used to avoid inability to default construct.\n    var dummyOptions = {\n        polygonHierarchy : {}\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolygonGeometry} [result] The object into which to store the result.\n     */\n    PolygonGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var stRotation = array[startingIndex++];\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\n        var perPositionHeight = array[startingIndex++] === 1.0;\n        var closeTop = array[startingIndex++] === 1.0;\n        var closeBottom = array[startingIndex++] === 1.0;\n        var shadowVolume = array[startingIndex++] === 1.0;\n        var offsetAttribute = array[startingIndex++];\n        var arcType = array[startingIndex++];\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new PolygonGeometry(dummyOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._granularity = granularity;\n        result._stRotation = stRotation;\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\n        result._perPositionHeight = perPositionHeight;\n        result._closeTop = closeTop;\n        result._closeBottom = closeBottom;\n        result._shadowVolume = shadowVolume;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n        result._arcType = arcType;\n        result.packedLength = packedLength;\n        return result;\n    };\n\n    /**\n     * Returns the bounding rectangle given the provided options\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Rectangle} [result] An object in which to store the result.\n     *\n     * @returns {Rectangle} The result rectangle\n     */\n    PolygonGeometry.computeRectangle = function(options, result) {\n        \n\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n        \n\n        var polygonHierarchy = options.polygonHierarchy;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        return computeRectangle(polygonHierarchy.positions, ellipsoid, arcType, granularity, result);\n    };\n\n    /**\n     * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolygonGeometry} polygonGeometry A description of the polygon.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolygonGeometry.createGeometry = function(polygonGeometry) {\n        var vertexFormat = polygonGeometry._vertexFormat;\n        var ellipsoid = polygonGeometry._ellipsoid;\n        var granularity = polygonGeometry._granularity;\n        var stRotation = polygonGeometry._stRotation;\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n        var perPositionHeight = polygonGeometry._perPositionHeight;\n        var closeTop = polygonGeometry._closeTop;\n        var closeBottom = polygonGeometry._closeBottom;\n        var arcType = polygonGeometry._arcType;\n\n        var outerPositions = polygonHierarchy.positions;\n        if (outerPositions.length < 3) {\n            return;\n        }\n\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(outerPositions, ellipsoid);\n\n        var results = PolygonGeometryLibrary.polygonsFromHierarchy(polygonHierarchy, tangentPlane.projectPointsOntoPlane.bind(tangentPlane), !perPositionHeight, ellipsoid);\n        var hierarchy = results.hierarchy;\n        var polygons = results.polygons;\n\n        if (hierarchy.length === 0) {\n            return;\n        }\n\n        outerPositions = hierarchy[0].outerRing;\n        var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(tangentPlane.plane.normal, tangentPlane.projectPointOntoPlane.bind(tangentPlane), outerPositions, stRotation, scratchBoundingRectangle);\n\n        var geometries = [];\n\n        var height = polygonGeometry._height;\n        var extrudedHeight = polygonGeometry._extrudedHeight;\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n        var options = {\n            perPositionHeight: perPositionHeight,\n            vertexFormat: vertexFormat,\n            geometry: undefined,\n            tangentPlane: tangentPlane,\n            boundingRectangle: boundingRectangle,\n            ellipsoid: ellipsoid,\n            stRotation: stRotation,\n            bottom: false,\n            top: true,\n            wall: false,\n            extrude: false,\n            arcType: arcType\n        };\n\n        var i;\n\n        if (extrude) {\n            options.extrude = true;\n            options.top = closeTop;\n            options.bottom = closeBottom;\n            options.shadowVolume = polygonGeometry._shadowVolume;\n            options.offsetAttribute = polygonGeometry._offsetAttribute;\n            for (i = 0; i < polygons.length; i++) {\n                var splitGeometry = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], granularity, hierarchy[i], perPositionHeight, closeTop, closeBottom, vertexFormat, arcType);\n\n                var topAndBottom;\n                if (closeTop && closeBottom) {\n                    topAndBottom = splitGeometry.topAndBottom;\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(topAndBottom.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\n                } else if (closeTop) {\n                    topAndBottom = splitGeometry.topAndBottom;\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\n                    options.geometry = topAndBottom.geometry;\n                } else if (closeBottom) {\n                    topAndBottom = splitGeometry.topAndBottom;\n                    topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(topAndBottom.geometry.attributes.position.values, extrudedHeight, ellipsoid, true);\n                    options.geometry = topAndBottom.geometry;\n                }\n                if (closeTop || closeBottom) {\n                    options.wall = false;\n                    topAndBottom.geometry = computeAttributes(options);\n                    geometries.push(topAndBottom);\n                }\n\n                var walls = splitGeometry.walls;\n                options.wall = true;\n                for ( var k = 0; k < walls.length; k++) {\n                    var wall = walls[k];\n                    options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(wall.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\n                    wall.geometry = computeAttributes(options);\n                    geometries.push(wall);\n                }\n            }\n        } else {\n            for (i = 0; i < polygons.length; i++) {\n                var geometryInstance = new GeometryInstance({\n                    geometry : PolygonGeometryLibrary.createGeometryFromPositions(ellipsoid, polygons[i], granularity, perPositionHeight, vertexFormat, arcType)\n                });\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\n                options.geometry = geometryInstance.geometry;\n                geometryInstance.geometry = computeAttributes(options);\n\n                if (defined(polygonGeometry._offsetAttribute)) {\n                    var length = geometryInstance.geometry.attributes.position.values.length;\n                    var applyOffset = new Uint8Array(length / 3);\n                    var offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                    arrayFill(applyOffset, offsetValue);\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute : 1,\n                        values: applyOffset\n                    });\n                }\n\n                geometries.push(geometryInstance);\n            }\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        geometry.attributes.position.values = new Float64Array(geometry.attributes.position.values);\n        geometry.indices = IndexDatatype.createTypedArray(geometry.attributes.position.values.length / 3, geometry.indices);\n\n        var attributes = geometry.attributes;\n        var boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\n\n        if (!vertexFormat.position) {\n            delete attributes.position;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere,\n            offsetAttribute : polygonGeometry._offsetAttribute\n        });\n    };\n\n    /**\n     * @private\n     */\n    PolygonGeometry.createShadowVolume = function(polygonGeometry, minHeightFunc, maxHeightFunc) {\n        var granularity = polygonGeometry._granularity;\n        var ellipsoid = polygonGeometry._ellipsoid;\n\n        var minHeight = minHeightFunc(granularity, ellipsoid);\n        var maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n        return new PolygonGeometry({\n            polygonHierarchy : polygonGeometry._polygonHierarchy,\n            ellipsoid : ellipsoid,\n            stRotation : polygonGeometry._stRotation,\n            granularity : granularity,\n            perPositionHeight : false,\n            extrudedHeight : minHeight,\n            height : maxHeight,\n            vertexFormat : VertexFormat.POSITION_ONLY,\n            shadowVolume: true,\n            arcType : polygonGeometry._arcType\n        });\n    };\n\n    function textureCoordinateRotationPoints(polygonGeometry) {\n        var stRotation = -polygonGeometry._stRotation;\n        if (stRotation === 0.0) {\n            return [0, 0, 0, 1, 1, 0];\n        }\n        var ellipsoid = polygonGeometry._ellipsoid;\n        var positions = polygonGeometry._polygonHierarchy.positions;\n        var boundingRectangle = polygonGeometry.rectangle;\n        return Geometry._textureCoordinateRotationPoints(positions, stRotation, ellipsoid, boundingRectangle);\n    }\n\n    defineProperties(PolygonGeometry.prototype, {\n        /**\n         * @private\n         */\n        rectangle : {\n            get : function() {\n                if (!defined(this._rectangle)) {\n                    var positions = this._polygonHierarchy.positions;\n                    this._rectangle = computeRectangle(positions, this._ellipsoid, this._arcType, this._granularity);\n                }\n\n                return this._rectangle;\n            }\n        },\n        /**\n         * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\n         * @private\n         */\n        textureCoordinateRotationPoints : {\n            get : function() {\n                if (!defined(this._textureCoordinateRotationPoints)) {\n                    this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(this);\n                }\n                return this._textureCoordinateRotationPoints;\n            }\n        }\n    });\n\n    return PolygonGeometry;\n});\n","define([\n        './ArcType',\n        './arrayFill',\n        './arrayRemoveDuplicates',\n        './BoundingSphere',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './EllipsoidTangentPlane',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryInstance',\n        './GeometryOffsetAttribute',\n        './GeometryPipeline',\n        './IndexDatatype',\n        './Math',\n        './PolygonGeometryLibrary',\n        './PolygonPipeline',\n        './PrimitiveType',\n        './Queue',\n        './WindingOrder'\n    ], function(\n        ArcType,\n        arrayFill,\n        arrayRemoveDuplicates,\n        BoundingSphere,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        EllipsoidTangentPlane,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        GeometryPipeline,\n        IndexDatatype,\n        CesiumMath,\n        PolygonGeometryLibrary,\n        PolygonPipeline,\n        PrimitiveType,\n        Queue,\n        WindingOrder) {\n    'use strict';\n    var createGeometryFromPositionsPositions = [];\n    var createGeometryFromPositionsSubdivided = [];\n\n    function createGeometryFromPositions(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\n\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n            positions2D.reverse();\n            positions = positions.slice().reverse();\n        }\n\n        var subdividedPositions;\n        var i;\n\n        var length = positions.length;\n        var index = 0;\n\n        if (!perPositionHeight) {\n            var numVertices = 0;\n            if (arcType === ArcType.GEODESIC) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\n                }\n            } else if (arcType === ArcType.RHUMB) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\n                }\n            }\n            subdividedPositions = new Float64Array(numVertices * 3);\n            for (i = 0; i < length; i++) {\n                var tempPositions;\n                if (arcType === ArcType.GEODESIC) {\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                } else if (arcType === ArcType.RHUMB) {\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                }\n                var tempPositionsLength = tempPositions.length;\n                for (var j = 0; j < tempPositionsLength; ++j) {\n                    subdividedPositions[index++] = tempPositions[j];\n                }\n            }\n        } else {\n            subdividedPositions = new Float64Array(length * 2 * 3);\n            for (i = 0; i < length; i++) {\n                var p0 = positions[i];\n                var p1 = positions[(i + 1) % length];\n                subdividedPositions[index++] = p0.x;\n                subdividedPositions[index++] = p0.y;\n                subdividedPositions[index++] = p0.z;\n                subdividedPositions[index++] = p1.x;\n                subdividedPositions[index++] = p1.y;\n                subdividedPositions[index++] = p1.z;\n            }\n        }\n\n        length = subdividedPositions.length / 3;\n        var indicesSize = length * 2;\n        var indices = IndexDatatype.createTypedArray(length, indicesSize);\n        index = 0;\n        for (i = 0; i < length - 1; i++) {\n            indices[index++] = i;\n            indices[index++] = i + 1;\n        }\n        indices[index++] = length - 1;\n        indices[index++] = 0;\n\n        return new GeometryInstance({\n            geometry : new Geometry({\n                attributes : new GeometryAttributes({\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.DOUBLE,\n                        componentsPerAttribute : 3,\n                        values : subdividedPositions\n                    })\n                }),\n                indices : indices,\n                primitiveType : PrimitiveType.LINES\n            })\n        });\n    }\n\n    function createGeometryFromPositionsExtruded(ellipsoid, positions, minDistance, perPositionHeight, arcType) {\n        var tangentPlane = EllipsoidTangentPlane.fromPoints(positions, ellipsoid);\n        var positions2D = tangentPlane.projectPointsOntoPlane(positions, createGeometryFromPositionsPositions);\n\n        var originalWindingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n        if (originalWindingOrder === WindingOrder.CLOCKWISE) {\n            positions2D.reverse();\n            positions = positions.slice().reverse();\n        }\n\n        var subdividedPositions;\n        var i;\n\n        var length = positions.length;\n        var corners = new Array(length);\n        var index = 0;\n\n        if (!perPositionHeight) {\n            var numVertices = 0;\n            if (arcType === ArcType.GEODESIC) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideLineCount(positions[i], positions[(i + 1) % length], minDistance);\n                }\n            } else if (arcType === ArcType.RHUMB) {\n                for (i = 0; i < length; i++) {\n                    numVertices += PolygonGeometryLibrary.subdivideRhumbLineCount(ellipsoid, positions[i], positions[(i + 1) % length], minDistance);\n                }\n            }\n\n            subdividedPositions = new Float64Array(numVertices * 3 * 2);\n            for (i = 0; i < length; ++i) {\n                corners[i] = index / 3;\n                var tempPositions;\n                if (arcType === ArcType.GEODESIC) {\n                    tempPositions = PolygonGeometryLibrary.subdivideLine(positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                } else if (arcType === ArcType.RHUMB) {\n                    tempPositions = PolygonGeometryLibrary.subdivideRhumbLine(ellipsoid, positions[i], positions[(i + 1) % length], minDistance, createGeometryFromPositionsSubdivided);\n                }\n                var tempPositionsLength = tempPositions.length;\n                for (var j = 0; j < tempPositionsLength; ++j) {\n                    subdividedPositions[index++] = tempPositions[j];\n                }\n            }\n        } else {\n            subdividedPositions = new Float64Array(length * 2 * 3 * 2);\n            for (i = 0; i < length; ++i) {\n                corners[i] = index / 3;\n                var p0 = positions[i];\n                var p1 = positions[(i + 1) % length];\n\n                subdividedPositions[index++] = p0.x;\n                subdividedPositions[index++] = p0.y;\n                subdividedPositions[index++] = p0.z;\n                subdividedPositions[index++] = p1.x;\n                subdividedPositions[index++] = p1.y;\n                subdividedPositions[index++] = p1.z;\n            }\n        }\n\n        length = subdividedPositions.length / (3 * 2);\n        var cornersLength = corners.length;\n\n        var indicesSize = ((length * 2) + cornersLength) * 2;\n        var indices = IndexDatatype.createTypedArray(length + cornersLength, indicesSize);\n\n        index = 0;\n        for (i = 0; i < length; ++i) {\n            indices[index++] = i;\n            indices[index++] = (i + 1) % length;\n            indices[index++] = i + length;\n            indices[index++] = ((i + 1) % length) + length;\n        }\n\n        for (i = 0; i < cornersLength; i++) {\n            var corner = corners[i];\n            indices[index++] = corner;\n            indices[index++] = corner + length;\n        }\n\n        return new GeometryInstance({\n            geometry : new Geometry({\n                attributes : new GeometryAttributes({\n                    position : new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.DOUBLE,\n                        componentsPerAttribute : 3,\n                        values : subdividedPositions\n                    })\n                }),\n                indices : indices,\n                primitiveType : PrimitiveType.LINES\n            })\n        });\n    }\n\n    /**\n     * A description of the outline of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy.\n     *\n     * @alias PolygonOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n     * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n     * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n     *\n     * @see PolygonOutlineGeometry#createGeometry\n     * @see PolygonOutlineGeometry#fromPositions\n     *\n     * @example\n     * // 1. create a polygon outline from points\n     * var polygon = new Cesium.PolygonOutlineGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   )\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\n     *\n     * // 2. create a nested polygon with holes outline\n     * var polygonWithHole = new Cesium.PolygonOutlineGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -109.0, 30.0,\n     *       -95.0, 30.0,\n     *       -95.0, 40.0,\n     *       -109.0, 40.0\n     *     ]),\n     *     [new Cesium.PolygonHierarchy(\n     *       Cesium.Cartesian3.fromDegreesArray([\n     *         -107.0, 31.0,\n     *         -107.0, 39.0,\n     *         -97.0, 39.0,\n     *         -97.0, 31.0\n     *       ]),\n     *       [new Cesium.PolygonHierarchy(\n     *         Cesium.Cartesian3.fromDegreesArray([\n     *           -105.0, 33.0,\n     *           -99.0, 33.0,\n     *           -99.0, 37.0,\n     *           -105.0, 37.0\n     *         ]),\n     *         [new Cesium.PolygonHierarchy(\n     *           Cesium.Cartesian3.fromDegreesArray([\n     *             -103.0, 34.0,\n     *             -101.0, 34.0,\n     *             -101.0, 36.0,\n     *             -103.0, 36.0\n     *           ])\n     *         )]\n     *       )]\n     *     )]\n     *   )\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygonWithHole);\n     *\n     * // 3. create extruded polygon outline\n     * var extrudedPolygon = new Cesium.PolygonOutlineGeometry({\n     *   polygonHierarchy : new Cesium.PolygonHierarchy(\n     *     Cesium.Cartesian3.fromDegreesArray([\n     *       -72.0, 40.0,\n     *       -70.0, 35.0,\n     *       -75.0, 30.0,\n     *       -70.0, 30.0,\n     *       -68.0, 40.0\n     *     ])\n     *   ),\n     *   extrudedHeight: 300000\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(extrudedPolygon);\n     */\n    function PolygonOutlineGeometry(options) {\n        \n\n        var polygonHierarchy = options.polygonHierarchy;\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var perPositionHeight = defaultValue(options.perPositionHeight, false);\n        var perPositionHeightExtrude = perPositionHeight && defined(options.extrudedHeight);\n        var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n        var height = defaultValue(options.height, 0.0);\n        var extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n        if (!perPositionHeightExtrude) {\n            var h = Math.max(height, extrudedHeight);\n            extrudedHeight = Math.min(height, extrudedHeight);\n            height = h;\n        }\n\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._granularity = granularity;\n        this._height = height;\n        this._extrudedHeight = extrudedHeight;\n        this._arcType = arcType;\n        this._polygonHierarchy = polygonHierarchy;\n        this._perPositionHeight = perPositionHeight;\n        this._perPositionHeightExtrude = perPositionHeightExtrude;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createPolygonOutlineGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) + Ellipsoid.packedLength + 8;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolygonOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolygonOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(value._polygonHierarchy, array, startingIndex);\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._height;\n        array[startingIndex++] = value._extrudedHeight;\n        array[startingIndex++] = value._granularity;\n        array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n        array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n        array[startingIndex++] = value._arcType;\n        array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n        array[startingIndex] = value.packedLength;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var dummyOptions = {\n        polygonHierarchy : {}\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolygonOutlineGeometry} [result] The object into which to store the result.\n     * @returns {PolygonOutlineGeometry} The modified result parameter or a new PolygonOutlineGeometry instance if one was not provided.\n     */\n    PolygonOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(array, startingIndex);\n        startingIndex = polygonHierarchy.startingIndex;\n        delete polygonHierarchy.startingIndex;\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var height = array[startingIndex++];\n        var extrudedHeight = array[startingIndex++];\n        var granularity = array[startingIndex++];\n        var perPositionHeightExtrude = array[startingIndex++] === 1.0;\n        var perPositionHeight = array[startingIndex++] === 1.0;\n        var arcType = array[startingIndex++];\n        var offsetAttribute = array[startingIndex++];\n        var packedLength = array[startingIndex];\n\n        if (!defined(result)) {\n            result = new PolygonOutlineGeometry(dummyOptions);\n        }\n\n        result._polygonHierarchy = polygonHierarchy;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._height = height;\n        result._extrudedHeight = extrudedHeight;\n        result._granularity = granularity;\n        result._perPositionHeight = perPositionHeight;\n        result._perPositionHeightExtrude = perPositionHeightExtrude;\n        result._arcType = arcType;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n        result.packedLength = packedLength;\n\n        return result;\n    };\n\n    /**\n     * A description of a polygon outline from an array of positions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n     * @param {Number} [options.height=0.0] The height of the polygon.\n     * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of path the outline must follow. Valid options are {@link LinkType.GEODESIC} and {@link ArcType.RHUMB}.\n     * @returns {PolygonOutlineGeometry}\n     *\n     *\n     * @example\n     * // create a polygon from points\n     * var polygon = Cesium.PolygonOutlineGeometry.fromPositions({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0,\n     *     -75.0, 30.0,\n     *     -70.0, 30.0,\n     *     -68.0, 40.0\n     *   ])\n     * });\n     * var geometry = Cesium.PolygonOutlineGeometry.createGeometry(polygon);\n     *\n     * @see PolygonOutlineGeometry#createGeometry\n     */\n    PolygonOutlineGeometry.fromPositions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var newOptions = {\n            polygonHierarchy : {\n                positions : options.positions\n            },\n            height : options.height,\n            extrudedHeight : options.extrudedHeight,\n            ellipsoid : options.ellipsoid,\n            granularity : options.granularity,\n            perPositionHeight : options.perPositionHeight,\n            arcType: options.arcType,\n            offsetAttribute : options.offsetAttribute\n        };\n        return new PolygonOutlineGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a polygon outline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolygonOutlineGeometry} polygonGeometry A description of the polygon outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolygonOutlineGeometry.createGeometry = function(polygonGeometry) {\n        var ellipsoid = polygonGeometry._ellipsoid;\n        var granularity = polygonGeometry._granularity;\n        var polygonHierarchy = polygonGeometry._polygonHierarchy;\n        var perPositionHeight = polygonGeometry._perPositionHeight;\n        var arcType = polygonGeometry._arcType;\n\n        var polygons = PolygonGeometryLibrary.polygonOutlinesFromHierarchy(polygonHierarchy, !perPositionHeight, ellipsoid);\n\n        if (polygons.length === 0) {\n            return undefined;\n        }\n\n        var geometryInstance;\n        var geometries = [];\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n\n        var height = polygonGeometry._height;\n        var extrudedHeight = polygonGeometry._extrudedHeight;\n        var extrude = polygonGeometry._perPositionHeightExtrude || !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n        var offsetValue;\n        var i;\n        if (extrude) {\n            for (i = 0; i < polygons.length; i++) {\n                geometryInstance = createGeometryFromPositionsExtruded(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\n                geometryInstance.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(geometryInstance.geometry, height, extrudedHeight, ellipsoid, perPositionHeight);\n                if (defined(polygonGeometry._offsetAttribute)) {\n                    var size = geometryInstance.geometry.attributes.position.values.length / 3;\n                    var offsetAttribute = new Uint8Array(size);\n                    if (polygonGeometry._offsetAttribute === GeometryOffsetAttribute.TOP) {\n                        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n                    } else {\n                        offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                        offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n                    }\n\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute : 1,\n                        values : offsetAttribute\n                    });\n                }\n                geometries.push(geometryInstance);\n            }\n        } else {\n            for (i = 0; i < polygons.length; i++) {\n                geometryInstance = createGeometryFromPositions(ellipsoid, polygons[i], minDistance, perPositionHeight, arcType);\n                geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(geometryInstance.geometry.attributes.position.values, height, ellipsoid, !perPositionHeight);\n\n                if (defined(polygonGeometry._offsetAttribute)) {\n                    var length = geometryInstance.geometry.attributes.position.values.length;\n                    var applyOffset = new Uint8Array(length / 3);\n                    offsetValue = polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n                    arrayFill(applyOffset, offsetValue);\n                    geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute({\n                        componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                        componentsPerAttribute : 1,\n                        values: applyOffset\n                    });\n                }\n\n                geometries.push(geometryInstance);\n            }\n        }\n\n        var geometry = GeometryPipeline.combineInstances(geometries)[0];\n        var boundingSphere = BoundingSphere.fromVertices(geometry.attributes.position.values);\n\n        return new Geometry({\n            attributes : geometry.attributes,\n            indices : geometry.indices,\n            primitiveType : geometry.primitiveType,\n            boundingSphere : boundingSphere,\n            offsetAttribute : polygonGeometry._offsetAttribute\n        });\n    };\n\n    return PolygonOutlineGeometry;\n});\n","define([\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/GeometryInstance',\n        '../Core/Iso8601',\n        '../Core/PolylineVolumeGeometry',\n        '../Core/PolylineVolumeOutlineGeometry',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './Property'\n    ], function(\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        GeometryInstance,\n        Iso8601,\n        PolylineVolumeGeometry,\n        PolylineVolumeOutlineGeometry,\n        ShowGeometryInstanceAttribute,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        Property) {\n    'use strict';\n\n    var scratchColor = new Color();\n\n    function PolylineVolumeGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.polylinePositions = undefined;\n        this.shapePositions = undefined;\n        this.cornerType = undefined;\n        this.granularity = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for polyline volumes.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PolylineVolumeGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PolylineVolumeGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new PolylineVolumeGeometryOptions(entity),\n            geometryPropertyName : 'polylineVolume',\n            observedPropertyNames : ['availability', 'polylineVolume']\n        });\n\n        this._onEntityPropertyChanged(entity, 'polylineVolume', entity.polylineVolume, undefined);\n    }\n\n    if (defined(Object.create)) {\n        PolylineVolumeGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        PolylineVolumeGeometryUpdater.prototype.constructor = PolylineVolumeGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PolylineVolumeGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes;\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute,\n                color : color\n            };\n        } else {\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute\n            };\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PolylineVolumeGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PolylineVolumeGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PolylineVolumeOutlineGeometry(this._options),\n            attributes : {\n                show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n                color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n                distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n            }\n        });\n    };\n\n    PolylineVolumeGeometryUpdater.prototype._isHidden = function(entity, polylineVolume) {\n        return !defined(polylineVolume.positions) || !defined(polylineVolume.shape) || GeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume);\n    };\n\n    PolylineVolumeGeometryUpdater.prototype._isDynamic = function(entity, polylineVolume) {\n        return !polylineVolume.positions.isConstant || //\n               !polylineVolume.shape.isConstant || //\n               !Property.isConstant(polylineVolume.granularity) || //\n               !Property.isConstant(polylineVolume.outlineWidth) || //\n               !Property.isConstant(polylineVolume.cornerType);\n    };\n\n    PolylineVolumeGeometryUpdater.prototype._setStaticOptions = function(entity, polylineVolume) {\n        var granularity = polylineVolume.granularity;\n        var cornerType = polylineVolume.cornerType;\n\n        var options = this._options;\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.polylinePositions = polylineVolume.positions.getValue(Iso8601.MINIMUM_VALUE, options.polylinePositions);\n        options.shapePositions = polylineVolume.shape.getValue(Iso8601.MINIMUM_VALUE, options.shape);\n        options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n        options.cornerType = defined(cornerType) ? cornerType.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n    };\n\n    PolylineVolumeGeometryUpdater.DynamicGeometryUpdater = DynamicPolylineVolumeGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicPolylineVolumeGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicPolylineVolumeGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicPolylineVolumeGeometryUpdater.prototype.constructor = DynamicPolylineVolumeGeometryUpdater;\n    }\n\n    DynamicPolylineVolumeGeometryUpdater.prototype._isHidden = function(entity, polylineVolume, time) {\n        var options = this._options;\n        return !defined(options.polylinePositions) || !defined(options.shapePositions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, polylineVolume, time);\n    };\n\n    DynamicPolylineVolumeGeometryUpdater.prototype._setOptions = function(entity, polylineVolume, time) {\n        var options = this._options;\n        options.polylinePositions = Property.getValueOrUndefined(polylineVolume.positions, time, options.polylinePositions);\n        options.shapePositions = Property.getValueOrUndefined(polylineVolume.shape, time);\n        options.granularity = Property.getValueOrUndefined(polylineVolume.granularity, time);\n        options.cornerType = Property.getValueOrUndefined(polylineVolume.cornerType, time);\n    };\n\n    return PolylineVolumeGeometryUpdater;\n});\n","define([\n        './arrayRemoveDuplicates',\n        './BoundingRectangle',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './ComponentDatatype',\n        './CornerType',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryPipeline',\n        './IndexDatatype',\n        './Math',\n        './oneTimeWarning',\n        './PolygonPipeline',\n        './PolylineVolumeGeometryLibrary',\n        './PrimitiveType',\n        './VertexFormat',\n        './WindingOrder'\n    ], function(\n        arrayRemoveDuplicates,\n        BoundingRectangle,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        ComponentDatatype,\n        CornerType,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryPipeline,\n        IndexDatatype,\n        CesiumMath,\n        oneTimeWarning,\n        PolygonPipeline,\n        PolylineVolumeGeometryLibrary,\n        PrimitiveType,\n        VertexFormat,\n        WindingOrder) {\n    'use strict';\n\n    function computeAttributes(combinedPositions, shape, boundingRectangle, vertexFormat) {\n        var attributes = new GeometryAttributes();\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : combinedPositions\n            });\n        }\n        var shapeLength = shape.length;\n        var vertexCount = combinedPositions.length / 3;\n        var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\n        var firstEndIndices = PolygonPipeline.triangulate(shape);\n\n        var indicesCount = (length - 1) * (shapeLength) * 6 + firstEndIndices.length * 2;\n        var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\n        var i, j;\n        var ll, ul, ur, lr;\n        var offset = shapeLength * 2;\n        var index = 0;\n        for (i = 0; i < length - 1; i++) {\n            for (j = 0; j < shapeLength - 1; j++) {\n                ll = j * 2 + i * shapeLength * 2;\n                lr = ll + offset;\n                ul = ll + 1;\n                ur = ul + offset;\n\n                indices[index++] = ul;\n                indices[index++] = ll;\n                indices[index++] = ur;\n                indices[index++] = ur;\n                indices[index++] = ll;\n                indices[index++] = lr;\n            }\n            ll = shapeLength * 2 - 2 + i * shapeLength * 2;\n            ul = ll + 1;\n            ur = ul + offset;\n            lr = ll + offset;\n\n            indices[index++] = ul;\n            indices[index++] = ll;\n            indices[index++] = ur;\n            indices[index++] = ur;\n            indices[index++] = ll;\n            indices[index++] = lr;\n        }\n\n        if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) { // st required for tangent/bitangent calculation\n            var st = new Float32Array(vertexCount * 2);\n            var lengthSt = 1 / (length - 1);\n            var heightSt = 1 / (boundingRectangle.height);\n            var heightOffset = boundingRectangle.height / 2;\n            var s, t;\n            var stindex = 0;\n            for (i = 0; i < length; i++) {\n                s = i * lengthSt;\n                t = heightSt * (shape[0].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n                for (j = 1; j < shapeLength; j++) {\n                    t = heightSt * (shape[j].y + heightOffset);\n                    st[stindex++] = s;\n                    st[stindex++] = t;\n                    st[stindex++] = s;\n                    st[stindex++] = t;\n                }\n                t = heightSt * (shape[0].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n            for (j = 0; j < shapeLength; j++) {\n                s = 0;\n                t = heightSt * (shape[j].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n            for (j = 0; j < shapeLength; j++) {\n                s = (length - 1) * lengthSt;\n                t = heightSt * (shape[j].y + heightOffset);\n                st[stindex++] = s;\n                st[stindex++] = t;\n            }\n\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : new Float32Array(st)\n            });\n        }\n\n        var endOffset = vertexCount - shapeLength * 2;\n        for (i = 0; i < firstEndIndices.length; i += 3) {\n            var v0 = firstEndIndices[i] + endOffset;\n            var v1 = firstEndIndices[i + 1] + endOffset;\n            var v2 = firstEndIndices[i + 2] + endOffset;\n\n            indices[index++] = v0;\n            indices[index++] = v1;\n            indices[index++] = v2;\n            indices[index++] = v2 + shapeLength;\n            indices[index++] = v1 + shapeLength;\n            indices[index++] = v0 + shapeLength;\n        }\n\n        var geometry = new Geometry({\n            attributes : attributes,\n            indices : indices,\n            boundingSphere : BoundingSphere.fromVertices(combinedPositions),\n            primitiveType : PrimitiveType.TRIANGLES\n        });\n\n        if (vertexFormat.normal) {\n            geometry = GeometryPipeline.computeNormal(geometry);\n        }\n\n        if (vertexFormat.tangent || vertexFormat.bitangent) {\n            try {\n                geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\n            } catch (e) {\n                oneTimeWarning('polyline-volume-tangent-bitangent', 'Unable to compute tangents and bitangents for polyline volume geometry');\n                //TODO https://github.com/AnalyticalGraphicsInc/cesium/issues/3609\n            }\n\n            if (!vertexFormat.tangent) {\n                geometry.attributes.tangent = undefined;\n            }\n            if (!vertexFormat.bitangent) {\n                geometry.attributes.bitangent = undefined;\n            }\n            if (!vertexFormat.st) {\n                geometry.attributes.st = undefined;\n            }\n        }\n\n        return geometry;\n    }\n\n    /**\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n     *\n     * @alias PolylineVolumeGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesain3} positions that define the center of the polyline volume.\n     * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see PolylineVolumeGeometry#createGeometry\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\n     *\n     * @example\n     * function computeCircle(radius) {\n     *   var positions = [];\n     *   for (var i = 0; i < 360; i++) {\n     *     var radians = Cesium.Math.toRadians(i);\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n     *   }\n     *   return positions;\n     * }\n     *\n     * var volume = new Cesium.PolylineVolumeGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0\n     *   ]),\n     *   shapePositions : computeCircle(100000.0)\n     * });\n     */\n    function PolylineVolumeGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.polylinePositions;\n        var shape = options.shapePositions;\n\n        \n\n        this._positions = positions;\n        this._shape = shape;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._workerName = 'createPolylineVolumeGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineVolumeGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineVolumeGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var shape = value._shape;\n        length = shape.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            Cartesian2.pack(shape[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        polylinePositions : undefined,\n        shapePositions : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        cornerType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\n     * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\n     */\n    PolylineVolumeGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var shape = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            shape[i] = Cartesian2.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.polylinePositions = positions;\n            scratchOptions.shapePositions = shape;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            return new PolylineVolumeGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._shape = shape;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var brScratch = new BoundingRectangle();\n\n    /**\n     * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineVolumeGeometry.createGeometry = function(polylineVolumeGeometry) {\n        var positions = polylineVolumeGeometry._positions;\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var shape2D = polylineVolumeGeometry._shape;\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\n            return undefined;\n        }\n\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n            shape2D.reverse();\n        }\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeGeometry, true);\n        return computeAttributes(computedPositions, shape2D, boundingRectangle, polylineVolumeGeometry._vertexFormat);\n    };\n\n    return PolylineVolumeGeometry;\n});\n","define([\n        './arrayRemoveDuplicates',\n        './BoundingRectangle',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './ComponentDatatype',\n        './CornerType',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './IndexDatatype',\n        './Math',\n        './PolygonPipeline',\n        './PolylineVolumeGeometryLibrary',\n        './PrimitiveType',\n        './WindingOrder'\n    ], function(\n        arrayRemoveDuplicates,\n        BoundingRectangle,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        ComponentDatatype,\n        CornerType,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        IndexDatatype,\n        CesiumMath,\n        PolygonPipeline,\n        PolylineVolumeGeometryLibrary,\n        PrimitiveType,\n        WindingOrder) {\n    'use strict';\n\n    function computeAttributes(positions, shape) {\n        var attributes = new GeometryAttributes();\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : positions\n        });\n\n        var shapeLength = shape.length;\n        var vertexCount = attributes.position.values.length / 3;\n        var positionLength = positions.length / 3;\n        var shapeCount = positionLength / shapeLength;\n        var indices = IndexDatatype.createTypedArray(vertexCount, 2 * shapeLength * (shapeCount + 1));\n        var i, j;\n        var index = 0;\n        i = 0;\n        var offset = i * shapeLength;\n        for (j = 0; j < shapeLength - 1; j++) {\n            indices[index++] = j + offset;\n            indices[index++] = j + offset + 1;\n        }\n        indices[index++] = shapeLength - 1 + offset;\n        indices[index++] = offset;\n\n        i = shapeCount - 1;\n        offset = i * shapeLength;\n        for (j = 0; j < shapeLength - 1; j++) {\n            indices[index++] = j + offset;\n            indices[index++] = j + offset + 1;\n        }\n        indices[index++] = shapeLength - 1 + offset;\n        indices[index++] = offset;\n\n        for (i = 0; i < shapeCount - 1; i++) {\n            var firstOffset = shapeLength * i;\n            var secondOffset = firstOffset + shapeLength;\n            for (j = 0; j < shapeLength; j++) {\n                indices[index++] = j + firstOffset;\n                indices[index++] = j + secondOffset;\n            }\n        }\n\n        var geometry = new Geometry({\n            attributes : attributes,\n            indices : IndexDatatype.createTypedArray(vertexCount, indices),\n            boundingSphere : BoundingSphere.fromVertices(positions),\n            primitiveType : PrimitiveType.LINES\n        });\n\n        return geometry;\n    }\n\n    /**\n     * A description of a polyline with a volume (a 2D shape extruded along a polyline).\n     *\n     * @alias PolylineVolumeOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\n     * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\n     *\n     * @see PolylineVolumeOutlineGeometry#createGeometry\n     *\n     * @example\n     * function computeCircle(radius) {\n     *   var positions = [];\n     *   for (var i = 0; i < 360; i++) {\n     *     var radians = Cesium.Math.toRadians(i);\n     *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\n     *   }\n     *   return positions;\n     * }\n     *\n     * var volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\n     *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\n     *     -72.0, 40.0,\n     *     -70.0, 35.0\n     *   ]),\n     *   shapePositions : computeCircle(100000.0)\n     * });\n     */\n    function PolylineVolumeOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.polylinePositions;\n        var shape = options.shapePositions;\n\n        \n\n        this._positions = positions;\n        this._shape = shape;\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._workerName = 'createPolylineVolumeOutlineGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += 1 + shape.length * Cartesian2.packedLength;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + 2;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineVolumeOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineVolumeOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var shape = value._shape;\n        length = shape.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            Cartesian2.pack(shape[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex++] = value._cornerType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        polylinePositions : undefined,\n        shapePositions : undefined,\n        ellipsoid : scratchEllipsoid,\n        height : undefined,\n        cornerType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\n     * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\n     */\n    PolylineVolumeOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var shape = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\n            shape[i] = Cartesian2.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var cornerType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.polylinePositions = positions;\n            scratchOptions.shapePositions = shape;\n            scratchOptions.cornerType = cornerType;\n            scratchOptions.granularity = granularity;\n            return new PolylineVolumeOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._shape = shape;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._cornerType = cornerType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var brScratch = new BoundingRectangle();\n\n    /**\n     * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineVolumeOutlineGeometry.createGeometry = function(polylineVolumeOutlineGeometry) {\n        var positions = polylineVolumeOutlineGeometry._positions;\n        var cleanPositions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n        var shape2D = polylineVolumeOutlineGeometry._shape;\n        shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\n\n        if (cleanPositions.length < 2 || shape2D.length < 3) {\n            return undefined;\n        }\n\n        if (PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE) {\n            shape2D.reverse();\n        }\n        var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\n\n        var computedPositions = PolylineVolumeGeometryLibrary.computePositions(cleanPositions, shape2D, boundingRectangle, polylineVolumeOutlineGeometry, false);\n        return computeAttributes(computedPositions, shape2D);\n    };\n\n    return PolylineVolumeOutlineGeometry;\n});\n","define([\n        './freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * Style options for corners.\n     *\n     * @demo The {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\n     * demonstrates the three corner types, as used by {@link CorridorGraphics}.\n     *\n     * @exports CornerType\n     */\n    var CornerType = {\n        /**\n         * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n         *\n         * Corner has a smooth edge.\n         * @type {Number}\n         * @constant\n         */\n        ROUNDED : 0,\n\n        /**\n         * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n         *\n         * Corner point is the intersection of adjacent edges.\n         * @type {Number}\n         * @constant\n         */\n        MITERED : 1,\n\n        /**\n         * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\n         *\n         * Corner is clipped.\n         * @type {Number}\n         * @constant\n         */\n        BEVELED : 2\n    };\n\n    return freezeObject(CornerType);\n});\n","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/Cartesian3',\n        '../Core/Cartographic',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/Ellipsoid',\n        '../Core/GeometryInstance',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/Rectangle',\n        '../Core/RectangleGeometry',\n        '../Core/RectangleOutlineGeometry',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/GroundPrimitive',\n        '../Scene/HeightReference',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './GroundGeometryUpdater',\n        './Property'\n    ], function(\n        ApproximateTerrainHeights,\n        Cartesian3,\n        Cartographic,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        Ellipsoid,\n        GeometryInstance,\n        GeometryOffsetAttribute,\n        Iso8601,\n        OffsetGeometryInstanceAttribute,\n        Rectangle,\n        RectangleGeometry,\n        RectangleOutlineGeometry,\n        ShowGeometryInstanceAttribute,\n        GroundPrimitive,\n        HeightReference,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        GroundGeometryUpdater,\n        Property) {\n    'use strict';\n\n    var scratchColor = new Color();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n    var scratchRectangle = new Rectangle();\n    var scratchCenterRect = new Rectangle();\n    var scratchCarto = new Cartographic();\n\n    function RectangleGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.rectangle = undefined;\n        this.height = undefined;\n        this.extrudedHeight = undefined;\n        this.granularity = undefined;\n        this.stRotation = undefined;\n        this.rotation = undefined;\n        this.offsetAttribute = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for rectangles.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias RectangleGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function RectangleGeometryUpdater(entity, scene) {\n        GroundGeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new RectangleGeometryOptions(entity),\n            geometryPropertyName : 'rectangle',\n            observedPropertyNames : ['availability', 'rectangle']\n        });\n\n        this._onEntityPropertyChanged(entity, 'rectangle', entity.rectangle, undefined);\n    }\n\n    if (defined(Object.create)) {\n        RectangleGeometryUpdater.prototype = Object.create(GroundGeometryUpdater.prototype);\n        RectangleGeometryUpdater.prototype.constructor = RectangleGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    RectangleGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time)),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(this._distanceDisplayConditionProperty.getValue(time)),\n            offset : undefined,\n            color : undefined\n        };\n\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new RectangleGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    RectangleGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        var attributes = {\n            show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n            color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n            distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition),\n            offset : undefined\n        };\n\n        if (defined(this._options.offsetAttribute)) {\n            attributes.offset = OffsetGeometryInstanceAttribute.fromCartesian3(Property.getValueOrDefault(this._terrainOffsetProperty, time, defaultOffset, offsetScratch));\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new RectangleOutlineGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    RectangleGeometryUpdater.prototype._computeCenter = function(time, result) {\n        var rect = Property.getValueOrUndefined(this._entity.rectangle.coordinates, time, scratchCenterRect);\n        if (!defined(rect)) {\n            return;\n        }\n        var center = Rectangle.center(rect, scratchCarto);\n        return Cartographic.toCartesian(center, Ellipsoid.WGS84, result);\n    };\n\n    RectangleGeometryUpdater.prototype._isHidden = function(entity, rectangle) {\n        return !defined(rectangle.coordinates) || GeometryUpdater.prototype._isHidden.call(this, entity, rectangle);\n    };\n\n    RectangleGeometryUpdater.prototype._isDynamic = function(entity, rectangle) {\n        return !rectangle.coordinates.isConstant || //\n               !Property.isConstant(rectangle.height) || //\n               !Property.isConstant(rectangle.extrudedHeight) || //\n               !Property.isConstant(rectangle.granularity) || //\n               !Property.isConstant(rectangle.stRotation) || //\n               !Property.isConstant(rectangle.rotation) || //\n               !Property.isConstant(rectangle.outlineWidth) || //\n               !Property.isConstant(rectangle.zIndex) || //\n               (this._onTerrain && !Property.isConstant(this._materialProperty));\n    };\n\n    RectangleGeometryUpdater.prototype._setStaticOptions = function(entity, rectangle) {\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var heightValue = Property.getValueOrUndefined(rectangle.height, Iso8601.MINIMUM_VALUE);\n        var heightReferenceValue = Property.getValueOrDefault(rectangle.heightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(rectangle.extrudedHeight, Iso8601.MINIMUM_VALUE);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(rectangle.extrudedHeightReference, Iso8601.MINIMUM_VALUE, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.rectangle = rectangle.coordinates.getValue(Iso8601.MINIMUM_VALUE, options.rectangle);\n        options.granularity = Property.getValueOrUndefined(rectangle.granularity, Iso8601.MINIMUM_VALUE);\n        options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, Iso8601.MINIMUM_VALUE);\n        options.rotation = Property.getValueOrUndefined(rectangle.rotation, Iso8601.MINIMUM_VALUE);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(RectangleGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    RectangleGeometryUpdater.DynamicGeometryUpdater = DynamicRectangleGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicRectangleGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicRectangleGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicRectangleGeometryUpdater.prototype.constructor = DynamicRectangleGeometryUpdater;\n    }\n\n    DynamicRectangleGeometryUpdater.prototype._isHidden = function(entity, rectangle, time) {\n        return  !defined(this._options.rectangle) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, rectangle, time);\n    };\n\n    DynamicRectangleGeometryUpdater.prototype._setOptions = function(entity, rectangle, time) {\n        var options = this._options;\n        var heightValue = Property.getValueOrUndefined(rectangle.height, time);\n        var heightReferenceValue = Property.getValueOrDefault(rectangle.heightReference, time, HeightReference.NONE);\n        var extrudedHeightValue = Property.getValueOrUndefined(rectangle.extrudedHeight, time);\n        var extrudedHeightReferenceValue = Property.getValueOrDefault(rectangle.extrudedHeightReference, time, HeightReference.NONE);\n        if (defined(extrudedHeightValue) && !defined(heightValue)) {\n            heightValue = 0;\n        }\n\n        options.rectangle = Property.getValueOrUndefined(rectangle.coordinates, time, options.rectangle);\n        options.granularity = Property.getValueOrUndefined(rectangle.granularity, time);\n        options.stRotation = Property.getValueOrUndefined(rectangle.stRotation, time);\n        options.rotation = Property.getValueOrUndefined(rectangle.rotation, time);\n        options.offsetAttribute = GroundGeometryUpdater.computeGeometryOffsetAttribute(heightValue, heightReferenceValue, extrudedHeightValue, extrudedHeightReferenceValue);\n        options.height = GroundGeometryUpdater.getGeometryHeight(heightValue, heightReferenceValue);\n\n        extrudedHeightValue = GroundGeometryUpdater.getGeometryExtrudedHeight(extrudedHeightValue, extrudedHeightReferenceValue);\n        if (extrudedHeightValue === GroundGeometryUpdater.CLAMP_TO_GROUND) {\n            extrudedHeightValue = ApproximateTerrainHeights.getMinimumMaximumHeights(RectangleGeometry.computeRectangle(options, scratchRectangle)).minimumTerrainHeight;\n        }\n\n        options.extrudedHeight = extrudedHeightValue;\n    };\n\n    return RectangleGeometryUpdater;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/GroundPrimitive',\n        './BoundingSphereState',\n        './Property'\n    ], function(\n        AssociativeArray,\n        Color,\n        defined,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        GroundPrimitive,\n        BoundingSphereState,\n        Property) {\n    'use strict';\n\n    var colorScratch = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    function Batch(primitives, classificationType, color, key, zIndex) {\n        this.primitives = primitives;\n        this.zIndex = zIndex;\n        this.classificationType = classificationType;\n        this.color = color;\n        this.key = key;\n        this.createPrimitive = false;\n        this.waitingOnCreate = false;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.updaters = new AssociativeArray();\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.itemsToRemove = [];\n        this.isDirty = false;\n    }\n\n    Batch.prototype.add = function(updater, instance) {\n        var id = updater.id;\n        this.createPrimitive = true;\n        this.geometry.set(id, instance);\n        this.updaters.set(id, updater);\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    var scratchArray = new Array(4);\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var removedCount = 0;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometries = this.geometry.values;\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                primitive = new GroundPrimitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries,\n                    classificationType : this.classificationType\n                });\n                primitives.add(primitive, this.zIndex);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n            this.waitingOnCreate = true;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            var waitingOnCreate = this.waitingOnCreate;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n                    var colorProperty = updater.fillMaterialProperty.color;\n                    var fillColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n\n                    if (!Color.equals(attributes._lastColor, fillColor)) {\n                        attributes._lastColor = Color.clone(fillColor, attributes._lastColor);\n                        var color = this.color;\n                        var newColor = fillColor.toBytes(scratchArray);\n                        if (color[0] !== newColor[0] || color[1] !== newColor[1] ||\n                            color[2] !== newColor[2] || color[3] !== newColor[3]) {\n                           this.itemsToRemove[removedCount++] = updater;\n                        }\n                    }\n                }\n\n                var show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n            this.waitingOnCreate = false;\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        this.itemsToRemove.length = removedCount;\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = updater.entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n\n        var bs = primitive.getBoundingSphere(updater.entity);\n        if (!defined(bs)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        bs.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.removeAllPrimitives = function() {\n        var primitives = this.primitives;\n\n        var primitive = this.primitive;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n            this.primitive = undefined;\n            this.geometry.removeAll();\n            this.updaters.removeAll();\n        }\n\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n            this.oldPrimitive = undefined;\n        }\n    };\n\n    /**\n     * @private\n     */\n    function StaticGroundGeometryColorBatch(primitives, classificationType) {\n        this._batches = new AssociativeArray();\n        this._primitives = primitives;\n        this._classificationType = classificationType;\n    }\n\n    StaticGroundGeometryColorBatch.prototype.add = function(time, updater) {\n        var instance = updater.createFillGeometryInstance(time);\n        var batches = this._batches;\n        // color and zIndex are batch breakers, so we'll use that for the key\n        var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n        var batchKey = new Uint32Array(instance.attributes.color.value.buffer)[0] + ':' + zIndex;\n        var batch;\n        if (batches.contains(batchKey)) {\n            batch = batches.get(batchKey);\n        } else {\n            batch = new Batch(this._primitives, this._classificationType, instance.attributes.color.value, batchKey, zIndex);\n            batches.set(batchKey, batch);\n        }\n        batch.add(updater, instance);\n        return batch;\n    };\n\n    StaticGroundGeometryColorBatch.prototype.remove = function(updater) {\n        var batchesArray = this._batches.values;\n        var count = batchesArray.length;\n        for (var i = 0; i < count; ++i) {\n            if (batchesArray[i].remove(updater)) {\n                return;\n            }\n        }\n    };\n\n    StaticGroundGeometryColorBatch.prototype.update = function(time) {\n        var i;\n        var updater;\n\n        //Perform initial update\n        var isUpdated = true;\n        var batches = this._batches;\n        var batchesArray = batches.values;\n        var batchCount = batchesArray.length;\n        for (i = 0; i < batchCount; ++i) {\n            isUpdated = batchesArray[i].update(time) && isUpdated;\n        }\n\n        //If any items swapped between batches we need to move them\n        for (i = 0; i < batchCount; ++i) {\n            var oldBatch = batchesArray[i];\n            var itemsToRemove = oldBatch.itemsToRemove;\n            var itemsToMoveLength = itemsToRemove.length;\n            for (var j = 0; j < itemsToMoveLength; j++) {\n                updater = itemsToRemove[j];\n                oldBatch.remove(updater);\n                var newBatch = this.add(time, updater);\n                oldBatch.isDirty = true;\n                newBatch.isDirty = true;\n            }\n        }\n\n        //If we moved anything around, we need to re-build the primitive and remove empty batches\n        var batchesArrayCopy = batchesArray.slice();\n        var batchesCopyCount = batchesArrayCopy.length;\n        for (i = 0; i < batchesCopyCount; ++i) {\n            var batch = batchesArrayCopy[i];\n            if (batch.isDirty) {\n                isUpdated = batchesArrayCopy[i].update(time) && isUpdated;\n                batch.isDirty = false;\n            }\n            if (batch.geometry.length === 0) {\n                batches.remove(batch.key);\n            }\n        }\n\n        return isUpdated;\n    };\n\n    StaticGroundGeometryColorBatch.prototype.getBoundingSphere = function(updater, result) {\n        var batchesArray = this._batches.values;\n        var batchCount = batchesArray.length;\n        for (var i = 0; i < batchCount; ++i) {\n            var batch = batchesArray[i];\n            if (batch.contains(updater)) {\n                return batch.getBoundingSphere(updater, result);\n            }\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGroundGeometryColorBatch.prototype.removeAllPrimitives = function() {\n        var batchesArray = this._batches.values;\n        var batchCount = batchesArray.length;\n        for (var i = 0; i < batchCount; ++i) {\n            batchesArray[i].removeAllPrimitives();\n        }\n    };\n\n    return StaticGroundGeometryColorBatch;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Core/RectangleCollisionChecker',\n        '../Scene/ClassificationType',\n        '../Scene/GroundPrimitive',\n        '../Scene/ShadowVolumeAppearance',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        AssociativeArray,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        RectangleCollisionChecker,\n        ClassificationType,\n        GroundPrimitive,\n        ShadowVolumeAppearance,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    // Encapsulates a Primitive and all the entities that it represents.\n    function Batch(primitives, classificationType, appearanceType, materialProperty, usingSphericalTextureCoordinates, zIndex) {\n        this.primitives = primitives; // scene level primitive collection\n        this.classificationType = classificationType;\n        this.appearanceType = appearanceType;\n        this.materialProperty = materialProperty;\n        this.updaters = new AssociativeArray();\n        this.createPrimitive = true;\n        this.primitive = undefined; // a GroundPrimitive encapsulating all the entities\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.material = undefined;\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.invalidated = false;\n        this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.usingSphericalTextureCoordinates = usingSphericalTextureCoordinates;\n        this.zIndex = zIndex;\n        this.rectangleCollisionCheck = new RectangleCollisionChecker();\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    Batch.prototype.overlapping = function(rectangle) {\n        return this.rectangleCollisionCheck.collides(rectangle);\n    };\n\n    // Check if the given updater's material is compatible with this batch\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.materialProperty;\n        var updaterMaterial = updater.fillMaterialProperty;\n\n        if (updaterMaterial === material ||\n            (updaterMaterial instanceof ColorMaterialProperty && material instanceof ColorMaterialProperty)) {\n            return true;\n        }\n        return defined(material) && material.equals(updaterMaterial);\n    };\n\n    Batch.prototype.add = function(time, updater, geometryInstance) {\n        var id = updater.id;\n        this.updaters.set(id, updater);\n        this.geometry.set(id, geometryInstance);\n        this.rectangleCollisionCheck.insert(id, geometryInstance.geometry.rectangle);\n        // Updaters with dynamic attributes must be tracked separately, may exit the batch\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            // Listen for show changes. These will be synchronized in updateShows.\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n        this.createPrimitive = true;\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        var geometryInstance = this.geometry.get(id);\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.rectangleCollisionCheck.remove(id, geometryInstance.geometry.rectangle);\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var geometries = this.geometry.values;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        // For if the new primitive changes again before it is ready.\n                        primitives.remove(primitive);\n                    }\n                }\n\n                this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n\n                primitive = new GroundPrimitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries,\n                    appearance : new this.appearanceType({\n                        material : this.material\n                        // translucent and closed properties overridden\n                    }),\n                    classificationType : this.classificationType\n                });\n\n                primitives.add(primitive, this.zIndex);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n            this.primitive.appearance.material = this.material;\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var entity = updater.entity;\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var entity = updater.entity;\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n        }\n        this.removeMaterialSubscription();\n    };\n\n    /**\n     * @private\n     */\n    function StaticGroundGeometryPerMaterialBatch(primitives, classificationType, appearanceType) {\n        this._items = [];\n        this._primitives = primitives;\n        this._classificationType = classificationType;\n        this._appearanceType = appearanceType;\n    }\n\n    StaticGroundGeometryPerMaterialBatch.prototype.add = function(time, updater) {\n        var items = this._items;\n        var length = items.length;\n        var geometryInstance = updater.createFillGeometryInstance(time);\n        var usingSphericalTextureCoordinates = ShadowVolumeAppearance.shouldUseSphericalCoordinates(geometryInstance.geometry.rectangle);\n        var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n        // Check if the Entity represented by the updater can be placed in an existing batch. Requirements:\n        // * compatible material (same material or same color)\n        // * same type of texture coordinates (spherical vs. planar)\n        // * conservatively non-overlapping with any entities in the existing batch\n        for (var i = 0; i < length; ++i) {\n            var item = items[i];\n            if (item.isMaterial(updater) &&\n                item.usingSphericalTextureCoordinates === usingSphericalTextureCoordinates &&\n                item.zIndex === zIndex &&\n                !item.overlapping(geometryInstance.geometry.rectangle)) {\n                item.add(time, updater, geometryInstance);\n                return;\n            }\n        }\n        // If a compatible batch wasn't found, create a new batch.\n        var batch = new Batch(this._primitives, this._classificationType, this._appearanceType, updater.fillMaterialProperty, usingSphericalTextureCoordinates, zIndex);\n        batch.add(time, updater, geometryInstance);\n        items.push(batch);\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.remove = function(updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                break;\n            }\n        }\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.update = function(time) {\n        var i;\n        var items = this._items;\n        var length = items.length;\n\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    this.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        var isUpdated = true;\n        for (i = 0; i < items.length; i++) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.getBoundingSphere = function(updater, result) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGroundGeometryPerMaterialBatch.prototype.removeAllPrimitives = function() {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        this._items.length = 0;\n    };\n\n    return StaticGroundGeometryPerMaterialBatch;\n});\n","define([\n        '../ThirdParty/rbush',\n        './Check'\n    ], function(\n        rbush,\n        Check) {\n    'use strict';\n\n    /**\n     * Wrapper around rbush for use with Rectangle types.\n     * @private\n     */\n    function RectangleCollisionChecker() {\n        this._tree = rbush();\n    }\n\n    function RectangleWithId() {\n        this.minX = 0.0;\n        this.minY = 0.0;\n        this.maxX = 0.0;\n        this.maxY = 0.0;\n        this.id = '';\n    }\n\n    RectangleWithId.fromRectangleAndId = function(id, rectangle, result) {\n        result.minX = rectangle.west;\n        result.minY = rectangle.south;\n        result.maxX = rectangle.east;\n        result.maxY = rectangle.north;\n        result.id = id;\n        return result;\n    };\n\n    /**\n     * Insert a rectangle into the collision checker.\n     *\n     * @param {String} id Unique string ID for the rectangle being inserted.\n     * @param {Rectangle} rectangle A Rectangle\n     * @private\n     */\n    RectangleCollisionChecker.prototype.insert = function(id, rectangle) {\n        \n\n        var withId = RectangleWithId.fromRectangleAndId(id, rectangle, new RectangleWithId());\n        this._tree.insert(withId);\n    };\n\n    function idCompare(a, b) {\n        return a.id === b.id;\n    }\n\n    var removalScratch = new RectangleWithId();\n    /**\n     * Remove a rectangle from the collision checker.\n     *\n     * @param {String} id Unique string ID for the rectangle being removed.\n     * @param {Rectangle} rectangle A Rectangle\n     * @private\n     */\n    RectangleCollisionChecker.prototype.remove = function(id, rectangle) {\n        \n\n        var withId = RectangleWithId.fromRectangleAndId(id, rectangle, removalScratch);\n        this._tree.remove(withId, idCompare);\n    };\n\n    var collisionScratch = new RectangleWithId();\n    /**\n     * Checks if a given rectangle collides with any of the rectangles in the collection.\n     *\n     * @param {Rectangle} rectangle A Rectangle that should be checked against the rectangles in the collision checker.\n     * @returns {Boolean} Whether the rectangle collides with any of the rectangles in the collision checker.\n     */\n    RectangleCollisionChecker.prototype.collides = function(rectangle) {\n        \n\n        var withId = RectangleWithId.fromRectangleAndId('', rectangle, collisionScratch);\n        return this._tree.collides(withId);\n    };\n\n    return RectangleCollisionChecker;\n});\n","define(['./quickselect'], function(quickselect) {\n'use strict';\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from scratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n\nreturn rbush;\n});\n","define([], function() {\n'use strict';\n\nfunction quickselect(arr, k, left, right, compare) {\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\n};\n\nfunction quickselectStep(arr, k, left, right, compare) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselectStep(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n\nreturn quickselect;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/PerInstanceColorAppearance',\n        '../Scene/Primitive',\n        './BoundingSphereState',\n        './Property'\n    ], function(\n        AssociativeArray,\n        Cartesian3,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        OffsetGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        PerInstanceColorAppearance,\n        Primitive,\n        BoundingSphereState,\n        Property) {\n    'use strict';\n\n    var colorScratch = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n\n    function Batch(primitives, translucent, width, shadows) {\n        this.translucent = translucent;\n        this.width = width;\n        this.shadows = shadows;\n        this.primitives = primitives;\n        this.createPrimitive = false;\n        this.waitingOnCreate = false;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.updaters = new AssociativeArray();\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.itemsToRemove = [];\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n    }\n    Batch.prototype.add = function(updater, instance) {\n        var id = updater.id;\n        this.createPrimitive = true;\n        this.geometry.set(id, instance);\n        this.updaters.set(id, updater);\n        if (!updater.hasConstantOutline || !updater.outlineColorProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var removedCount = 0;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometries = this.geometry.values;\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                primitive = new Primitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries,\n                    appearance : new PerInstanceColorAppearance({\n                        flat : true,\n                        translucent : this.translucent,\n                        renderState : {\n                            lineWidth : this.width\n                        }\n                    }),\n                    shadows : this.shadows\n                });\n\n                primitives.add(primitive);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n            this.waitingOnCreate = true;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            var waitingOnCreate = this.waitingOnCreate;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.outlineColorProperty.isConstant || waitingOnCreate) {\n                    var outlineColorProperty = updater.outlineColorProperty;\n                    var outlineColor = Property.getValueOrDefault(outlineColorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastColor, outlineColor)) {\n                        attributes._lastColor = Color.clone(outlineColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(outlineColor, attributes.color);\n                        if ((this.translucent && attributes.color[3] === 255) || (!this.translucent && attributes.color[3] !== 255)) {\n                            this.itemsToRemove[removedCount++] = updater;\n                        }\n                    }\n                }\n\n                var show = updater.entity.isShowing && (updater.hasConstantOutline || updater.isOutlineVisible(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n\n                var offsetProperty = updater.terrainOffsetProperty;\n                if (!Property.isConstant(offsetProperty)) {\n                    var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n                    if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n                        attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n                        attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n            this.waitingOnCreate = false;\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n\n        this.itemsToRemove.length = removedCount;\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = updater.entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||//\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.removeAllPrimitives = function() {\n        var primitives = this.primitives;\n\n        var primitive = this.primitive;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n            this.primitive = undefined;\n            this.geometry.removeAll();\n            this.updaters.removeAll();\n        }\n\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n            this.oldPrimitive = undefined;\n        }\n    };\n\n    /**\n     * @private\n     */\n    function StaticOutlineGeometryBatch(primitives, scene, shadows) {\n        this._primitives = primitives;\n        this._scene = scene;\n        this._shadows = shadows;\n        this._solidBatches = new AssociativeArray();\n        this._translucentBatches = new AssociativeArray();\n    }\n    StaticOutlineGeometryBatch.prototype.add = function(time, updater) {\n        var instance = updater.createOutlineGeometryInstance(time);\n        var width = this._scene.clampLineWidth(updater.outlineWidth);\n        var batches;\n        var batch;\n        if (instance.attributes.color.value[3] === 255) {\n            batches = this._solidBatches;\n            batch = batches.get(width);\n            if (!defined(batch)) {\n                batch = new Batch(this._primitives, false, width, this._shadows);\n                batches.set(width, batch);\n            }\n            batch.add(updater, instance);\n        } else {\n            batches = this._translucentBatches;\n            batch = batches.get(width);\n            if (!defined(batch)) {\n                batch = new Batch(this._primitives, true, width, this._shadows);\n                batches.set(width, batch);\n            }\n            batch.add(updater, instance);\n        }\n    };\n\n    StaticOutlineGeometryBatch.prototype.remove = function(updater) {\n        var i;\n\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        for (i = 0; i < solidBatchesLength; i++) {\n            if (solidBatches[i].remove(updater)) {\n                return;\n            }\n        }\n\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        for (i = 0; i < translucentBatchesLength; i++) {\n            if (translucentBatches[i].remove(updater)) {\n                return;\n            }\n        }\n    };\n\n    StaticOutlineGeometryBatch.prototype.update = function(time) {\n        var i;\n        var x;\n        var updater;\n        var batch;\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        var itemsToRemove;\n        var isUpdated = true;\n        var needUpdate = false;\n\n        do {\n            needUpdate = false;\n            for (x = 0; x < solidBatchesLength; x++) {\n                batch = solidBatches[x];\n                //Perform initial update\n                isUpdated = batch.update(time);\n\n                //If any items swapped between solid/translucent, we need to\n                //move them between batches\n                itemsToRemove = batch.itemsToRemove;\n                var solidsToMoveLength = itemsToRemove.length;\n                if (solidsToMoveLength > 0) {\n                    needUpdate = true;\n                    for (i = 0; i < solidsToMoveLength; i++) {\n                        updater = itemsToRemove[i];\n                        batch.remove(updater);\n                        this.add(time, updater);\n                    }\n                }\n            }\n            for (x = 0; x < translucentBatchesLength; x++) {\n                batch = translucentBatches[x];\n                //Perform initial update\n                isUpdated = batch.update(time);\n\n                //If any items swapped between solid/translucent, we need to\n                //move them between batches\n                itemsToRemove = batch.itemsToRemove;\n                var translucentToMoveLength = itemsToRemove.length;\n                if (translucentToMoveLength > 0) {\n                    needUpdate = true;\n                    for (i = 0; i < translucentToMoveLength; i++) {\n                        updater = itemsToRemove[i];\n                        batch.remove(updater);\n                        this.add(time, updater);\n                    }\n                }\n            }\n        } while (needUpdate);\n\n        return isUpdated;\n    };\n\n    StaticOutlineGeometryBatch.prototype.getBoundingSphere = function(updater, result) {\n        var i;\n\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        for (i = 0; i < solidBatchesLength; i++) {\n            var solidBatch = solidBatches[i];\n            if (solidBatch.contains(updater)){\n                return solidBatch.getBoundingSphere(updater, result);\n            }\n        }\n\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        for (i = 0; i < translucentBatchesLength; i++) {\n            var translucentBatch = translucentBatches[i];\n            if (translucentBatch.contains(updater)){\n                return translucentBatch.getBoundingSphere(updater, result);\n            }\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticOutlineGeometryBatch.prototype.removeAllPrimitives = function() {\n        var i;\n\n        var solidBatches = this._solidBatches.values;\n        var solidBatchesLength = solidBatches.length;\n        for (i = 0; i < solidBatchesLength; i++) {\n            solidBatches[i].removeAllPrimitives();\n        }\n\n        var translucentBatches = this._translucentBatches.values;\n        var translucentBatchesLength = translucentBatches.length;\n        for (i = 0; i < translucentBatchesLength; i++) {\n            translucentBatches[i].removeAllPrimitives();\n        }\n    };\n\n    return StaticOutlineGeometryBatch;\n});\n","define([\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/GeometryInstance',\n        '../Core/Iso8601',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Core/WallGeometry',\n        '../Core/WallOutlineGeometry',\n        '../Scene/MaterialAppearance',\n        '../Scene/PerInstanceColorAppearance',\n        './ColorMaterialProperty',\n        './DynamicGeometryUpdater',\n        './GeometryUpdater',\n        './Property'\n    ], function(\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DeveloperError,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        GeometryInstance,\n        Iso8601,\n        ShowGeometryInstanceAttribute,\n        WallGeometry,\n        WallOutlineGeometry,\n        MaterialAppearance,\n        PerInstanceColorAppearance,\n        ColorMaterialProperty,\n        DynamicGeometryUpdater,\n        GeometryUpdater,\n        Property) {\n    'use strict';\n\n    var scratchColor = new Color();\n\n    function WallGeometryOptions(entity) {\n        this.id = entity;\n        this.vertexFormat = undefined;\n        this.positions = undefined;\n        this.minimumHeights = undefined;\n        this.maximumHeights = undefined;\n        this.granularity = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for walls.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias WallGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function WallGeometryUpdater(entity, scene) {\n        GeometryUpdater.call(this, {\n            entity : entity,\n            scene : scene,\n            geometryOptions : new WallGeometryOptions(entity),\n            geometryPropertyName : 'wall',\n            observedPropertyNames : ['availability', 'wall']\n        });\n\n        this._onEntityPropertyChanged(entity, 'wall', entity.wall, undefined);\n    }\n\n    if (defined(Object.create)) {\n        WallGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        WallGeometryUpdater.prototype.constructor = WallGeometryUpdater;\n    }\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    WallGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n\n        var attributes;\n\n        var color;\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._fillProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            var currentColor;\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute,\n                color : color\n            };\n        } else {\n            attributes = {\n                show : show,\n                distanceDisplayCondition : distanceDisplayConditionAttribute\n            };\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new WallGeometry(this._options),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    WallGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var outlineColor = Property.getValueOrDefault(this._outlineColorProperty, time, Color.BLACK, scratchColor);\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new WallOutlineGeometry(this._options),\n            attributes : {\n                show : new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time) && this._showOutlineProperty.getValue(time)),\n                color : ColorGeometryInstanceAttribute.fromColor(outlineColor),\n                distanceDisplayCondition : DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n            }\n        });\n    };\n\n    WallGeometryUpdater.prototype._isHidden = function(entity, wall) {\n        return !defined(wall.positions) || GeometryUpdater.prototype._isHidden.call(this, entity, wall);\n    };\n\n    WallGeometryUpdater.prototype._getIsClosed = function(options) {\n        return false;\n    };\n\n    WallGeometryUpdater.prototype._isDynamic = function(entity, wall) {\n        return !wall.positions.isConstant || //\n               !Property.isConstant(wall.minimumHeights) || //\n               !Property.isConstant(wall.maximumHeights) || //\n               !Property.isConstant(wall.outlineWidth) || //\n               !Property.isConstant(wall.granularity);\n    };\n\n    WallGeometryUpdater.prototype._setStaticOptions = function(entity, wall) {\n        var minimumHeights = wall.minimumHeights;\n        var maximumHeights = wall.maximumHeights;\n        var granularity = wall.granularity;\n        var isColorMaterial = this._materialProperty instanceof ColorMaterialProperty;\n\n        var options = this._options;\n        options.vertexFormat = isColorMaterial ? PerInstanceColorAppearance.VERTEX_FORMAT : MaterialAppearance.MaterialSupport.TEXTURED.vertexFormat;\n        options.positions = wall.positions.getValue(Iso8601.MINIMUM_VALUE, options.positions);\n        options.minimumHeights = defined(minimumHeights) ? minimumHeights.getValue(Iso8601.MINIMUM_VALUE, options.minimumHeights) : undefined;\n        options.maximumHeights = defined(maximumHeights) ? maximumHeights.getValue(Iso8601.MINIMUM_VALUE, options.maximumHeights) : undefined;\n        options.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n    };\n\n    WallGeometryUpdater.DynamicGeometryUpdater = DynamicWallGeometryUpdater;\n\n    /**\n     * @private\n     */\n    function DynamicWallGeometryUpdater(geometryUpdater, primitives, groundPrimitives) {\n        DynamicGeometryUpdater.call(this, geometryUpdater, primitives, groundPrimitives);\n    }\n\n    if (defined(Object.create)) {\n        DynamicWallGeometryUpdater.prototype = Object.create(DynamicGeometryUpdater.prototype);\n        DynamicWallGeometryUpdater.prototype.constructor = DynamicWallGeometryUpdater;\n    }\n\n    DynamicWallGeometryUpdater.prototype._isHidden = function(entity, wall, time) {\n        return  !defined(this._options.positions) || DynamicGeometryUpdater.prototype._isHidden.call(this, entity, wall, time);\n    };\n\n    DynamicWallGeometryUpdater.prototype._setOptions = function(entity, wall, time) {\n        var options = this._options;\n        options.positions = Property.getValueOrUndefined(wall.positions, time, options.positions);\n        options.minimumHeights = Property.getValueOrUndefined(wall.minimumHeights, time, options.minimumHeights);\n        options.maximumHeights = Property.getValueOrUndefined(wall.maximumHeights, time, options.maximumHeights);\n        options.granularity = Property.getValueOrUndefined(wall.granularity, time);\n    };\n\n    return WallGeometryUpdater;\n});\n","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './IndexDatatype',\n        './Math',\n        './PrimitiveType',\n        './VertexFormat',\n        './WallGeometryLibrary'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        IndexDatatype,\n        CesiumMath,\n        PrimitiveType,\n        VertexFormat,\n        WallGeometryLibrary) {\n    'use strict';\n\n    var scratchCartesian3Position1 = new Cartesian3();\n    var scratchCartesian3Position2 = new Cartesian3();\n    var scratchCartesian3Position3 = new Cartesian3();\n    var scratchCartesian3Position4 = new Cartesian3();\n    var scratchCartesian3Position5 = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n\n    /**\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @alias WallGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\n     *\n     * @see WallGeometry#createGeometry\n     * @see WallGeometry#fromConstantHeight\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\n     *\n     * @example\n     * // create a wall that spans from ground level to 10000 meters\n     * var wall = new Cesium.WallGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *     19.0, 47.0, 10000.0,\n     *     19.0, 48.0, 10000.0,\n     *     20.0, 48.0, 10000.0,\n     *     20.0, 47.0, 10000.0,\n     *     19.0, 47.0, 10000.0\n     *   ])\n     * });\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\n     */\n    function WallGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var wallPositions = options.positions;\n        var maximumHeights = options.maximumHeights;\n        var minimumHeights = options.minimumHeights;\n\n        \n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        this._positions = wallPositions;\n        this._minimumHeights = minimumHeights;\n        this._maximumHeights = maximumHeights;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._granularity = granularity;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._workerName = 'createWallGeometry';\n\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n        if (defined(minimumHeights)) {\n            numComponents += minimumHeights.length;\n        }\n        if (defined(maximumHeights)) {\n            numComponents += maximumHeights.length;\n        }\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {WallGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    WallGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var minimumHeights = value._minimumHeights;\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(minimumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = minimumHeights[i];\n            }\n        }\n\n        var maximumHeights = value._maximumHeights;\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(maximumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = maximumHeights[i];\n            }\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex] = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        minimumHeights : undefined,\n        maximumHeights : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {WallGeometry} [result] The object into which to store the result.\n     * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\n     */\n    WallGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var minimumHeights;\n\n        if (length > 0) {\n            minimumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                minimumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        length = array[startingIndex++];\n        var maximumHeights;\n\n        if (length > 0) {\n            maximumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                maximumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.minimumHeights = minimumHeights;\n            scratchOptions.maximumHeights = maximumHeights;\n            scratchOptions.granularity = granularity;\n            return new WallGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._minimumHeights = minimumHeights;\n        result._maximumHeights = maximumHeights;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    /**\n     * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @returns {WallGeometry}\n     *\n     *\n     * @example\n     * // create a wall that spans from 10000 meters to 20000 meters\n     * var wall = Cesium.WallGeometry.fromConstantHeights({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     19.0, 47.0,\n     *     19.0, 48.0,\n     *     20.0, 48.0,\n     *     20.0, 47.0,\n     *     19.0, 47.0,\n     *   ]),\n     *   minimumHeight : 20000.0,\n     *   maximumHeight : 10000.0\n     * });\n     * var geometry = Cesium.WallGeometry.createGeometry(wall);\n     *\n     * @see WallGeometry#createGeometry\n     */\n    WallGeometry.fromConstantHeights = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n\n        \n\n        var minHeights;\n        var maxHeights;\n\n        var min = options.minimumHeight;\n        var max = options.maximumHeight;\n\n        var doMin = defined(min);\n        var doMax = defined(max);\n        if (doMin || doMax) {\n            var length = positions.length;\n            minHeights = (doMin) ? new Array(length) : undefined;\n            maxHeights = (doMax) ? new Array(length) : undefined;\n\n            for (var i = 0; i < length; ++i) {\n                if (doMin) {\n                    minHeights[i] = min;\n                }\n\n                if (doMax) {\n                    maxHeights[i] = max;\n                }\n            }\n        }\n\n        var newOptions = {\n            positions : positions,\n            maximumHeights : maxHeights,\n            minimumHeights : minHeights,\n            ellipsoid : options.ellipsoid,\n            vertexFormat : options.vertexFormat\n        };\n        return new WallGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {WallGeometry} wallGeometry A description of the wall.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    WallGeometry.createGeometry = function(wallGeometry) {\n        var wallPositions = wallGeometry._positions;\n        var minimumHeights = wallGeometry._minimumHeights;\n        var maximumHeights = wallGeometry._maximumHeights;\n        var vertexFormat = wallGeometry._vertexFormat;\n        var granularity = wallGeometry._granularity;\n        var ellipsoid = wallGeometry._ellipsoid;\n\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, true);\n        if (!defined(pos)) {\n            return;\n        }\n\n        var bottomPositions = pos.bottomPositions;\n        var topPositions = pos.topPositions;\n        var numCorners = pos.numCorners;\n\n        var length = topPositions.length;\n        var size = length * 2;\n\n        var positions = vertexFormat.position ? new Float64Array(size) : undefined;\n        var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n        var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n        var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\n        var textureCoordinates = vertexFormat.st ? new Float32Array(size / 3 * 2) : undefined;\n\n        var positionIndex = 0;\n        var normalIndex = 0;\n        var bitangentIndex = 0;\n        var tangentIndex = 0;\n        var stIndex = 0;\n\n        // add lower and upper points one after the other, lower\n        // points being even and upper points being odd\n        var normal = scratchNormal;\n        var tangent = scratchTangent;\n        var bitangent = scratchBitangent;\n        var recomputeNormal = true;\n        length /= 3;\n        var i;\n        var s = 0;\n        var ds = 1/(length - wallPositions.length + 1);\n        for (i = 0; i < length; ++i) {\n            var i3 = i * 3;\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\n            if (vertexFormat.position) {\n                // insert the lower point\n                positions[positionIndex++] = bottomPosition.x;\n                positions[positionIndex++] = bottomPosition.y;\n                positions[positionIndex++] = bottomPosition.z;\n\n                // insert the upper point\n                positions[positionIndex++] = topPosition.x;\n                positions[positionIndex++] = topPosition.y;\n                positions[positionIndex++] = topPosition.z;\n            }\n\n            if (vertexFormat.st) {\n                textureCoordinates[stIndex++] = s;\n                textureCoordinates[stIndex++] = 0.0;\n\n                textureCoordinates[stIndex++] = s;\n                textureCoordinates[stIndex++] = 1.0;\n            }\n\n            if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n                var nextPosition;\n                var nextTop = Cartesian3.clone(Cartesian3.ZERO, scratchCartesian3Position5);\n                var groundPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position2), scratchCartesian3Position2);\n                if (i + 1 < length) {\n                    nextPosition = ellipsoid.scaleToGeodeticSurface(Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position3), scratchCartesian3Position3);\n                    nextTop = Cartesian3.fromArray(topPositions, i3 + 3, scratchCartesian3Position5);\n                }\n\n                if (recomputeNormal) {\n                    var scalednextPosition = Cartesian3.subtract(nextTop, topPosition, scratchCartesian3Position4);\n                    var scaledGroundPosition = Cartesian3.subtract(groundPosition, topPosition, scratchCartesian3Position1);\n                    normal = Cartesian3.normalize(Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal), normal);\n                    recomputeNormal = false;\n                }\n\n                if (Cartesian3.equalsEpsilon(nextPosition, groundPosition, CesiumMath.EPSILON10)) {\n                    recomputeNormal = true;\n                } else {\n                    s += ds;\n                    if (vertexFormat.tangent) {\n                        tangent = Cartesian3.normalize(Cartesian3.subtract(nextPosition, groundPosition, tangent), tangent);\n                    }\n                    if (vertexFormat.bitangent) {\n                        bitangent = Cartesian3.normalize(Cartesian3.cross(normal, tangent, bitangent), bitangent);\n                    }\n                }\n\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                }\n\n                if (vertexFormat.tangent) {\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n\n                    tangents[tangentIndex++] = tangent.x;\n                    tangents[tangentIndex++] = tangent.y;\n                    tangents[tangentIndex++] = tangent.z;\n                }\n\n                if (vertexFormat.bitangent) {\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n\n                    bitangents[bitangentIndex++] = bitangent.x;\n                    bitangents[bitangentIndex++] = bitangent.y;\n                    bitangents[bitangentIndex++] = bitangent.z;\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n        }\n\n        if (vertexFormat.normal) {\n            attributes.normal = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : normals\n            });\n        }\n\n        if (vertexFormat.tangent) {\n            attributes.tangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : tangents\n            });\n        }\n\n        if (vertexFormat.bitangent) {\n            attributes.bitangent = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 3,\n                values : bitangents\n            });\n        }\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : textureCoordinates\n            });\n        }\n\n        // prepare the side walls, two triangles for each wall\n        //\n        //    A (i+1)  B (i+3) E\n        //    +--------+-------+\n        //    |      / |      /|    triangles:  A C B\n        //    |     /  |     / |                B C D\n        //    |    /   |    /  |\n        //    |   /    |   /   |\n        //    |  /     |  /    |\n        //    | /      | /     |\n        //    +--------+-------+\n        //    C (i)    D (i+2) F\n        //\n\n        var numVertices = size / 3;\n        size -= 6 * (numCorners + 1);\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n        var edgeIndex = 0;\n        for (i = 0; i < numVertices - 2; i += 2) {\n            var LL = i;\n            var LR = i + 2;\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n                continue;\n            }\n            var UL = i + 1;\n            var UR = i + 3;\n\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = LR;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere.fromVertices(positions)\n        });\n    };\n\n    return WallGeometry;\n});\n","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './IndexDatatype',\n        './Math',\n        './PrimitiveType',\n        './WallGeometryLibrary'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        IndexDatatype,\n        CesiumMath,\n        PrimitiveType,\n        WallGeometryLibrary) {\n    'use strict';\n\n    var scratchCartesian3Position1 = new Cartesian3();\n    var scratchCartesian3Position2 = new Cartesian3();\n\n    /**\n     * A description of a wall outline. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @alias WallOutlineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n     * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     *\n     * @exception {DeveloperError} positions length must be greater than or equal to 2.\n     * @exception {DeveloperError} positions and maximumHeights must have the same length.\n     * @exception {DeveloperError} positions and minimumHeights must have the same length.\n     *\n     * @see WallGeometry#createGeometry\n     * @see WallGeometry#fromConstantHeight\n     *\n     * @example\n     * // create a wall outline that spans from ground level to 10000 meters\n     * var wall = new Cesium.WallOutlineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\n     *     19.0, 47.0, 10000.0,\n     *     19.0, 48.0, 10000.0,\n     *     20.0, 48.0, 10000.0,\n     *     20.0, 47.0, 10000.0,\n     *     19.0, 47.0, 10000.0\n     *   ])\n     * });\n     * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n     */\n    function WallOutlineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var wallPositions = options.positions;\n        var maximumHeights = options.maximumHeights;\n        var minimumHeights = options.minimumHeights;\n\n        \n\n        var granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n        this._positions = wallPositions;\n        this._minimumHeights = minimumHeights;\n        this._maximumHeights = maximumHeights;\n        this._granularity = granularity;\n        this._ellipsoid = Ellipsoid.clone(ellipsoid);\n        this._workerName = 'createWallOutlineGeometry';\n\n        var numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\n        if (defined(minimumHeights)) {\n            numComponents += minimumHeights.length;\n        }\n        if (defined(maximumHeights)) {\n            numComponents += maximumHeights.length;\n        }\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + 1;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {WallOutlineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    WallOutlineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var minimumHeights = value._minimumHeights;\n        length = defined(minimumHeights) ? minimumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(minimumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = minimumHeights[i];\n            }\n        }\n\n        var maximumHeights = value._maximumHeights;\n        length = defined(maximumHeights) ? maximumHeights.length : 0;\n        array[startingIndex++] = length;\n\n        if (defined(maximumHeights)) {\n            for (i = 0; i < length; ++i) {\n                array[startingIndex++] = maximumHeights[i];\n            }\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchOptions = {\n        positions : undefined,\n        minimumHeights : undefined,\n        maximumHeights : undefined,\n        ellipsoid : scratchEllipsoid,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {WallOutlineGeometry} [result] The object into which to store the result.\n     * @returns {WallOutlineGeometry} The modified result parameter or a new WallOutlineGeometry instance if one was not provided.\n     */\n    WallOutlineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var minimumHeights;\n\n        if (length > 0) {\n            minimumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                minimumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        length = array[startingIndex++];\n        var maximumHeights;\n\n        if (length > 0) {\n            maximumHeights = new Array(length);\n            for (i = 0; i < length; ++i) {\n                maximumHeights[i] = array[startingIndex++];\n            }\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.minimumHeights = minimumHeights;\n            scratchOptions.maximumHeights = maximumHeights;\n            scratchOptions.granularity = granularity;\n            return new WallOutlineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._minimumHeights = minimumHeights;\n        result._maximumHeights = maximumHeights;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    /**\n     * A description of a walloutline. A wall is defined by a series of points,\n     * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\n     * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\n     *        wall at <code>positions</code>. If undefined, the height of each position in used.\n     * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\n     *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\n     * @returns {WallOutlineGeometry}\n     *\n     *\n     * @example\n     * // create a wall that spans from 10000 meters to 20000 meters\n     * var wall = Cesium.WallOutlineGeometry.fromConstantHeights({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     19.0, 47.0,\n     *     19.0, 48.0,\n     *     20.0, 48.0,\n     *     20.0, 47.0,\n     *     19.0, 47.0,\n     *   ]),\n     *   minimumHeight : 20000.0,\n     *   maximumHeight : 10000.0\n     * });\n     * var geometry = Cesium.WallOutlineGeometry.createGeometry(wall);\n     *\n     * @see WallOutlineGeometry#createGeometry\n     */\n    WallOutlineGeometry.fromConstantHeights = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n\n        \n\n        var minHeights;\n        var maxHeights;\n\n        var min = options.minimumHeight;\n        var max = options.maximumHeight;\n\n        var doMin = defined(min);\n        var doMax = defined(max);\n        if (doMin || doMax) {\n            var length = positions.length;\n            minHeights = (doMin) ? new Array(length) : undefined;\n            maxHeights = (doMax) ? new Array(length) : undefined;\n\n            for (var i = 0; i < length; ++i) {\n                if (doMin) {\n                    minHeights[i] = min;\n                }\n\n                if (doMax) {\n                    maxHeights[i] = max;\n                }\n            }\n        }\n\n        var newOptions = {\n            positions : positions,\n            maximumHeights : maxHeights,\n            minimumHeights : minHeights,\n            ellipsoid : options.ellipsoid\n        };\n        return new WallOutlineGeometry(newOptions);\n    };\n\n    /**\n     * Computes the geometric representation of a wall outline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {WallOutlineGeometry} wallGeometry A description of the wall outline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    WallOutlineGeometry.createGeometry = function(wallGeometry) {\n        var wallPositions = wallGeometry._positions;\n        var minimumHeights = wallGeometry._minimumHeights;\n        var maximumHeights = wallGeometry._maximumHeights;\n        var granularity = wallGeometry._granularity;\n        var ellipsoid = wallGeometry._ellipsoid;\n\n        var pos = WallGeometryLibrary.computePositions(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, false);\n        if (!defined(pos)) {\n            return;\n        }\n\n        var bottomPositions = pos.bottomPositions;\n        var topPositions = pos.topPositions;\n\n        var length = topPositions.length;\n        var size = length * 2;\n\n        var positions = new Float64Array(size);\n        var positionIndex = 0;\n\n        // add lower and upper points one after the other, lower\n        // points being even and upper points being odd\n        length /= 3;\n        var i;\n        for (i = 0; i < length; ++i) {\n            var i3 = i * 3;\n            var topPosition = Cartesian3.fromArray(topPositions, i3, scratchCartesian3Position1);\n            var bottomPosition = Cartesian3.fromArray(bottomPositions, i3, scratchCartesian3Position2);\n\n            // insert the lower point\n            positions[positionIndex++] = bottomPosition.x;\n            positions[positionIndex++] = bottomPosition.y;\n            positions[positionIndex++] = bottomPosition.z;\n\n            // insert the upper point\n            positions[positionIndex++] = topPosition.x;\n            positions[positionIndex++] = topPosition.y;\n            positions[positionIndex++] = topPosition.z;\n        }\n\n        var attributes = new GeometryAttributes({\n            position : new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            })\n        });\n\n        var numVertices = size / 3;\n        size = 2 * numVertices - 4 + numVertices;\n        var indices = IndexDatatype.createTypedArray(numVertices, size);\n\n        var edgeIndex = 0;\n        for (i = 0; i < numVertices - 2; i += 2) {\n            var LL = i;\n            var LR = i + 2;\n            var pl = Cartesian3.fromArray(positions, LL * 3, scratchCartesian3Position1);\n            var pr = Cartesian3.fromArray(positions, LR * 3, scratchCartesian3Position2);\n            if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\n                continue;\n            }\n            var UL = i + 1;\n            var UR = i + 3;\n\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = UL;\n            indices[edgeIndex++] = UR;\n            indices[edgeIndex++] = LL;\n            indices[edgeIndex++] = LR;\n        }\n\n        indices[edgeIndex++] = numVertices - 2;\n        indices[edgeIndex++] = numVertices - 1;\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.LINES,\n            boundingSphere : new BoundingSphere.fromVertices(positions)\n        });\n    };\n\n    return WallOutlineGeometry;\n});\n","define([\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Scene/Material'\n    ], function(\n        Color,\n        defined,\n        defineProperties,\n        DeveloperError,\n        Material) {\n    'use strict';\n\n    /**\n     * The interface for all {@link Property} objects that represent {@link Material} uniforms.\n     * This type defines an interface and cannot be instantiated directly.\n     *\n     * @alias MaterialProperty\n     * @constructor\n     *\n     * @see ColorMaterialProperty\n     * @see CompositeMaterialProperty\n     * @see GridMaterialProperty\n     * @see ImageMaterialProperty\n     * @see PolylineGlowMaterialProperty\n     * @see PolylineOutlineMaterialProperty\n     * @see StripeMaterialProperty\n     */\n    function MaterialProperty() {\n        DeveloperError.throwInstantiationError();\n    }\n\n    defineProperties(MaterialProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.  A property is considered\n         * constant if getValue always returns the same result for the current definition.\n         * @memberof MaterialProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : DeveloperError.throwInstantiationError\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is considered to have changed if a call to getValue would return\n         * a different result for the same time.\n         * @memberof MaterialProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : DeveloperError.throwInstantiationError\n        }\n    });\n\n    /**\n     * Gets the {@link Material} type at the provided time.\n     * @function\n     *\n     * @param {JulianDate} time The time for which to retrieve the type.\n     * @returns {String} The type of material.\n     */\n    MaterialProperty.prototype.getType = DeveloperError.throwInstantiationError;\n\n    /**\n     * Gets the value of the property at the provided time.\n     * @function\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    MaterialProperty.prototype.getValue = DeveloperError.throwInstantiationError;\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     * @function\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    MaterialProperty.prototype.equals = DeveloperError.throwInstantiationError;\n\n    /**\n     * @private\n     */\n    MaterialProperty.getValue = function(time, materialProperty, material) {\n        var type;\n\n        if (defined(materialProperty)) {\n            type = materialProperty.getType(time);\n            if (defined(type)) {\n                if (!defined(material) || (material.type !== type)) {\n                    material = Material.fromType(type);\n                }\n                materialProperty.getValue(time, material.uniforms);\n                return material;\n            }\n        }\n\n        if (!defined(material) || (material.type !== Material.ColorType)) {\n            material = Material.fromType(Material.ColorType);\n        }\n        Color.clone(Color.WHITE, material.uniforms.color);\n\n        return material;\n    };\n\n    return MaterialProperty;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayCondition',\n        '../Core/NearFarScalar',\n        '../Scene/HeightReference',\n        '../Scene/HorizontalOrigin',\n        '../Scene/LabelStyle',\n        '../Scene/VerticalOrigin',\n        './BoundingSphereState',\n        './Property'\n    ], function(\n        AssociativeArray,\n        Cartesian2,\n        Cartesian3,\n        Color,\n        defaultValue,\n        defined,\n        destroyObject,\n        DeveloperError,\n        DistanceDisplayCondition,\n        NearFarScalar,\n        HeightReference,\n        HorizontalOrigin,\n        LabelStyle,\n        VerticalOrigin,\n        BoundingSphereState,\n        Property) {\n    'use strict';\n\n    var defaultScale = 1.0;\n    var defaultFont = '30px sans-serif';\n    var defaultStyle = LabelStyle.FILL;\n    var defaultFillColor = Color.WHITE;\n    var defaultOutlineColor = Color.BLACK;\n    var defaultOutlineWidth = 1.0;\n    var defaultShowBackground = false;\n    var defaultBackgroundColor = new Color(0.165, 0.165, 0.165, 0.8);\n    var defaultBackgroundPadding = new Cartesian2(7, 5);\n    var defaultPixelOffset = Cartesian2.ZERO;\n    var defaultEyeOffset = Cartesian3.ZERO;\n    var defaultHeightReference = HeightReference.NONE;\n    var defaultHorizontalOrigin = HorizontalOrigin.CENTER;\n    var defaultVerticalOrigin = VerticalOrigin.CENTER;\n\n    var positionScratch = new Cartesian3();\n    var fillColorScratch = new Color();\n    var outlineColorScratch = new Color();\n    var backgroundColorScratch = new Color();\n    var backgroundPaddingScratch = new Cartesian2();\n    var eyeOffsetScratch = new Cartesian3();\n    var pixelOffsetScratch = new Cartesian2();\n    var translucencyByDistanceScratch = new NearFarScalar();\n    var pixelOffsetScaleByDistanceScratch = new NearFarScalar();\n    var scaleByDistanceScratch = new NearFarScalar();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.label = undefined;\n        this.index = undefined;\n    }\n\n    /**\n     * A {@link Visualizer} which maps the {@link LabelGraphics} instance\n     * in {@link Entity#label} to a {@link Label}.\n     * @alias LabelVisualizer\n     * @constructor\n     *\n     * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function LabelVisualizer(entityCluster, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(LabelVisualizer.prototype._onCollectionChanged, this);\n\n        this._cluster = entityCluster;\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    LabelVisualizer.prototype.update = function(time) {\n        \n\n        var items = this._items.values;\n        var cluster = this._cluster;\n\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var labelGraphics = entity._label;\n            var text;\n            var label = item.label;\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(labelGraphics._show, time, true);\n            var position;\n            if (show) {\n                position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n                text = Property.getValueOrUndefined(labelGraphics._text, time);\n                show = defined(position) && defined(text);\n            }\n\n            if (!show) {\n                //don't bother creating or updating anything else\n                returnPrimitive(item, entity, cluster);\n                continue;\n            }\n\n            if (!Property.isConstant(entity._position)) {\n                cluster._clusterDirty = true;\n            }\n\n            var updateClamping = false;\n            var heightReference = Property.getValueOrDefault(labelGraphics._heightReference, time, defaultHeightReference);\n\n            if (!defined(label)) {\n                label = cluster.getLabel(entity);\n                label.id = entity;\n                item.label = label;\n\n                // If this new label happens to have a position and height reference that match our new values,\n                // label._updateClamping will not be called automatically. That's a problem because the clamped\n                // height may be based on different terrain than is now loaded. So we'll manually call\n                // _updateClamping below.\n                updateClamping = Cartesian3.equals(label.position, position) && label.heightReference === heightReference;\n            }\n\n            label.show = true;\n            label.position = position;\n            label.text = text;\n            label.scale = Property.getValueOrDefault(labelGraphics._scale, time, defaultScale);\n            label.font = Property.getValueOrDefault(labelGraphics._font, time, defaultFont);\n            label.style = Property.getValueOrDefault(labelGraphics._style, time, defaultStyle);\n            label.fillColor = Property.getValueOrDefault(labelGraphics._fillColor, time, defaultFillColor, fillColorScratch);\n            label.outlineColor = Property.getValueOrDefault(labelGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n            label.outlineWidth = Property.getValueOrDefault(labelGraphics._outlineWidth, time, defaultOutlineWidth);\n            label.showBackground = Property.getValueOrDefault(labelGraphics._showBackground, time, defaultShowBackground);\n            label.backgroundColor = Property.getValueOrDefault(labelGraphics._backgroundColor, time, defaultBackgroundColor, backgroundColorScratch);\n            label.backgroundPadding = Property.getValueOrDefault(labelGraphics._backgroundPadding, time, defaultBackgroundPadding, backgroundPaddingScratch);\n            label.pixelOffset = Property.getValueOrDefault(labelGraphics._pixelOffset, time, defaultPixelOffset, pixelOffsetScratch);\n            label.eyeOffset = Property.getValueOrDefault(labelGraphics._eyeOffset, time, defaultEyeOffset, eyeOffsetScratch);\n            label.heightReference = heightReference;\n            label.horizontalOrigin = Property.getValueOrDefault(labelGraphics._horizontalOrigin, time, defaultHorizontalOrigin);\n            label.verticalOrigin = Property.getValueOrDefault(labelGraphics._verticalOrigin, time, defaultVerticalOrigin);\n            label.translucencyByDistance = Property.getValueOrUndefined(labelGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n            label.pixelOffsetScaleByDistance = Property.getValueOrUndefined(labelGraphics._pixelOffsetScaleByDistance, time, pixelOffsetScaleByDistanceScratch);\n            label.scaleByDistance = Property.getValueOrUndefined(labelGraphics._scaleByDistance, time, scaleByDistanceScratch);\n            label.distanceDisplayCondition = Property.getValueOrUndefined(labelGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n            label.disableDepthTestDistance = Property.getValueOrUndefined(labelGraphics._disableDepthTestDistance, time);\n\n            if (updateClamping) {\n                label._updateClamping();\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    LabelVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var item = this._items.get(entity.id);\n        if (!defined(item) || !defined(item.label)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var label = item.label;\n        result.center = Cartesian3.clone(defaultValue(label._clampedPosition, label.position), result.center);\n        result.radius = 0;\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    LabelVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    LabelVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(LabelVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entityCollection.values;\n        for (var i = 0; i < entities.length; i++) {\n            this._cluster.removeLabel(entities[i]);\n        }\n        return destroyObject(this);\n    };\n\n    LabelVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var items = this._items;\n        var cluster = this._cluster;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._label) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._label) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                returnPrimitive(items.get(entity.id), entity, cluster);\n                items.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            returnPrimitive(items.get(entity.id), entity, cluster);\n            items.remove(entity.id);\n        }\n    };\n\n    function returnPrimitive(item, entity, cluster) {\n        if (defined(item)) {\n            item.label = undefined;\n            cluster.removeLabel(entity);\n        }\n    }\n\n    return LabelVisualizer;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/BoundingSphere',\n        '../Core/Cartesian2',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Matrix4',\n        '../Core/Resource',\n        '../Scene/Axis',\n        '../Scene/ColorBlendMode',\n        '../Scene/HeightReference',\n        '../Scene/Model',\n        '../Scene/ModelAnimationLoop',\n        '../Scene/ShadowMode',\n        './BoundingSphereState',\n        './Property'\n    ], function(\n        AssociativeArray,\n        BoundingSphere,\n        Cartesian2,\n        Color,\n        defined,\n        destroyObject,\n        DeveloperError,\n        Matrix4,\n        Resource,\n        Axis,\n        ColorBlendMode,\n        HeightReference,\n        Model,\n        ModelAnimationLoop,\n        ShadowMode,\n        BoundingSphereState,\n        Property) {\n    'use strict';\n\n    var defaultScale = 1.0;\n    var defaultMinimumPixelSize = 0.0;\n    var defaultIncrementallyLoadTextures = true;\n    var defaultClampAnimations = true;\n    var defaultShadows = ShadowMode.ENABLED;\n    var defaultHeightReference = HeightReference.NONE;\n    var defaultSilhouetteColor = Color.RED;\n    var defaultSilhouetteSize = 0.0;\n    var defaultColor = Color.WHITE;\n    var defaultColorBlendMode = ColorBlendMode.HIGHLIGHT;\n    var defaultColorBlendAmount = 0.5;\n    var defaultImageBasedLightingFactor = new Cartesian2(1.0, 1.0);\n    var defaultUpAxis = Axis.Y;\n\n    var modelMatrixScratch = new Matrix4();\n    var nodeMatrixScratch = new Matrix4();\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#model} to a {@link Model}.\n     * @alias ModelVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function ModelVisualizer(scene, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(ModelVisualizer.prototype._onCollectionChanged, this);\n\n        this._scene = scene;\n        this._primitives = scene.primitives;\n        this._entityCollection = entityCollection;\n        this._modelHash = {};\n        this._entitiesToVisualize = new AssociativeArray();\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates models created this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    ModelVisualizer.prototype.update = function(time) {\n        \n\n        var entities = this._entitiesToVisualize.values;\n        var modelHash = this._modelHash;\n        var primitives = this._primitives;\n\n        for (var i = 0, len = entities.length; i < len; i++) {\n            var entity = entities[i];\n            var modelGraphics = entity._model;\n\n            var resource;\n            var modelData = modelHash[entity.id];\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(modelGraphics._show, time, true);\n\n            var modelMatrix;\n            if (show) {\n                modelMatrix = entity.computeModelMatrix(time, modelMatrixScratch);\n                resource = Resource.createIfNeeded(Property.getValueOrUndefined(modelGraphics._uri, time));\n                show = defined(modelMatrix) && defined(resource);\n            }\n\n            if (!show) {\n                if (defined(modelData)) {\n                    modelData.modelPrimitive.show = false;\n                }\n                continue;\n            }\n\n            var model = defined(modelData) ? modelData.modelPrimitive : undefined;\n            if (!defined(model) || resource.url !== modelData.url) {\n                if (defined(model)) {\n                    primitives.removeAndDestroy(model);\n                    delete modelHash[entity.id];\n                }\n                model = Model.fromGltf({\n                    url : resource,\n                    incrementallyLoadTextures : Property.getValueOrDefault(modelGraphics._incrementallyLoadTextures, time, defaultIncrementallyLoadTextures),\n                    scene : this._scene\n                });\n                model.id = entity;\n                primitives.add(model);\n\n                modelData = {\n                    modelPrimitive : model,\n                    url : resource.url,\n                    animationsRunning : false,\n                    nodeTransformationsScratch : {},\n                    articulationsScratch : {},\n                    loadFail : false\n                };\n                modelHash[entity.id] = modelData;\n\n                checkModelLoad(model, entity, modelHash);\n            }\n\n            model.show = true;\n            model.scale = Property.getValueOrDefault(modelGraphics._scale, time, defaultScale);\n            model.minimumPixelSize = Property.getValueOrDefault(modelGraphics._minimumPixelSize, time, defaultMinimumPixelSize);\n            model.maximumScale = Property.getValueOrUndefined(modelGraphics._maximumScale, time);\n            model.modelMatrix = Matrix4.clone(modelMatrix, model.modelMatrix);\n            model.shadows = Property.getValueOrDefault(modelGraphics._shadows, time, defaultShadows);\n            model.heightReference = Property.getValueOrDefault(modelGraphics._heightReference, time, defaultHeightReference);\n            model.distanceDisplayCondition = Property.getValueOrUndefined(modelGraphics._distanceDisplayCondition, time);\n            model.silhouetteColor = Property.getValueOrDefault(modelGraphics._silhouetteColor, time, defaultSilhouetteColor, model._silhouetteColor);\n            model.silhouetteSize = Property.getValueOrDefault(modelGraphics._silhouetteSize, time, defaultSilhouetteSize);\n            model.color = Property.getValueOrDefault(modelGraphics._color, time, defaultColor, model._color);\n            model.colorBlendMode = Property.getValueOrDefault(modelGraphics._colorBlendMode, time, defaultColorBlendMode);\n            model.colorBlendAmount = Property.getValueOrDefault(modelGraphics._colorBlendAmount, time, defaultColorBlendAmount);\n            model.clippingPlanes = Property.getValueOrUndefined(modelGraphics._clippingPlanes, time);\n            model.clampAnimations = Property.getValueOrDefault(modelGraphics._clampAnimations, time, defaultClampAnimations);\n            model.imageBasedLightingFactor = Property.getValueOrDefault(modelGraphics._imageBasedLightingFactor, time, defaultImageBasedLightingFactor);\n            model.lightColor = Property.getValueOrUndefined(modelGraphics._lightColor, time);\n            model._upAxis = Property.getValueOrDefault(modelGraphics._upAxis, time, defaultUpAxis);\n            model._forwardAxis = Property.getValueOrUndefined(modelGraphics._forwardAxis, time);\n\n            if (model.ready) {\n                var runAnimations = Property.getValueOrDefault(modelGraphics._runAnimations, time, true);\n                if (modelData.animationsRunning !== runAnimations) {\n                    if (runAnimations) {\n                        model.activeAnimations.addAll({\n                            loop : ModelAnimationLoop.REPEAT\n                        });\n                    } else {\n                        model.activeAnimations.removeAll();\n                    }\n                    modelData.animationsRunning = runAnimations;\n                }\n\n                // Apply node transformations\n                var nodeTransformations = Property.getValueOrUndefined(modelGraphics._nodeTransformations, time, modelData.nodeTransformationsScratch);\n                if (defined(nodeTransformations)) {\n                    var nodeNames = Object.keys(nodeTransformations);\n                    for (var nodeIndex = 0, nodeLength = nodeNames.length; nodeIndex < nodeLength; ++nodeIndex) {\n                        var nodeName = nodeNames[nodeIndex];\n\n                        var nodeTransformation = nodeTransformations[nodeName];\n                        if (!defined(nodeTransformation)) {\n                            continue;\n                        }\n\n                        var modelNode = model.getNode(nodeName);\n                        if (!defined(modelNode)) {\n                            continue;\n                        }\n\n                        var transformationMatrix = Matrix4.fromTranslationRotationScale(nodeTransformation, nodeMatrixScratch);\n                        modelNode.matrix = Matrix4.multiply(modelNode.originalMatrix, transformationMatrix, transformationMatrix);\n                    }\n                }\n\n                // Apply articulations\n                var anyArticulationUpdated = false;\n                var articulations = Property.getValueOrUndefined(modelGraphics._articulations, time, modelData.articulationsScratch);\n                if (defined(articulations)) {\n                    var articulationStageKeys = Object.keys(articulations);\n                    for (var s = 0, numKeys = articulationStageKeys.length; s < numKeys; ++s) {\n                        var key = articulationStageKeys[s];\n\n                        var articulationStageValue = articulations[key];\n                        if (!defined(articulationStageValue)) {\n                            continue;\n                        }\n\n                        anyArticulationUpdated = true;\n                        model.setArticulationStage(key, articulationStageValue);\n                    }\n                }\n\n                if (anyArticulationUpdated) {\n                    model.applyArticulations();\n                }\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    ModelVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    ModelVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(ModelVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entitiesToVisualize.values;\n        var modelHash = this._modelHash;\n        var primitives = this._primitives;\n        for (var i = entities.length - 1; i > -1; i--) {\n            removeModel(this, entities[i], modelHash, primitives);\n        }\n        return destroyObject(this);\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    ModelVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var modelData = this._modelHash[entity.id];\n        if (!defined(modelData) || modelData.loadFail) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var model = modelData.modelPrimitive;\n        if (!defined(model) || !model.show) {\n            return BoundingSphereState.FAILED;\n        }\n\n        if (!model.ready) {\n            return BoundingSphereState.PENDING;\n        }\n\n        if (model.heightReference === HeightReference.NONE) {\n            BoundingSphere.transform(model.boundingSphere, model.modelMatrix, result);\n        } else {\n            if (!defined(model._clampedModelMatrix) || model._heightChanged) {\n                return BoundingSphereState.PENDING;\n            }\n            BoundingSphere.transform(model.boundingSphere, model._clampedModelMatrix, result);\n        }\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * @private\n     */\n    ModelVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var entities = this._entitiesToVisualize;\n        var modelHash = this._modelHash;\n        var primitives = this._primitives;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._model) && defined(entity._position)) {\n                entities.set(entity.id, entity);\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._model) && defined(entity._position)) {\n                clearNodeTransformationsArticulationsScratch(entity, modelHash);\n                entities.set(entity.id, entity);\n            } else {\n                removeModel(this, entity, modelHash, primitives);\n                entities.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            removeModel(this, entity, modelHash, primitives);\n            entities.remove(entity.id);\n        }\n    };\n\n    function removeModel(visualizer, entity, modelHash, primitives) {\n        var modelData = modelHash[entity.id];\n        if (defined(modelData)) {\n            primitives.removeAndDestroy(modelData.modelPrimitive);\n            delete modelHash[entity.id];\n        }\n    }\n\n    function clearNodeTransformationsArticulationsScratch(entity, modelHash) {\n        var modelData = modelHash[entity.id];\n        if (defined(modelData)) {\n            modelData.nodeTransformationsScratch = {};\n            modelData.articulationsScratch = {};\n        }\n    }\n\n    function checkModelLoad(model, entity, modelHash){\n        model.readyPromise.otherwise(function(error){\n            console.error(error);\n            modelHash[entity.id].loadFail = true;\n        });\n    }\n\n    return ModelVisualizer;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Cartesian3',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/JulianDate',\n        '../Core/Matrix3',\n        '../Core/Matrix4',\n        '../Core/ReferenceFrame',\n        '../Core/TimeInterval',\n        '../Core/Transforms',\n        '../Scene/PolylineCollection',\n        '../Scene/SceneMode',\n        './CompositePositionProperty',\n        './ConstantPositionProperty',\n        './MaterialProperty',\n        './Property',\n        './ReferenceProperty',\n        './SampledPositionProperty',\n        './ScaledPositionProperty',\n        './TimeIntervalCollectionPositionProperty'\n    ], function(\n        AssociativeArray,\n        Cartesian3,\n        defined,\n        destroyObject,\n        DeveloperError,\n        JulianDate,\n        Matrix3,\n        Matrix4,\n        ReferenceFrame,\n        TimeInterval,\n        Transforms,\n        PolylineCollection,\n        SceneMode,\n        CompositePositionProperty,\n        ConstantPositionProperty,\n        MaterialProperty,\n        Property,\n        ReferenceProperty,\n        SampledPositionProperty,\n        ScaledPositionProperty,\n        TimeIntervalCollectionPositionProperty) {\n    'use strict';\n\n    var defaultResolution = 60.0;\n    var defaultWidth = 1.0;\n\n    var scratchTimeInterval = new TimeInterval();\n    var subSampleCompositePropertyScratch = new TimeInterval();\n    var subSampleIntervalPropertyScratch = new TimeInterval();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.polyline = undefined;\n        this.index = undefined;\n        this.updater = undefined;\n    }\n\n    function subSampleSampledProperty(property, start, stop, times, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        var r = startingIndex;\n        //Always step exactly on start (but only use it if it exists.)\n        var tmp;\n        tmp = property.getValueInReferenceFrame(start, referenceFrame, result[r]);\n        if (defined(tmp)) {\n            result[r++] = tmp;\n        }\n\n        var steppedOnNow = !defined(updateTime) || JulianDate.lessThanOrEquals(updateTime, start) || JulianDate.greaterThanOrEquals(updateTime, stop);\n\n        //Iterate over all interval times and add the ones that fall in our\n        //time range.  Note that times can contain data outside of\n        //the intervals range.  This is by design for use with interpolation.\n        var t = 0;\n        var len = times.length;\n        var current = times[t];\n        var loopStop = stop;\n        var sampling = false;\n        var sampleStepsToTake;\n        var sampleStepsTaken;\n        var sampleStepSize;\n\n        while (t < len) {\n            if (!steppedOnNow && JulianDate.greaterThanOrEquals(current, updateTime)) {\n                tmp = property.getValueInReferenceFrame(updateTime, referenceFrame, result[r]);\n                if (defined(tmp)) {\n                    result[r++] = tmp;\n                }\n                steppedOnNow = true;\n            }\n            if (JulianDate.greaterThan(current, start) && JulianDate.lessThan(current, loopStop) && !current.equals(updateTime)) {\n                tmp = property.getValueInReferenceFrame(current, referenceFrame, result[r]);\n                if (defined(tmp)) {\n                    result[r++] = tmp;\n                }\n            }\n\n            if (t < (len - 1)) {\n                if (maximumStep > 0 && !sampling) {\n                    var next = times[t + 1];\n                    var secondsUntilNext = JulianDate.secondsDifference(next, current);\n                    sampling = secondsUntilNext > maximumStep;\n\n                    if (sampling) {\n                        sampleStepsToTake = Math.ceil(secondsUntilNext / maximumStep);\n                        sampleStepsTaken = 0;\n                        sampleStepSize = secondsUntilNext / Math.max(sampleStepsToTake, 2);\n                        sampleStepsToTake = Math.max(sampleStepsToTake - 1, 1);\n                    }\n                }\n\n                if (sampling && sampleStepsTaken < sampleStepsToTake) {\n                    current = JulianDate.addSeconds(current, sampleStepSize, new JulianDate());\n                    sampleStepsTaken++;\n                    continue;\n                }\n            }\n            sampling = false;\n            t++;\n            current = times[t];\n        }\n\n        //Always step exactly on stop (but only use it if it exists.)\n        tmp = property.getValueInReferenceFrame(stop, referenceFrame, result[r]);\n        if (defined(tmp)) {\n            result[r++] = tmp;\n        }\n\n        return r;\n    }\n\n    function subSampleGenericProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        var tmp;\n        var i = 0;\n        var index = startingIndex;\n        var time = start;\n        var stepSize = Math.max(maximumStep, 60);\n        var steppedOnNow = !defined(updateTime) || JulianDate.lessThanOrEquals(updateTime, start) || JulianDate.greaterThanOrEquals(updateTime, stop);\n        while (JulianDate.lessThan(time, stop)) {\n            if (!steppedOnNow && JulianDate.greaterThanOrEquals(time, updateTime)) {\n                steppedOnNow = true;\n                tmp = property.getValueInReferenceFrame(updateTime, referenceFrame, result[index]);\n                if (defined(tmp)) {\n                    result[index] = tmp;\n                    index++;\n                }\n            }\n            tmp = property.getValueInReferenceFrame(time, referenceFrame, result[index]);\n            if (defined(tmp)) {\n                result[index] = tmp;\n                index++;\n            }\n            i++;\n            time = JulianDate.addSeconds(start, stepSize * i, new JulianDate());\n        }\n        //Always sample stop.\n        tmp = property.getValueInReferenceFrame(stop, referenceFrame, result[index]);\n        if (defined(tmp)) {\n            result[index] = tmp;\n            index++;\n        }\n        return index;\n    }\n\n    function subSampleIntervalProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        subSampleIntervalPropertyScratch.start = start;\n        subSampleIntervalPropertyScratch.stop = stop;\n\n        var index = startingIndex;\n        var intervals = property.intervals;\n        for (var i = 0; i < intervals.length; i++) {\n            var interval = intervals.get(i);\n            if (!TimeInterval.intersect(interval, subSampleIntervalPropertyScratch, scratchTimeInterval).isEmpty) {\n                var time = interval.start;\n                if (!interval.isStartIncluded) {\n                    if (interval.isStopIncluded) {\n                        time = interval.stop;\n                    } else {\n                        time = JulianDate.addSeconds(interval.start, JulianDate.secondsDifference(interval.stop, interval.start) / 2, new JulianDate());\n                    }\n                }\n                var tmp = property.getValueInReferenceFrame(time, referenceFrame, result[index]);\n                if (defined(tmp)) {\n                    result[index] = tmp;\n                    index++;\n                }\n            }\n        }\n        return index;\n    }\n\n    function subSampleConstantProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        var tmp = property.getValueInReferenceFrame(start, referenceFrame, result[startingIndex]);\n        if (defined(tmp)) {\n            result[startingIndex++] = tmp;\n        }\n        return startingIndex;\n    }\n\n    function subSampleCompositeProperty(property, start, stop, updateTime, referenceFrame, maximumStep, startingIndex, result) {\n        subSampleCompositePropertyScratch.start = start;\n        subSampleCompositePropertyScratch.stop = stop;\n\n        var index = startingIndex;\n        var intervals = property.intervals;\n        for (var i = 0; i < intervals.length; i++) {\n            var interval = intervals.get(i);\n            if (!TimeInterval.intersect(interval, subSampleCompositePropertyScratch, scratchTimeInterval).isEmpty) {\n                var intervalStart = interval.start;\n                var intervalStop = interval.stop;\n\n                var sampleStart = start;\n                if (JulianDate.greaterThan(intervalStart, sampleStart)) {\n                    sampleStart = intervalStart;\n                }\n\n                var sampleStop = stop;\n                if (JulianDate.lessThan(intervalStop, sampleStop)) {\n                    sampleStop = intervalStop;\n                }\n\n                index = reallySubSample(interval.data, sampleStart, sampleStop, updateTime, referenceFrame, maximumStep, index, result);\n            }\n        }\n        return index;\n    }\n\n    function reallySubSample(property, start, stop, updateTime, referenceFrame, maximumStep, index, result) {\n        //Unwrap any references until we have the actual property.\n        while (property instanceof ReferenceProperty) {\n            property = property.resolvedProperty;\n        }\n\n        if (property instanceof SampledPositionProperty) {\n            var times = property._property._times;\n            index = subSampleSampledProperty(property, start, stop, times, updateTime, referenceFrame, maximumStep, index, result);\n        } else if (property instanceof CompositePositionProperty) {\n            index = subSampleCompositeProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        } else if (property instanceof TimeIntervalCollectionPositionProperty) {\n            index = subSampleIntervalProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        } else if (property instanceof ConstantPositionProperty ||\n                   (property instanceof ScaledPositionProperty && Property.isConstant(property))) {\n            index = subSampleConstantProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        } else {\n            //Fallback to generic sampling.\n            index = subSampleGenericProperty(property, start, stop, updateTime, referenceFrame, maximumStep, index, result);\n        }\n        return index;\n    }\n\n    function subSample(property, start, stop, updateTime, referenceFrame, maximumStep, result) {\n        if (!defined(result)) {\n            result = [];\n        }\n\n        var length = reallySubSample(property, start, stop, updateTime, referenceFrame, maximumStep, 0, result);\n        result.length = length;\n        return result;\n    }\n\n    var toFixedScratch = new Matrix3();\n    function PolylineUpdater(scene, referenceFrame) {\n        this._unusedIndexes = [];\n        this._polylineCollection = new PolylineCollection();\n        this._scene = scene;\n        this._referenceFrame = referenceFrame;\n        scene.primitives.add(this._polylineCollection);\n    }\n\n    PolylineUpdater.prototype.update = function(time) {\n        if (this._referenceFrame === ReferenceFrame.INERTIAL) {\n            var toFixed = Transforms.computeIcrfToFixedMatrix(time, toFixedScratch);\n            if (!defined(toFixed)) {\n                toFixed = Transforms.computeTemeToPseudoFixedMatrix(time, toFixedScratch);\n            }\n            Matrix4.fromRotationTranslation(toFixed, Cartesian3.ZERO, this._polylineCollection.modelMatrix);\n        }\n    };\n\n    PolylineUpdater.prototype.updateObject = function(time, item) {\n        var entity = item.entity;\n        var pathGraphics = entity._path;\n        var positionProperty = entity._position;\n\n        var sampleStart;\n        var sampleStop;\n        var showProperty = pathGraphics._show;\n        var polyline = item.polyline;\n        var show = entity.isShowing && (!defined(showProperty) || showProperty.getValue(time));\n\n        //While we want to show the path, there may not actually be anything to show\n        //depending on lead/trail settings.  Compute the interval of the path to\n        //show and check against actual availability.\n        if (show) {\n            var leadTime = Property.getValueOrUndefined(pathGraphics._leadTime, time);\n            var trailTime = Property.getValueOrUndefined(pathGraphics._trailTime, time);\n            var availability = entity._availability;\n            var hasAvailability = defined(availability);\n            var hasLeadTime = defined(leadTime);\n            var hasTrailTime = defined(trailTime);\n\n            //Objects need to have either defined availability or both a lead and trail time in order to\n            //draw a path (since we can't draw \"infinite\" paths.\n            show = hasAvailability || (hasLeadTime && hasTrailTime);\n\n            //The final step is to compute the actual start/stop times of the path to show.\n            //If current time is outside of the availability interval, there's a chance that\n            //we won't have to draw anything anyway.\n            if (show) {\n                if (hasTrailTime) {\n                    sampleStart = JulianDate.addSeconds(time, -trailTime, new JulianDate());\n                }\n                if (hasLeadTime) {\n                    sampleStop = JulianDate.addSeconds(time, leadTime, new JulianDate());\n                }\n\n                if (hasAvailability) {\n                    var start = availability.start;\n                    var stop = availability.stop;\n\n                    if (!hasTrailTime || JulianDate.greaterThan(start, sampleStart)) {\n                        sampleStart = start;\n                    }\n\n                    if (!hasLeadTime || JulianDate.lessThan(stop, sampleStop)) {\n                        sampleStop = stop;\n                    }\n                }\n                show = JulianDate.lessThan(sampleStart, sampleStop);\n            }\n        }\n\n        if (!show) {\n            //don't bother creating or updating anything else\n            if (defined(polyline)) {\n                this._unusedIndexes.push(item.index);\n                item.polyline = undefined;\n                polyline.show = false;\n                item.index = undefined;\n            }\n            return;\n        }\n\n        if (!defined(polyline)) {\n            var unusedIndexes = this._unusedIndexes;\n            var length = unusedIndexes.length;\n            if (length > 0) {\n                var index = unusedIndexes.pop();\n                polyline = this._polylineCollection.get(index);\n                item.index = index;\n            } else {\n                item.index = this._polylineCollection.length;\n                polyline = this._polylineCollection.add();\n            }\n            polyline.id = entity;\n            item.polyline = polyline;\n        }\n\n        var resolution = Property.getValueOrDefault(pathGraphics._resolution, time, defaultResolution);\n\n        polyline.show = true;\n        polyline.positions = subSample(positionProperty, sampleStart, sampleStop, time, this._referenceFrame, resolution, polyline.positions.slice());\n        polyline.material = MaterialProperty.getValue(time, pathGraphics._material, polyline.material);\n        polyline.width = Property.getValueOrDefault(pathGraphics._width, time, defaultWidth);\n        polyline.distanceDisplayCondition = Property.getValueOrUndefined(pathGraphics._distanceDisplayCondition, time, polyline.distanceDisplayCondition);\n    };\n\n    PolylineUpdater.prototype.removeObject = function(item) {\n        var polyline = item.polyline;\n        if (defined(polyline)) {\n            this._unusedIndexes.push(item.index);\n            item.polyline = undefined;\n            polyline.show = false;\n            polyline.id = undefined;\n            item.index = undefined;\n        }\n    };\n\n    PolylineUpdater.prototype.destroy = function() {\n        this._scene.primitives.remove(this._polylineCollection);\n        return destroyObject(this);\n    };\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#path} to a {@link Polyline}.\n     * @alias PathVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function PathVisualizer(scene, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(PathVisualizer.prototype._onCollectionChanged, this);\n\n        this._scene = scene;\n        this._updaters = {};\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates all of the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    PathVisualizer.prototype.update = function(time) {\n        \n\n        var updaters = this._updaters;\n        for ( var key in updaters) {\n            if (updaters.hasOwnProperty(key)) {\n                updaters[key].update(time);\n            }\n        }\n\n        var items = this._items.values;\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var positionProperty = entity._position;\n\n            var lastUpdater = item.updater;\n\n            var frameToVisualize = ReferenceFrame.FIXED;\n            if (this._scene.mode === SceneMode.SCENE3D) {\n                frameToVisualize = positionProperty.referenceFrame;\n            }\n\n            var currentUpdater = this._updaters[frameToVisualize];\n\n            if ((lastUpdater === currentUpdater) && (defined(currentUpdater))) {\n                currentUpdater.updateObject(time, item);\n                continue;\n            }\n\n            if (defined(lastUpdater)) {\n                lastUpdater.removeObject(item);\n            }\n\n            if (!defined(currentUpdater)) {\n                currentUpdater = new PolylineUpdater(this._scene, frameToVisualize);\n                currentUpdater.update(time);\n                this._updaters[frameToVisualize] = currentUpdater;\n            }\n\n            item.updater = currentUpdater;\n            if (defined(currentUpdater)) {\n                currentUpdater.updateObject(time, item);\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PathVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    PathVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(PathVisualizer.prototype._onCollectionChanged, this);\n\n        var updaters = this._updaters;\n        for ( var key in updaters) {\n            if (updaters.hasOwnProperty(key)) {\n                updaters[key].destroy();\n            }\n        }\n\n        return destroyObject(this);\n    };\n\n    PathVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var item;\n        var items = this._items;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._path) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._path) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                item = items.get(entity.id);\n                if (defined(item)) {\n                    if (defined(item.updater)) {\n                        item.updater.removeObject(item);\n                    }\n                    items.remove(entity.id);\n                }\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            item = items.get(entity.id);\n            if (defined(item)) {\n                if (defined(item.updater)) {\n                    item.updater.removeObject(item);\n                }\n                items.remove(entity.id);\n            }\n        }\n    };\n\n    //for testing\n    PathVisualizer._subSample = subSample;\n\n    return PathVisualizer;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayCondition',\n        '../Core/NearFarScalar',\n        '../Scene/createBillboardPointCallback',\n        '../Scene/HeightReference',\n        './BoundingSphereState',\n        './Property'\n    ], function(\n        AssociativeArray,\n        Cartesian3,\n        Color,\n        defined,\n        destroyObject,\n        DeveloperError,\n        DistanceDisplayCondition,\n        NearFarScalar,\n        createBillboardPointCallback,\n        HeightReference,\n        BoundingSphereState,\n        Property) {\n    'use strict';\n\n    var defaultColor = Color.WHITE;\n    var defaultOutlineColor = Color.BLACK;\n    var defaultOutlineWidth = 0.0;\n    var defaultPixelSize = 1.0;\n    var defaultDisableDepthTestDistance = 0.0;\n\n    var colorScratch = new Color();\n    var positionScratch = new Cartesian3();\n    var outlineColorScratch = new Color();\n    var scaleByDistanceScratch = new NearFarScalar();\n    var translucencyByDistanceScratch = new NearFarScalar();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n\n    function EntityData(entity) {\n        this.entity = entity;\n        this.pointPrimitive = undefined;\n        this.billboard = undefined;\n        this.color = undefined;\n        this.outlineColor = undefined;\n        this.pixelSize = undefined;\n        this.outlineWidth = undefined;\n    }\n\n    /**\n     * A {@link Visualizer} which maps {@link Entity#point} to a {@link PointPrimitive}.\n     * @alias PointVisualizer\n     * @constructor\n     *\n     * @param {EntityCluster} entityCluster The entity cluster to manage the collection of billboards and optionally cluster with other entities.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     */\n    function PointVisualizer(entityCluster, entityCollection) {\n        \n\n        entityCollection.collectionChanged.addEventListener(PointVisualizer.prototype._onCollectionChanged, this);\n\n        this._cluster = entityCluster;\n        this._entityCollection = entityCollection;\n        this._items = new AssociativeArray();\n        this._onCollectionChanged(entityCollection, entityCollection.values, [], []);\n    }\n\n    /**\n     * Updates the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} This function always returns true.\n     */\n    PointVisualizer.prototype.update = function(time) {\n        \n\n        var items = this._items.values;\n        var cluster = this._cluster;\n        for (var i = 0, len = items.length; i < len; i++) {\n            var item = items[i];\n            var entity = item.entity;\n            var pointGraphics = entity._point;\n            var pointPrimitive = item.pointPrimitive;\n            var billboard = item.billboard;\n            var heightReference = Property.getValueOrDefault(pointGraphics._heightReference, time, HeightReference.NONE);\n            var show = entity.isShowing && entity.isAvailable(time) && Property.getValueOrDefault(pointGraphics._show, time, true);\n            var position;\n            if (show) {\n                position = Property.getValueOrUndefined(entity._position, time, positionScratch);\n                show = defined(position);\n            }\n            if (!show) {\n                returnPrimitive(item, entity, cluster);\n                continue;\n            }\n\n            if (!Property.isConstant(entity._position)) {\n                cluster._clusterDirty = true;\n            }\n\n            var needsRedraw = false;\n            var updateClamping = false;\n            if ((heightReference !== HeightReference.NONE) && !defined(billboard)) {\n                if (defined(pointPrimitive)) {\n                    returnPrimitive(item, entity, cluster);\n                    pointPrimitive = undefined;\n                }\n\n                billboard = cluster.getBillboard(entity);\n                billboard.id = entity;\n                billboard.image = undefined;\n                item.billboard = billboard;\n                needsRedraw = true;\n\n                // If this new billboard happens to have a position and height reference that match our new values,\n                // billboard._updateClamping will not be called automatically. That's a problem because the clamped\n                // height may be based on different terrain than is now loaded. So we'll manually call\n                // _updateClamping below.\n                updateClamping = Cartesian3.equals(billboard.position, position) && billboard.heightReference === heightReference;\n            } else if ((heightReference === HeightReference.NONE) && !defined(pointPrimitive)) {\n                if (defined(billboard)) {\n                    returnPrimitive(item, entity, cluster);\n                    billboard = undefined;\n                }\n\n                pointPrimitive = cluster.getPoint(entity);\n                pointPrimitive.id = entity;\n                item.pointPrimitive = pointPrimitive;\n            }\n\n            if (defined(pointPrimitive)) {\n                pointPrimitive.show = true;\n                pointPrimitive.position = position;\n                pointPrimitive.scaleByDistance = Property.getValueOrUndefined(pointGraphics._scaleByDistance, time, scaleByDistanceScratch);\n                pointPrimitive.translucencyByDistance = Property.getValueOrUndefined(pointGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n                pointPrimitive.color = Property.getValueOrDefault(pointGraphics._color, time, defaultColor, colorScratch);\n                pointPrimitive.outlineColor = Property.getValueOrDefault(pointGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n                pointPrimitive.outlineWidth = Property.getValueOrDefault(pointGraphics._outlineWidth, time, defaultOutlineWidth);\n                pointPrimitive.pixelSize = Property.getValueOrDefault(pointGraphics._pixelSize, time, defaultPixelSize);\n                pointPrimitive.distanceDisplayCondition = Property.getValueOrUndefined(pointGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n                pointPrimitive.disableDepthTestDistance = Property.getValueOrDefault(pointGraphics._disableDepthTestDistance, time, defaultDisableDepthTestDistance);\n            } else if (defined(billboard)) {\n                billboard.show = true;\n                billboard.position = position;\n                billboard.scaleByDistance = Property.getValueOrUndefined(pointGraphics._scaleByDistance, time, scaleByDistanceScratch);\n                billboard.translucencyByDistance = Property.getValueOrUndefined(pointGraphics._translucencyByDistance, time, translucencyByDistanceScratch);\n                billboard.distanceDisplayCondition = Property.getValueOrUndefined(pointGraphics._distanceDisplayCondition, time, distanceDisplayConditionScratch);\n                billboard.disableDepthTestDistance = Property.getValueOrDefault(pointGraphics._disableDepthTestDistance, time, defaultDisableDepthTestDistance);\n                billboard.heightReference = heightReference;\n\n                var newColor = Property.getValueOrDefault(pointGraphics._color, time, defaultColor, colorScratch);\n                var newOutlineColor = Property.getValueOrDefault(pointGraphics._outlineColor, time, defaultOutlineColor, outlineColorScratch);\n                var newOutlineWidth = Math.round(Property.getValueOrDefault(pointGraphics._outlineWidth, time, defaultOutlineWidth));\n                var newPixelSize = Math.max(1, Math.round(Property.getValueOrDefault(pointGraphics._pixelSize, time, defaultPixelSize)));\n\n                if (newOutlineWidth > 0) {\n                    billboard.scale = 1.0;\n                    needsRedraw = needsRedraw || //\n                                 newOutlineWidth !== item.outlineWidth || //\n                                 newPixelSize !== item.pixelSize || //\n                                 !Color.equals(newColor, item.color) || //\n                                 !Color.equals(newOutlineColor, item.outlineColor);\n                } else {\n                    billboard.scale = newPixelSize / 50.0;\n                    newPixelSize = 50.0;\n                    needsRedraw = needsRedraw || //\n                                 newOutlineWidth !== item.outlineWidth || //\n                                 !Color.equals(newColor, item.color) || //\n                                 !Color.equals(newOutlineColor, item.outlineColor);\n                }\n\n                if (needsRedraw) {\n                    item.color = Color.clone(newColor, item.color);\n                    item.outlineColor = Color.clone(newOutlineColor, item.outlineColor);\n                    item.pixelSize = newPixelSize;\n                    item.outlineWidth = newOutlineWidth;\n\n                    var centerAlpha = newColor.alpha;\n                    var cssColor = newColor.toCssColorString();\n                    var cssOutlineColor = newOutlineColor.toCssColorString();\n                    var textureId = JSON.stringify([cssColor, newPixelSize, cssOutlineColor, newOutlineWidth]);\n\n                    billboard.setImage(textureId, createBillboardPointCallback(centerAlpha, cssColor, cssOutlineColor, newOutlineWidth, newPixelSize));\n                }\n\n                if (updateClamping) {\n                    billboard._updateClamping();\n                }\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    PointVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var item = this._items.get(entity.id);\n        if (!defined(item) || !(defined(item.pointPrimitive) || defined(item.billboard))) {\n            return BoundingSphereState.FAILED;\n        }\n\n        if (defined(item.pointPrimitive)) {\n            result.center = Cartesian3.clone(item.pointPrimitive.position, result.center);\n        } else {\n            var billboard = item.billboard;\n            if (!defined(billboard._clampedPosition)) {\n                return BoundingSphereState.PENDING;\n            }\n            result.center = Cartesian3.clone(billboard._clampedPosition, result.center);\n        }\n\n        result.radius = 0;\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PointVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    PointVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(PointVisualizer.prototype._onCollectionChanged, this);\n        var entities = this._entityCollection.values;\n        for (var i = 0; i < entities.length; i++) {\n            this._cluster.removePoint(entities[i]);\n        }\n        return destroyObject(this);\n    };\n\n    PointVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed, changed) {\n        var i;\n        var entity;\n        var items = this._items;\n        var cluster = this._cluster;\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            if (defined(entity._point) && defined(entity._position)) {\n                items.set(entity.id, new EntityData(entity));\n            }\n        }\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            if (defined(entity._point) && defined(entity._position)) {\n                if (!items.contains(entity.id)) {\n                    items.set(entity.id, new EntityData(entity));\n                }\n            } else {\n                returnPrimitive(items.get(entity.id), entity, cluster);\n                items.remove(entity.id);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            returnPrimitive(items.get(entity.id), entity, cluster);\n            items.remove(entity.id);\n        }\n    };\n\n    function returnPrimitive(item, entity, cluster) {\n        if (defined(item)) {\n            var pointPrimitive = item.pointPrimitive;\n            if (defined(pointPrimitive)) {\n                item.pointPrimitive = undefined;\n                cluster.removePoint(entity);\n                return;\n            }\n            var billboard = item.billboard;\n            if (defined(billboard)) {\n                item.billboard = undefined;\n                cluster.removeBillboard(entity);\n            }\n        }\n    }\n\n    return PointVisualizer;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/BoundingSphere',\n        '../Core/Check',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Scene/ClassificationType',\n        '../Scene/PolylineColorAppearance',\n        '../Scene/PolylineMaterialAppearance',\n        '../Scene/ShadowMode',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './DynamicGeometryBatch',\n        './PolylineGeometryUpdater',\n        './StaticGeometryColorBatch',\n        './StaticGeometryPerMaterialBatch',\n        './StaticGroundPolylinePerMaterialBatch'\n    ], function(\n        AssociativeArray,\n        BoundingSphere,\n        Check,\n        defaultValue,\n        defined,\n        destroyObject,\n        ClassificationType,\n        PolylineColorAppearance,\n        PolylineMaterialAppearance,\n        ShadowMode,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        DynamicGeometryBatch,\n        PolylineGeometryUpdater,\n        StaticGeometryColorBatch,\n        StaticGeometryPerMaterialBatch,\n        StaticGroundPolylinePerMaterialBatch) {\n    'use strict';\n\n    var emptyArray = [];\n\n    function removeUpdater(that, updater) {\n        //We don't keep track of which batch an updater is in, so just remove it from all of them.\n        var batches = that._batches;\n        var length = batches.length;\n        for (var i = 0; i < length; i++) {\n            batches[i].remove(updater);\n        }\n    }\n\n    function insertUpdaterIntoBatch(that, time, updater) {\n        if (updater.isDynamic) {\n            that._dynamicBatch.add(time, updater);\n            return;\n        }\n\n        if (updater.clampToGround && updater.fillEnabled) { // Also checks for support\n            var classificationType = updater.classificationTypeProperty.getValue(time);\n            that._groundBatches[classificationType].add(time, updater);\n            return;\n        }\n\n        var shadows;\n        if (updater.fillEnabled) {\n            shadows = updater.shadowsProperty.getValue(time);\n        }\n\n        var multiplier = 0;\n        if (defined(updater.depthFailMaterialProperty)) {\n            multiplier = updater.depthFailMaterialProperty instanceof ColorMaterialProperty ? 1 : 2;\n        }\n\n        var index;\n        if (defined(shadows)) {\n            index = shadows + multiplier * ShadowMode.NUMBER_OF_SHADOW_MODES;\n        }\n\n        if (updater.fillEnabled) {\n            if (updater.fillMaterialProperty instanceof ColorMaterialProperty) {\n                that._colorBatches[index].add(time, updater);\n            } else {\n                that._materialBatches[index].add(time, updater);\n            }\n        }\n    }\n\n    /**\n     * A visualizer for polylines represented by {@link Primitive} instances.\n     * @alias PolylineVisualizer\n     * @constructor\n     *\n     * @param {Scene} scene The scene the primitives will be rendered in.\n     * @param {EntityCollection} entityCollection The entityCollection to visualize.\n     * @param {PrimitiveCollection} [primitives=scene.primitives] A collection to add primitives related to the entities\n     * @param {PrimitiveCollection} [groundPrimitives=scene.groundPrimitives] A collection to add ground primitives related to the entities\n     */\n    function PolylineVisualizer(scene, entityCollection, primitives, groundPrimitives) {\n        \n\n        groundPrimitives = defaultValue(groundPrimitives, scene.groundPrimitives);\n        primitives = defaultValue(primitives, scene.primitives);\n\n        this._scene = scene;\n        this._primitives = primitives;\n        this._entityCollection = undefined;\n        this._addedObjects = new AssociativeArray();\n        this._removedObjects = new AssociativeArray();\n        this._changedObjects = new AssociativeArray();\n\n        var i;\n        var numberOfShadowModes = ShadowMode.NUMBER_OF_SHADOW_MODES;\n        this._colorBatches = new Array(numberOfShadowModes * 3);\n        this._materialBatches = new Array(numberOfShadowModes * 3);\n\n        for (i = 0; i < numberOfShadowModes; ++i) {\n            this._colorBatches[i] = new StaticGeometryColorBatch(primitives, PolylineColorAppearance, undefined, false, i); // no depth fail appearance\n            this._materialBatches[i] = new StaticGeometryPerMaterialBatch(primitives, PolylineMaterialAppearance, undefined, false, i);\n\n            this._colorBatches[i + numberOfShadowModes] = new StaticGeometryColorBatch(primitives, PolylineColorAppearance, PolylineColorAppearance, false, i); //depth fail appearance variations\n            this._materialBatches[i + numberOfShadowModes] = new StaticGeometryPerMaterialBatch(primitives, PolylineMaterialAppearance, PolylineColorAppearance, false, i);\n\n            this._colorBatches[i + numberOfShadowModes * 2] = new StaticGeometryColorBatch(primitives, PolylineColorAppearance, PolylineMaterialAppearance, false, i);\n            this._materialBatches[i + numberOfShadowModes * 2] = new StaticGeometryPerMaterialBatch(primitives, PolylineMaterialAppearance, PolylineMaterialAppearance, false, i);\n        }\n\n        this._dynamicBatch = new DynamicGeometryBatch(primitives, groundPrimitives);\n\n        var numberOfClassificationTypes = ClassificationType.NUMBER_OF_CLASSIFICATION_TYPES;\n        this._groundBatches = new Array(numberOfClassificationTypes);\n\n        for (i = 0; i < numberOfClassificationTypes; ++i) {\n            this._groundBatches[i] = new StaticGroundPolylinePerMaterialBatch(groundPrimitives, i);\n        }\n\n        this._batches = this._colorBatches.concat(this._materialBatches, this._dynamicBatch, this._groundBatches);\n\n        this._subscriptions = new AssociativeArray();\n        this._updaters = new AssociativeArray();\n\n        this._entityCollection = entityCollection;\n        entityCollection.collectionChanged.addEventListener(PolylineVisualizer.prototype._onCollectionChanged, this);\n        this._onCollectionChanged(entityCollection, entityCollection.values, emptyArray);\n    }\n\n    /**\n     * Updates all of the primitives created by this visualizer to match their\n     * Entity counterpart at the given time.\n     *\n     * @param {JulianDate} time The time to update to.\n     * @returns {Boolean} True if the visualizer successfully updated to the provided time,\n     * false if the visualizer is waiting for asynchronous primitives to be created.\n     */\n    PolylineVisualizer.prototype.update = function(time) {\n        \n\n        var addedObjects = this._addedObjects;\n        var added = addedObjects.values;\n        var removedObjects = this._removedObjects;\n        var removed = removedObjects.values;\n        var changedObjects = this._changedObjects;\n        var changed = changedObjects.values;\n\n        var i;\n        var entity;\n        var id;\n        var updater;\n\n        for (i = changed.length - 1; i > -1; i--) {\n            entity = changed[i];\n            id = entity.id;\n            updater = this._updaters.get(id);\n\n            //If in a single update, an entity gets removed and a new instance\n            //re-added with the same id, the updater no longer tracks the\n            //correct entity, we need to both remove the old one and\n            //add the new one, which is done by pushing the entity\n            //onto the removed/added lists.\n            if (updater.entity === entity) {\n                removeUpdater(this, updater);\n                insertUpdaterIntoBatch(this, time, updater);\n            } else {\n                removed.push(entity);\n                added.push(entity);\n            }\n        }\n\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            updater = this._updaters.get(id);\n            removeUpdater(this, updater);\n            updater.destroy();\n            this._updaters.remove(id);\n            this._subscriptions.get(id)();\n            this._subscriptions.remove(id);\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            updater = new PolylineGeometryUpdater(entity, this._scene);\n            this._updaters.set(id, updater);\n            insertUpdaterIntoBatch(this, time, updater);\n            this._subscriptions.set(id, updater.geometryChanged.addEventListener(PolylineVisualizer._onGeometryChanged, this));\n        }\n\n        addedObjects.removeAll();\n        removedObjects.removeAll();\n        changedObjects.removeAll();\n\n        var isUpdated = true;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            isUpdated = batches[i].update(time) && isUpdated;\n        }\n\n        return isUpdated;\n    };\n\n    var getBoundingSphereArrayScratch = [];\n    var getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    PolylineVisualizer.prototype.getBoundingSphere = function(entity, result) {\n        \n\n        var boundingSpheres = getBoundingSphereArrayScratch;\n        var tmp = getBoundingSphereBoundingSphereScratch;\n\n        var count = 0;\n        var state = BoundingSphereState.DONE;\n        var batches = this._batches;\n        var batchesLength = batches.length;\n        var updater = this._updaters.get(entity.id);\n        for (var i = 0; i < batchesLength; i++) {\n            state = batches[i].getBoundingSphere(updater, tmp);\n            if (state === BoundingSphereState.PENDING) {\n                return BoundingSphereState.PENDING;\n            } else if (state === BoundingSphereState.DONE) {\n                boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n                count++;\n            }\n        }\n\n        if (count === 0) {\n            return BoundingSphereState.FAILED;\n        }\n\n        boundingSpheres.length = count;\n        BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n        return BoundingSphereState.DONE;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PolylineVisualizer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Removes and destroys all primitives created by this instance.\n     */\n    PolylineVisualizer.prototype.destroy = function() {\n        this._entityCollection.collectionChanged.removeEventListener(PolylineVisualizer.prototype._onCollectionChanged, this);\n        this._addedObjects.removeAll();\n        this._removedObjects.removeAll();\n\n        var i;\n        var batches = this._batches;\n        var length = batches.length;\n        for (i = 0; i < length; i++) {\n            batches[i].removeAllPrimitives();\n        }\n\n        var subscriptions = this._subscriptions.values;\n        length = subscriptions.length;\n        for (i = 0; i < length; i++) {\n            subscriptions[i]();\n        }\n        this._subscriptions.removeAll();\n        return destroyObject(this);\n    };\n\n    /**\n     * @private\n     */\n    PolylineVisualizer._onGeometryChanged = function(updater) {\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var entity = updater.entity;\n        var id = entity.id;\n\n        if (!defined(removedObjects.get(id)) && !defined(changedObjects.get(id))) {\n            changedObjects.set(id, entity);\n        }\n    };\n\n    /**\n     * @private\n     */\n    PolylineVisualizer.prototype._onCollectionChanged = function(entityCollection, added, removed) {\n        var addedObjects = this._addedObjects;\n        var removedObjects = this._removedObjects;\n        var changedObjects = this._changedObjects;\n\n        var i;\n        var id;\n        var entity;\n        for (i = removed.length - 1; i > -1; i--) {\n            entity = removed[i];\n            id = entity.id;\n            if (!addedObjects.remove(id)) {\n                removedObjects.set(id, entity);\n                changedObjects.remove(id);\n            }\n        }\n\n        for (i = added.length - 1; i > -1; i--) {\n            entity = added[i];\n            id = entity.id;\n            if (removedObjects.remove(id)) {\n                changedObjects.set(id, entity);\n            } else {\n                addedObjects.set(id, entity);\n            }\n        }\n    };\n\n    return PolylineVisualizer;\n});\n","define([\n        '../Core/ArcType',\n        '../Core/BoundingSphere',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/Event',\n        '../Core/GeometryInstance',\n        '../Core/GroundPolylineGeometry',\n        '../Core/Iso8601',\n        '../Core/oneTimeWarning',\n        '../Core/PolylineGeometry',\n        '../Core/PolylinePipeline',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../DataSources/Entity',\n        '../Scene/ClassificationType',\n        '../Scene/GroundPolylinePrimitive',\n        '../Scene/PolylineCollection',\n        '../Scene/PolylineColorAppearance',\n        '../Scene/PolylineMaterialAppearance',\n        '../Scene/ShadowMode',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './ConstantProperty',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        ArcType,\n        BoundingSphere,\n        Check,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        Event,\n        GeometryInstance,\n        GroundPolylineGeometry,\n        Iso8601,\n        oneTimeWarning,\n        PolylineGeometry,\n        PolylinePipeline,\n        ShowGeometryInstanceAttribute,\n        Entity,\n        ClassificationType,\n        GroundPolylinePrimitive,\n        PolylineCollection,\n        PolylineColorAppearance,\n        PolylineMaterialAppearance,\n        ShadowMode,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        ConstantProperty,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    var defaultZIndex = new ConstantProperty(0);\n\n    //We use this object to create one polyline collection per-scene.\n    var polylineCollections = {};\n\n    var scratchColor = new Color();\n    var defaultMaterial = new ColorMaterialProperty(Color.WHITE);\n    var defaultShow = new ConstantProperty(true);\n    var defaultShadows = new ConstantProperty(ShadowMode.DISABLED);\n    var defaultDistanceDisplayCondition = new ConstantProperty(new DistanceDisplayCondition());\n    var defaultClassificationType = new ConstantProperty(ClassificationType.BOTH);\n\n    function GeometryOptions() {\n        this.vertexFormat = undefined;\n        this.positions = undefined;\n        this.width = undefined;\n        this.arcType = undefined;\n        this.granularity = undefined;\n    }\n\n    function GroundGeometryOptions() {\n        this.positions = undefined;\n        this.width = undefined;\n        this.arcType = undefined;\n        this.granularity = undefined;\n    }\n\n    /**\n     * A {@link GeometryUpdater} for polylines.\n     * Clients do not normally create this class directly, but instead rely on {@link DataSourceDisplay}.\n     * @alias PolylineGeometryUpdater\n     * @constructor\n     *\n     * @param {Entity} entity The entity containing the geometry to be visualized.\n     * @param {Scene} scene The scene where visualization is taking place.\n     */\n    function PolylineGeometryUpdater(entity, scene) {\n        \n\n        this._entity = entity;\n        this._scene = scene;\n        this._entitySubscription = entity.definitionChanged.addEventListener(PolylineGeometryUpdater.prototype._onEntityPropertyChanged, this);\n        this._fillEnabled = false;\n        this._dynamic = false;\n        this._geometryChanged = new Event();\n        this._showProperty = undefined;\n        this._materialProperty = undefined;\n        this._shadowsProperty = undefined;\n        this._distanceDisplayConditionProperty = undefined;\n        this._classificationTypeProperty = undefined;\n        this._depthFailMaterialProperty = undefined;\n        this._geometryOptions = new GeometryOptions();\n        this._groundGeometryOptions = new GroundGeometryOptions();\n        this._id = 'polyline-' + entity.id;\n        this._clampToGround = false;\n        this._supportsPolylinesOnTerrain = Entity.supportsPolylinesOnTerrain(scene);\n\n        this._zIndex = 0;\n\n        this._onEntityPropertyChanged(entity, 'polyline', entity.polyline, undefined);\n    }\n\n    defineProperties(PolylineGeometryUpdater.prototype, {\n        /**\n         * Gets the unique ID associated with this updater\n         * @memberof PolylineGeometryUpdater.prototype\n         * @type {String}\n         * @readonly\n         */\n        id: {\n            get: function() {\n                return this._id;\n            }\n        },\n        /**\n         * Gets the entity associated with this geometry.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Entity}\n         * @readonly\n         */\n        entity : {\n            get : function() {\n                return this._entity;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has a fill component.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        fillEnabled : {\n            get : function() {\n                return this._fillEnabled;\n            }\n        },\n        /**\n         * Gets a value indicating if fill visibility varies with simulation time.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantFill : {\n            get : function() {\n                return !this._fillEnabled || (!defined(this._entity.availability) && Property.isConstant(this._showProperty));\n            }\n        },\n        /**\n         * Gets the material property used to fill the geometry.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {MaterialProperty}\n         * @readonly\n         */\n        fillMaterialProperty : {\n            get : function() {\n                return this._materialProperty;\n            }\n        },\n        /**\n         * Gets the material property used to fill the geometry when it fails the depth test.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {MaterialProperty}\n         * @readonly\n         */\n        depthFailMaterialProperty : {\n            get : function() {\n                return this._depthFailMaterialProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry has an outline component.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        outlineEnabled : {\n            value : false\n        },\n        /**\n         * Gets a value indicating if outline visibility varies with simulation time.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        hasConstantOutline : {\n            value : true\n        },\n        /**\n         * Gets the {@link Color} property for the geometry outline.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        outlineColorProperty : {\n            value : undefined\n        },\n        /**\n         * Gets the property specifying whether the geometry\n         * casts or receives shadows from each light source.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        shadowsProperty : {\n            get : function() {\n                return this._shadowsProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link DistanceDisplayCondition} Property specifying at what distance from the camera that this geometry will be displayed.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        distanceDisplayConditionProperty : {\n            get : function() {\n                return this._distanceDisplayConditionProperty;\n            }\n        },\n        /**\n         * Gets or sets the {@link ClassificationType} Property specifying if this geometry will classify terrain, 3D Tiles, or both when on the ground.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Property}\n         * @readonly\n         */\n        classificationTypeProperty : {\n            get : function() {\n                return this._classificationTypeProperty;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is time-varying.\n         * If true, all visualization is delegated to the {@link DynamicGeometryUpdater}\n         * returned by GeometryUpdater#createDynamicUpdater.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isDynamic : {\n            get : function() {\n                return this._dynamic;\n            }\n        },\n        /**\n         * Gets a value indicating if the geometry is closed.\n         * This property is only valid for static geometry.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isClosed : {\n            value : false\n        },\n        /**\n         * Gets an event that is raised whenever the public properties\n         * of this updater change.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        geometryChanged : {\n            get : function() {\n                return this._geometryChanged;\n            }\n        },\n\n        /**\n         * Gets a value indicating if the path of the line.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {ArcType}\n         * @readonly\n         */\n        arcType : {\n            get : function() {\n                return this._arcType;\n            }\n        },\n\n        /**\n         * Gets a value indicating if the geometry is clamped to the ground.\n         * Returns false if polylines on terrain is not supported.\n         * @memberof PolylineGeometryUpdater.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        clampToGround : {\n            get : function() {\n                return this._clampToGround && this._supportsPolylinesOnTerrain;\n            }\n        },\n\n        /**\n         * Gets the zindex\n         * @type {Number}\n         * @memberof PolylineGeometryUpdater.prototype\n         * @readonly\n         */\n        zIndex: {\n            get: function() {\n                return this._zIndex;\n            }\n        }\n    });\n\n    /**\n     * Checks if the geometry is outlined at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is outlined at the provided time, false otherwise.\n     */\n    PolylineGeometryUpdater.prototype.isOutlineVisible = function(time) {\n        return false;\n    };\n\n    /**\n     * Checks if the geometry is filled at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve visibility.\n     * @returns {Boolean} true if geometry is filled at the provided time, false otherwise.\n     */\n    PolylineGeometryUpdater.prototype.isFilled = function(time) {\n        var entity = this._entity;\n        var visible = this._fillEnabled && entity.isAvailable(time) && this._showProperty.getValue(time);\n        return defaultValue(visible, false);\n    };\n\n    /**\n     * Creates the geometry instance which represents the fill of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the filled portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent a filled geometry.\n     */\n    PolylineGeometryUpdater.prototype.createFillGeometryInstance = function(time) {\n        \n\n        var entity = this._entity;\n        var isAvailable = entity.isAvailable(time);\n        var show = new ShowGeometryInstanceAttribute(isAvailable && entity.isShowing && this._showProperty.getValue(time));\n        var distanceDisplayCondition = this._distanceDisplayConditionProperty.getValue(time);\n        var distanceDisplayConditionAttribute = DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition);\n\n        var attributes = {\n            show : show,\n            distanceDisplayCondition : distanceDisplayConditionAttribute\n        };\n\n        var currentColor;\n        if (this._materialProperty instanceof ColorMaterialProperty) {\n            if (defined(this._materialProperty.color) && (this._materialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._materialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.color = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        if (this.clampToGround) {\n            return new GeometryInstance({\n                id : entity,\n                geometry : new GroundPolylineGeometry(this._groundGeometryOptions),\n                attributes : attributes\n            });\n        }\n\n        if (defined(this._depthFailMaterialProperty) && this._depthFailMaterialProperty instanceof ColorMaterialProperty) {\n            if (defined(this._depthFailMaterialProperty.color) && (this._depthFailMaterialProperty.color.isConstant || isAvailable)) {\n                currentColor = this._depthFailMaterialProperty.color.getValue(time, scratchColor);\n            }\n            if (!defined(currentColor)) {\n                currentColor = Color.WHITE;\n            }\n            attributes.depthFailColor = ColorGeometryInstanceAttribute.fromColor(currentColor);\n        }\n\n        return new GeometryInstance({\n            id : entity,\n            geometry : new PolylineGeometry(this._geometryOptions),\n            attributes : attributes\n        });\n    };\n\n    /**\n     * Creates the geometry instance which represents the outline of the geometry.\n     *\n     * @param {JulianDate} time The time to use when retrieving initial attribute values.\n     * @returns {GeometryInstance} The geometry instance representing the outline portion of the geometry.\n     *\n     * @exception {DeveloperError} This instance does not represent an outlined geometry.\n     */\n    PolylineGeometryUpdater.prototype.createOutlineGeometryInstance = function(time) {\n        \n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     */\n    PolylineGeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    PolylineGeometryUpdater.prototype.destroy = function() {\n        this._entitySubscription();\n        destroyObject(this);\n    };\n\n    PolylineGeometryUpdater.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        if (!(propertyName === 'availability' || propertyName === 'polyline')) {\n            return;\n        }\n\n        var polyline = this._entity.polyline;\n\n        if (!defined(polyline)) {\n            if (this._fillEnabled) {\n                this._fillEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var positionsProperty = polyline.positions;\n\n        var show = polyline.show;\n        if ((defined(show) && show.isConstant && !show.getValue(Iso8601.MINIMUM_VALUE)) || //\n            (!defined(positionsProperty))) {\n            if (this._fillEnabled) {\n                this._fillEnabled = false;\n                this._geometryChanged.raiseEvent(this);\n            }\n            return;\n        }\n\n        var zIndex = polyline.zIndex;\n        var material = defaultValue(polyline.material, defaultMaterial);\n        var isColorMaterial = material instanceof ColorMaterialProperty;\n        this._materialProperty = material;\n        this._depthFailMaterialProperty = polyline.depthFailMaterial;\n        this._showProperty = defaultValue(show, defaultShow);\n        this._shadowsProperty = defaultValue(polyline.shadows, defaultShadows);\n        this._distanceDisplayConditionProperty = defaultValue(polyline.distanceDisplayCondition, defaultDistanceDisplayCondition);\n        this._classificationTypeProperty = defaultValue(polyline.classificationType, defaultClassificationType);\n        this._fillEnabled = true;\n        this._zIndex = defaultValue(zIndex, defaultZIndex);\n\n        var width = polyline.width;\n        var arcType = polyline.arcType;\n        var clampToGround = polyline.clampToGround;\n        var granularity = polyline.granularity;\n\n        if (!positionsProperty.isConstant || !Property.isConstant(width) ||\n            !Property.isConstant(arcType) || !Property.isConstant(granularity) ||\n            !Property.isConstant(clampToGround) || !Property.isConstant(zIndex)) {\n            if (!this._dynamic) {\n                this._dynamic = true;\n                this._geometryChanged.raiseEvent(this);\n            }\n        } else {\n            var geometryOptions = this._geometryOptions;\n            var positions = positionsProperty.getValue(Iso8601.MINIMUM_VALUE, geometryOptions.positions);\n\n            //Because of the way we currently handle reference properties,\n            //we can't automatically assume the positions are always valid.\n            if (!defined(positions) || positions.length < 2) {\n                if (this._fillEnabled) {\n                    this._fillEnabled = false;\n                    this._geometryChanged.raiseEvent(this);\n                }\n                return;\n            }\n\n            var vertexFormat;\n            if (isColorMaterial && (!defined(this._depthFailMaterialProperty) || this._depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n                vertexFormat = PolylineColorAppearance.VERTEX_FORMAT;\n            } else {\n                vertexFormat = PolylineMaterialAppearance.VERTEX_FORMAT;\n            }\n\n            geometryOptions.vertexFormat = vertexFormat;\n            geometryOptions.positions = positions;\n            geometryOptions.width = defined(width) ? width.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n            geometryOptions.arcType = defined(arcType) ? arcType.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n            geometryOptions.granularity = defined(granularity) ? granularity.getValue(Iso8601.MINIMUM_VALUE) : undefined;\n\n            var groundGeometryOptions = this._groundGeometryOptions;\n            groundGeometryOptions.positions = positions;\n            groundGeometryOptions.width = geometryOptions.width;\n            groundGeometryOptions.arcType = geometryOptions.arcType;\n            groundGeometryOptions.granularity = geometryOptions.granularity;\n\n            this._clampToGround = defined(clampToGround) ? clampToGround.getValue(Iso8601.MINIMUM_VALUE) : false;\n\n            if (!this._clampToGround && defined(zIndex)) {\n                oneTimeWarning('Entity polylines must have clampToGround: true when using zIndex.  zIndex will be ignored.');\n            }\n\n            this._dynamic = false;\n            this._geometryChanged.raiseEvent(this);\n        }\n    };\n\n    /**\n     * Creates the dynamic updater to be used when GeometryUpdater#isDynamic is true.\n     *\n     * @param {PrimitiveCollection} primitives The primitive collection to use.\n     * @param {PrimitiveCollection|OrderedGroundPrimitiveCollection} groundPrimitives The primitive collection to use for ordered ground primitives.\n     * @returns {DynamicGeometryUpdater} The dynamic updater used to update the geometry each frame.\n     *\n     * @exception {DeveloperError} This instance does not represent dynamic geometry.\n     */\n    PolylineGeometryUpdater.prototype.createDynamicUpdater = function(primitives, groundPrimitives) {\n        \n\n        return new DynamicGeometryUpdater(primitives, groundPrimitives, this);\n    };\n\n    /**\n     * @private\n     */\n    var generateCartesianArcOptions = {\n        positions : undefined,\n        granularity : undefined,\n        height : undefined,\n        ellipsoid : undefined\n    };\n\n    function DynamicGeometryUpdater(primitives, groundPrimitives, geometryUpdater) {\n        this._line = undefined;\n        this._primitives = primitives;\n        this._groundPrimitives = groundPrimitives;\n        this._groundPolylinePrimitive = undefined;\n        this._material = undefined;\n        this._geometryUpdater = geometryUpdater;\n        this._positions = [];\n    }\n\n    function getLine(dynamicGeometryUpdater) {\n        if (defined(dynamicGeometryUpdater._line)) {\n            return dynamicGeometryUpdater._line;\n        }\n\n        var sceneId = dynamicGeometryUpdater._geometryUpdater._scene.id;\n        var polylineCollection = polylineCollections[sceneId];\n        var primitives = dynamicGeometryUpdater._primitives;\n        if (!defined(polylineCollection) || polylineCollection.isDestroyed()) {\n            polylineCollection = new PolylineCollection();\n            polylineCollections[sceneId] = polylineCollection;\n            primitives.add(polylineCollection);\n        } else if (!primitives.contains(polylineCollection)) {\n            primitives.add(polylineCollection);\n        }\n\n        var line = polylineCollection.add();\n        line.id = dynamicGeometryUpdater._geometryUpdater._entity;\n        dynamicGeometryUpdater._line = line;\n        return line;\n    }\n\n    DynamicGeometryUpdater.prototype.update = function(time) {\n        var geometryUpdater = this._geometryUpdater;\n        var entity = geometryUpdater._entity;\n        var polyline = entity.polyline;\n\n        var positionsProperty = polyline.positions;\n        var positions = Property.getValueOrUndefined(positionsProperty, time, this._positions);\n\n        // Synchronize with geometryUpdater for GroundPolylinePrimitive\n        geometryUpdater._clampToGround = Property.getValueOrDefault(polyline._clampToGround, time, false);\n        geometryUpdater._groundGeometryOptions.positions = positions;\n        geometryUpdater._groundGeometryOptions.width = Property.getValueOrDefault(polyline._width, time, 1);\n        geometryUpdater._groundGeometryOptions.arcType = Property.getValueOrDefault(polyline._arcType, time, ArcType.GEODESIC);\n        geometryUpdater._groundGeometryOptions.granularity = Property.getValueOrDefault(polyline._granularity, time, 9999);\n\n        var groundPrimitives = this._groundPrimitives;\n\n        if (defined(this._groundPolylinePrimitive)) {\n            groundPrimitives.remove(this._groundPolylinePrimitive); // destroys by default\n            this._groundPolylinePrimitive = undefined;\n        }\n\n        if (geometryUpdater.clampToGround) {\n            if (!entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(polyline._show, time, true)) {\n                return;\n            }\n\n            if (!defined(positions) || positions.length < 2) {\n                return;\n            }\n\n            var fillMaterialProperty = geometryUpdater.fillMaterialProperty;\n            var appearance;\n            if (fillMaterialProperty instanceof ColorMaterialProperty) {\n                appearance = new PolylineColorAppearance();\n            } else {\n                var material = MaterialProperty.getValue(time, fillMaterialProperty, this._material);\n                appearance = new PolylineMaterialAppearance({\n                    material : material,\n                    translucent : material.isTranslucent()\n                });\n                this._material = material;\n            }\n\n            this._groundPolylinePrimitive = groundPrimitives.add(new GroundPolylinePrimitive({\n                geometryInstances : geometryUpdater.createFillGeometryInstance(time),\n                appearance : appearance,\n                classificationType : geometryUpdater.classificationTypeProperty.getValue(time),\n                asynchronous : false\n            }), Property.getValueOrUndefined(geometryUpdater.zIndex, time));\n\n            // Hide the polyline in the collection, if any\n            if (defined(this._line)) {\n                this._line.show = false;\n            }\n            return;\n        }\n\n        var line = getLine(this);\n\n        if (!entity.isShowing || !entity.isAvailable(time) || !Property.getValueOrDefault(polyline._show, time, true)) {\n            line.show = false;\n            return;\n        }\n\n        if (!defined(positions) || positions.length < 2) {\n            line.show = false;\n            return;\n        }\n\n        var arcType = ArcType.GEODESIC;\n        arcType = Property.getValueOrDefault(polyline._arcType, time, arcType);\n\n        var globe = geometryUpdater._scene.globe;\n        if (arcType !== ArcType.NONE && defined(globe)) {\n            generateCartesianArcOptions.ellipsoid = globe.ellipsoid;\n            generateCartesianArcOptions.positions = positions;\n            generateCartesianArcOptions.granularity = Property.getValueOrUndefined(polyline._granularity, time);\n            generateCartesianArcOptions.height = PolylinePipeline.extractHeights(positions, globe.ellipsoid);\n            positions = PolylinePipeline.generateCartesianArc(generateCartesianArcOptions);\n        }\n\n        line.show = true;\n        line.positions = positions.slice();\n        line.material = MaterialProperty.getValue(time, geometryUpdater.fillMaterialProperty, line.material);\n        line.width = Property.getValueOrDefault(polyline._width, time, 1);\n        line.distanceDisplayCondition = Property.getValueOrUndefined(polyline._distanceDisplayCondition, time, line.distanceDisplayCondition);\n    };\n\n    DynamicGeometryUpdater.prototype.getBoundingSphere = function(result) {\n        \n\n        if (!this._geometryUpdater.clampToGround) {\n            var line = getLine(this);\n            if (line.show && line.positions.length > 0) {\n                BoundingSphere.fromPoints(line.positions, result);\n                return BoundingSphereState.DONE;\n            }\n        } else {\n            var groundPolylinePrimitive = this._groundPolylinePrimitive;\n            if (defined(groundPolylinePrimitive) && groundPolylinePrimitive.show && groundPolylinePrimitive.ready) {\n                var attributes = groundPolylinePrimitive.getGeometryInstanceAttributes(this._geometryUpdater._entity);\n                if (defined(attributes) && defined(attributes.boundingSphere)) {\n                    BoundingSphere.clone(attributes.boundingSphere, result);\n                    return BoundingSphereState.DONE;\n                }\n            }\n\n            if ((defined(groundPolylinePrimitive) && !groundPolylinePrimitive.ready)) {\n                return BoundingSphereState.PENDING;\n            }\n\n            return BoundingSphereState.DONE;\n        }\n\n        return BoundingSphereState.FAILED;\n    };\n\n    DynamicGeometryUpdater.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    DynamicGeometryUpdater.prototype.destroy = function() {\n        var geometryUpdater = this._geometryUpdater;\n        var sceneId = geometryUpdater._scene.id;\n        var polylineCollection = polylineCollections[sceneId];\n        if (defined(polylineCollection)) {\n            polylineCollection.remove(this._line);\n            if (polylineCollection.length === 0) {\n                this._primitives.removeAndDestroy(polylineCollection);\n                delete polylineCollections[sceneId];\n            }\n        }\n        if (defined(this._groundPolylinePrimitive)) {\n            this._groundPrimitives.remove(this._groundPolylinePrimitive);\n        }\n        destroyObject(this);\n    };\n\n    return PolylineGeometryUpdater;\n});\n","define([\n        './ArcType',\n        './arrayRemoveDuplicates',\n        './BoundingSphere',\n        './Cartesian3',\n        './Color',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryType',\n        './IndexDatatype',\n        './Math',\n        './PolylinePipeline',\n        './PrimitiveType',\n        './VertexFormat'\n    ], function(\n        ArcType,\n        arrayRemoveDuplicates,\n        BoundingSphere,\n        Cartesian3,\n        Color,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryType,\n        IndexDatatype,\n        CesiumMath,\n        PolylinePipeline,\n        PrimitiveType,\n        VertexFormat) {\n    'use strict';\n\n    var scratchInterpolateColorsArray = [];\n\n    function interpolateColors(p0, p1, color0, color1, numPoints) {\n        var colors = scratchInterpolateColorsArray;\n        colors.length = numPoints;\n        var i;\n\n        var r0 = color0.red;\n        var g0 = color0.green;\n        var b0 = color0.blue;\n        var a0 = color0.alpha;\n\n        var r1 = color1.red;\n        var g1 = color1.green;\n        var b1 = color1.blue;\n        var a1 = color1.alpha;\n\n        if (Color.equals(color0, color1)) {\n            for (i = 0; i < numPoints; i++) {\n                colors[i] = Color.clone(color0);\n            }\n            return colors;\n        }\n\n        var redPerVertex = (r1 - r0) / numPoints;\n        var greenPerVertex = (g1 - g0) / numPoints;\n        var bluePerVertex = (b1 - b0) / numPoints;\n        var alphaPerVertex = (a1 - a0) / numPoints;\n\n        for (i = 0; i < numPoints; i++) {\n            colors[i] = new Color(r0 + i * redPerVertex, g0 + i * greenPerVertex, b0 + i * bluePerVertex, a0 + i * alphaPerVertex);\n        }\n\n        return colors;\n    }\n\n    /**\n     * A description of a polyline modeled as a line strip; the first two positions define a line segment,\n     * and each additional position defines a line segment from the previous position. The polyline is capable of\n     * displaying with a material.\n     *\n     * @alias PolylineGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\n     * @param {Number} [options.width=1.0] The width in pixels.\n     * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\n     * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\n     * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\n     * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n     *\n     * @exception {DeveloperError} At least two positions are required.\n     * @exception {DeveloperError} width must be greater than or equal to one.\n     * @exception {DeveloperError} colors has an invalid length.\n     *\n     * @see PolylineGeometry#createGeometry\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\n     *\n     * @example\n     * // A polyline with two connected line segments\n     * var polyline = new Cesium.PolylineGeometry({\n     *   positions : Cesium.Cartesian3.fromDegreesArray([\n     *     0.0, 0.0,\n     *     5.0, 0.0,\n     *     5.0, 5.0\n     *   ]),\n     *   width : 10.0\n     * });\n     * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\n     */\n    function PolylineGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var positions = options.positions;\n        var colors = options.colors;\n        var width = defaultValue(options.width, 1.0);\n        var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\n\n        \n\n        this._positions = positions;\n        this._colors = colors;\n        this._width = width;\n        this._colorsPerVertex = colorsPerVertex;\n        this._vertexFormat = VertexFormat.clone(defaultValue(options.vertexFormat, VertexFormat.DEFAULT));\n\n        this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n        this._granularity = defaultValue(options.granularity, CesiumMath.RADIANS_PER_DEGREE);\n        this._ellipsoid = Ellipsoid.clone(defaultValue(options.ellipsoid, Ellipsoid.WGS84));\n        this._workerName = 'createPolylineGeometry';\n\n        var numComponents = 1 + positions.length * Cartesian3.packedLength;\n        numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {PolylineGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    PolylineGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var positions = value._positions;\n        var length = positions.length;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            Cartesian3.pack(positions[i], array, startingIndex);\n        }\n\n        var colors = value._colors;\n        length = defined(colors) ? colors.length : 0.0;\n        array[startingIndex++] = length;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            Color.pack(colors[i], array, startingIndex);\n        }\n\n        Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n        startingIndex += Ellipsoid.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._width;\n        array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\n        array[startingIndex++] = value._arcType;\n        array[startingIndex]   = value._granularity;\n\n        return array;\n    };\n\n    var scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        positions : undefined,\n        colors : undefined,\n        ellipsoid : scratchEllipsoid,\n        vertexFormat : scratchVertexFormat,\n        width : undefined,\n        colorsPerVertex : undefined,\n        arcType : undefined,\n        granularity : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {PolylineGeometry} [result] The object into which to store the result.\n     * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\n     */\n    PolylineGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var i;\n\n        var length = array[startingIndex++];\n        var positions = new Array(length);\n\n        for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\n            positions[i] = Cartesian3.unpack(array, startingIndex);\n        }\n\n        length = array[startingIndex++];\n        var colors = length > 0 ? new Array(length) : undefined;\n\n        for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\n            colors[i] = Color.unpack(array, startingIndex);\n        }\n\n        var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n        startingIndex += Ellipsoid.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var width = array[startingIndex++];\n        var colorsPerVertex = array[startingIndex++] === 1.0;\n        var arcType = array[startingIndex++];\n        var granularity = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.positions = positions;\n            scratchOptions.colors = colors;\n            scratchOptions.width = width;\n            scratchOptions.colorsPerVertex = colorsPerVertex;\n            scratchOptions.arcType = arcType;\n            scratchOptions.granularity = granularity;\n            return new PolylineGeometry(scratchOptions);\n        }\n\n        result._positions = positions;\n        result._colors = colors;\n        result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._width = width;\n        result._colorsPerVertex = colorsPerVertex;\n        result._arcType = arcType;\n        result._granularity = granularity;\n\n        return result;\n    };\n\n    var scratchCartesian3 = new Cartesian3();\n    var scratchPosition = new Cartesian3();\n    var scratchPrevPosition = new Cartesian3();\n    var scratchNextPosition = new Cartesian3();\n\n    /**\n     * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {PolylineGeometry} polylineGeometry A description of the polyline.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    PolylineGeometry.createGeometry = function(polylineGeometry) {\n        var width = polylineGeometry._width;\n        var vertexFormat = polylineGeometry._vertexFormat;\n        var colors = polylineGeometry._colors;\n        var colorsPerVertex = polylineGeometry._colorsPerVertex;\n        var arcType = polylineGeometry._arcType;\n        var granularity = polylineGeometry._granularity;\n        var ellipsoid = polylineGeometry._ellipsoid;\n\n        var i;\n        var j;\n        var k;\n\n        var positions = arrayRemoveDuplicates(polylineGeometry._positions, Cartesian3.equalsEpsilon);\n        var positionsLength = positions.length;\n\n        // A width of a pixel or less is not a valid geometry, but in order to support external data\n        // that may have errors we treat this as an empty geometry.\n        if (positionsLength < 2 || width <= 0.0) {\n            return undefined;\n        }\n\n        if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\n            var subdivisionSize;\n            var numberOfPointsFunction;\n            if (arcType === ArcType.GEODESIC) {\n                subdivisionSize = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n                numberOfPointsFunction = PolylinePipeline.numberOfPoints;\n            } else {\n                subdivisionSize = granularity;\n                numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\n            }\n\n            var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\n\n            if (defined(colors)) {\n                var colorLength = 1;\n                for (i = 0; i < positionsLength - 1; ++i) {\n                    colorLength += numberOfPointsFunction(positions[i], positions[i + 1], subdivisionSize);\n                }\n\n                var newColors = new Array(colorLength);\n                var newColorIndex = 0;\n\n                for (i = 0; i < positionsLength - 1; ++i) {\n                    var p0 = positions[i];\n                    var p1 = positions[i + 1];\n                    var c0 = colors[i];\n\n                    var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\n                    if (colorsPerVertex && i < colorLength) {\n                        var c1 = colors[i + 1];\n                        var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\n                        var interpolatedColorsLength = interpolatedColors.length;\n                        for (j = 0; j < interpolatedColorsLength; ++j) {\n                            newColors[newColorIndex++] = interpolatedColors[j];\n                        }\n                    } else {\n                        for (j = 0; j < numColors; ++j) {\n                            newColors[newColorIndex++] = Color.clone(c0);\n                        }\n                    }\n                }\n\n                newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\n                colors = newColors;\n\n                scratchInterpolateColorsArray.length = 0;\n            }\n\n            if (arcType === ArcType.GEODESIC) {\n                positions = PolylinePipeline.generateCartesianArc({\n                    positions: positions,\n                    minDistance: subdivisionSize,\n                    ellipsoid: ellipsoid,\n                    height: heights\n                });\n            } else {\n                positions = PolylinePipeline.generateCartesianRhumbArc({\n                    positions: positions,\n                    granularity: subdivisionSize,\n                    ellipsoid: ellipsoid,\n                    height: heights\n                });\n            }\n        }\n\n        positionsLength = positions.length;\n        var size = positionsLength * 4.0 - 4.0;\n\n        var finalPositions = new Float64Array(size * 3);\n        var prevPositions = new Float64Array(size * 3);\n        var nextPositions = new Float64Array(size * 3);\n        var expandAndWidth = new Float32Array(size * 2);\n        var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\n        var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\n\n        var positionIndex = 0;\n        var expandAndWidthIndex = 0;\n        var stIndex = 0;\n        var colorIndex = 0;\n        var position;\n\n        for (j = 0; j < positionsLength; ++j) {\n            if (j === 0) {\n                position = scratchCartesian3;\n                Cartesian3.subtract(positions[0], positions[1], position);\n                Cartesian3.add(positions[0], position, position);\n            } else {\n                position = positions[j - 1];\n            }\n\n            Cartesian3.clone(position, scratchPrevPosition);\n            Cartesian3.clone(positions[j], scratchPosition);\n\n            if (j === positionsLength - 1) {\n                position = scratchCartesian3;\n                Cartesian3.subtract(positions[positionsLength - 1], positions[positionsLength - 2], position);\n                Cartesian3.add(positions[positionsLength - 1], position, position);\n            } else {\n                position = positions[j + 1];\n            }\n\n            Cartesian3.clone(position, scratchNextPosition);\n\n            var color0, color1;\n            if (defined(finalColors)) {\n                if (j !== 0 && !colorsPerVertex) {\n                    color0 = colors[j - 1];\n                } else {\n                    color0 = colors[j];\n                }\n\n                if (j !== positionsLength - 1) {\n                    color1 = colors[j];\n                }\n            }\n\n            var startK = j === 0 ? 2 : 0;\n            var endK = j === positionsLength - 1 ? 2 : 4;\n\n            for (k = startK; k < endK; ++k) {\n                Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\n                Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\n                Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\n                positionIndex += 3;\n\n                var direction = (k - 2 < 0) ? -1.0 : 1.0;\n                expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;       // expand direction\n                expandAndWidth[expandAndWidthIndex++] = direction * width;\n\n                if (vertexFormat.st) {\n                    st[stIndex++] = j / (positionsLength - 1);\n                    st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\n                }\n\n                if (defined(finalColors)) {\n                    var color = (k < 2) ? color0 : color1;\n\n                    finalColors[colorIndex++] = Color.floatToByte(color.red);\n                    finalColors[colorIndex++] = Color.floatToByte(color.green);\n                    finalColors[colorIndex++] = Color.floatToByte(color.blue);\n                    finalColors[colorIndex++] = Color.floatToByte(color.alpha);\n                }\n            }\n        }\n\n        var attributes = new GeometryAttributes();\n\n        attributes.position = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : finalPositions\n        });\n\n        attributes.prevPosition = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : prevPositions\n        });\n\n        attributes.nextPosition = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.DOUBLE,\n            componentsPerAttribute : 3,\n            values : nextPositions\n        });\n\n        attributes.expandAndWidth = new GeometryAttribute({\n            componentDatatype : ComponentDatatype.FLOAT,\n            componentsPerAttribute : 2,\n            values : expandAndWidth\n        });\n\n        if (vertexFormat.st) {\n            attributes.st = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.FLOAT,\n                componentsPerAttribute : 2,\n                values : st\n            });\n        }\n\n        if (defined(finalColors)) {\n            attributes.color = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 4,\n                values : finalColors,\n                normalize : true\n            });\n        }\n\n        var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\n        var index = 0;\n        var indicesIndex = 0;\n        var length = positionsLength - 1.0;\n        for (j = 0; j < length; ++j) {\n            indices[indicesIndex++] = index;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 1;\n\n            indices[indicesIndex++] = index + 1;\n            indices[indicesIndex++] = index + 2;\n            indices[indicesIndex++] = index + 3;\n\n            index += 4;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromPoints(positions),\n            geometryType : GeometryType.POLYLINES\n        });\n    };\n\n    return PolylineGeometry;\n});\n","define([\n        '../Core/defaultValue',\n        '../Core/AssociativeArray',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/GroundPolylinePrimitive',\n        '../Scene/PolylineColorAppearance',\n        '../Scene/PolylineMaterialAppearance',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        defaultValue,\n        AssociativeArray,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        GroundPolylinePrimitive,\n        PolylineColorAppearance,\n        PolylineMaterialAppearance,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    var scratchColor = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n\n    // Encapsulates a Primitive and all the entities that it represents.\n    function Batch(orderedGroundPrimitives, classificationType, materialProperty, zIndex, asynchronous) {\n        var appearanceType;\n        if (materialProperty instanceof ColorMaterialProperty) {\n            appearanceType = PolylineColorAppearance;\n        } else {\n            appearanceType = PolylineMaterialAppearance;\n        }\n\n        this.orderedGroundPrimitives = orderedGroundPrimitives; // scene level primitive collection\n        this.classificationType = classificationType;\n        this.appearanceType = appearanceType;\n        this.materialProperty = materialProperty;\n        this.updaters = new AssociativeArray();\n        this.createPrimitive = true;\n        this.primitive = undefined; // a GroundPolylinePrimitive encapsulating all the entities\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.material = undefined;\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.invalidated = false;\n        this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.zIndex = zIndex;\n\n        this._asynchronous = asynchronous;\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    // Check if the given updater's material is compatible with this batch\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.materialProperty;\n        var updaterMaterial = updater.fillMaterialProperty;\n\n        if (updaterMaterial === material ||\n            (updaterMaterial instanceof ColorMaterialProperty && material instanceof ColorMaterialProperty)) {\n            return true;\n        }\n        return defined(material) && material.equals(updaterMaterial);\n    };\n\n    Batch.prototype.add = function(time, updater, geometryInstance) {\n        var id = updater.id;\n        this.updaters.set(id, updater);\n        this.geometry.set(id, geometryInstance);\n        // Updaters with dynamic attributes must be tracked separately, may exit the batch\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            // Listen for show changes. These will be synchronized in updateShows.\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n        this.createPrimitive = true;\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var primitive = this.primitive;\n        var orderedGroundPrimitives = this.orderedGroundPrimitives;\n        var geometries = this.geometry.values;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    // Keep a handle to the old primitive so it can be removed when the updated version is ready.\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        // For if the new primitive changes again before it is ready.\n                        orderedGroundPrimitives.remove(primitive);\n                    }\n                }\n\n                primitive = new GroundPolylinePrimitive({\n                    show : false,\n                    asynchronous : this._asynchronous,\n                    geometryInstances : geometries,\n                    appearance : new this.appearanceType(),\n                    classificationType : this.classificationType\n                });\n\n                if (this.appearanceType === PolylineMaterialAppearance) {\n                    this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n                    primitive.appearance.material = this.material;\n                }\n\n                orderedGroundPrimitives.add(primitive, this.zIndex);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    orderedGroundPrimitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    orderedGroundPrimitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                orderedGroundPrimitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            if (this.appearanceType === PolylineMaterialAppearance) {\n                this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n                this.primitive.appearance.material = this.material;\n            }\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var entity = updater.entity;\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.fillMaterialProperty.isConstant) {\n                    var colorProperty = updater.fillMaterialProperty.color;\n                    var resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, scratchColor);\n                    if (!Color.equals(attributes._lastColor, resultColor)) {\n                        attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n                    }\n                }\n\n                var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var entity = updater.entity;\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var orderedGroundPrimitives = this.orderedGroundPrimitives;\n        if (defined(primitive)) {\n            orderedGroundPrimitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            orderedGroundPrimitives.remove(oldPrimitive);\n        }\n        this.removeMaterialSubscription();\n    };\n\n    /**\n     * @private\n     */\n    function StaticGroundPolylinePerMaterialBatch(orderedGroundPrimitives, classificationType, asynchronous) {\n        this._items = [];\n        this._orderedGroundPrimitives = orderedGroundPrimitives;\n        this._classificationType = classificationType;\n        this._asynchronous = defaultValue(asynchronous, true);\n    }\n\n    StaticGroundPolylinePerMaterialBatch.prototype.add = function(time, updater) {\n        var items = this._items;\n        var length = items.length;\n        var geometryInstance = updater.createFillGeometryInstance(time);\n        var zIndex = Property.getValueOrDefault(updater.zIndex, 0);\n        // Check if the Entity represented by the updater has the same material or a material representable with per-instance color.\n        for (var i = 0; i < length; ++i) {\n            var item = items[i];\n            if (item.isMaterial(updater) &&\n                item.zIndex === zIndex) {\n                item.add(time, updater, geometryInstance);\n                return;\n            }\n        }\n        // If a compatible batch wasn't found, create a new batch.\n        var batch = new Batch(this._orderedGroundPrimitives, this._classificationType, updater.fillMaterialProperty, zIndex, this._asynchronous);\n        batch.add(time, updater, geometryInstance);\n        items.push(batch);\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.remove = function(updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                break;\n            }\n        }\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.update = function(time) {\n        var i;\n        var items = this._items;\n        var length = items.length;\n\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    this.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        var isUpdated = true;\n        for (i = 0; i < items.length; i++) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.getBoundingSphere = function(updater, result) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGroundPolylinePerMaterialBatch.prototype.removeAllPrimitives = function() {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        this._items.length = 0;\n    };\n\n    return StaticGroundPolylinePerMaterialBatch;\n});\n","define([], function() {\n    'use strict';\n\n    /**\n     * The state for a particular rendering pass.  This is used to supplement the state\n     * in a command being executed.\n     *\n     * @private\n     */\n    function PassState(context) {\n        /**\n         * The context used to execute commands for this pass.\n         *\n         * @type {Context}\n         */\n        this.context = context;\n\n        /**\n         * The framebuffer to render to.  This framebuffer is used unless a {@link DrawCommand}\n         * or {@link ClearCommand} explicitly define a framebuffer, which is used for off-screen\n         * rendering.\n         *\n         * @type {Framebuffer}\n         * @default undefined\n         */\n        this.framebuffer = undefined;\n\n        /**\n         * When defined, this overrides the blending property of a {@link DrawCommand}'s render state.\n         * This is used to, for example, to allow the renderer to turn off blending during the picking pass.\n         * <p>\n         * When this is <code>undefined</code>, the {@link DrawCommand}'s property is used.\n         * </p>\n         *\n         * @type {Boolean}\n         * @default undefined\n         */\n        this.blendingEnabled = undefined;\n\n        /**\n         * When defined, this overrides the scissor test property of a {@link DrawCommand}'s render state.\n         * This is used to, for example, to allow the renderer to scissor out the pick region during the picking pass.\n         * <p>\n         * When this is <code>undefined</code>, the {@link DrawCommand}'s property is used.\n         * </p>\n         *\n         * @type {Object}\n         * @default undefined\n         */\n        this.scissorTest = undefined;\n\n        /**\n         * The viewport used when one is not defined by a {@link DrawCommand}'s render state.\n         * @type {BoundingRectangle}\n         * @default undefined\n         */\n        this.viewport = undefined;\n    }\n\n    return PassState;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/Event',\n        '../Core/EventHelper',\n        '../Core/TimeIntervalCollection',\n        './Property'\n    ], function(\n        defined,\n        defineProperties,\n        DeveloperError,\n        Event,\n        EventHelper,\n        TimeIntervalCollection,\n        Property) {\n    'use strict';\n\n    function subscribeAll(property, eventHelper, definitionChanged, intervals) {\n        function callback() {\n            definitionChanged.raiseEvent(property);\n        }\n        var items = [];\n        eventHelper.removeAll();\n        var length = intervals.length;\n        for (var i = 0; i < length; i++) {\n            var interval = intervals.get(i);\n            if (defined(interval.data) && items.indexOf(interval.data) === -1) {\n                eventHelper.add(interval.data.definitionChanged, callback);\n            }\n        }\n    }\n\n    /**\n     * A {@link Property} which is defined by a {@link TimeIntervalCollection}, where the\n     * data property of each {@link TimeInterval} is another Property instance which is\n     * evaluated at the provided time.\n     *\n     * @alias CompositeProperty\n     * @constructor\n     *\n     *\n     * @example\n     * var constantProperty = ...;\n     * var sampledProperty = ...;\n     *\n     * //Create a composite property from two previously defined properties\n     * //where the property is valid on August 1st, 2012 and uses a constant\n     * //property for the first half of the day and a sampled property for the\n     * //remaining half.\n     * var composite = new Cesium.CompositeProperty();\n     * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n     *     iso8601 : '2012-08-01T00:00:00.00Z/2012-08-01T12:00:00.00Z',\n     *     data : constantProperty\n     * }));\n     * composite.intervals.addInterval(Cesium.TimeInterval.fromIso8601({\n     *     iso8601 : '2012-08-01T12:00:00.00Z/2012-08-02T00:00:00.00Z',\n     *     isStartIncluded : false,\n     *     isStopIncluded : false,\n     *     data : sampledProperty\n     * }));\n     *\n     * @see CompositeMaterialProperty\n     * @see CompositePositionProperty\n     */\n    function CompositeProperty() {\n        this._eventHelper = new EventHelper();\n        this._definitionChanged = new Event();\n        this._intervals = new TimeIntervalCollection();\n        this._intervals.changedEvent.addEventListener(CompositeProperty.prototype._intervalsChanged, this);\n    }\n\n    defineProperties(CompositeProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.  A property is considered\n         * constant if getValue always returns the same result for the current definition.\n         * @memberof CompositeProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return this._intervals.isEmpty;\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is changed whenever setValue is called with data different\n         * than the current value.\n         * @memberof CompositeProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        /**\n         * Gets the interval collection.\n         * @memberof CompositeProperty.prototype\n         *\n         * @type {TimeIntervalCollection}\n         */\n        intervals : {\n            get : function() {\n                return this._intervals;\n            }\n        }\n    });\n\n    /**\n     * Gets the value of the property at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    CompositeProperty.prototype.getValue = function(time, result) {\n        \n\n        var innerProperty = this._intervals.findDataForIntervalContainingDate(time);\n        if (defined(innerProperty)) {\n            return innerProperty.getValue(time, result);\n        }\n        return undefined;\n    };\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    CompositeProperty.prototype.equals = function(other) {\n        return this === other || //\n               (other instanceof CompositeProperty && //\n                this._intervals.equals(other._intervals, Property.equals));\n    };\n\n    /**\n     * @private\n     */\n    CompositeProperty.prototype._intervalsChanged = function() {\n        subscribeAll(this, this._eventHelper, this._definitionChanged, this._intervals);\n        this._definitionChanged.raiseEvent(this);\n    };\n\n    return CompositeProperty;\n});\n","define([\n    ], function() {\n    'use strict';\n\n    /**\n     * Indicates what happened the last time this tile was visited for selection.\n     * @private\n     */\n    var TileSelectionResult = {\n        /**\n         * There was no selection result, perhaps because the tile wasn't visited\n         * last frame.\n         */\n        NONE: 0,\n\n        /**\n         * This tile was deemed not visible and culled.\n         */\n        CULLED: 1,\n\n        /**\n         * The tile was selected for rendering.\n         */\n        RENDERED: 2,\n\n        /**\n         * This tile did not meet the required screen-space error and was refined.\n         */\n        REFINED: 3,\n\n        /**\n         * This tile was originally rendered, but it got kicked out of the render list\n         * in favor of an ancestor because it is not yet renderable.\n         */\n        RENDERED_AND_KICKED: 2 | 4,\n\n        /**\n         * This tile was originally refined, but its rendered descendants got kicked out of the\n         * render list in favor of an ancestor because it is not yet renderable.\n         */\n        REFINED_AND_KICKED: 3 | 4,\n\n        /**\n         * This tile was culled because it was not visible, but it still needs to be loaded\n         * and any heights on it need to be updated because the camera's position or the\n         * camera's reference frame's origin falls inside this tile. Loading this tile\n         * could affect the position of the camera if the camera is currently below\n         * terrain or if it is tracking an object whose height is referenced to terrain.\n         * And a change in the camera position may, in turn, affect what is culled.\n         */\n        CULLED_BUT_NEEDED: 1 | 8,\n\n        /**\n         * Determines if a selection result indicates that this tile or its descendants were\n         * kicked from the render list. In other words, if it is <code>RENDERED_AND_KICKED</code>\n         * or <code>REFINED_AND_KICKED</code>.\n         *\n         * @param {TileSelectionResult} value The selection result to test.\n         * @returns {Boolean} true if the tile was kicked, no matter if it was originally rendered or refined.\n         */\n        wasKicked: function(value) {\n            return value >= TileSelectionResult.RENDERED_AND_KICKED;\n        },\n\n        /**\n         * Determines the original selection result prior to being kicked or CULLED_BUT_NEEDED.\n         * If the tile wasn't kicked or CULLED_BUT_NEEDED, the original value is returned.\n         * @param {TileSelectionResult} value The selection result.\n         * @returns {TileSelectionResult} The original selection result prior to kicking.\n         */\n        originalResult: function(value) {\n            return value & 3;\n        },\n\n        /**\n         * Converts this selection result to a kick.\n         * @param {TileSelectionResult} value The original selection result.\n         * @returns {TileSelectionResult} The kicked form of the selection result.\n         */\n        kick: function(value) {\n            return value | 4;\n        }\n    };\n\n    return TileSelectionResult;\n});\n","define([\n        '../Core/freezeObject',\n        '../Core/WebGLConstants'\n    ], function(\n        freezeObject,\n        WebGLConstants) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    var RenderbufferFormat = {\n        RGBA4 : WebGLConstants.RGBA4,\n        RGB5_A1 : WebGLConstants.RGB5_A1,\n        RGB565 : WebGLConstants.RGB565,\n        DEPTH_COMPONENT16 : WebGLConstants.DEPTH_COMPONENT16,\n        STENCIL_INDEX8 : WebGLConstants.STENCIL_INDEX8,\n        DEPTH_STENCIL : WebGLConstants.DEPTH_STENCIL,\n\n        validate : function(renderbufferFormat) {\n            return ((renderbufferFormat === RenderbufferFormat.RGBA4) ||\n                    (renderbufferFormat === RenderbufferFormat.RGB5_A1) ||\n                    (renderbufferFormat === RenderbufferFormat.RGB565) ||\n                    (renderbufferFormat === RenderbufferFormat.DEPTH_COMPONENT16) ||\n                    (renderbufferFormat === RenderbufferFormat.STENCIL_INDEX8) ||\n                    (renderbufferFormat === RenderbufferFormat.DEPTH_STENCIL));\n        }\n    };\n\n    return freezeObject(RenderbufferFormat);\n});\n","define([\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/Event',\n        '../Core/ReferenceFrame',\n        './CompositeProperty',\n        './Property'\n    ], function(\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        Event,\n        ReferenceFrame,\n        CompositeProperty,\n        Property) {\n    'use strict';\n\n    /**\n     * A {@link CompositeProperty} which is also a {@link PositionProperty}.\n     *\n     * @alias CompositePositionProperty\n     * @constructor\n     *\n     * @param {ReferenceFrame} [referenceFrame=ReferenceFrame.FIXED] The reference frame in which the position is defined.\n     */\n    function CompositePositionProperty(referenceFrame) {\n        this._referenceFrame = defaultValue(referenceFrame, ReferenceFrame.FIXED);\n        this._definitionChanged = new Event();\n        this._composite = new CompositeProperty();\n        this._composite.definitionChanged.addEventListener(CompositePositionProperty.prototype._raiseDefinitionChanged, this);\n    }\n\n    defineProperties(CompositePositionProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.  A property is considered\n         * constant if getValue always returns the same result for the current definition.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return this._composite.isConstant;\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is changed whenever setValue is called with data different\n         * than the current value.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        /**\n         * Gets the interval collection.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {TimeIntervalCollection}\n         */\n        intervals : {\n            get : function() {\n                return this._composite.intervals;\n            }\n        },\n        /**\n         * Gets or sets the reference frame which this position presents itself as.\n         * Each PositionProperty making up this object has it's own reference frame,\n         * so this property merely exposes a \"preferred\" reference frame for clients\n         * to use.\n         * @memberof CompositePositionProperty.prototype\n         *\n         * @type {ReferenceFrame}\n         */\n        referenceFrame : {\n            get : function() {\n                return this._referenceFrame;\n            },\n            set : function(value) {\n                this._referenceFrame = value;\n            }\n        }\n    });\n\n    /**\n     * Gets the value of the property at the provided time in the fixed frame.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    CompositePositionProperty.prototype.getValue = function(time, result) {\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n    };\n\n    /**\n     * Gets the value of the property at the provided time and in the provided reference frame.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    CompositePositionProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\n        \n\n        var innerProperty = this._composite._intervals.findDataForIntervalContainingDate(time);\n        if (defined(innerProperty)) {\n            return innerProperty.getValueInReferenceFrame(time, referenceFrame, result);\n        }\n        return undefined;\n    };\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    CompositePositionProperty.prototype.equals = function(other) {\n        return this === other || //\n               (other instanceof CompositePositionProperty && //\n                this._referenceFrame === other._referenceFrame && //\n                this._composite.equals(other._composite, Property.equals));\n    };\n\n    /**\n     * @private\n     */\n    CompositePositionProperty.prototype._raiseDefinitionChanged = function() {\n        this._definitionChanged.raiseEvent(this);\n    };\n\n    return CompositePositionProperty;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/Event',\n        '../Core/RuntimeError',\n        './Property'\n    ], function(\n        defined,\n        defineProperties,\n        DeveloperError,\n        Event,\n        RuntimeError,\n        Property) {\n    'use strict';\n\n    function resolveEntity(that) {\n        var entityIsResolved = true;\n        if (that._resolveEntity) {\n            var targetEntity = that._targetCollection.getById(that._targetId);\n\n            if (defined(targetEntity)) {\n                targetEntity.definitionChanged.addEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, that);\n                that._targetEntity = targetEntity;\n                that._resolveEntity = false;\n            } else {\n                //The property has become detached.  It has a valid value but is not currently resolved to an entity in the collection\n                targetEntity = that._targetEntity;\n                entityIsResolved = false;\n            }\n\n            if (!defined(targetEntity)) {\n                throw new RuntimeError('target entity \"' + that._targetId + '\" could not be resolved.');\n            }\n        }\n        return entityIsResolved;\n    }\n\n    function resolve(that) {\n        var targetProperty = that._targetProperty;\n\n        if (that._resolveProperty) {\n            var entityIsResolved = resolveEntity(that);\n\n            var names = that._targetPropertyNames;\n            targetProperty = that._targetEntity;\n            var length = names.length;\n            for (var i = 0; i < length && defined(targetProperty); i++) {\n                targetProperty = targetProperty[names[i]];\n            }\n\n            if (defined(targetProperty)) {\n                that._targetProperty = targetProperty;\n                that._resolveProperty = !entityIsResolved;\n            } else if (!defined(that._targetProperty)) {\n                throw new RuntimeError('targetProperty \"' + that._targetId + '.' + names.join('.') + '\" could not be resolved.');\n            }\n        }\n\n        return targetProperty;\n    }\n\n    /**\n     * A {@link Property} which transparently links to another property on a provided object.\n     *\n     * @alias ReferenceProperty\n     * @constructor\n     *\n     * @param {EntityCollection} targetCollection The entity collection which will be used to resolve the reference.\n     * @param {String} targetId The id of the entity which is being referenced.\n     * @param {String[]} targetPropertyNames The names of the property on the target entity which we will use.\n     *\n     * @example\n     * var collection = new Cesium.EntityCollection();\n     *\n     * //Create a new entity and assign a billboard scale.\n     * var object1 = new Cesium.Entity({id:'object1'});\n     * object1.billboard = new Cesium.BillboardGraphics();\n     * object1.billboard.scale = new Cesium.ConstantProperty(2.0);\n     * collection.add(object1);\n     *\n     * //Create a second entity and reference the scale from the first one.\n     * var object2 = new Cesium.Entity({id:'object2'});\n     * object2.model = new Cesium.ModelGraphics();\n     * object2.model.scale = new Cesium.ReferenceProperty(collection, 'object1', ['billboard', 'scale']);\n     * collection.add(object2);\n     *\n     * //Create a third object, but use the fromString helper function.\n     * var object3 = new Cesium.Entity({id:'object3'});\n     * object3.billboard = new Cesium.BillboardGraphics();\n     * object3.billboard.scale = Cesium.ReferenceProperty.fromString(collection, 'object1#billboard.scale');\n     * collection.add(object3);\n     *\n     * //You can refer to an entity with a # or . in id and property names by escaping them.\n     * var object4 = new Cesium.Entity({id:'#object.4'});\n     * object4.billboard = new Cesium.BillboardGraphics();\n     * object4.billboard.scale = new Cesium.ConstantProperty(2.0);\n     * collection.add(object4);\n     *\n     * var object5 = new Cesium.Entity({id:'object5'});\n     * object5.billboard = new Cesium.BillboardGraphics();\n     * object5.billboard.scale = Cesium.ReferenceProperty.fromString(collection, '\\\\#object\\\\.4#billboard.scale');\n     * collection.add(object5);\n     */\n    function ReferenceProperty(targetCollection, targetId, targetPropertyNames) {\n        \n\n        this._targetCollection = targetCollection;\n        this._targetId = targetId;\n        this._targetPropertyNames = targetPropertyNames;\n        this._targetProperty = undefined;\n        this._targetEntity = undefined;\n        this._definitionChanged = new Event();\n        this._resolveEntity = true;\n        this._resolveProperty = true;\n\n        targetCollection.collectionChanged.addEventListener(ReferenceProperty.prototype._onCollectionChanged, this);\n    }\n\n    defineProperties(ReferenceProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.\n         * @memberof ReferenceProperty.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return Property.isConstant(resolve(this));\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * The definition is changed whenever the referenced property's definition is changed.\n         * @memberof ReferenceProperty.prototype\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        /**\n         * Gets the reference frame that the position is defined in.\n         * This property is only valid if the referenced property is a {@link PositionProperty}.\n         * @memberof ReferenceProperty.prototype\n         * @type {ReferenceFrame}\n         * @readonly\n         */\n        referenceFrame : {\n            get : function() {\n                return resolve(this).referenceFrame;\n            }\n        },\n        /**\n         * Gets the id of the entity being referenced.\n         * @memberof ReferenceProperty.prototype\n         * @type {String}\n         * @readonly\n         */\n        targetId : {\n            get : function() {\n                return this._targetId;\n            }\n        },\n        /**\n         * Gets the collection containing the entity being referenced.\n         * @memberof ReferenceProperty.prototype\n         * @type {EntityCollection}\n         * @readonly\n         */\n        targetCollection : {\n            get : function() {\n                return this._targetCollection;\n            }\n        },\n        /**\n         * Gets the array of property names used to retrieve the referenced property.\n         * @memberof ReferenceProperty.prototype\n         * @type {String[]}\n         * @readonly\n         */\n        targetPropertyNames : {\n            get : function() {\n                return this._targetPropertyNames;\n            }\n        },\n        /**\n         * Gets the resolved instance of the underlying referenced property.\n         * @memberof ReferenceProperty.prototype\n         * @type {Property}\n         * @readonly\n         */\n        resolvedProperty : {\n            get : function() {\n                return resolve(this);\n            }\n        }\n    });\n\n    /**\n     * Creates a new instance given the entity collection that will\n     * be used to resolve it and a string indicating the target entity id and property.\n     * The format of the string is \"objectId#foo.bar\", where # separates the id from\n     * property path and . separates sub-properties.  If the reference identifier or\n     * or any sub-properties contains a # . or \\ they must be escaped.\n     *\n     * @param {EntityCollection} targetCollection\n     * @param {String} referenceString\n     * @returns {ReferenceProperty} A new instance of ReferenceProperty.\n     *\n     * @exception {DeveloperError} invalid referenceString.\n     */\n    ReferenceProperty.fromString = function(targetCollection, referenceString) {\n        \n\n        var identifier;\n        var values = [];\n\n        var inIdentifier = true;\n        var isEscaped = false;\n        var token = '';\n        for (var i = 0; i < referenceString.length; ++i) {\n            var c = referenceString.charAt(i);\n\n            if (isEscaped) {\n                token += c;\n                isEscaped = false;\n            } else if (c === '\\\\') {\n                isEscaped = true;\n            } else if (inIdentifier && c === '#') {\n                identifier = token;\n                inIdentifier = false;\n                token = '';\n            } else if (!inIdentifier && c === '.') {\n                values.push(token);\n                token = '';\n            } else {\n                token += c;\n            }\n        }\n        values.push(token);\n\n        return new ReferenceProperty(targetCollection, identifier, values);\n    };\n\n    /**\n     * Gets the value of the property at the provided time.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {Object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Object} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    ReferenceProperty.prototype.getValue = function(time, result) {\n        return resolve(this).getValue(time, result);\n    };\n\n    /**\n     * Gets the value of the property at the provided time and in the provided reference frame.\n     * This method is only valid if the property being referenced is a {@link PositionProperty}.\n     *\n     * @param {JulianDate} time The time for which to retrieve the value.\n     * @param {ReferenceFrame} referenceFrame The desired referenceFrame of the result.\n     * @param {Cartesian3} [result] The object to store the value into, if omitted, a new instance is created and returned.\n     * @returns {Cartesian3} The modified result parameter or a new instance if the result parameter was not supplied.\n     */\n    ReferenceProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\n        return resolve(this).getValueInReferenceFrame(time, referenceFrame, result);\n    };\n\n    /**\n     * Gets the {@link Material} type at the provided time.\n     * This method is only valid if the property being referenced is a {@link MaterialProperty}.\n     *\n     * @param {JulianDate} time The time for which to retrieve the type.\n     * @returns {String} The type of material.\n     */\n    ReferenceProperty.prototype.getType = function(time) {\n        return resolve(this).getType(time);\n    };\n\n    /**\n     * Compares this property to the provided property and returns\n     * <code>true</code> if they are equal, <code>false</code> otherwise.\n     *\n     * @param {Property} [other] The other property.\n     * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n     */\n    ReferenceProperty.prototype.equals = function(other) {\n        if (this === other) {\n            return true;\n        }\n\n        var names = this._targetPropertyNames;\n        var otherNames = other._targetPropertyNames;\n\n        if (this._targetCollection !== other._targetCollection || //\n            this._targetId !== other._targetId || //\n            names.length !== otherNames.length) {\n            return false;\n        }\n\n        var length = this._targetPropertyNames.length;\n        for (var i = 0; i < length; i++) {\n            if (names[i] !== otherNames[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    ReferenceProperty.prototype._onTargetEntityDefinitionChanged = function(targetEntity, name, value, oldValue) {\n        if (this._targetPropertyNames[0] === name) {\n            this._resolveProperty = true;\n            this._definitionChanged.raiseEvent(this);\n        }\n    };\n\n    ReferenceProperty.prototype._onCollectionChanged = function(collection, added, removed) {\n        var targetEntity = this._targetEntity;\n        if (defined(targetEntity)) {\n            if (removed.indexOf(targetEntity) !== -1) {\n                targetEntity.definitionChanged.removeEventListener(ReferenceProperty.prototype._onTargetEntityDefinitionChanged, this);\n                this._resolveEntity = true;\n                this._resolveProperty = true;\n            } else if (this._resolveEntity) {\n                //If targetEntity is defined but resolveEntity is true, then the entity is detached\n                //and any change to the collection needs to incur an attempt to resolve in order to re-attach.\n                //without this if block, a reference that becomes re-attached will not signal definitionChanged\n                resolve(this);\n                if (!this._resolveEntity) {\n                    this._definitionChanged.raiseEvent(this);\n                }\n            }\n        }\n    };\n\n    return ReferenceProperty;\n});\n","define([\n        '../Core/freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * The state of a {@link QuadtreeTile} in the tile load pipeline.\n     * @exports QuadtreeTileLoadState\n     * @private\n     */\n    var QuadtreeTileLoadState = {\n        /**\n         * The tile is new and loading has not yet begun.\n         * @type QuadtreeTileLoadState\n         * @constant\n         * @default 0\n         */\n        START : 0,\n\n        /**\n         * Loading is in progress.\n         * @type QuadtreeTileLoadState\n         * @constant\n         * @default 1\n         */\n        LOADING : 1,\n\n        /**\n         * Loading is complete.\n         * @type QuadtreeTileLoadState\n         * @constant\n         * @default 2\n         */\n        DONE : 2,\n\n        /**\n         * The tile has failed to load.\n         * @type QuadtreeTileLoadState\n         * @constant\n         * @default 3\n         */\n        FAILED : 3\n    };\n\n    return freezeObject(QuadtreeTileLoadState);\n});\n","define([\n        './arrayFill',\n        './BoundingSphere',\n        './Cartesian3',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './PrimitiveType',\n        './VertexFormat'\n    ], function(\n        arrayFill,\n        BoundingSphere,\n        Cartesian3,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        PrimitiveType,\n        VertexFormat) {\n    'use strict';\n\n    var diffScratch = new Cartesian3();\n\n    /**\n     * Describes a cube centered at the origin.\n     *\n     * @alias BoxGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.minimum The minimum x, y, and z coordinates of the box.\n     * @param {Cartesian3} options.maximum The maximum x, y, and z coordinates of the box.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @see BoxGeometry.fromDimensions\n     * @see BoxGeometry.createGeometry\n     * @see Packable\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Box.html|Cesium Sandcastle Box Demo}\n     *\n     * @example\n     * var box = new Cesium.BoxGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0),\n     *   minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0)\n     * });\n     * var geometry = Cesium.BoxGeometry.createGeometry(box);\n     */\n    function BoxGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var min = options.minimum;\n        var max = options.maximum;\n\n        \n\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        this._minimum = Cartesian3.clone(min);\n        this._maximum = Cartesian3.clone(max);\n        this._vertexFormat = vertexFormat;\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createBoxGeometry';\n    }\n\n    /**\n     * Creates a cube centered at the origin given its dimensions.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3} options.dimensions The width, depth, and height of the box stored in the x, y, and z coordinates of the <code>Cartesian3</code>, respectively.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     * @returns {BoxGeometry}\n     *\n     * @exception {DeveloperError} All dimensions components must be greater than or equal to zero.\n     *\n     *\n     * @example\n     * var box = Cesium.BoxGeometry.fromDimensions({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   dimensions : new Cesium.Cartesian3(500000.0, 500000.0, 500000.0)\n     * });\n     * var geometry = Cesium.BoxGeometry.createGeometry(box);\n     *\n     * @see BoxGeometry.createGeometry\n     */\n    BoxGeometry.fromDimensions = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var dimensions = options.dimensions;\n\n        \n\n        var corner = Cartesian3.multiplyByScalar(dimensions, 0.5, new Cartesian3());\n\n        return new BoxGeometry({\n            minimum : Cartesian3.negate(corner, new Cartesian3()),\n            maximum : corner,\n            vertexFormat : options.vertexFormat,\n            offsetAttribute: options.offsetAttribute\n        });\n    };\n\n    /**\n     * Creates a cube from the dimensions of an AxisAlignedBoundingBox.\n     *\n     * @param {AxisAlignedBoundingBox} boundingBox A description of the AxisAlignedBoundingBox.\n     * @returns {BoxGeometry}\n     *\n     *\n     *\n     * @example\n     * var aabb = Cesium.AxisAlignedBoundingBox.fromPoints(Cesium.Cartesian3.fromDegreesArray([\n     *      -72.0, 40.0,\n     *      -70.0, 35.0,\n     *      -75.0, 30.0,\n     *      -70.0, 30.0,\n     *      -68.0, 40.0\n     * ]));\n     * var box = Cesium.BoxGeometry.fromAxisAlignedBoundingBox(aabb);\n     *\n     * @see BoxGeometry.createGeometry\n     */\n    BoxGeometry.fromAxisAlignedBoundingBox = function (boundingBox) {\n        \n\n        return new BoxGeometry({\n            minimum : boundingBox.minimum,\n            maximum : boundingBox.maximum\n        });\n    };\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    BoxGeometry.packedLength = 2 * Cartesian3.packedLength + VertexFormat.packedLength + 1;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {BoxGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    BoxGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._minimum, array, startingIndex);\n        Cartesian3.pack(value._maximum, array, startingIndex + Cartesian3.packedLength);\n        VertexFormat.pack(value._vertexFormat, array, startingIndex + 2 * Cartesian3.packedLength);\n        array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchMin = new Cartesian3();\n    var scratchMax = new Cartesian3();\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        minimum: scratchMin,\n        maximum: scratchMax,\n        vertexFormat: scratchVertexFormat,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {BoxGeometry} [result] The object into which to store the result.\n     * @returns {BoxGeometry} The modified result parameter or a new BoxGeometry instance if one was not provided.\n     */\n    BoxGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var min = Cartesian3.unpack(array, startingIndex, scratchMin);\n        var max = Cartesian3.unpack(array, startingIndex + Cartesian3.packedLength, scratchMax);\n        var vertexFormat = VertexFormat.unpack(array, startingIndex + 2 * Cartesian3.packedLength, scratchVertexFormat);\n        var offsetAttribute = array[startingIndex + 2 * Cartesian3.packedLength + VertexFormat.packedLength];\n\n        if (!defined(result)) {\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new BoxGeometry(scratchOptions);\n        }\n\n        result._minimum = Cartesian3.clone(min, result._minimum);\n        result._maximum = Cartesian3.clone(max, result._maximum);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of a box, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {BoxGeometry} boxGeometry A description of the box.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    BoxGeometry.createGeometry = function(boxGeometry) {\n        var min = boxGeometry._minimum;\n        var max = boxGeometry._maximum;\n        var vertexFormat = boxGeometry._vertexFormat;\n\n        if (Cartesian3.equals(min, max)) {\n            return;\n        }\n\n        var attributes = new GeometryAttributes();\n        var indices;\n        var positions;\n\n        if (vertexFormat.position &&\n                (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent)) {\n            if (vertexFormat.position) {\n                // 8 corner points.  Duplicated 3 times each for each incident edge/face.\n                positions = new Float64Array(6 * 4 * 3);\n\n                // +z face\n                positions[0]  = min.x;\n                positions[1]  = min.y;\n                positions[2]  = max.z;\n                positions[3]  = max.x;\n                positions[4]  = min.y;\n                positions[5]  = max.z;\n                positions[6]  = max.x;\n                positions[7]  = max.y;\n                positions[8]  = max.z;\n                positions[9]  = min.x;\n                positions[10] = max.y;\n                positions[11] = max.z;\n\n                // -z face\n                positions[12] = min.x;\n                positions[13] = min.y;\n                positions[14] = min.z;\n                positions[15] = max.x;\n                positions[16] = min.y;\n                positions[17] = min.z;\n                positions[18] = max.x;\n                positions[19] = max.y;\n                positions[20] = min.z;\n                positions[21] = min.x;\n                positions[22] = max.y;\n                positions[23] = min.z;\n\n                // +x face\n                positions[24] = max.x;\n                positions[25] = min.y;\n                positions[26] = min.z;\n                positions[27] = max.x;\n                positions[28] = max.y;\n                positions[29] = min.z;\n                positions[30] = max.x;\n                positions[31] = max.y;\n                positions[32] = max.z;\n                positions[33] = max.x;\n                positions[34] = min.y;\n                positions[35] = max.z;\n\n                // -x face\n                positions[36] = min.x;\n                positions[37] = min.y;\n                positions[38] = min.z;\n                positions[39] = min.x;\n                positions[40] = max.y;\n                positions[41] = min.z;\n                positions[42] = min.x;\n                positions[43] = max.y;\n                positions[44] = max.z;\n                positions[45] = min.x;\n                positions[46] = min.y;\n                positions[47] = max.z;\n\n                // +y face\n                positions[48] = min.x;\n                positions[49] = max.y;\n                positions[50] = min.z;\n                positions[51] = max.x;\n                positions[52] = max.y;\n                positions[53] = min.z;\n                positions[54] = max.x;\n                positions[55] = max.y;\n                positions[56] = max.z;\n                positions[57] = min.x;\n                positions[58] = max.y;\n                positions[59] = max.z;\n\n                // -y face\n                positions[60] = min.x;\n                positions[61] = min.y;\n                positions[62] = min.z;\n                positions[63] = max.x;\n                positions[64] = min.y;\n                positions[65] = min.z;\n                positions[66] = max.x;\n                positions[67] = min.y;\n                positions[68] = max.z;\n                positions[69] = min.x;\n                positions[70] = min.y;\n                positions[71] = max.z;\n\n                attributes.position = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.DOUBLE,\n                    componentsPerAttribute : 3,\n                    values : positions\n                });\n            }\n\n            if (vertexFormat.normal) {\n                var normals = new Float32Array(6 * 4 * 3);\n\n                // +z face\n                normals[0]  = 0.0;\n                normals[1]  = 0.0;\n                normals[2]  = 1.0;\n                normals[3]  = 0.0;\n                normals[4]  = 0.0;\n                normals[5]  = 1.0;\n                normals[6]  = 0.0;\n                normals[7]  = 0.0;\n                normals[8]  = 1.0;\n                normals[9]  = 0.0;\n                normals[10] = 0.0;\n                normals[11] = 1.0;\n\n                // -z face\n                normals[12] = 0.0;\n                normals[13] = 0.0;\n                normals[14] = -1.0;\n                normals[15] = 0.0;\n                normals[16] = 0.0;\n                normals[17] = -1.0;\n                normals[18] = 0.0;\n                normals[19] = 0.0;\n                normals[20] = -1.0;\n                normals[21] = 0.0;\n                normals[22] = 0.0;\n                normals[23] = -1.0;\n\n                // +x face\n                normals[24] = 1.0;\n                normals[25] = 0.0;\n                normals[26] = 0.0;\n                normals[27] = 1.0;\n                normals[28] = 0.0;\n                normals[29] = 0.0;\n                normals[30] = 1.0;\n                normals[31] = 0.0;\n                normals[32] = 0.0;\n                normals[33] = 1.0;\n                normals[34] = 0.0;\n                normals[35] = 0.0;\n\n                // -x face\n                normals[36] = -1.0;\n                normals[37] = 0.0;\n                normals[38] = 0.0;\n                normals[39] = -1.0;\n                normals[40] = 0.0;\n                normals[41] = 0.0;\n                normals[42] = -1.0;\n                normals[43] = 0.0;\n                normals[44] = 0.0;\n                normals[45] = -1.0;\n                normals[46] = 0.0;\n                normals[47] = 0.0;\n\n                // +y face\n                normals[48] = 0.0;\n                normals[49] = 1.0;\n                normals[50] = 0.0;\n                normals[51] = 0.0;\n                normals[52] = 1.0;\n                normals[53] = 0.0;\n                normals[54] = 0.0;\n                normals[55] = 1.0;\n                normals[56] = 0.0;\n                normals[57] = 0.0;\n                normals[58] = 1.0;\n                normals[59] = 0.0;\n\n                // -y face\n                normals[60] = 0.0;\n                normals[61] = -1.0;\n                normals[62] = 0.0;\n                normals[63] = 0.0;\n                normals[64] = -1.0;\n                normals[65] = 0.0;\n                normals[66] = 0.0;\n                normals[67] = -1.0;\n                normals[68] = 0.0;\n                normals[69] = 0.0;\n                normals[70] = -1.0;\n                normals[71] = 0.0;\n\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.st) {\n                var texCoords = new Float32Array(6 * 4 * 2);\n\n                // +z face\n                texCoords[0]  = 0.0;\n                texCoords[1]  = 0.0;\n                texCoords[2]  = 1.0;\n                texCoords[3]  = 0.0;\n                texCoords[4]  = 1.0;\n                texCoords[5]  = 1.0;\n                texCoords[6]  = 0.0;\n                texCoords[7]  = 1.0;\n\n                // -z face\n                texCoords[8]  = 1.0;\n                texCoords[9]  = 0.0;\n                texCoords[10] = 0.0;\n                texCoords[11] = 0.0;\n                texCoords[12] = 0.0;\n                texCoords[13] = 1.0;\n                texCoords[14] = 1.0;\n                texCoords[15] = 1.0;\n\n                //+x face\n                texCoords[16] = 0.0;\n                texCoords[17] = 0.0;\n                texCoords[18] = 1.0;\n                texCoords[19] = 0.0;\n                texCoords[20] = 1.0;\n                texCoords[21] = 1.0;\n                texCoords[22] = 0.0;\n                texCoords[23] = 1.0;\n\n                // -x face\n                texCoords[24] = 1.0;\n                texCoords[25] = 0.0;\n                texCoords[26] = 0.0;\n                texCoords[27] = 0.0;\n                texCoords[28] = 0.0;\n                texCoords[29] = 1.0;\n                texCoords[30] = 1.0;\n                texCoords[31] = 1.0;\n\n                // +y face\n                texCoords[32] = 1.0;\n                texCoords[33] = 0.0;\n                texCoords[34] = 0.0;\n                texCoords[35] = 0.0;\n                texCoords[36] = 0.0;\n                texCoords[37] = 1.0;\n                texCoords[38] = 1.0;\n                texCoords[39] = 1.0;\n\n                // -y face\n                texCoords[40] = 0.0;\n                texCoords[41] = 0.0;\n                texCoords[42] = 1.0;\n                texCoords[43] = 0.0;\n                texCoords[44] = 1.0;\n                texCoords[45] = 1.0;\n                texCoords[46] = 0.0;\n                texCoords[47] = 1.0;\n\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : texCoords\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                var tangents = new Float32Array(6 * 4 * 3);\n\n                // +z face\n                tangents[0]  = 1.0;\n                tangents[1]  = 0.0;\n                tangents[2]  = 0.0;\n                tangents[3]  = 1.0;\n                tangents[4]  = 0.0;\n                tangents[5]  = 0.0;\n                tangents[6]  = 1.0;\n                tangents[7]  = 0.0;\n                tangents[8]  = 0.0;\n                tangents[9]  = 1.0;\n                tangents[10] = 0.0;\n                tangents[11] = 0.0;\n\n                // -z face\n                tangents[12] = -1.0;\n                tangents[13] = 0.0;\n                tangents[14] = 0.0;\n                tangents[15] = -1.0;\n                tangents[16] = 0.0;\n                tangents[17] = 0.0;\n                tangents[18] = -1.0;\n                tangents[19] = 0.0;\n                tangents[20] = 0.0;\n                tangents[21] = -1.0;\n                tangents[22] = 0.0;\n                tangents[23] = 0.0;\n\n                // +x face\n                tangents[24] = 0.0;\n                tangents[25] = 1.0;\n                tangents[26] = 0.0;\n                tangents[27] = 0.0;\n                tangents[28] = 1.0;\n                tangents[29] = 0.0;\n                tangents[30] = 0.0;\n                tangents[31] = 1.0;\n                tangents[32] = 0.0;\n                tangents[33] = 0.0;\n                tangents[34] = 1.0;\n                tangents[35] = 0.0;\n\n                // -x face\n                tangents[36] = 0.0;\n                tangents[37] = -1.0;\n                tangents[38] = 0.0;\n                tangents[39] = 0.0;\n                tangents[40] = -1.0;\n                tangents[41] = 0.0;\n                tangents[42] = 0.0;\n                tangents[43] = -1.0;\n                tangents[44] = 0.0;\n                tangents[45] = 0.0;\n                tangents[46] = -1.0;\n                tangents[47] = 0.0;\n\n                // +y face\n                tangents[48] = -1.0;\n                tangents[49] = 0.0;\n                tangents[50] = 0.0;\n                tangents[51] = -1.0;\n                tangents[52] = 0.0;\n                tangents[53] = 0.0;\n                tangents[54] = -1.0;\n                tangents[55] = 0.0;\n                tangents[56] = 0.0;\n                tangents[57] = -1.0;\n                tangents[58] = 0.0;\n                tangents[59] = 0.0;\n\n                // -y face\n                tangents[60] = 1.0;\n                tangents[61] = 0.0;\n                tangents[62] = 0.0;\n                tangents[63] = 1.0;\n                tangents[64] = 0.0;\n                tangents[65] = 0.0;\n                tangents[66] = 1.0;\n                tangents[67] = 0.0;\n                tangents[68] = 0.0;\n                tangents[69] = 1.0;\n                tangents[70] = 0.0;\n                tangents[71] = 0.0;\n\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                var bitangents = new Float32Array(6 * 4 * 3);\n\n                // +z face\n                bitangents[0] = 0.0;\n                bitangents[1] = 1.0;\n                bitangents[2] = 0.0;\n                bitangents[3] = 0.0;\n                bitangents[4] = 1.0;\n                bitangents[5] = 0.0;\n                bitangents[6] = 0.0;\n                bitangents[7] = 1.0;\n                bitangents[8] = 0.0;\n                bitangents[9] = 0.0;\n                bitangents[10] = 1.0;\n                bitangents[11] = 0.0;\n\n                // -z face\n                bitangents[12] = 0.0;\n                bitangents[13] = 1.0;\n                bitangents[14] = 0.0;\n                bitangents[15] = 0.0;\n                bitangents[16] = 1.0;\n                bitangents[17] = 0.0;\n                bitangents[18] = 0.0;\n                bitangents[19] = 1.0;\n                bitangents[20] = 0.0;\n                bitangents[21] = 0.0;\n                bitangents[22] = 1.0;\n                bitangents[23] = 0.0;\n\n                // +x face\n                bitangents[24] = 0.0;\n                bitangents[25] = 0.0;\n                bitangents[26] = 1.0;\n                bitangents[27] = 0.0;\n                bitangents[28] = 0.0;\n                bitangents[29] = 1.0;\n                bitangents[30] = 0.0;\n                bitangents[31] = 0.0;\n                bitangents[32] = 1.0;\n                bitangents[33] = 0.0;\n                bitangents[34] = 0.0;\n                bitangents[35] = 1.0;\n\n                // -x face\n                bitangents[36] = 0.0;\n                bitangents[37] = 0.0;\n                bitangents[38] = 1.0;\n                bitangents[39] = 0.0;\n                bitangents[40] = 0.0;\n                bitangents[41] = 1.0;\n                bitangents[42] = 0.0;\n                bitangents[43] = 0.0;\n                bitangents[44] = 1.0;\n                bitangents[45] = 0.0;\n                bitangents[46] = 0.0;\n                bitangents[47] = 1.0;\n\n                // +y face\n                bitangents[48] = 0.0;\n                bitangents[49] = 0.0;\n                bitangents[50] = 1.0;\n                bitangents[51] = 0.0;\n                bitangents[52] = 0.0;\n                bitangents[53] = 1.0;\n                bitangents[54] = 0.0;\n                bitangents[55] = 0.0;\n                bitangents[56] = 1.0;\n                bitangents[57] = 0.0;\n                bitangents[58] = 0.0;\n                bitangents[59] = 1.0;\n\n                // -y face\n                bitangents[60] = 0.0;\n                bitangents[61] = 0.0;\n                bitangents[62] = 1.0;\n                bitangents[63] = 0.0;\n                bitangents[64] = 0.0;\n                bitangents[65] = 1.0;\n                bitangents[66] = 0.0;\n                bitangents[67] = 0.0;\n                bitangents[68] = 1.0;\n                bitangents[69] = 0.0;\n                bitangents[70] = 0.0;\n                bitangents[71] = 1.0;\n\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n\n            // 12 triangles:  6 faces, 2 triangles each.\n            indices = new Uint16Array(6 * 2 * 3);\n\n            // +z face\n            indices[0] = 0;\n            indices[1] = 1;\n            indices[2] = 2;\n            indices[3] = 0;\n            indices[4] = 2;\n            indices[5] = 3;\n\n            // -z face\n            indices[6] = 4 + 2;\n            indices[7] = 4 + 1;\n            indices[8] = 4 + 0;\n            indices[9] = 4 + 3;\n            indices[10] = 4 + 2;\n            indices[11] = 4 + 0;\n\n            // +x face\n            indices[12] = 8 + 0;\n            indices[13] = 8 + 1;\n            indices[14] = 8 + 2;\n            indices[15] = 8 + 0;\n            indices[16] = 8 + 2;\n            indices[17] = 8 + 3;\n\n            // -x face\n            indices[18] = 12 + 2;\n            indices[19] = 12 + 1;\n            indices[20] = 12 + 0;\n            indices[21] = 12 + 3;\n            indices[22] = 12 + 2;\n            indices[23] = 12 + 0;\n\n            // +y face\n            indices[24] = 16 + 2;\n            indices[25] = 16 + 1;\n            indices[26] = 16 + 0;\n            indices[27] = 16 + 3;\n            indices[28] = 16 + 2;\n            indices[29] = 16 + 0;\n\n            // -y face\n            indices[30] = 20 + 0;\n            indices[31] = 20 + 1;\n            indices[32] = 20 + 2;\n            indices[33] = 20 + 0;\n            indices[34] = 20 + 2;\n            indices[35] = 20 + 3;\n        } else {\n            // Positions only - no need to duplicate corner points\n            positions = new Float64Array(8 * 3);\n\n            positions[0] = min.x;\n            positions[1] = min.y;\n            positions[2] = min.z;\n            positions[3] = max.x;\n            positions[4] = min.y;\n            positions[5] = min.z;\n            positions[6] = max.x;\n            positions[7] = max.y;\n            positions[8] = min.z;\n            positions[9] = min.x;\n            positions[10] = max.y;\n            positions[11] = min.z;\n            positions[12] = min.x;\n            positions[13] = min.y;\n            positions[14] = max.z;\n            positions[15] = max.x;\n            positions[16] = min.y;\n            positions[17] = max.z;\n            positions[18] = max.x;\n            positions[19] = max.y;\n            positions[20] = max.z;\n            positions[21] = min.x;\n            positions[22] = max.y;\n            positions[23] = max.z;\n\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n\n            // 12 triangles:  6 faces, 2 triangles each.\n            indices = new Uint16Array(6 * 2 * 3);\n\n            // plane z = corner.Z\n            indices[0] = 4;\n            indices[1] = 5;\n            indices[2] = 6;\n            indices[3] = 4;\n            indices[4] = 6;\n            indices[5] = 7;\n\n            // plane z = -corner.Z\n            indices[6] = 1;\n            indices[7] = 0;\n            indices[8] = 3;\n            indices[9] = 1;\n            indices[10] = 3;\n            indices[11] = 2;\n\n            // plane x = corner.X\n            indices[12] = 1;\n            indices[13] = 6;\n            indices[14] = 5;\n            indices[15] = 1;\n            indices[16] = 2;\n            indices[17] = 6;\n\n            // plane y = corner.Y\n            indices[18] = 2;\n            indices[19] = 3;\n            indices[20] = 7;\n            indices[21] = 2;\n            indices[22] = 7;\n            indices[23] = 6;\n\n            // plane x = -corner.X\n            indices[24] = 3;\n            indices[25] = 0;\n            indices[26] = 4;\n            indices[27] = 3;\n            indices[28] = 4;\n            indices[29] = 7;\n\n            // plane y = -corner.Y\n            indices[30] = 0;\n            indices[31] = 1;\n            indices[32] = 5;\n            indices[33] = 0;\n            indices[34] = 5;\n            indices[35] = 4;\n        }\n\n        var diff = Cartesian3.subtract(max, min, diffScratch);\n        var radius = Cartesian3.magnitude(diff) * 0.5;\n\n        if (defined(boxGeometry._offsetAttribute)) {\n            var length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = boxGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : new BoundingSphere(Cartesian3.ZERO, radius),\n            offsetAttribute : boxGeometry._offsetAttribute\n        });\n    };\n\n    var unitBoxGeometry;\n\n    /**\n     * Returns the geometric representation of a unit box, including its vertices, indices, and a bounding sphere.\n     * @returns {Geometry} The computed vertices and indices.\n     *\n     * @private\n     */\n    BoxGeometry.getUnitBox = function() {\n        if (!defined(unitBoxGeometry)) {\n            unitBoxGeometry = BoxGeometry.createGeometry(BoxGeometry.fromDimensions({\n                dimensions : new Cartesian3(1.0, 1.0, 1.0),\n                vertexFormat : VertexFormat.POSITION_ONLY\n            }));\n        }\n        return unitBoxGeometry;\n    };\n\n    return BoxGeometry;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/Cartographic',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/EasingFunction',\n        '../Core/Ellipsoid',\n        '../Core/EllipsoidGeodesic',\n        '../Core/Event',\n        '../Core/getTimestamp',\n        '../Core/HeadingPitchRange',\n        '../Core/HeadingPitchRoll',\n        '../Core/Intersect',\n        '../Core/IntersectionTests',\n        '../Core/Math',\n        '../Core/Matrix3',\n        '../Core/Matrix4',\n        '../Core/OrthographicFrustum',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Core/PerspectiveFrustum',\n        '../Core/Quaternion',\n        '../Core/Ray',\n        '../Core/Rectangle',\n        '../Core/Transforms',\n        './CameraFlightPath',\n        './MapMode2D',\n        './SceneMode'\n    ], function(\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        EasingFunction,\n        Ellipsoid,\n        EllipsoidGeodesic,\n        Event,\n        getTimestamp,\n        HeadingPitchRange,\n        HeadingPitchRoll,\n        Intersect,\n        IntersectionTests,\n        CesiumMath,\n        Matrix3,\n        Matrix4,\n        OrthographicFrustum,\n        OrthographicOffCenterFrustum,\n        PerspectiveFrustum,\n        Quaternion,\n        Ray,\n        Rectangle,\n        Transforms,\n        CameraFlightPath,\n        MapMode2D,\n        SceneMode) {\n    'use strict';\n\n    /**\n     * The camera is defined by a position, orientation, and view frustum.\n     * <br /><br />\n     * The orientation forms an orthonormal basis with a view, up and right = view x up unit vectors.\n     * <br /><br />\n     * The viewing frustum is defined by 6 planes.\n     * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n     * define the unit vector normal to the plane, and the w component is the distance of the\n     * plane from the origin/camera position.\n     *\n     * @alias Camera\n     *\n     * @constructor\n     *\n     * @param {Scene} scene The scene.\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Camera.html|Cesium Sandcastle Camera Demo}\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Camera%20Tutorial.html\">Sandcastle Example</a> from the <a href=\"https://cesiumjs.org/2013/02/13/Cesium-Camera-Tutorial/|Camera Tutorial}\n     *\n     * @example\n     * // Create a camera looking down the negative z-axis, positioned at the origin,\n     * // with a field of view of 60 degrees, and 1:1 aspect ratio.\n     * var camera = new Cesium.Camera(scene);\n     * camera.position = new Cesium.Cartesian3();\n     * camera.direction = Cesium.Cartesian3.negate(Cesium.Cartesian3.UNIT_Z, new Cesium.Cartesian3());\n     * camera.up = Cesium.Cartesian3.clone(Cesium.Cartesian3.UNIT_Y);\n     * camera.frustum.fov = Cesium.Math.PI_OVER_THREE;\n     * camera.frustum.near = 1.0;\n     * camera.frustum.far = 2.0;\n     */\n    function Camera(scene) {\n        \n        this._scene = scene;\n\n        this._transform = Matrix4.clone(Matrix4.IDENTITY);\n        this._invTransform = Matrix4.clone(Matrix4.IDENTITY);\n        this._actualTransform = Matrix4.clone(Matrix4.IDENTITY);\n        this._actualInvTransform = Matrix4.clone(Matrix4.IDENTITY);\n        this._transformChanged = false;\n\n        /**\n         * The position of the camera.\n         *\n         * @type {Cartesian3}\n         */\n        this.position = new Cartesian3();\n        this._position = new Cartesian3();\n        this._positionWC = new Cartesian3();\n        this._positionCartographic = new Cartographic();\n        this._oldPositionWC = undefined;\n\n        /**\n         * The position delta magnitude.\n         *\n         * @private\n         */\n        this.positionWCDeltaMagnitude = 0.0;\n\n        /**\n         * The position delta magnitude last frame.\n         *\n         * @private\n         */\n        this.positionWCDeltaMagnitudeLastFrame = 0.0;\n\n        /**\n         * How long in seconds since the camera has stopped moving\n         *\n         * @private\n         */\n        this.timeSinceMoved = 0.0;\n        this._lastMovedTimestamp = 0.0;\n\n        /**\n         * The view direction of the camera.\n         *\n         * @type {Cartesian3}\n         */\n        this.direction = new Cartesian3();\n        this._direction = new Cartesian3();\n        this._directionWC = new Cartesian3();\n\n        /**\n         * The up direction of the camera.\n         *\n         * @type {Cartesian3}\n         */\n        this.up = new Cartesian3();\n        this._up = new Cartesian3();\n        this._upWC = new Cartesian3();\n\n        /**\n         * The right direction of the camera.\n         *\n         * @type {Cartesian3}\n         */\n        this.right = new Cartesian3();\n        this._right = new Cartesian3();\n        this._rightWC = new Cartesian3();\n\n        /**\n         * The region of space in view.\n         *\n         * @type {Frustum}\n         * @default PerspectiveFrustum()\n         *\n         * @see PerspectiveFrustum\n         * @see PerspectiveOffCenterFrustum\n         * @see OrthographicFrustum\n         */\n        this.frustum = new PerspectiveFrustum();\n        this.frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n        this.frustum.fov = CesiumMath.toRadians(60.0);\n\n        /**\n         * The default amount to move the camera when an argument is not\n         * provided to the move methods.\n         * @type {Number}\n         * @default 100000.0;\n         */\n        this.defaultMoveAmount = 100000.0;\n        /**\n         * The default amount to rotate the camera when an argument is not\n         * provided to the look methods.\n         * @type {Number}\n         * @default Math.PI / 60.0\n         */\n        this.defaultLookAmount = Math.PI / 60.0;\n        /**\n         * The default amount to rotate the camera when an argument is not\n         * provided to the rotate methods.\n         * @type {Number}\n         * @default Math.PI / 3600.0\n         */\n        this.defaultRotateAmount = Math.PI / 3600.0;\n        /**\n         * The default amount to move the camera when an argument is not\n         * provided to the zoom methods.\n         * @type {Number}\n         * @default 100000.0;\n         */\n        this.defaultZoomAmount = 100000.0;\n        /**\n         * If set, the camera will not be able to rotate past this axis in either direction.\n         * @type {Cartesian3}\n         * @default undefined\n         */\n        this.constrainedAxis = undefined;\n        /**\n         * The factor multiplied by the the map size used to determine where to clamp the camera position\n         * when zooming out from the surface. The default is 1.5. Only valid for 2D and the map is rotatable.\n         * @type {Number}\n         * @default 1.5\n         */\n        this.maximumZoomFactor = 1.5;\n\n        this._moveStart = new Event();\n        this._moveEnd = new Event();\n\n        this._changed = new Event();\n        this._changedPosition = undefined;\n        this._changedDirection = undefined;\n        this._changedFrustum = undefined;\n\n        /**\n         * The amount the camera has to change before the <code>changed</code> event is raised. The value is a percentage in the [0, 1] range.\n         * @type {number}\n         * @default 0.5\n         */\n        this.percentageChanged = 0.5;\n\n        this._viewMatrix = new Matrix4();\n        this._invViewMatrix = new Matrix4();\n        updateViewMatrix(this);\n\n        this._mode = SceneMode.SCENE3D;\n        this._modeChanged = true;\n        var projection = scene.mapProjection;\n        this._projection = projection;\n        this._maxCoord = projection.project(new Cartographic(Math.PI, CesiumMath.PI_OVER_TWO));\n        this._max2Dfrustum = undefined;\n        this._suspendTerrainAdjustment = false;\n\n        // set default view\n        rectangleCameraPosition3D(this, Camera.DEFAULT_VIEW_RECTANGLE, this.position, true);\n\n        var mag = Cartesian3.magnitude(this.position);\n        mag += mag * Camera.DEFAULT_VIEW_FACTOR;\n        Cartesian3.normalize(this.position, this.position);\n        Cartesian3.multiplyByScalar(this.position, mag, this.position);\n    }\n\n    /**\n     * @private\n     */\n    Camera.TRANSFORM_2D = new Matrix4(\n        0.0, 0.0, 1.0, 0.0,\n        1.0, 0.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        0.0, 0.0, 0.0, 1.0);\n\n    /**\n     * @private\n     */\n    Camera.TRANSFORM_2D_INVERSE = Matrix4.inverseTransformation(Camera.TRANSFORM_2D, new Matrix4());\n\n    /**\n     * The default rectangle the camera will view on creation.\n     * @type Rectangle\n     */\n    Camera.DEFAULT_VIEW_RECTANGLE = Rectangle.fromDegrees(-95.0, -20.0, -70.0, 90.0);\n\n    /**\n     * A scalar to multiply to the camera position and add it back after setting the camera to view the rectangle.\n     * A value of zero means the camera will view the entire {@link Camera#DEFAULT_VIEW_RECTANGLE}, a value greater than zero\n     * will move it further away from the extent, and a value less than zero will move it close to the extent.\n     * @type Number\n     */\n    Camera.DEFAULT_VIEW_FACTOR = 0.5;\n\n    /**\n     * The default heading/pitch/range that is used when the camera flies to a location that contains a bounding sphere.\n     * @type HeadingPitchRange\n     */\n    Camera.DEFAULT_OFFSET = new HeadingPitchRange(0.0, -CesiumMath.PI_OVER_FOUR, 0.0);\n\n    function updateViewMatrix(camera) {\n        Matrix4.computeView(camera._position, camera._direction, camera._up, camera._right, camera._viewMatrix);\n        Matrix4.multiply(camera._viewMatrix, camera._actualInvTransform, camera._viewMatrix);\n        Matrix4.inverseTransformation(camera._viewMatrix, camera._invViewMatrix);\n    }\n\n    function updateCameraDeltas(camera) {\n        if (!defined(camera._oldPositionWC)) {\n            camera._oldPositionWC = Cartesian3.clone(camera.positionWC, camera._oldPositionWC);\n        } else {\n            camera.positionWCDeltaMagnitudeLastFrame = camera.positionWCDeltaMagnitude;\n            var delta = Cartesian3.subtract(camera.positionWC, camera._oldPositionWC, camera._oldPositionWC);\n            camera.positionWCDeltaMagnitude = Cartesian3.magnitude(delta);\n            camera._oldPositionWC = Cartesian3.clone(camera.positionWC, camera._oldPositionWC);\n\n            // Update move timers\n            if (camera.positionWCDeltaMagnitude > 0.0) {\n                camera.timeSinceMoved = 0.0;\n                camera._lastMovedTimestamp = getTimestamp();\n            } else {\n                camera.timeSinceMoved = Math.max(getTimestamp() - camera._lastMovedTimestamp, 0.0) / 1000.0;\n            }\n        }\n    }\n\n    /**\n     * Checks if there's a camera flight for this camera.\n     *\n     * @returns {Boolean} Whether or not this camera has a current flight with a valid preloadFlightCamera in scene.\n     *\n     * @private\n     *\n     */\n    Camera.prototype.hasCurrentFlight = function() {\n        // The preload flight camera defined check only here since it can be set to undefined when not 3D mode.\n        return defined(this._currentFlight) && defined(this._scene.preloadFlightCamera);\n    };\n\n    Camera.prototype._updateCameraChanged = function() {\n        var camera = this;\n\n        updateCameraDeltas(camera);\n\n        if (camera._changed.numberOfListeners === 0) {\n            return;\n        }\n\n        var percentageChanged = camera.percentageChanged;\n\n        if (camera._mode === SceneMode.SCENE2D) {\n            if (!defined(camera._changedFrustum)) {\n                camera._changedPosition = Cartesian3.clone(camera.position, camera._changedPosition);\n                camera._changedFrustum = camera.frustum.clone();\n                return;\n            }\n\n            var position = camera.position;\n            var lastPosition = camera._changedPosition;\n\n            var frustum = camera.frustum;\n            var lastFrustum = camera._changedFrustum;\n\n            var x0 = position.x + frustum.left;\n            var x1 = position.x + frustum.right;\n            var x2 = lastPosition.x + lastFrustum.left;\n            var x3 = lastPosition.x + lastFrustum.right;\n\n            var y0 = position.y + frustum.bottom;\n            var y1 = position.y + frustum.top;\n            var y2 = lastPosition.y + lastFrustum.bottom;\n            var y3 = lastPosition.y + lastFrustum.top;\n\n            var leftX = Math.max(x0, x2);\n            var rightX = Math.min(x1, x3);\n            var bottomY = Math.max(y0, y2);\n            var topY = Math.min(y1, y3);\n\n            var areaPercentage;\n            if (leftX >= rightX || bottomY >= y1) {\n                areaPercentage = 1.0;\n            } else {\n                var areaRef = lastFrustum;\n                if (x0 < x2 && x1 > x3 && y0 < y2 && y1 > y3) {\n                    areaRef = frustum;\n                }\n                areaPercentage = 1.0 - ((rightX - leftX) * (topY - bottomY)) / ((areaRef.right - areaRef.left) * (areaRef.top - areaRef.bottom));\n            }\n\n            if (areaPercentage > percentageChanged) {\n                camera._changed.raiseEvent(areaPercentage);\n                camera._changedPosition = Cartesian3.clone(camera.position, camera._changedPosition);\n                camera._changedFrustum = camera.frustum.clone(camera._changedFrustum);\n            }\n            return;\n        }\n\n        if (!defined(camera._changedDirection)) {\n            camera._changedPosition = Cartesian3.clone(camera.positionWC, camera._changedPosition);\n            camera._changedDirection = Cartesian3.clone(camera.directionWC, camera._changedDirection);\n            return;\n        }\n\n        var dirAngle = CesiumMath.acosClamped(Cartesian3.dot(camera.directionWC, camera._changedDirection));\n\n        var dirPercentage;\n        if (defined(camera.frustum.fovy)) {\n            dirPercentage = dirAngle / (camera.frustum.fovy * 0.5);\n        } else {\n            dirPercentage = dirAngle;\n        }\n\n        var distance = Cartesian3.distance(camera.positionWC, camera._changedPosition);\n        var heightPercentage = distance / camera.positionCartographic.height;\n\n        if (dirPercentage > percentageChanged || heightPercentage > percentageChanged) {\n            camera._changed.raiseEvent(Math.max(dirPercentage, heightPercentage));\n            camera._changedPosition = Cartesian3.clone(camera.positionWC, camera._changedPosition);\n            camera._changedDirection = Cartesian3.clone(camera.directionWC, camera._changedDirection);\n        }\n    };\n\n    var scratchAdjustHeightTransform = new Matrix4();\n    var scratchAdjustHeightCartographic = new Cartographic();\n\n    Camera.prototype._adjustHeightForTerrain = function() {\n        var scene = this._scene;\n\n        var screenSpaceCameraController = scene.screenSpaceCameraController;\n        var enableCollisionDetection = screenSpaceCameraController.enableCollisionDetection;\n        var minimumCollisionTerrainHeight = screenSpaceCameraController.minimumCollisionTerrainHeight;\n        var minimumZoomDistance = screenSpaceCameraController.minimumZoomDistance;\n\n        if (this._suspendTerrainAdjustment || !enableCollisionDetection) {\n            return;\n        }\n\n        var mode = this._mode;\n        var globe = scene.globe;\n\n        if (!defined(globe) || mode === SceneMode.SCENE2D || mode === SceneMode.MORPHING) {\n            return;\n        }\n\n        var ellipsoid = globe.ellipsoid;\n        var projection = scene.mapProjection;\n\n        var transform;\n        var mag;\n        if (!Matrix4.equals(this.transform, Matrix4.IDENTITY)) {\n            transform = Matrix4.clone(this.transform, scratchAdjustHeightTransform);\n            mag = Cartesian3.magnitude(this.position);\n            this._setTransform(Matrix4.IDENTITY);\n        }\n\n        var cartographic = scratchAdjustHeightCartographic;\n        if (mode === SceneMode.SCENE3D) {\n            ellipsoid.cartesianToCartographic(this.position, cartographic);\n        } else {\n            projection.unproject(this.position, cartographic);\n        }\n\n        var heightUpdated = false;\n        if (cartographic.height < minimumCollisionTerrainHeight) {\n            var height = globe.getHeight(cartographic);\n            if (defined(height)) {\n                height += minimumZoomDistance;\n                if (cartographic.height < height) {\n                    cartographic.height = height;\n                    if (mode === SceneMode.SCENE3D) {\n                        ellipsoid.cartographicToCartesian(cartographic, this.position);\n                    } else {\n                        projection.project(cartographic, this.position);\n                    }\n                    heightUpdated = true;\n                }\n            }\n        }\n\n        if (defined(transform)) {\n            this._setTransform(transform);\n            if (heightUpdated) {\n                Cartesian3.normalize(this.position, this.position);\n                Cartesian3.negate(this.position, this.direction);\n                Cartesian3.multiplyByScalar(this.position, Math.max(mag, minimumZoomDistance), this.position);\n                Cartesian3.normalize(this.direction, this.direction);\n                Cartesian3.cross(this.direction, this.up, this.right);\n                Cartesian3.cross(this.right, this.direction, this.up);\n            }\n        }\n    };\n\n    function convertTransformForColumbusView(camera) {\n        Transforms.basisTo2D(camera._projection, camera._transform, camera._actualTransform);\n    }\n\n    var scratchCartographic = new Cartographic();\n    var scratchCartesian3Projection = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4Origin = new Cartesian4();\n    var scratchCartesian4NewOrigin = new Cartesian4();\n    var scratchCartesian4NewXAxis = new Cartesian4();\n    var scratchCartesian4NewYAxis = new Cartesian4();\n    var scratchCartesian4NewZAxis = new Cartesian4();\n\n    function convertTransformFor2D(camera) {\n        var projection = camera._projection;\n        var ellipsoid = projection.ellipsoid;\n\n        var origin = Matrix4.getColumn(camera._transform, 3, scratchCartesian4Origin);\n        var cartographic = ellipsoid.cartesianToCartographic(origin, scratchCartographic);\n\n        var projectedPosition = projection.project(cartographic, scratchCartesian3Projection);\n        var newOrigin = scratchCartesian4NewOrigin;\n        newOrigin.x = projectedPosition.z;\n        newOrigin.y = projectedPosition.x;\n        newOrigin.z = projectedPosition.y;\n        newOrigin.w = 1.0;\n\n        var newZAxis = Cartesian4.clone(Cartesian4.UNIT_X, scratchCartesian4NewZAxis);\n\n        var xAxis = Cartesian4.add(Matrix4.getColumn(camera._transform, 0, scratchCartesian3), origin, scratchCartesian3);\n        ellipsoid.cartesianToCartographic(xAxis, cartographic);\n\n        projection.project(cartographic, projectedPosition);\n        var newXAxis = scratchCartesian4NewXAxis;\n        newXAxis.x = projectedPosition.z;\n        newXAxis.y = projectedPosition.x;\n        newXAxis.z = projectedPosition.y;\n        newXAxis.w = 0.0;\n\n        Cartesian3.subtract(newXAxis, newOrigin, newXAxis);\n        newXAxis.x = 0.0;\n\n        var newYAxis = scratchCartesian4NewYAxis;\n        if (Cartesian3.magnitudeSquared(newXAxis) > CesiumMath.EPSILON10) {\n            Cartesian3.cross(newZAxis, newXAxis, newYAxis);\n        } else {\n            var yAxis = Cartesian4.add(Matrix4.getColumn(camera._transform, 1, scratchCartesian3), origin, scratchCartesian3);\n            ellipsoid.cartesianToCartographic(yAxis, cartographic);\n\n            projection.project(cartographic, projectedPosition);\n            newYAxis.x = projectedPosition.z;\n            newYAxis.y = projectedPosition.x;\n            newYAxis.z = projectedPosition.y;\n            newYAxis.w = 0.0;\n\n            Cartesian3.subtract(newYAxis, newOrigin, newYAxis);\n            newYAxis.x = 0.0;\n\n            if (Cartesian3.magnitudeSquared(newYAxis) < CesiumMath.EPSILON10) {\n                Cartesian4.clone(Cartesian4.UNIT_Y, newXAxis);\n                Cartesian4.clone(Cartesian4.UNIT_Z, newYAxis);\n            }\n        }\n\n        Cartesian3.cross(newYAxis, newZAxis, newXAxis);\n        Cartesian3.normalize(newXAxis, newXAxis);\n        Cartesian3.cross(newZAxis, newXAxis, newYAxis);\n        Cartesian3.normalize(newYAxis, newYAxis);\n\n        Matrix4.setColumn(camera._actualTransform, 0, newXAxis, camera._actualTransform);\n        Matrix4.setColumn(camera._actualTransform, 1, newYAxis, camera._actualTransform);\n        Matrix4.setColumn(camera._actualTransform, 2, newZAxis, camera._actualTransform);\n        Matrix4.setColumn(camera._actualTransform, 3, newOrigin, camera._actualTransform);\n    }\n\n    var scratchCartesian = new Cartesian3();\n\n    function updateMembers(camera) {\n        var mode = camera._mode;\n\n        var heightChanged = false;\n        var height = 0.0;\n        if (mode === SceneMode.SCENE2D) {\n            height = camera.frustum.right - camera.frustum.left;\n            heightChanged = height !== camera._positionCartographic.height;\n        }\n\n        var position = camera._position;\n        var positionChanged = !Cartesian3.equals(position, camera.position) || heightChanged;\n        if (positionChanged) {\n            position = Cartesian3.clone(camera.position, camera._position);\n        }\n\n        var direction = camera._direction;\n        var directionChanged = !Cartesian3.equals(direction, camera.direction);\n        if (directionChanged) {\n            Cartesian3.normalize(camera.direction, camera.direction);\n            direction = Cartesian3.clone(camera.direction, camera._direction);\n        }\n\n        var up = camera._up;\n        var upChanged = !Cartesian3.equals(up, camera.up);\n        if (upChanged) {\n            Cartesian3.normalize(camera.up, camera.up);\n            up = Cartesian3.clone(camera.up, camera._up);\n        }\n\n        var right = camera._right;\n        var rightChanged = !Cartesian3.equals(right, camera.right);\n        if (rightChanged) {\n            Cartesian3.normalize(camera.right, camera.right);\n            right = Cartesian3.clone(camera.right, camera._right);\n        }\n\n        var transformChanged = camera._transformChanged || camera._modeChanged;\n        camera._transformChanged = false;\n\n        if (transformChanged) {\n            Matrix4.inverseTransformation(camera._transform, camera._invTransform);\n\n            if (camera._mode === SceneMode.COLUMBUS_VIEW || camera._mode === SceneMode.SCENE2D) {\n                if (Matrix4.equals(Matrix4.IDENTITY, camera._transform)) {\n                    Matrix4.clone(Camera.TRANSFORM_2D, camera._actualTransform);\n                } else if (camera._mode === SceneMode.COLUMBUS_VIEW) {\n                    convertTransformForColumbusView(camera);\n                } else {\n                    convertTransformFor2D(camera);\n                }\n            } else {\n                Matrix4.clone(camera._transform, camera._actualTransform);\n            }\n\n            Matrix4.inverseTransformation(camera._actualTransform, camera._actualInvTransform);\n\n            camera._modeChanged = false;\n        }\n\n        var transform = camera._actualTransform;\n\n        if (positionChanged || transformChanged) {\n            camera._positionWC = Matrix4.multiplyByPoint(transform, position, camera._positionWC);\n\n            // Compute the Cartographic position of the camera.\n            if (mode === SceneMode.SCENE3D || mode === SceneMode.MORPHING) {\n                camera._positionCartographic = camera._projection.ellipsoid.cartesianToCartographic(camera._positionWC, camera._positionCartographic);\n            } else {\n                // The camera position is expressed in the 2D coordinate system where the Y axis is to the East,\n                // the Z axis is to the North, and the X axis is out of the map.  Express them instead in the ENU axes where\n                // X is to the East, Y is to the North, and Z is out of the local horizontal plane.\n                var positionENU = scratchCartesian;\n                positionENU.x = camera._positionWC.y;\n                positionENU.y = camera._positionWC.z;\n                positionENU.z = camera._positionWC.x;\n\n                // In 2D, the camera height is always 12.7 million meters.\n                // The apparent height is equal to half the frustum width.\n                if (mode === SceneMode.SCENE2D) {\n                    positionENU.z = height;\n                }\n\n                camera._projection.unproject(positionENU, camera._positionCartographic);\n            }\n        }\n\n        if (directionChanged || upChanged || rightChanged) {\n            var det = Cartesian3.dot(direction, Cartesian3.cross(up, right, scratchCartesian));\n            if (Math.abs(1.0 - det) > CesiumMath.EPSILON2) {\n                //orthonormalize axes\n                var invUpMag = 1.0 / Cartesian3.magnitudeSquared(up);\n                var scalar = Cartesian3.dot(up, direction) * invUpMag;\n                var w0 = Cartesian3.multiplyByScalar(direction, scalar, scratchCartesian);\n                up = Cartesian3.normalize(Cartesian3.subtract(up, w0, camera._up), camera._up);\n                Cartesian3.clone(up, camera.up);\n\n                right = Cartesian3.cross(direction, up, camera._right);\n                Cartesian3.clone(right, camera.right);\n            }\n        }\n\n        if (directionChanged || transformChanged) {\n            camera._directionWC = Matrix4.multiplyByPointAsVector(transform, direction, camera._directionWC);\n            Cartesian3.normalize(camera._directionWC, camera._directionWC);\n        }\n\n        if (upChanged || transformChanged) {\n            camera._upWC = Matrix4.multiplyByPointAsVector(transform, up, camera._upWC);\n            Cartesian3.normalize(camera._upWC, camera._upWC);\n        }\n\n        if (rightChanged || transformChanged) {\n            camera._rightWC = Matrix4.multiplyByPointAsVector(transform, right, camera._rightWC);\n            Cartesian3.normalize(camera._rightWC, camera._rightWC);\n        }\n\n        if (positionChanged || directionChanged || upChanged || rightChanged || transformChanged) {\n            updateViewMatrix(camera);\n        }\n    }\n\n    function getHeading(direction, up) {\n        var heading;\n        if (!CesiumMath.equalsEpsilon(Math.abs(direction.z), 1.0, CesiumMath.EPSILON3)) {\n            heading = Math.atan2(direction.y, direction.x) - CesiumMath.PI_OVER_TWO;\n        } else {\n            heading = Math.atan2(up.y, up.x) - CesiumMath.PI_OVER_TWO;\n        }\n\n        return CesiumMath.TWO_PI - CesiumMath.zeroToTwoPi(heading);\n    }\n\n    function getPitch(direction) {\n        return CesiumMath.PI_OVER_TWO - CesiumMath.acosClamped(direction.z);\n    }\n\n    function getRoll(direction, up, right) {\n        var roll = 0.0;\n        if (!CesiumMath.equalsEpsilon(Math.abs(direction.z), 1.0, CesiumMath.EPSILON3)) {\n            roll = Math.atan2(-right.z, up.z);\n            roll = CesiumMath.zeroToTwoPi(roll + CesiumMath.TWO_PI);\n        }\n\n        return roll;\n    }\n\n    var scratchHPRMatrix1 = new Matrix4();\n    var scratchHPRMatrix2 = new Matrix4();\n\n    defineProperties(Camera.prototype, {\n        /**\n         * Gets the camera's reference frame. The inverse of this transformation is appended to the view matrix.\n         * @memberof Camera.prototype\n         *\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @default {@link Matrix4.IDENTITY}\n         */\n        transform : {\n            get : function() {\n                return this._transform;\n            }\n        },\n\n        /**\n         * Gets the inverse camera transform.\n         * @memberof Camera.prototype\n         *\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @default {@link Matrix4.IDENTITY}\n         */\n        inverseTransform : {\n            get : function() {\n                updateMembers(this);\n                return this._invTransform;\n            }\n        },\n\n        /**\n         * Gets the view matrix.\n         * @memberof Camera.prototype\n         *\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @see Camera#inverseViewMatrix\n         */\n        viewMatrix : {\n            get : function() {\n                updateMembers(this);\n                return this._viewMatrix;\n            }\n        },\n\n        /**\n         * Gets the inverse view matrix.\n         * @memberof Camera.prototype\n         *\n         * @type {Matrix4}\n         * @readonly\n         *\n         * @see Camera#viewMatrix\n         */\n        inverseViewMatrix : {\n            get : function() {\n                updateMembers(this);\n                return this._invViewMatrix;\n            }\n        },\n\n        /**\n         * Gets the {@link Cartographic} position of the camera, with longitude and latitude\n         * expressed in radians and height in meters.  In 2D and Columbus View, it is possible\n         * for the returned longitude and latitude to be outside the range of valid longitudes\n         * and latitudes when the camera is outside the map.\n         * @memberof Camera.prototype\n         *\n         * @type {Cartographic}\n         * @readonly\n         */\n        positionCartographic : {\n            get : function() {\n                updateMembers(this);\n                return this._positionCartographic;\n            }\n        },\n\n        /**\n         * Gets the position of the camera in world coordinates.\n         * @memberof Camera.prototype\n         *\n         * @type {Cartesian3}\n         * @readonly\n         */\n        positionWC : {\n            get : function() {\n                updateMembers(this);\n                return this._positionWC;\n            }\n        },\n\n        /**\n         * Gets the view direction of the camera in world coordinates.\n         * @memberof Camera.prototype\n         *\n         * @type {Cartesian3}\n         * @readonly\n         */\n        directionWC : {\n            get : function() {\n                updateMembers(this);\n                return this._directionWC;\n            }\n        },\n\n        /**\n         * Gets the up direction of the camera in world coordinates.\n         * @memberof Camera.prototype\n         *\n         * @type {Cartesian3}\n         * @readonly\n         */\n        upWC : {\n            get : function() {\n                updateMembers(this);\n                return this._upWC;\n            }\n        },\n\n        /**\n         * Gets the right direction of the camera in world coordinates.\n         * @memberof Camera.prototype\n         *\n         * @type {Cartesian3}\n         * @readonly\n         */\n        rightWC : {\n            get : function() {\n                updateMembers(this);\n                return this._rightWC;\n            }\n        },\n\n        /**\n         * Gets the camera heading in radians.\n         * @memberof Camera.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        heading : {\n            get : function() {\n                if (this._mode !== SceneMode.MORPHING) {\n                    var ellipsoid = this._projection.ellipsoid;\n\n                    var oldTransform = Matrix4.clone(this._transform, scratchHPRMatrix1);\n                    var transform = Transforms.eastNorthUpToFixedFrame(this.positionWC, ellipsoid, scratchHPRMatrix2);\n                    this._setTransform(transform);\n\n                    var heading = getHeading(this.direction, this.up);\n\n                    this._setTransform(oldTransform);\n\n                    return heading;\n                }\n\n                return undefined;\n            }\n        },\n\n        /**\n         * Gets the camera pitch in radians.\n         * @memberof Camera.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        pitch : {\n            get : function() {\n                if (this._mode !== SceneMode.MORPHING) {\n                    var ellipsoid = this._projection.ellipsoid;\n\n                    var oldTransform = Matrix4.clone(this._transform, scratchHPRMatrix1);\n                    var transform = Transforms.eastNorthUpToFixedFrame(this.positionWC, ellipsoid, scratchHPRMatrix2);\n                    this._setTransform(transform);\n\n                    var pitch = getPitch(this.direction);\n\n                    this._setTransform(oldTransform);\n\n                    return pitch;\n                }\n\n                return undefined;\n            }\n        },\n\n        /**\n         * Gets the camera roll in radians.\n         * @memberof Camera.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        roll : {\n            get : function() {\n                if (this._mode !== SceneMode.MORPHING) {\n                    var ellipsoid = this._projection.ellipsoid;\n\n                    var oldTransform = Matrix4.clone(this._transform, scratchHPRMatrix1);\n                    var transform = Transforms.eastNorthUpToFixedFrame(this.positionWC, ellipsoid, scratchHPRMatrix2);\n                    this._setTransform(transform);\n\n                    var roll = getRoll(this.direction, this.up, this.right);\n\n                    this._setTransform(oldTransform);\n\n                    return roll;\n                }\n\n                return undefined;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised at when the camera starts to move.\n         * @memberof Camera.prototype\n         * @type {Event}\n         * @readonly\n         */\n        moveStart : {\n            get : function() {\n                return this._moveStart;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised when the camera has stopped moving.\n         * @memberof Camera.prototype\n         * @type {Event}\n         * @readonly\n         */\n        moveEnd : {\n            get : function() {\n                return this._moveEnd;\n            }\n        },\n\n        /**\n         * Gets the event that will be raised when the camera has changed by <code>percentageChanged</code>.\n         * @memberof Camera.prototype\n         * @type {Event}\n         * @readonly\n         */\n        changed : {\n            get : function() {\n                return this._changed;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    Camera.prototype.update = function(mode) {\n        \n\n        var updateFrustum = false;\n        if (mode !== this._mode) {\n            this._mode = mode;\n            this._modeChanged = mode !== SceneMode.MORPHING;\n            updateFrustum = this._mode === SceneMode.SCENE2D;\n        }\n\n        if (updateFrustum) {\n            var frustum = this._max2Dfrustum = this.frustum.clone();\n\n            \n\n            var maxZoomOut = 2.0;\n            var ratio = frustum.top / frustum.right;\n            frustum.right = this._maxCoord.x * maxZoomOut;\n            frustum.left = -frustum.right;\n            frustum.top = ratio * frustum.right;\n            frustum.bottom = -frustum.top;\n        }\n\n        if (this._mode === SceneMode.SCENE2D) {\n            clampMove2D(this, this.position);\n        }\n\n        var globe = this._scene.globe;\n        var globeFinishedUpdating = !defined(globe) || (globe._surface.tileProvider.ready && globe._surface._tileLoadQueueHigh.length === 0 && globe._surface._tileLoadQueueMedium.length === 0 && globe._surface._tileLoadQueueLow.length === 0 && globe._surface._debug.tilesWaitingForChildren === 0);\n        if (this._suspendTerrainAdjustment) {\n            this._suspendTerrainAdjustment = !globeFinishedUpdating;\n        }\n\n        if (globeFinishedUpdating) {\n            this._adjustHeightForTerrain();\n        }\n    };\n\n    var setTransformPosition = new Cartesian3();\n    var setTransformUp = new Cartesian3();\n    var setTransformDirection = new Cartesian3();\n\n    Camera.prototype._setTransform = function(transform) {\n        var position = Cartesian3.clone(this.positionWC, setTransformPosition);\n        var up = Cartesian3.clone(this.upWC, setTransformUp);\n        var direction = Cartesian3.clone(this.directionWC, setTransformDirection);\n\n        Matrix4.clone(transform, this._transform);\n        this._transformChanged = true;\n        updateMembers(this);\n        var inverse = this._actualInvTransform;\n\n        Matrix4.multiplyByPoint(inverse, position, this.position);\n        Matrix4.multiplyByPointAsVector(inverse, direction, this.direction);\n        Matrix4.multiplyByPointAsVector(inverse, up, this.up);\n        Cartesian3.cross(this.direction, this.up, this.right);\n\n        updateMembers(this);\n    };\n\n    var scratchAdjustOrtghographicFrustumMousePosition = new Cartesian2();\n    var pickGlobeScratchRay = new Ray();\n    var scratchRayIntersection = new Cartesian3();\n    var scratchDepthIntersection = new Cartesian3();\n\n    Camera.prototype._adjustOrthographicFrustum = function(zooming) {\n        if (!(this.frustum instanceof OrthographicFrustum)) {\n            return;\n        }\n\n        if (!zooming && this._positionCartographic.height < 150000.0) {\n            return;\n        }\n\n        if (!Matrix4.equals(Matrix4.IDENTITY, this.transform)) {\n            this.frustum.width = Cartesian3.magnitude(this.position);\n            return;\n        }\n\n        var scene = this._scene;\n        var globe = scene.globe;\n        var rayIntersection;\n        var depthIntersection;\n\n        if (defined(globe)) {\n            var mousePosition = scratchAdjustOrtghographicFrustumMousePosition;\n            mousePosition.x = scene.drawingBufferWidth / 2.0;\n            mousePosition.y = scene.drawingBufferHeight / 2.0;\n\n            var ray = this.getPickRay(mousePosition, pickGlobeScratchRay);\n            rayIntersection = globe.pickWorldCoordinates(ray, scene, scratchRayIntersection);\n\n            if (scene.pickPositionSupported) {\n                depthIntersection = scene.pickPositionWorldCoordinates(mousePosition, scratchDepthIntersection);\n            }\n\n            if (defined(rayIntersection) && defined(depthIntersection)) {\n                var depthDistance = defined(depthIntersection) ? Cartesian3.distance(depthIntersection, this.positionWC) : Number.POSITIVE_INFINITY;\n                var rayDistance = defined(rayIntersection) ? Cartesian3.distance(rayIntersection, this.positionWC) : Number.POSITIVE_INFINITY;\n                this.frustum.width = Math.min(depthDistance, rayDistance);\n            } else if (defined(depthIntersection)) {\n                this.frustum.width = Cartesian3.distance(depthIntersection, this.positionWC);\n            } else if (defined(rayIntersection)) {\n                this.frustum.width = Cartesian3.distance(rayIntersection, this.positionWC);\n            }\n        }\n\n        if (!defined(globe) || (!defined(rayIntersection) && !defined(depthIntersection))) {\n            var distance = Math.max(this.positionCartographic.height, 0.0);\n            this.frustum.width = distance;\n        }\n    };\n\n    var scratchSetViewCartesian = new Cartesian3();\n    var scratchSetViewTransform1 = new Matrix4();\n    var scratchSetViewTransform2 = new Matrix4();\n    var scratchSetViewQuaternion = new Quaternion();\n    var scratchSetViewMatrix3 = new Matrix3();\n    var scratchSetViewCartographic = new Cartographic();\n\n    function setView3D(camera, position, hpr) {\n        var currentTransform = Matrix4.clone(camera.transform, scratchSetViewTransform1);\n        var localTransform = Transforms.eastNorthUpToFixedFrame(position, camera._projection.ellipsoid, scratchSetViewTransform2);\n        camera._setTransform(localTransform);\n\n        Cartesian3.clone(Cartesian3.ZERO, camera.position);\n        hpr.heading = hpr.heading - CesiumMath.PI_OVER_TWO;\n\n        var rotQuat = Quaternion.fromHeadingPitchRoll(hpr, scratchSetViewQuaternion);\n        var rotMat = Matrix3.fromQuaternion(rotQuat, scratchSetViewMatrix3);\n\n        Matrix3.getColumn(rotMat, 0, camera.direction);\n        Matrix3.getColumn(rotMat, 2, camera.up);\n        Cartesian3.cross(camera.direction, camera.up, camera.right);\n\n        camera._setTransform(currentTransform);\n\n        camera._adjustOrthographicFrustum(true);\n    }\n\n    function setViewCV(camera, position,hpr, convert) {\n        var currentTransform = Matrix4.clone(camera.transform, scratchSetViewTransform1);\n        camera._setTransform(Matrix4.IDENTITY);\n\n        if (!Cartesian3.equals(position, camera.positionWC)) {\n            if (convert) {\n                var projection = camera._projection;\n                var cartographic = projection.ellipsoid.cartesianToCartographic(position, scratchSetViewCartographic);\n                position = projection.project(cartographic, scratchSetViewCartesian);\n            }\n            Cartesian3.clone(position, camera.position);\n        }\n        hpr.heading = hpr.heading - CesiumMath.PI_OVER_TWO;\n\n        var rotQuat = Quaternion.fromHeadingPitchRoll(hpr, scratchSetViewQuaternion);\n        var rotMat = Matrix3.fromQuaternion(rotQuat, scratchSetViewMatrix3);\n\n        Matrix3.getColumn(rotMat, 0, camera.direction);\n        Matrix3.getColumn(rotMat, 2, camera.up);\n        Cartesian3.cross(camera.direction, camera.up, camera.right);\n\n        camera._setTransform(currentTransform);\n\n        camera._adjustOrthographicFrustum(true);\n    }\n\n    function setView2D(camera, position, hpr, convert) {\n        var currentTransform = Matrix4.clone(camera.transform, scratchSetViewTransform1);\n        camera._setTransform(Matrix4.IDENTITY);\n\n        if (!Cartesian3.equals(position, camera.positionWC)) {\n            if (convert) {\n                var projection = camera._projection;\n                var cartographic = projection.ellipsoid.cartesianToCartographic(position, scratchSetViewCartographic);\n                position = projection.project(cartographic, scratchSetViewCartesian);\n            }\n\n            Cartesian2.clone(position, camera.position);\n\n            var newLeft = -position.z * 0.5;\n            var newRight = -newLeft;\n\n            var frustum = camera.frustum;\n            if (newRight > newLeft) {\n                var ratio = frustum.top / frustum.right;\n                frustum.right = newRight;\n                frustum.left = newLeft;\n                frustum.top = frustum.right * ratio;\n                frustum.bottom = -frustum.top;\n            }\n        }\n\n        if (camera._scene.mapMode2D === MapMode2D.ROTATE) {\n            hpr.heading = hpr.heading  - CesiumMath.PI_OVER_TWO;\n            hpr.pitch = -CesiumMath.PI_OVER_TWO;\n            hpr.roll =  0.0;\n            var rotQuat = Quaternion.fromHeadingPitchRoll(hpr, scratchSetViewQuaternion);\n            var rotMat = Matrix3.fromQuaternion(rotQuat, scratchSetViewMatrix3);\n\n            Matrix3.getColumn(rotMat, 2, camera.up);\n            Cartesian3.cross(camera.direction, camera.up, camera.right);\n        }\n\n        camera._setTransform(currentTransform);\n    }\n\n    var scratchToHPRDirection = new Cartesian3();\n    var scratchToHPRUp = new Cartesian3();\n    var scratchToHPRRight = new Cartesian3();\n\n    function directionUpToHeadingPitchRoll(camera, position, orientation, result) {\n        var direction = Cartesian3.clone(orientation.direction, scratchToHPRDirection);\n        var up = Cartesian3.clone(orientation.up, scratchToHPRUp);\n\n        if (camera._scene.mode === SceneMode.SCENE3D) {\n            var ellipsoid = camera._projection.ellipsoid;\n            var transform = Transforms.eastNorthUpToFixedFrame(position, ellipsoid, scratchHPRMatrix1);\n            var invTransform = Matrix4.inverseTransformation(transform, scratchHPRMatrix2);\n\n            Matrix4.multiplyByPointAsVector(invTransform, direction, direction);\n            Matrix4.multiplyByPointAsVector(invTransform, up, up);\n        }\n\n        var right = Cartesian3.cross(direction, up, scratchToHPRRight);\n\n        result.heading = getHeading(direction, up);\n        result.pitch = getPitch(direction);\n        result.roll = getRoll(direction, up, right);\n\n        return result;\n    }\n\n    var scratchSetViewOptions = {\n        destination : undefined,\n        orientation : {\n            direction : undefined,\n            up : undefined,\n            heading : undefined,\n            pitch : undefined,\n            roll : undefined\n        },\n        convert : undefined,\n        endTransform : undefined\n    };\n\n    var scratchHpr = new HeadingPitchRoll();\n    /**\n     * Sets the camera position, orientation and transform.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3|Rectangle} [options.destination] The final position of the camera in WGS84 (world) coordinates or a rectangle that would be visible from a top-down view.\n     * @param {Object} [options.orientation] An object that contains either direction and up properties or heading, pitch and roll properties. By default, the direction will point\n     * towards the center of the frame in 3D and in the negative z direction in Columbus view. The up direction will point towards local north in 3D and in the positive\n     * y direction in Columbus view. Orientation is not used in 2D when in infinite scrolling mode.\n     * @param {Matrix4} [options.endTransform] Transform matrix representing the reference frame of the camera.\n     * @param {Boolean} [options.convert] Whether to convert the destination from world coordinates to scene coordinates (only relevant when not using 3D). Defaults to <code>true</code>.\n     *\n     * @example\n     * // 1. Set position with a top-down view\n     * viewer.camera.setView({\n     *     destination : Cesium.Cartesian3.fromDegrees(-117.16, 32.71, 15000.0)\n     * });\n     *\n     * // 2 Set view with heading, pitch and roll\n     * viewer.camera.setView({\n     *     destination : cartesianPosition,\n     *     orientation: {\n     *         heading : Cesium.Math.toRadians(90.0), // east, default value is 0.0 (north)\n     *         pitch : Cesium.Math.toRadians(-90),    // default value (looking down)\n     *         roll : 0.0                             // default value\n     *     }\n     * });\n     *\n     * // 3. Change heading, pitch and roll with the camera position remaining the same.\n     * viewer.camera.setView({\n     *     orientation: {\n     *         heading : Cesium.Math.toRadians(90.0), // east, default value is 0.0 (north)\n     *         pitch : Cesium.Math.toRadians(-90),    // default value (looking down)\n     *         roll : 0.0                             // default value\n     *     }\n     * });\n     *\n     *\n     * // 4. View rectangle with a top-down view\n     * viewer.camera.setView({\n     *     destination : Cesium.Rectangle.fromDegrees(west, south, east, north)\n     * });\n     *\n     * // 5. Set position with an orientation using unit vectors.\n     * viewer.camera.setView({\n     *     destination : Cesium.Cartesian3.fromDegrees(-122.19, 46.25, 5000.0),\n     *     orientation : {\n     *         direction : new Cesium.Cartesian3(-0.04231243104240401, -0.20123236049443421, -0.97862924300734),\n     *         up : new Cesium.Cartesian3(-0.47934589305293746, -0.8553216253114552, 0.1966022179118339)\n     *     }\n     * });\n     */\n    Camera.prototype.setView = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var orientation = defaultValue(options.orientation, defaultValue.EMPTY_OBJECT);\n\n        var mode = this._mode;\n        if (mode === SceneMode.MORPHING) {\n            return;\n        }\n\n        if (defined(options.endTransform)) {\n            this._setTransform(options.endTransform);\n        }\n\n        var convert = defaultValue(options.convert, true);\n        var destination = defaultValue(options.destination, Cartesian3.clone(this.positionWC, scratchSetViewCartesian));\n        if (defined(destination) && defined(destination.west)) {\n            destination = this.getRectangleCameraCoordinates(destination, scratchSetViewCartesian);\n            convert = false;\n        }\n\n        if (defined(orientation.direction)) {\n            orientation = directionUpToHeadingPitchRoll(this, destination, orientation, scratchSetViewOptions.orientation);\n        }\n\n        scratchHpr.heading = defaultValue(orientation.heading, 0.0);\n        scratchHpr.pitch = defaultValue(orientation.pitch, -CesiumMath.PI_OVER_TWO);\n        scratchHpr.roll = defaultValue(orientation.roll, 0.0);\n\n        this._suspendTerrainAdjustment = true;\n\n        if (mode === SceneMode.SCENE3D) {\n            setView3D(this, destination, scratchHpr);\n        } else if (mode === SceneMode.SCENE2D) {\n            setView2D(this, destination, scratchHpr, convert);\n        } else {\n            setViewCV(this, destination, scratchHpr, convert);\n        }\n    };\n\n    var pitchScratch = new Cartesian3();\n    /**\n     * Fly the camera to the home view.  Use {@link Camera#.DEFAULT_VIEW_RECTANGLE} to set\n     * the default view for the 3D scene.  The home view for 2D and columbus view shows the\n     * entire map.\n     *\n     * @param {Number} [duration] The duration of the flight in seconds. If omitted, Cesium attempts to calculate an ideal duration based on the distance to be traveled by the flight. See {@link Camera#flyTo}\n     */\n    Camera.prototype.flyHome = function(duration) {\n        var mode = this._mode;\n\n        if (mode === SceneMode.MORPHING) {\n            this._scene.completeMorph();\n        }\n\n        if (mode === SceneMode.SCENE2D) {\n            this.flyTo({\n                destination : Camera.DEFAULT_VIEW_RECTANGLE,\n                duration : duration,\n                endTransform : Matrix4.IDENTITY\n            });\n        } else if (mode === SceneMode.SCENE3D) {\n            var destination = this.getRectangleCameraCoordinates(Camera.DEFAULT_VIEW_RECTANGLE);\n\n            var mag = Cartesian3.magnitude(destination);\n            mag += mag * Camera.DEFAULT_VIEW_FACTOR;\n            Cartesian3.normalize(destination, destination);\n            Cartesian3.multiplyByScalar(destination, mag, destination);\n\n            this.flyTo({\n                destination : destination,\n                duration : duration,\n                endTransform : Matrix4.IDENTITY\n            });\n        } else if (mode === SceneMode.COLUMBUS_VIEW) {\n            var maxRadii = this._projection.ellipsoid.maximumRadius;\n            var position = new Cartesian3(0.0, -1.0, 1.0);\n            position = Cartesian3.multiplyByScalar(Cartesian3.normalize(position, position), 5.0 * maxRadii, position);\n            this.flyTo({\n                destination : position,\n                duration : duration,\n                orientation : {\n                    heading : 0.0,\n                    pitch : -Math.acos(Cartesian3.normalize(position, pitchScratch).z),\n                    roll : 0.0\n                },\n                endTransform : Matrix4.IDENTITY,\n                convert : false\n            });\n        }\n    };\n\n    /**\n     * Transform a vector or point from world coordinates to the camera's reference frame.\n     *\n     * @param {Cartesian4} cartesian The vector or point to transform.\n     * @param {Cartesian4} [result] The object onto which to store the result.\n     * @returns {Cartesian4} The transformed vector or point.\n     */\n    Camera.prototype.worldToCameraCoordinates = function(cartesian, result) {\n        \n\n        if (!defined(result)) {\n            result = new Cartesian4();\n        }\n        updateMembers(this);\n        return Matrix4.multiplyByVector(this._actualInvTransform, cartesian, result);\n    };\n\n    /**\n     * Transform a point from world coordinates to the camera's reference frame.\n     *\n     * @param {Cartesian3} cartesian The point to transform.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The transformed point.\n     */\n    Camera.prototype.worldToCameraCoordinatesPoint = function(cartesian, result) {\n        \n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n        updateMembers(this);\n        return Matrix4.multiplyByPoint(this._actualInvTransform, cartesian, result);\n    };\n\n    /**\n     * Transform a vector from world coordinates to the camera's reference frame.\n     *\n     * @param {Cartesian3} cartesian The vector to transform.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The transformed vector.\n     */\n    Camera.prototype.worldToCameraCoordinatesVector = function(cartesian, result) {\n        \n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n        updateMembers(this);\n        return Matrix4.multiplyByPointAsVector(this._actualInvTransform, cartesian, result);\n    };\n\n    /**\n     * Transform a vector or point from the camera's reference frame to world coordinates.\n     *\n     * @param {Cartesian4} cartesian The vector or point to transform.\n     * @param {Cartesian4} [result] The object onto which to store the result.\n     * @returns {Cartesian4} The transformed vector or point.\n     */\n    Camera.prototype.cameraToWorldCoordinates = function(cartesian, result) {\n        \n\n        if (!defined(result)) {\n            result = new Cartesian4();\n        }\n        updateMembers(this);\n        return Matrix4.multiplyByVector(this._actualTransform, cartesian, result);\n    };\n\n    /**\n     * Transform a point from the camera's reference frame to world coordinates.\n     *\n     * @param {Cartesian3} cartesian The point to transform.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The transformed point.\n     */\n    Camera.prototype.cameraToWorldCoordinatesPoint = function(cartesian, result) {\n        \n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n        updateMembers(this);\n        return Matrix4.multiplyByPoint(this._actualTransform, cartesian, result);\n    };\n\n    /**\n     * Transform a vector from the camera's reference frame to world coordinates.\n     *\n     * @param {Cartesian3} cartesian The vector to transform.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} The transformed vector.\n     */\n    Camera.prototype.cameraToWorldCoordinatesVector = function(cartesian, result) {\n        \n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n        updateMembers(this);\n        return Matrix4.multiplyByPointAsVector(this._actualTransform, cartesian, result);\n    };\n\n    function clampMove2D(camera, position) {\n        var rotatable2D = camera._scene.mapMode2D === MapMode2D.ROTATE;\n        var maxProjectedX = camera._maxCoord.x;\n        var maxProjectedY = camera._maxCoord.y;\n\n        var minX;\n        var maxX;\n        if (rotatable2D) {\n            maxX = maxProjectedX;\n            minX = -maxX;\n        } else {\n            maxX = position.x - maxProjectedX * 2.0;\n            minX = position.x + maxProjectedX * 2.0;\n        }\n\n        if (position.x > maxProjectedX) {\n            position.x = maxX;\n        }\n        if (position.x < -maxProjectedX) {\n            position.x = minX;\n        }\n\n        if (position.y > maxProjectedY) {\n            position.y = maxProjectedY;\n        }\n        if (position.y < -maxProjectedY) {\n            position.y = -maxProjectedY;\n        }\n    }\n\n    var moveScratch = new Cartesian3();\n    /**\n     * Translates the camera's position by <code>amount</code> along <code>direction</code>.\n     *\n     * @param {Cartesian3} direction The direction to move.\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveBackward\n     * @see Camera#moveForward\n     * @see Camera#moveLeft\n     * @see Camera#moveRight\n     * @see Camera#moveUp\n     * @see Camera#moveDown\n     */\n    Camera.prototype.move = function(direction, amount) {\n        \n\n        var cameraPosition = this.position;\n        Cartesian3.multiplyByScalar(direction, amount, moveScratch);\n        Cartesian3.add(cameraPosition, moveScratch, cameraPosition);\n\n        if (this._mode === SceneMode.SCENE2D) {\n            clampMove2D(this, cameraPosition);\n        }\n        this._adjustOrthographicFrustum(true);\n    };\n\n    /**\n     * Translates the camera's position by <code>amount</code> along the camera's view vector.\n     * When in 2D mode, this will zoom in the camera instead of translating the camera's position.\n     *\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveBackward\n     */\n    Camera.prototype.moveForward = function(amount) {\n        amount = defaultValue(amount, this.defaultMoveAmount);\n\n        if (this._mode === SceneMode.SCENE2D) {\n            // 2D mode\n            zoom2D(this, amount);\n        } else {\n            // 3D or Columbus view mode\n            this.move(this.direction, amount);\n        }\n    };\n\n    /**\n     * Translates the camera's position by <code>amount</code> along the opposite direction\n     * of the camera's view vector.\n     * When in 2D mode, this will zoom out the camera instead of translating the camera's position.\n     *\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveForward\n     */\n    Camera.prototype.moveBackward = function(amount) {\n        amount = defaultValue(amount, this.defaultMoveAmount);\n\n        if (this._mode === SceneMode.SCENE2D) {\n            // 2D mode\n            zoom2D(this, -amount);\n        } else {\n            // 3D or Columbus view mode\n            this.move(this.direction, -amount);\n        }\n    };\n\n    /**\n     * Translates the camera's position by <code>amount</code> along the camera's up vector.\n     *\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveDown\n     */\n    Camera.prototype.moveUp = function(amount) {\n        amount = defaultValue(amount, this.defaultMoveAmount);\n        this.move(this.up, amount);\n    };\n\n    /**\n     * Translates the camera's position by <code>amount</code> along the opposite direction\n     * of the camera's up vector.\n     *\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveUp\n     */\n    Camera.prototype.moveDown = function(amount) {\n        amount = defaultValue(amount, this.defaultMoveAmount);\n        this.move(this.up, -amount);\n    };\n\n    /**\n     * Translates the camera's position by <code>amount</code> along the camera's right vector.\n     *\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveLeft\n     */\n    Camera.prototype.moveRight = function(amount) {\n        amount = defaultValue(amount, this.defaultMoveAmount);\n        this.move(this.right, amount);\n    };\n\n    /**\n     * Translates the camera's position by <code>amount</code> along the opposite direction\n     * of the camera's right vector.\n     *\n     * @param {Number} [amount] The amount, in meters, to move. Defaults to <code>defaultMoveAmount</code>.\n     *\n     * @see Camera#moveRight\n     */\n    Camera.prototype.moveLeft = function(amount) {\n        amount = defaultValue(amount, this.defaultMoveAmount);\n        this.move(this.right, -amount);\n    };\n\n    /**\n     * Rotates the camera around its up vector by amount, in radians, in the opposite direction\n     * of its right vector if not in 2D mode.\n     *\n     * @param {Number} [amount] The amount, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#lookRight\n     */\n    Camera.prototype.lookLeft = function(amount) {\n        amount = defaultValue(amount, this.defaultLookAmount);\n\n        // only want view of map to change in 3D mode, 2D visual is incorrect when look changes\n        if (this._mode !== SceneMode.SCENE2D) {\n            this.look(this.up, -amount);\n        }\n    };\n\n    /**\n     * Rotates the camera around its up vector by amount, in radians, in the direction\n     * of its right vector if not in 2D mode.\n     *\n     * @param {Number} [amount] The amount, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#lookLeft\n     */\n    Camera.prototype.lookRight = function(amount) {\n        amount = defaultValue(amount, this.defaultLookAmount);\n\n        // only want view of map to change in 3D mode, 2D visual is incorrect when look changes\n        if (this._mode !== SceneMode.SCENE2D) {\n            this.look(this.up, amount);\n        }\n    };\n\n    /**\n     * Rotates the camera around its right vector by amount, in radians, in the direction\n     * of its up vector if not in 2D mode.\n     *\n     * @param {Number} [amount] The amount, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#lookDown\n     */\n    Camera.prototype.lookUp = function(amount) {\n        amount = defaultValue(amount, this.defaultLookAmount);\n\n        // only want view of map to change in 3D mode, 2D visual is incorrect when look changes\n        if (this._mode !== SceneMode.SCENE2D) {\n            this.look(this.right, -amount);\n        }\n    };\n\n    /**\n     * Rotates the camera around its right vector by amount, in radians, in the opposite direction\n     * of its up vector if not in 2D mode.\n     *\n     * @param {Number} [amount] The amount, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#lookUp\n     */\n    Camera.prototype.lookDown = function(amount) {\n        amount = defaultValue(amount, this.defaultLookAmount);\n\n        // only want view of map to change in 3D mode, 2D visual is incorrect when look changes\n        if (this._mode !== SceneMode.SCENE2D) {\n            this.look(this.right, amount);\n        }\n    };\n\n    var lookScratchQuaternion = new Quaternion();\n    var lookScratchMatrix = new Matrix3();\n    /**\n     * Rotate each of the camera's orientation vectors around <code>axis</code> by <code>angle</code>\n     *\n     * @param {Cartesian3} axis The axis to rotate around.\n     * @param {Number} [angle] The angle, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#lookUp\n     * @see Camera#lookDown\n     * @see Camera#lookLeft\n     * @see Camera#lookRight\n     */\n    Camera.prototype.look = function(axis, angle) {\n        \n\n        var turnAngle = defaultValue(angle, this.defaultLookAmount);\n        var quaternion = Quaternion.fromAxisAngle(axis, -turnAngle, lookScratchQuaternion);\n        var rotation = Matrix3.fromQuaternion(quaternion, lookScratchMatrix);\n\n        var direction = this.direction;\n        var up = this.up;\n        var right = this.right;\n\n        Matrix3.multiplyByVector(rotation, direction, direction);\n        Matrix3.multiplyByVector(rotation, up, up);\n        Matrix3.multiplyByVector(rotation, right, right);\n    };\n\n    /**\n     * Rotate the camera counter-clockwise around its direction vector by amount, in radians.\n     *\n     * @param {Number} [amount] The amount, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#twistRight\n     */\n    Camera.prototype.twistLeft = function(amount) {\n        amount = defaultValue(amount, this.defaultLookAmount);\n        this.look(this.direction, amount);\n    };\n\n    /**\n     * Rotate the camera clockwise around its direction vector by amount, in radians.\n     *\n     * @param {Number} [amount] The amount, in radians, to rotate by. Defaults to <code>defaultLookAmount</code>.\n     *\n     * @see Camera#twistLeft\n     */\n    Camera.prototype.twistRight = function(amount) {\n        amount = defaultValue(amount, this.defaultLookAmount);\n        this.look(this.direction, -amount);\n    };\n\n    var rotateScratchQuaternion = new Quaternion();\n    var rotateScratchMatrix = new Matrix3();\n    /**\n     * Rotates the camera around <code>axis</code> by <code>angle</code>. The distance\n     * of the camera's position to the center of the camera's reference frame remains the same.\n     *\n     * @param {Cartesian3} axis The axis to rotate around given in world coordinates.\n     * @param {Number} [angle] The angle, in radians, to rotate by. Defaults to <code>defaultRotateAmount</code>.\n     *\n     * @see Camera#rotateUp\n     * @see Camera#rotateDown\n     * @see Camera#rotateLeft\n     * @see Camera#rotateRight\n     */\n    Camera.prototype.rotate = function(axis, angle) {\n        \n\n        var turnAngle = defaultValue(angle, this.defaultRotateAmount);\n        var quaternion = Quaternion.fromAxisAngle(axis, -turnAngle, rotateScratchQuaternion);\n        var rotation = Matrix3.fromQuaternion(quaternion, rotateScratchMatrix);\n        Matrix3.multiplyByVector(rotation, this.position, this.position);\n        Matrix3.multiplyByVector(rotation, this.direction, this.direction);\n        Matrix3.multiplyByVector(rotation, this.up, this.up);\n        Cartesian3.cross(this.direction, this.up, this.right);\n        Cartesian3.cross(this.right, this.direction, this.up);\n\n        this._adjustOrthographicFrustum(false);\n    };\n\n    /**\n     * Rotates the camera around the center of the camera's reference frame by angle downwards.\n     *\n     * @param {Number} [angle] The angle, in radians, to rotate by. Defaults to <code>defaultRotateAmount</code>.\n     *\n     * @see Camera#rotateUp\n     * @see Camera#rotate\n     */\n    Camera.prototype.rotateDown = function(angle) {\n        angle = defaultValue(angle, this.defaultRotateAmount);\n        rotateVertical(this, angle);\n    };\n\n    /**\n     * Rotates the camera around the center of the camera's reference frame by angle upwards.\n     *\n     * @param {Number} [angle] The angle, in radians, to rotate by. Defaults to <code>defaultRotateAmount</code>.\n     *\n     * @see Camera#rotateDown\n     * @see Camera#rotate\n     */\n    Camera.prototype.rotateUp = function(angle) {\n        angle = defaultValue(angle, this.defaultRotateAmount);\n        rotateVertical(this, -angle);\n    };\n\n    var rotateVertScratchP = new Cartesian3();\n    var rotateVertScratchA = new Cartesian3();\n    var rotateVertScratchTan = new Cartesian3();\n    var rotateVertScratchNegate = new Cartesian3();\n    function rotateVertical(camera, angle) {\n        var position = camera.position;\n        if (defined(camera.constrainedAxis) && !Cartesian3.equalsEpsilon(camera.position, Cartesian3.ZERO, CesiumMath.EPSILON2)) {\n            var p = Cartesian3.normalize(position, rotateVertScratchP);\n            var northParallel = Cartesian3.equalsEpsilon(p, camera.constrainedAxis, CesiumMath.EPSILON2);\n            var southParallel = Cartesian3.equalsEpsilon(p, Cartesian3.negate(camera.constrainedAxis, rotateVertScratchNegate), CesiumMath.EPSILON2);\n            if ((!northParallel && !southParallel)) {\n                var constrainedAxis = Cartesian3.normalize(camera.constrainedAxis, rotateVertScratchA);\n\n                var dot = Cartesian3.dot(p, constrainedAxis);\n                var angleToAxis = CesiumMath.acosClamped(dot);\n                if (angle > 0 && angle > angleToAxis) {\n                    angle = angleToAxis - CesiumMath.EPSILON4;\n                }\n\n                dot = Cartesian3.dot(p, Cartesian3.negate(constrainedAxis, rotateVertScratchNegate));\n                angleToAxis = CesiumMath.acosClamped(dot);\n                if (angle < 0 && -angle > angleToAxis) {\n                    angle = -angleToAxis + CesiumMath.EPSILON4;\n                }\n\n                var tangent = Cartesian3.cross(constrainedAxis, p, rotateVertScratchTan);\n                camera.rotate(tangent, angle);\n            } else if ((northParallel && angle < 0) || (southParallel && angle > 0)) {\n                camera.rotate(camera.right, angle);\n            }\n        } else {\n            camera.rotate(camera.right, angle);\n        }\n    }\n\n    /**\n     * Rotates the camera around the center of the camera's reference frame by angle to the right.\n     *\n     * @param {Number} [angle] The angle, in radians, to rotate by. Defaults to <code>defaultRotateAmount</code>.\n     *\n     * @see Camera#rotateLeft\n     * @see Camera#rotate\n     */\n    Camera.prototype.rotateRight = function(angle) {\n        angle = defaultValue(angle, this.defaultRotateAmount);\n        rotateHorizontal(this, -angle);\n    };\n\n    /**\n     * Rotates the camera around the center of the camera's reference frame by angle to the left.\n     *\n     * @param {Number} [angle] The angle, in radians, to rotate by. Defaults to <code>defaultRotateAmount</code>.\n     *\n     * @see Camera#rotateRight\n     * @see Camera#rotate\n     */\n    Camera.prototype.rotateLeft = function(angle) {\n        angle = defaultValue(angle, this.defaultRotateAmount);\n        rotateHorizontal(this, angle);\n    };\n\n    function rotateHorizontal(camera, angle) {\n        if (defined(camera.constrainedAxis)) {\n            camera.rotate(camera.constrainedAxis, angle);\n        } else {\n            camera.rotate(camera.up, angle);\n        }\n    }\n\n    function zoom2D(camera, amount) {\n        var frustum = camera.frustum;\n\n        \n\n        var ratio;\n        amount = amount * 0.5;\n\n        if((Math.abs(frustum.top) + Math.abs(frustum.bottom)) > (Math.abs(frustum.left) + Math.abs(frustum.right))) {\n            var newTop = frustum.top - amount;\n            var newBottom = frustum.bottom + amount;\n\n            var maxBottom = camera._maxCoord.y;\n            if (camera._scene.mapMode2D === MapMode2D.ROTATE) {\n                maxBottom *= camera.maximumZoomFactor;\n            }\n\n            if (newBottom > maxBottom) {\n                newBottom = maxBottom;\n                newTop = -maxBottom;\n            }\n\n            if (newTop <= newBottom) {\n                newTop = 1.0;\n                newBottom = -1.0;\n            }\n\n            ratio = frustum.right / frustum.top;\n            frustum.top = newTop;\n            frustum.bottom = newBottom;\n            frustum.right = frustum.top * ratio;\n            frustum.left = -frustum.right;\n        } else {\n            var newRight = frustum.right - amount;\n            var newLeft = frustum.left + amount;\n\n            var maxRight = camera._maxCoord.x;\n            if (camera._scene.mapMode2D === MapMode2D.ROTATE) {\n                maxRight *= camera.maximumZoomFactor;\n            }\n\n            if (newRight > maxRight) {\n                newRight = maxRight;\n                newLeft = -maxRight;\n            }\n\n            if (newRight <= newLeft) {\n                newRight = 1.0;\n                newLeft = -1.0;\n            }\n            ratio = frustum.top / frustum.right;\n            frustum.right = newRight;\n            frustum.left = newLeft;\n            frustum.top = frustum.right * ratio;\n            frustum.bottom = -frustum.top;\n        }\n    }\n\n    function zoom3D(camera, amount) {\n        camera.move(camera.direction, amount);\n    }\n\n    /**\n     * Zooms <code>amount</code> along the camera's view vector.\n     *\n     * @param {Number} [amount] The amount to move. Defaults to <code>defaultZoomAmount</code>.\n     *\n     * @see Camera#zoomOut\n     */\n    Camera.prototype.zoomIn = function(amount) {\n        amount = defaultValue(amount, this.defaultZoomAmount);\n        if (this._mode === SceneMode.SCENE2D) {\n            zoom2D(this, amount);\n        } else {\n            zoom3D(this, amount);\n        }\n    };\n\n    /**\n     * Zooms <code>amount</code> along the opposite direction of\n     * the camera's view vector.\n     *\n     * @param {Number} [amount] The amount to move. Defaults to <code>defaultZoomAmount</code>.\n     *\n     * @see Camera#zoomIn\n     */\n    Camera.prototype.zoomOut = function(amount) {\n        amount = defaultValue(amount, this.defaultZoomAmount);\n        if (this._mode === SceneMode.SCENE2D) {\n            zoom2D(this, -amount);\n        } else {\n            zoom3D(this, -amount);\n        }\n    };\n\n    /**\n     * Gets the magnitude of the camera position. In 3D, this is the vector magnitude. In 2D and\n     * Columbus view, this is the distance to the map.\n     *\n     * @returns {Number} The magnitude of the position.\n     */\n    Camera.prototype.getMagnitude = function() {\n        if (this._mode === SceneMode.SCENE3D) {\n            return Cartesian3.magnitude(this.position);\n        } else if (this._mode === SceneMode.COLUMBUS_VIEW) {\n            return Math.abs(this.position.z);\n        } else if (this._mode === SceneMode.SCENE2D) {\n            return Math.max(this.frustum.right - this.frustum.left, this.frustum.top - this.frustum.bottom);\n        }\n    };\n\n    var scratchLookAtMatrix4 = new Matrix4();\n\n    /**\n     * Sets the camera position and orientation using a target and offset. The target must be given in\n     * world coordinates. The offset can be either a cartesian or heading/pitch/range in the local east-north-up reference frame centered at the target.\n     * If the offset is a cartesian, then it is an offset from the center of the reference frame defined by the transformation matrix. If the offset\n     * is heading/pitch/range, then the heading and the pitch angles are defined in the reference frame defined by the transformation matrix.\n     * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n     * angles are below the plane. Negative pitch angles are above the plane. The range is the distance from the center.\n     *\n     * In 2D, there must be a top down view. The camera will be placed above the target looking down. The height above the\n     * target will be the magnitude of the offset. The heading will be determined from the offset. If the heading cannot be\n     * determined from the offset, the heading will be north.\n     *\n     * @param {Cartesian3} target The target position in world coordinates.\n     * @param {Cartesian3|HeadingPitchRange} offset The offset from the target in the local east-north-up reference frame centered at the target.\n     *\n     * @exception {DeveloperError} lookAt is not supported while morphing.\n     *\n     * @example\n     * // 1. Using a cartesian offset\n     * var center = Cesium.Cartesian3.fromDegrees(-98.0, 40.0);\n     * viewer.camera.lookAt(center, new Cesium.Cartesian3(0.0, -4790000.0, 3930000.0));\n     *\n     * // 2. Using a HeadingPitchRange offset\n     * var center = Cesium.Cartesian3.fromDegrees(-72.0, 40.0);\n     * var heading = Cesium.Math.toRadians(50.0);\n     * var pitch = Cesium.Math.toRadians(-20.0);\n     * var range = 5000.0;\n     * viewer.camera.lookAt(center, new Cesium.HeadingPitchRange(heading, pitch, range));\n     */\n    Camera.prototype.lookAt = function(target, offset) {\n        \n\n        var transform = Transforms.eastNorthUpToFixedFrame(target, Ellipsoid.WGS84, scratchLookAtMatrix4);\n        this.lookAtTransform(transform, offset);\n    };\n\n    var scratchLookAtHeadingPitchRangeOffset = new Cartesian3();\n    var scratchLookAtHeadingPitchRangeQuaternion1 = new Quaternion();\n    var scratchLookAtHeadingPitchRangeQuaternion2 = new Quaternion();\n    var scratchHeadingPitchRangeMatrix3 = new Matrix3();\n\n    function offsetFromHeadingPitchRange(heading, pitch, range) {\n        pitch = CesiumMath.clamp(pitch, -CesiumMath.PI_OVER_TWO, CesiumMath.PI_OVER_TWO);\n        heading = CesiumMath.zeroToTwoPi(heading) - CesiumMath.PI_OVER_TWO;\n\n        var pitchQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Y, -pitch, scratchLookAtHeadingPitchRangeQuaternion1);\n        var headingQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, -heading, scratchLookAtHeadingPitchRangeQuaternion2);\n        var rotQuat = Quaternion.multiply(headingQuat, pitchQuat, headingQuat);\n        var rotMatrix = Matrix3.fromQuaternion(rotQuat, scratchHeadingPitchRangeMatrix3);\n\n        var offset = Cartesian3.clone(Cartesian3.UNIT_X, scratchLookAtHeadingPitchRangeOffset);\n        Matrix3.multiplyByVector(rotMatrix, offset, offset);\n        Cartesian3.negate(offset, offset);\n        Cartesian3.multiplyByScalar(offset, range, offset);\n        return offset;\n    }\n\n    /**\n     * Sets the camera position and orientation using a target and transformation matrix. The offset can be either a cartesian or heading/pitch/range.\n     * If the offset is a cartesian, then it is an offset from the center of the reference frame defined by the transformation matrix. If the offset\n     * is heading/pitch/range, then the heading and the pitch angles are defined in the reference frame defined by the transformation matrix.\n     * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n     * angles are below the plane. Negative pitch angles are above the plane. The range is the distance from the center.\n     *\n     * In 2D, there must be a top down view. The camera will be placed above the center of the reference frame. The height above the\n     * target will be the magnitude of the offset. The heading will be determined from the offset. If the heading cannot be\n     * determined from the offset, the heading will be north.\n     *\n     * @param {Matrix4} transform The transformation matrix defining the reference frame.\n     * @param {Cartesian3|HeadingPitchRange} [offset] The offset from the target in a reference frame centered at the target.\n     *\n     * @exception {DeveloperError} lookAtTransform is not supported while morphing.\n     *\n     * @example\n     * // 1. Using a cartesian offset\n     * var transform = Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(-98.0, 40.0));\n     * viewer.camera.lookAtTransform(transform, new Cesium.Cartesian3(0.0, -4790000.0, 3930000.0));\n     *\n     * // 2. Using a HeadingPitchRange offset\n     * var transform = Cesium.Transforms.eastNorthUpToFixedFrame(Cesium.Cartesian3.fromDegrees(-72.0, 40.0));\n     * var heading = Cesium.Math.toRadians(50.0);\n     * var pitch = Cesium.Math.toRadians(-20.0);\n     * var range = 5000.0;\n     * viewer.camera.lookAtTransform(transform, new Cesium.HeadingPitchRange(heading, pitch, range));\n     */\n    Camera.prototype.lookAtTransform = function(transform, offset) {\n        \n\n        this._setTransform(transform);\n        if (!defined(offset)) {\n            return;\n        }\n\n        var cartesianOffset;\n        if (defined(offset.heading)) {\n            cartesianOffset = offsetFromHeadingPitchRange(offset.heading, offset.pitch, offset.range);\n        } else {\n            cartesianOffset = offset;\n        }\n\n        if (this._mode === SceneMode.SCENE2D) {\n            Cartesian2.clone(Cartesian2.ZERO, this.position);\n\n            Cartesian3.negate(cartesianOffset, this.up);\n            this.up.z = 0.0;\n\n            if (Cartesian3.magnitudeSquared(this.up) < CesiumMath.EPSILON10) {\n                Cartesian3.clone(Cartesian3.UNIT_Y, this.up);\n            }\n\n            Cartesian3.normalize(this.up, this.up);\n\n            this._setTransform(Matrix4.IDENTITY);\n\n            Cartesian3.negate(Cartesian3.UNIT_Z, this.direction);\n            Cartesian3.cross(this.direction, this.up, this.right);\n            Cartesian3.normalize(this.right, this.right);\n\n            var frustum = this.frustum;\n            var ratio = frustum.top / frustum.right;\n            frustum.right = Cartesian3.magnitude(cartesianOffset) * 0.5;\n            frustum.left = -frustum.right;\n            frustum.top = ratio * frustum.right;\n            frustum.bottom = -frustum.top;\n\n            this._setTransform(transform);\n\n            return;\n        }\n\n        Cartesian3.clone(cartesianOffset, this.position);\n        Cartesian3.negate(this.position, this.direction);\n        Cartesian3.normalize(this.direction, this.direction);\n        Cartesian3.cross(this.direction, Cartesian3.UNIT_Z, this.right);\n\n        if (Cartesian3.magnitudeSquared(this.right) < CesiumMath.EPSILON10) {\n            Cartesian3.clone(Cartesian3.UNIT_X, this.right);\n        }\n\n        Cartesian3.normalize(this.right, this.right);\n        Cartesian3.cross(this.right, this.direction, this.up);\n        Cartesian3.normalize(this.up, this.up);\n\n        this._adjustOrthographicFrustum(true);\n    };\n\n    var viewRectangle3DCartographic1 = new Cartographic();\n    var viewRectangle3DCartographic2 = new Cartographic();\n    var viewRectangle3DNorthEast = new Cartesian3();\n    var viewRectangle3DSouthWest = new Cartesian3();\n    var viewRectangle3DNorthWest = new Cartesian3();\n    var viewRectangle3DSouthEast = new Cartesian3();\n    var viewRectangle3DNorthCenter = new Cartesian3();\n    var viewRectangle3DSouthCenter = new Cartesian3();\n    var viewRectangle3DCenter = new Cartesian3();\n    var viewRectangle3DEquator = new Cartesian3();\n    var defaultRF = {\n        direction : new Cartesian3(),\n        right : new Cartesian3(),\n        up : new Cartesian3()\n    };\n    var viewRectangle3DEllipsoidGeodesic;\n\n    function computeD(direction, upOrRight, corner, tanThetaOrPhi) {\n        var opposite = Math.abs(Cartesian3.dot(upOrRight, corner));\n        return opposite / tanThetaOrPhi - Cartesian3.dot(direction, corner);\n    }\n\n    function rectangleCameraPosition3D(camera, rectangle, result, updateCamera) {\n        var ellipsoid = camera._projection.ellipsoid;\n        var cameraRF = updateCamera ? camera : defaultRF;\n\n        var north = rectangle.north;\n        var south = rectangle.south;\n        var east = rectangle.east;\n        var west = rectangle.west;\n\n        // If we go across the International Date Line\n        if (west > east) {\n            east += CesiumMath.TWO_PI;\n        }\n\n        // Find the midpoint latitude.\n        //\n        // EllipsoidGeodesic will fail if the north and south edges are very close to being on opposite sides of the ellipsoid.\n        // Ideally we'd just call EllipsoidGeodesic.setEndPoints and let it throw when it detects this case, but sadly it doesn't\n        // even look for this case in optimized builds, so we have to test for it here instead.\n        //\n        // Fortunately, this case can only happen (here) when north is very close to the north pole and south is very close to the south pole,\n        // so handle it just by using 0 latitude as the center.  It's certainliy possible to use a smaller tolerance\n        // than one degree here, but one degree is safe and putting the center at 0 latitude should be good enough for any\n        // rectangle that spans 178+ of the 180 degrees of latitude.\n        var longitude = (west + east) * 0.5;\n        var latitude;\n        if (south < -CesiumMath.PI_OVER_TWO + CesiumMath.RADIANS_PER_DEGREE && north > CesiumMath.PI_OVER_TWO - CesiumMath.RADIANS_PER_DEGREE) {\n            latitude = 0.0;\n        } else {\n            var northCartographic = viewRectangle3DCartographic1;\n            northCartographic.longitude = longitude;\n            northCartographic.latitude = north;\n            northCartographic.height = 0.0;\n\n            var southCartographic = viewRectangle3DCartographic2;\n            southCartographic.longitude = longitude;\n            southCartographic.latitude = south;\n            southCartographic.height = 0.0;\n\n            var ellipsoidGeodesic = viewRectangle3DEllipsoidGeodesic;\n            if (!defined(ellipsoidGeodesic) || ellipsoidGeodesic.ellipsoid !== ellipsoid) {\n                viewRectangle3DEllipsoidGeodesic = ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\n            }\n\n            ellipsoidGeodesic.setEndPoints(northCartographic, southCartographic);\n            latitude = ellipsoidGeodesic.interpolateUsingFraction(0.5, viewRectangle3DCartographic1).latitude;\n        }\n\n        var centerCartographic = viewRectangle3DCartographic1;\n        centerCartographic.longitude = longitude;\n        centerCartographic.latitude = latitude;\n        centerCartographic.height = 0.0;\n\n        var center = ellipsoid.cartographicToCartesian(centerCartographic, viewRectangle3DCenter);\n\n        var cart = viewRectangle3DCartographic1;\n        cart.longitude = east;\n        cart.latitude = north;\n        var northEast = ellipsoid.cartographicToCartesian(cart, viewRectangle3DNorthEast);\n        cart.longitude = west;\n        var northWest = ellipsoid.cartographicToCartesian(cart, viewRectangle3DNorthWest);\n        cart.longitude = longitude;\n        var northCenter = ellipsoid.cartographicToCartesian(cart, viewRectangle3DNorthCenter);\n        cart.latitude = south;\n        var southCenter = ellipsoid.cartographicToCartesian(cart, viewRectangle3DSouthCenter);\n        cart.longitude = east;\n        var southEast = ellipsoid.cartographicToCartesian(cart, viewRectangle3DSouthEast);\n        cart.longitude = west;\n        var southWest = ellipsoid.cartographicToCartesian(cart, viewRectangle3DSouthWest);\n\n        Cartesian3.subtract(northWest, center, northWest);\n        Cartesian3.subtract(southEast, center, southEast);\n        Cartesian3.subtract(northEast, center, northEast);\n        Cartesian3.subtract(southWest, center, southWest);\n        Cartesian3.subtract(northCenter, center, northCenter);\n        Cartesian3.subtract(southCenter, center, southCenter);\n\n        var direction = ellipsoid.geodeticSurfaceNormal(center, cameraRF.direction);\n        Cartesian3.negate(direction, direction);\n        var right = Cartesian3.cross(direction, Cartesian3.UNIT_Z, cameraRF.right);\n        Cartesian3.normalize(right, right);\n        var up = Cartesian3.cross(right, direction, cameraRF.up);\n\n        var d;\n        if (camera.frustum instanceof OrthographicFrustum) {\n            var width = Math.max(Cartesian3.distance(northEast, northWest), Cartesian3.distance(southEast, southWest));\n            var height = Math.max(Cartesian3.distance(northEast, southEast), Cartesian3.distance(northWest, southWest));\n\n            var rightScalar;\n            var topScalar;\n            var ratio = camera.frustum._offCenterFrustum.right / camera.frustum._offCenterFrustum.top;\n            var heightRatio = height * ratio;\n            if (width > heightRatio) {\n                rightScalar = width;\n                topScalar = rightScalar / ratio;\n            } else {\n                topScalar = height;\n                rightScalar = heightRatio;\n            }\n\n            d = Math.max(rightScalar, topScalar);\n        } else {\n            var tanPhi = Math.tan(camera.frustum.fovy * 0.5);\n            var tanTheta = camera.frustum.aspectRatio * tanPhi;\n\n            d = Math.max(\n                computeD(direction, up, northWest, tanPhi),\n                computeD(direction, up, southEast, tanPhi),\n                computeD(direction, up, northEast, tanPhi),\n                computeD(direction, up, southWest, tanPhi),\n                computeD(direction, up, northCenter, tanPhi),\n                computeD(direction, up, southCenter, tanPhi),\n                computeD(direction, right, northWest, tanTheta),\n                computeD(direction, right, southEast, tanTheta),\n                computeD(direction, right, northEast, tanTheta),\n                computeD(direction, right, southWest, tanTheta),\n                computeD(direction, right, northCenter, tanTheta),\n                computeD(direction, right, southCenter, tanTheta));\n\n            // If the rectangle crosses the equator, compute D at the equator, too, because that's the\n            // widest part of the rectangle when projected onto the globe.\n            if (south < 0 && north > 0) {\n                var equatorCartographic = viewRectangle3DCartographic1;\n                equatorCartographic.longitude = west;\n                equatorCartographic.latitude = 0.0;\n                equatorCartographic.height = 0.0;\n                var equatorPosition = ellipsoid.cartographicToCartesian(equatorCartographic, viewRectangle3DEquator);\n                Cartesian3.subtract(equatorPosition, center, equatorPosition);\n                d = Math.max(d, computeD(direction, up, equatorPosition, tanPhi), computeD(direction, right, equatorPosition, tanTheta));\n\n                equatorCartographic.longitude = east;\n                equatorPosition = ellipsoid.cartographicToCartesian(equatorCartographic, viewRectangle3DEquator);\n                Cartesian3.subtract(equatorPosition, center, equatorPosition);\n                d = Math.max(d, computeD(direction, up, equatorPosition, tanPhi), computeD(direction, right, equatorPosition, tanTheta));\n            }\n        }\n\n        return Cartesian3.add(center, Cartesian3.multiplyByScalar(direction, -d, viewRectangle3DEquator), result);\n    }\n\n    var viewRectangleCVCartographic = new Cartographic();\n    var viewRectangleCVNorthEast = new Cartesian3();\n    var viewRectangleCVSouthWest = new Cartesian3();\n    function rectangleCameraPositionColumbusView(camera, rectangle, result) {\n        var projection = camera._projection;\n        if (rectangle.west > rectangle.east) {\n            rectangle = Rectangle.MAX_VALUE;\n        }\n        var transform = camera._actualTransform;\n        var invTransform = camera._actualInvTransform;\n\n        var cart = viewRectangleCVCartographic;\n        cart.longitude = rectangle.east;\n        cart.latitude = rectangle.north;\n        var northEast = projection.project(cart, viewRectangleCVNorthEast);\n        Matrix4.multiplyByPoint(transform, northEast, northEast);\n        Matrix4.multiplyByPoint(invTransform, northEast, northEast);\n\n        cart.longitude = rectangle.west;\n        cart.latitude = rectangle.south;\n        var southWest = projection.project(cart, viewRectangleCVSouthWest);\n        Matrix4.multiplyByPoint(transform, southWest, southWest);\n        Matrix4.multiplyByPoint(invTransform, southWest, southWest);\n\n        result.x = (northEast.x - southWest.x) * 0.5 + southWest.x;\n        result.y = (northEast.y - southWest.y) * 0.5 + southWest.y;\n\n        if (defined(camera.frustum.fovy)) {\n            var tanPhi = Math.tan(camera.frustum.fovy * 0.5);\n            var tanTheta = camera.frustum.aspectRatio * tanPhi;\n            result.z = Math.max((northEast.x - southWest.x) / tanTheta, (northEast.y - southWest.y) / tanPhi) * 0.5;\n        } else {\n            var width = northEast.x - southWest.x;\n            var height = northEast.y - southWest.y;\n            result.z = Math.max(width, height);\n        }\n\n        return result;\n    }\n\n    var viewRectangle2DCartographic = new Cartographic();\n    var viewRectangle2DNorthEast = new Cartesian3();\n    var viewRectangle2DSouthWest = new Cartesian3();\n    function rectangleCameraPosition2D(camera, rectangle, result) {\n        var projection = camera._projection;\n        if (rectangle.west > rectangle.east) {\n            rectangle = Rectangle.MAX_VALUE;\n        }\n\n        var cart = viewRectangle2DCartographic;\n        cart.longitude = rectangle.east;\n        cart.latitude = rectangle.north;\n        var northEast = projection.project(cart, viewRectangle2DNorthEast);\n        cart.longitude = rectangle.west;\n        cart.latitude = rectangle.south;\n        var southWest = projection.project(cart, viewRectangle2DSouthWest);\n\n        var width = Math.abs(northEast.x - southWest.x) * 0.5;\n        var height = Math.abs(northEast.y - southWest.y) * 0.5;\n\n        var right, top;\n        var ratio = camera.frustum.right / camera.frustum.top;\n        var heightRatio = height * ratio;\n        if (width > heightRatio) {\n            right = width;\n            top = right / ratio;\n        } else {\n            top = height;\n            right = heightRatio;\n        }\n\n        height = Math.max(2.0 * right, 2.0 * top);\n\n        result.x = (northEast.x - southWest.x) * 0.5 + southWest.x;\n        result.y = (northEast.y - southWest.y) * 0.5 + southWest.y;\n\n        cart = projection.unproject(result, cart);\n        cart.height = height;\n        result = projection.project(cart, result);\n\n        return result;\n    }\n\n    /**\n     * Get the camera position needed to view a rectangle on an ellipsoid or map\n     *\n     * @param {Rectangle} rectangle The rectangle to view.\n     * @param {Cartesian3} [result] The camera position needed to view the rectangle\n     * @returns {Cartesian3} The camera position needed to view the rectangle\n     */\n    Camera.prototype.getRectangleCameraCoordinates = function(rectangle, result) {\n        \n        var mode = this._mode;\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        if (mode === SceneMode.SCENE3D) {\n            return rectangleCameraPosition3D(this, rectangle, result);\n        } else if (mode === SceneMode.COLUMBUS_VIEW) {\n            return rectangleCameraPositionColumbusView(this, rectangle, result);\n        } else if (mode === SceneMode.SCENE2D) {\n            return rectangleCameraPosition2D(this, rectangle, result);\n        }\n\n        return undefined;\n    };\n\n    var pickEllipsoid3DRay = new Ray();\n    function pickEllipsoid3D(camera, windowPosition, ellipsoid, result) {\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n        var ray = camera.getPickRay(windowPosition, pickEllipsoid3DRay);\n        var intersection = IntersectionTests.rayEllipsoid(ray, ellipsoid);\n        if (!intersection) {\n            return undefined;\n        }\n\n        var t = intersection.start > 0.0 ? intersection.start : intersection.stop;\n        return Ray.getPoint(ray, t, result);\n    }\n\n    var pickEllipsoid2DRay = new Ray();\n    function pickMap2D(camera, windowPosition, projection, result) {\n        var ray = camera.getPickRay(windowPosition, pickEllipsoid2DRay);\n        var position = ray.origin;\n        position = Cartesian3.fromElements(position.y, position.z, 0.0, position);\n        var cart = projection.unproject(position);\n\n        if (cart.latitude < -CesiumMath.PI_OVER_TWO || cart.latitude > CesiumMath.PI_OVER_TWO) {\n            return undefined;\n        }\n\n        return projection.ellipsoid.cartographicToCartesian(cart, result);\n    }\n\n    var pickEllipsoidCVRay = new Ray();\n    function pickMapColumbusView(camera, windowPosition, projection, result) {\n        var ray = camera.getPickRay(windowPosition, pickEllipsoidCVRay);\n        var scalar = -ray.origin.x / ray.direction.x;\n        Ray.getPoint(ray, scalar, result);\n\n        var cart = projection.unproject(new Cartesian3(result.y, result.z, 0.0));\n\n        if (cart.latitude < -CesiumMath.PI_OVER_TWO || cart.latitude > CesiumMath.PI_OVER_TWO ||\n            cart.longitude < -Math.PI || cart.longitude > Math.PI) {\n            return undefined;\n        }\n\n        return projection.ellipsoid.cartographicToCartesian(cart, result);\n    }\n\n    /**\n     * Pick an ellipsoid or map.\n     *\n     * @param {Cartesian2} windowPosition The x and y coordinates of a pixel.\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to pick.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} If the ellipsoid or map was picked, returns the point on the surface of the ellipsoid or map\n     * in world coordinates. If the ellipsoid or map was not picked, returns undefined.\n     */\n    Camera.prototype.pickEllipsoid = function(windowPosition, ellipsoid, result) {\n        \n\n        var canvas = this._scene.canvas;\n        if (canvas.clientWidth === 0 || canvas.clientHeight === 0) {\n            return undefined;\n        }\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n\n        if (this._mode === SceneMode.SCENE3D) {\n            result = pickEllipsoid3D(this, windowPosition, ellipsoid, result);\n        } else if (this._mode === SceneMode.SCENE2D) {\n            result = pickMap2D(this, windowPosition, this._projection, result);\n        } else if (this._mode === SceneMode.COLUMBUS_VIEW) {\n            result = pickMapColumbusView(this, windowPosition, this._projection, result);\n        } else {\n            return undefined;\n        }\n\n        return result;\n    };\n\n    var pickPerspCenter = new Cartesian3();\n    var pickPerspXDir = new Cartesian3();\n    var pickPerspYDir = new Cartesian3();\n    function getPickRayPerspective(camera, windowPosition, result) {\n        var canvas = camera._scene.canvas;\n        var width = canvas.clientWidth;\n        var height = canvas.clientHeight;\n\n        var tanPhi = Math.tan(camera.frustum.fovy * 0.5);\n        var tanTheta = camera.frustum.aspectRatio * tanPhi;\n        var near = camera.frustum.near;\n\n        var x = (2.0 / width) * windowPosition.x - 1.0;\n        var y = (2.0 / height) * (height - windowPosition.y) - 1.0;\n\n        var position = camera.positionWC;\n        Cartesian3.clone(position, result.origin);\n\n        var nearCenter = Cartesian3.multiplyByScalar(camera.directionWC, near, pickPerspCenter);\n        Cartesian3.add(position, nearCenter, nearCenter);\n        var xDir = Cartesian3.multiplyByScalar(camera.rightWC, x * near * tanTheta, pickPerspXDir);\n        var yDir = Cartesian3.multiplyByScalar(camera.upWC, y * near * tanPhi, pickPerspYDir);\n        var direction = Cartesian3.add(nearCenter, xDir, result.direction);\n        Cartesian3.add(direction, yDir, direction);\n        Cartesian3.subtract(direction, position, direction);\n        Cartesian3.normalize(direction, direction);\n\n        return result;\n    }\n\n    var scratchDirection = new Cartesian3();\n\n    function getPickRayOrthographic(camera, windowPosition, result) {\n        var canvas = camera._scene.canvas;\n        var width = canvas.clientWidth;\n        var height = canvas.clientHeight;\n\n        var frustum = camera.frustum;\n        if (defined(frustum._offCenterFrustum)) {\n            frustum = frustum._offCenterFrustum;\n        }\n        var x = (2.0 / width) * windowPosition.x - 1.0;\n        x *= (frustum.right - frustum.left) * 0.5;\n        var y = (2.0 / height) * (height - windowPosition.y) - 1.0;\n        y *= (frustum.top - frustum.bottom) * 0.5;\n\n        var origin = result.origin;\n        Cartesian3.clone(camera.position, origin);\n\n        Cartesian3.multiplyByScalar(camera.right, x, scratchDirection);\n        Cartesian3.add(scratchDirection, origin, origin);\n        Cartesian3.multiplyByScalar(camera.up, y, scratchDirection);\n        Cartesian3.add(scratchDirection, origin, origin);\n\n        Cartesian3.clone(camera.directionWC, result.direction);\n\n        if (camera._mode === SceneMode.COLUMBUS_VIEW || camera._mode === SceneMode.SCENE2D) {\n            Cartesian3.fromElements(result.origin.z, result.origin.x, result.origin.y, result.origin);\n        }\n\n        return result;\n    }\n\n    /**\n     * Create a ray from the camera position through the pixel at <code>windowPosition</code>\n     * in world coordinates.\n     *\n     * @param {Cartesian2} windowPosition The x and y coordinates of a pixel.\n     * @param {Ray} [result] The object onto which to store the result.\n     * @returns {Ray} Returns the {@link Cartesian3} position and direction of the ray.\n     */\n    Camera.prototype.getPickRay = function(windowPosition, result) {\n        \n\n        if (!defined(result)) {\n            result = new Ray();\n        }\n\n        var frustum = this.frustum;\n        if (defined(frustum.aspectRatio) && defined(frustum.fov) && defined(frustum.near)) {\n            return getPickRayPerspective(this, windowPosition, result);\n        }\n\n        return getPickRayOrthographic(this, windowPosition, result);\n    };\n\n    var scratchToCenter = new Cartesian3();\n    var scratchProj = new Cartesian3();\n\n    /**\n     * Return the distance from the camera to the front of the bounding sphere.\n     *\n     * @param {BoundingSphere} boundingSphere The bounding sphere in world coordinates.\n     * @returns {Number} The distance to the bounding sphere.\n     */\n    Camera.prototype.distanceToBoundingSphere = function(boundingSphere) {\n        \n\n        var toCenter = Cartesian3.subtract(this.positionWC, boundingSphere.center, scratchToCenter);\n        var proj = Cartesian3.multiplyByScalar(this.directionWC, Cartesian3.dot(toCenter, this.directionWC), scratchProj);\n        return Math.max(0.0, Cartesian3.magnitude(proj) - boundingSphere.radius);\n    };\n\n    var scratchPixelSize = new Cartesian2();\n\n    /**\n     * Return the pixel size in meters.\n     *\n     * @param {BoundingSphere} boundingSphere The bounding sphere in world coordinates.\n     * @param {Number} drawingBufferWidth The drawing buffer width.\n     * @param {Number} drawingBufferHeight The drawing buffer height.\n     * @returns {Number} The pixel size in meters.\n     */\n    Camera.prototype.getPixelSize = function(boundingSphere, drawingBufferWidth, drawingBufferHeight) {\n        \n\n        var distance = this.distanceToBoundingSphere(boundingSphere);\n        var pixelSize = this.frustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, scratchPixelSize);\n        return Math.max(pixelSize.x, pixelSize.y);\n    };\n\n    function createAnimationTemplateCV(camera, position, center, maxX, maxY, duration) {\n        var newPosition = Cartesian3.clone(position);\n\n        if (center.y > maxX) {\n            newPosition.y -= center.y - maxX;\n        } else if (center.y < -maxX) {\n            newPosition.y += -maxX - center.y;\n        }\n\n        if (center.z > maxY) {\n            newPosition.z -= center.z - maxY;\n        } else if (center.z < -maxY) {\n            newPosition.z += -maxY - center.z;\n        }\n\n        function updateCV(value) {\n            var interp = Cartesian3.lerp(position, newPosition, value.time, new Cartesian3());\n            camera.worldToCameraCoordinatesPoint(interp, camera.position);\n        }\n        return {\n            easingFunction : EasingFunction.EXPONENTIAL_OUT,\n            startObject : {\n                time : 0.0\n            },\n            stopObject : {\n                time : 1.0\n            },\n            duration : duration,\n            update : updateCV\n        };\n    }\n\n    var normalScratch = new Cartesian3();\n    var centerScratch = new Cartesian3();\n    var posScratch = new Cartesian3();\n    var scratchCartesian3Subtract = new Cartesian3();\n\n    function createAnimationCV(camera, duration) {\n        var position = camera.position;\n        var direction = camera.direction;\n\n        var normal = camera.worldToCameraCoordinatesVector(Cartesian3.UNIT_X, normalScratch);\n        var scalar = -Cartesian3.dot(normal, position) / Cartesian3.dot(normal, direction);\n        var center = Cartesian3.add(position, Cartesian3.multiplyByScalar(direction, scalar, centerScratch), centerScratch);\n        camera.cameraToWorldCoordinatesPoint(center, center);\n\n        position = camera.cameraToWorldCoordinatesPoint(camera.position, posScratch);\n\n        var tanPhi = Math.tan(camera.frustum.fovy * 0.5);\n        var tanTheta = camera.frustum.aspectRatio * tanPhi;\n        var distToC = Cartesian3.magnitude(Cartesian3.subtract(position, center, scratchCartesian3Subtract));\n        var dWidth = tanTheta * distToC;\n        var dHeight = tanPhi * distToC;\n\n        var mapWidth = camera._maxCoord.x;\n        var mapHeight = camera._maxCoord.y;\n\n        var maxX = Math.max(dWidth - mapWidth, mapWidth);\n        var maxY = Math.max(dHeight - mapHeight, mapHeight);\n\n        if (position.z < -maxX || position.z > maxX || position.y < -maxY || position.y > maxY) {\n            var translateX = center.y < -maxX || center.y > maxX;\n            var translateY = center.z < -maxY || center.z > maxY;\n            if (translateX || translateY) {\n                return createAnimationTemplateCV(camera, position, center, maxX, maxY, duration);\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Create an animation to move the map into view. This method is only valid for 2D and Columbus modes.\n     *\n     * @param {Number} duration The duration, in seconds, of the animation.\n     * @returns {Object} The animation or undefined if the scene mode is 3D or the map is already ion view.\n     *\n     * @private\n     */\n    Camera.prototype.createCorrectPositionTween = function(duration) {\n        \n\n        if (this._mode === SceneMode.COLUMBUS_VIEW) {\n            return createAnimationCV(this, duration);\n        }\n\n        return undefined;\n    };\n\n    var scratchFlyToDestination = new Cartesian3();\n    var newOptions = {\n        destination : undefined,\n        heading : undefined,\n        pitch : undefined,\n        roll : undefined,\n        duration : undefined,\n        complete : undefined,\n        cancel : undefined,\n        endTransform : undefined,\n        maximumHeight : undefined,\n        easingFunction : undefined\n    };\n\n    /**\n     * Cancels the current camera flight if one is in progress.\n     * The camera is left at it's current location.\n     */\n    Camera.prototype.cancelFlight = function () {\n        if (defined(this._currentFlight)) {\n            this._currentFlight.cancelTween();\n            this._currentFlight = undefined;\n        }\n    };\n\n    /**\n     * Flies the camera from its current position to a new position.\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Cartesian3|Rectangle} options.destination The final position of the camera in WGS84 (world) coordinates or a rectangle that would be visible from a top-down view.\n     * @param {Object} [options.orientation] An object that contains either direction and up properties or heading, pitch and roll properties. By default, the direction will point\n     * towards the center of the frame in 3D and in the negative z direction in Columbus view. The up direction will point towards local north in 3D and in the positive\n     * y direction in Columbus view.  Orientation is not used in 2D when in infinite scrolling mode.\n     * @param {Number} [options.duration] The duration of the flight in seconds. If omitted, Cesium attempts to calculate an ideal duration based on the distance to be traveled by the flight.\n     * @param {Camera~FlightCompleteCallback} [options.complete] The function to execute when the flight is complete.\n     * @param {Camera~FlightCancelledCallback} [options.cancel] The function to execute if the flight is cancelled.\n     * @param {Matrix4} [options.endTransform] Transform matrix representing the reference frame the camera will be in when the flight is completed.\n     * @param {Number} [options.maximumHeight] The maximum height at the peak of the flight.\n     * @param {Number} [options.pitchAdjustHeight] If camera flyes higher than that value, adjust pitch duiring the flight to look down, and keep Earth in viewport.\n     * @param {Number} [options.flyOverLongitude] There are always two ways between 2 points on globe. This option force camera to choose fight direction to fly over that longitude.\n     * @param {Number} [options.flyOverLongitudeWeight] Fly over the lon specifyed via flyOverLongitude only if that way is not longer than short way times flyOverLongitudeWeight.\n     * @param {Boolean} [options.convert] Whether to convert the destination from world coordinates to scene coordinates (only relevant when not using 3D). Defaults to <code>true</code>.\n     * @param {EasingFunction|EasingFunction~Callback} [options.easingFunction] Controls how the time is interpolated over the duration of the flight.\n     *\n     * @exception {DeveloperError} If either direction or up is given, then both are required.\n     *\n     * @example\n     * // 1. Fly to a position with a top-down view\n     * viewer.camera.flyTo({\n     *     destination : Cesium.Cartesian3.fromDegrees(-117.16, 32.71, 15000.0)\n     * });\n     *\n     * // 2. Fly to a Rectangle with a top-down view\n     * viewer.camera.flyTo({\n     *     destination : Cesium.Rectangle.fromDegrees(west, south, east, north)\n     * });\n     *\n     * // 3. Fly to a position with an orientation using unit vectors.\n     * viewer.camera.flyTo({\n     *     destination : Cesium.Cartesian3.fromDegrees(-122.19, 46.25, 5000.0),\n     *     orientation : {\n     *         direction : new Cesium.Cartesian3(-0.04231243104240401, -0.20123236049443421, -0.97862924300734),\n     *         up : new Cesium.Cartesian3(-0.47934589305293746, -0.8553216253114552, 0.1966022179118339)\n     *     }\n     * });\n     *\n     * // 4. Fly to a position with an orientation using heading, pitch and roll.\n     * viewer.camera.flyTo({\n     *     destination : Cesium.Cartesian3.fromDegrees(-122.19, 46.25, 5000.0),\n     *     orientation : {\n     *         heading : Cesium.Math.toRadians(175.0),\n     *         pitch : Cesium.Math.toRadians(-35.0),\n     *         roll : 0.0\n     *     }\n     * });\n     */\n    Camera.prototype.flyTo = function(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var destination = options.destination;\n        \n\n        var mode = this._mode;\n        if (mode === SceneMode.MORPHING) {\n            return;\n        }\n\n        this.cancelFlight();\n\n        var orientation = defaultValue(options.orientation, defaultValue.EMPTY_OBJECT);\n        if (defined(orientation.direction)) {\n            orientation = directionUpToHeadingPitchRoll(this, destination, orientation, scratchSetViewOptions.orientation);\n        }\n\n        if (defined(options.duration) && options.duration <= 0.0) {\n            var setViewOptions = scratchSetViewOptions;\n            setViewOptions.destination = options.destination;\n            setViewOptions.orientation.heading = orientation.heading;\n            setViewOptions.orientation.pitch = orientation.pitch;\n            setViewOptions.orientation.roll = orientation.roll;\n            setViewOptions.convert = options.convert;\n            setViewOptions.endTransform = options.endTransform;\n            this.setView(setViewOptions);\n            if (typeof options.complete === 'function') {\n                options.complete();\n            }\n            return;\n        }\n\n        var isRectangle = defined(destination.west);\n        if (isRectangle) {\n            destination = this.getRectangleCameraCoordinates(destination, scratchFlyToDestination);\n        }\n\n        var that = this;\n        var flightTween;\n\n        newOptions.destination = destination;\n        newOptions.heading = orientation.heading;\n        newOptions.pitch = orientation.pitch;\n        newOptions.roll = orientation.roll;\n        newOptions.duration = options.duration;\n        newOptions.complete = function () {\n            if(flightTween === that._currentFlight){\n                that._currentFlight = undefined;\n            }\n            if (defined(options.complete)) {\n                options.complete();\n            }\n        };\n        newOptions.cancel = options.cancel;\n        newOptions.endTransform = options.endTransform;\n        newOptions.convert = isRectangle ? false : options.convert;\n        newOptions.maximumHeight = options.maximumHeight;\n        newOptions.pitchAdjustHeight = options.pitchAdjustHeight;\n        newOptions.flyOverLongitude = options.flyOverLongitude;\n        newOptions.flyOverLongitudeWeight = options.flyOverLongitudeWeight;\n        newOptions.easingFunction = options.easingFunction;\n\n        var scene = this._scene;\n        flightTween = scene.tweens.add(CameraFlightPath.createTween(scene, newOptions));\n        this._currentFlight = flightTween;\n\n        // Save the final destination view information for the PRELOAD_FLIGHT pass.\n        var preloadFlightCamera = this._scene.preloadFlightCamera;\n        if (this._mode !== SceneMode.SCENE2D) {\n            if (!defined(preloadFlightCamera)) {\n                preloadFlightCamera = Camera.clone(this);\n            }\n            preloadFlightCamera.setView({ destination: destination, orientation: orientation });\n\n            this._scene.preloadFlightCullingVolume = preloadFlightCamera.frustum.computeCullingVolume(preloadFlightCamera.positionWC, preloadFlightCamera.directionWC, preloadFlightCamera.upWC);\n        } else {\n            preloadFlightCamera = undefined;\n        }\n    };\n\n    function distanceToBoundingSphere3D(camera, radius) {\n        var frustum = camera.frustum;\n        var tanPhi = Math.tan(frustum.fovy * 0.5);\n        var tanTheta = frustum.aspectRatio * tanPhi;\n        return Math.max(radius / tanTheta, radius / tanPhi);\n    }\n\n    function distanceToBoundingSphere2D(camera, radius) {\n        var frustum = camera.frustum;\n        if (defined(frustum._offCenterFrustum)) {\n            frustum = frustum._offCenterFrustum;\n        }\n\n        var right, top;\n        var ratio = frustum.right / frustum.top;\n        var heightRatio = radius * ratio;\n        if (radius > heightRatio) {\n            right = radius;\n            top = right / ratio;\n        } else {\n            top = radius;\n            right = heightRatio;\n        }\n\n        return Math.max(right, top) * 1.50;\n    }\n\n    var MINIMUM_ZOOM = 100.0;\n\n    function adjustBoundingSphereOffset(camera, boundingSphere, offset) {\n        if (!defined(offset)) {\n            offset = HeadingPitchRange.clone(Camera.DEFAULT_OFFSET);\n        }\n\n        var minimumZoom = camera._scene.screenSpaceCameraController.minimumZoomDistance;\n        var maximumZoom = camera._scene.screenSpaceCameraController.maximumZoomDistance;\n        var range = offset.range;\n        if (!defined(range) || range === 0.0) {\n            var radius = boundingSphere.radius;\n            if (radius === 0.0) {\n                offset.range = MINIMUM_ZOOM;\n            } else if (camera.frustum instanceof OrthographicFrustum || camera._mode === SceneMode.SCENE2D) {\n                offset.range = distanceToBoundingSphere2D(camera, radius);\n            } else {\n                offset.range = distanceToBoundingSphere3D(camera, radius);\n            }\n            offset.range = CesiumMath.clamp(offset.range, minimumZoom, maximumZoom);\n        }\n\n        return offset;\n    }\n\n    /**\n     * Sets the camera so that the current view contains the provided bounding sphere.\n     *\n     * <p>The offset is heading/pitch/range in the local east-north-up reference frame centered at the center of the bounding sphere.\n     * The heading and the pitch angles are defined in the local east-north-up reference frame.\n     * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n     * angles are below the plane. Negative pitch angles are above the plane. The range is the distance from the center. If the range is\n     * zero, a range will be computed such that the whole bounding sphere is visible.</p>\n     *\n     * <p>In 2D, there must be a top down view. The camera will be placed above the target looking down. The height above the\n     * target will be the range. The heading will be determined from the offset. If the heading cannot be\n     * determined from the offset, the heading will be north.</p>\n     *\n     * @param {BoundingSphere} boundingSphere The bounding sphere to view, in world coordinates.\n     * @param {HeadingPitchRange} [offset] The offset from the target in the local east-north-up reference frame centered at the target.\n     *\n     * @exception {DeveloperError} viewBoundingSphere is not supported while morphing.\n     */\n    Camera.prototype.viewBoundingSphere = function(boundingSphere, offset) {\n        \n\n        offset = adjustBoundingSphereOffset(this, boundingSphere, offset);\n        this.lookAt(boundingSphere.center, offset);\n    };\n\n    var scratchflyToBoundingSphereTransform = new Matrix4();\n    var scratchflyToBoundingSphereDestination = new Cartesian3();\n    var scratchflyToBoundingSphereDirection = new Cartesian3();\n    var scratchflyToBoundingSphereUp = new Cartesian3();\n    var scratchflyToBoundingSphereRight = new Cartesian3();\n    var scratchFlyToBoundingSphereCart4 = new Cartesian4();\n    var scratchFlyToBoundingSphereQuaternion = new Quaternion();\n    var scratchFlyToBoundingSphereMatrix3 = new Matrix3();\n\n    /**\n     * Flies the camera to a location where the current view contains the provided bounding sphere.\n     *\n     * <p> The offset is heading/pitch/range in the local east-north-up reference frame centered at the center of the bounding sphere.\n     * The heading and the pitch angles are defined in the local east-north-up reference frame.\n     * The heading is the angle from y axis and increasing towards the x axis. Pitch is the rotation from the xy-plane. Positive pitch\n     * angles are below the plane. Negative pitch angles are above the plane. The range is the distance from the center. If the range is\n     * zero, a range will be computed such that the whole bounding sphere is visible.</p>\n     *\n     * <p>In 2D and Columbus View, there must be a top down view. The camera will be placed above the target looking down. The height above the\n     * target will be the range. The heading will be aligned to local north.</p>\n     *\n     * @param {BoundingSphere} boundingSphere The bounding sphere to view, in world coordinates.\n     * @param {Object} [options] Object with the following properties:\n     * @param {Number} [options.duration] The duration of the flight in seconds. If omitted, Cesium attempts to calculate an ideal duration based on the distance to be traveled by the flight.\n     * @param {HeadingPitchRange} [options.offset] The offset from the target in the local east-north-up reference frame centered at the target.\n     * @param {Camera~FlightCompleteCallback} [options.complete] The function to execute when the flight is complete.\n     * @param {Camera~FlightCancelledCallback} [options.cancel] The function to execute if the flight is cancelled.\n     * @param {Matrix4} [options.endTransform] Transform matrix representing the reference frame the camera will be in when the flight is completed.\n     * @param {Number} [options.maximumHeight] The maximum height at the peak of the flight.\n     * @param {Number} [options.pitchAdjustHeight] If camera flyes higher than that value, adjust pitch duiring the flight to look down, and keep Earth in viewport.\n     * @param {Number} [options.flyOverLongitude] There are always two ways between 2 points on globe. This option force camera to choose fight direction to fly over that longitude.\n     * @param {Number} [options.flyOverLongitudeWeight] Fly over the lon specifyed via flyOverLongitude only if that way is not longer than short way times flyOverLongitudeWeight.\n     * @param {EasingFunction|EasingFunction~Callback} [options.easingFunction] Controls how the time is interpolated over the duration of the flight.\n     */\n    Camera.prototype.flyToBoundingSphere = function(boundingSphere, options) {\n        \n\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var scene2D = this._mode === SceneMode.SCENE2D || this._mode === SceneMode.COLUMBUS_VIEW;\n        this._setTransform(Matrix4.IDENTITY);\n        var offset = adjustBoundingSphereOffset(this, boundingSphere, options.offset);\n\n        var position;\n        if (scene2D) {\n            position = Cartesian3.multiplyByScalar(Cartesian3.UNIT_Z, offset.range, scratchflyToBoundingSphereDestination);\n        } else {\n            position = offsetFromHeadingPitchRange(offset.heading, offset.pitch, offset.range);\n        }\n\n        var transform = Transforms.eastNorthUpToFixedFrame(boundingSphere.center, Ellipsoid.WGS84, scratchflyToBoundingSphereTransform);\n        Matrix4.multiplyByPoint(transform, position, position);\n\n        var direction;\n        var up;\n\n        if (!scene2D) {\n            direction = Cartesian3.subtract(boundingSphere.center, position, scratchflyToBoundingSphereDirection);\n            Cartesian3.normalize(direction, direction);\n\n            up = Matrix4.multiplyByPointAsVector(transform, Cartesian3.UNIT_Z, scratchflyToBoundingSphereUp);\n            if (1.0 - Math.abs(Cartesian3.dot(direction, up)) < CesiumMath.EPSILON6) {\n                var rotateQuat = Quaternion.fromAxisAngle(direction, offset.heading, scratchFlyToBoundingSphereQuaternion);\n                var rotation = Matrix3.fromQuaternion(rotateQuat, scratchFlyToBoundingSphereMatrix3);\n\n                Cartesian3.fromCartesian4(Matrix4.getColumn(transform, 1, scratchFlyToBoundingSphereCart4), up);\n                Matrix3.multiplyByVector(rotation, up, up);\n            }\n\n            var right = Cartesian3.cross(direction, up, scratchflyToBoundingSphereRight);\n            Cartesian3.cross(right, direction, up);\n            Cartesian3.normalize(up, up);\n        }\n\n        this.flyTo({\n            destination : position,\n            orientation : {\n                direction : direction,\n                up : up\n            },\n            duration : options.duration,\n            complete : options.complete,\n            cancel : options.cancel,\n            endTransform : options.endTransform,\n            maximumHeight : options.maximumHeight,\n            easingFunction : options.easingFunction,\n            flyOverLongitude : options.flyOverLongitude,\n            flyOverLongitudeWeight : options.flyOverLongitudeWeight,\n            pitchAdjustHeight : options.pitchAdjustHeight\n        });\n    };\n\n    var scratchCartesian3_1 = new Cartesian3();\n    var scratchCartesian3_2 = new Cartesian3();\n    var scratchCartesian3_3 = new Cartesian3();\n    var scratchCartesian3_4 = new Cartesian3();\n    var horizonPoints = [new Cartesian3(), new Cartesian3(), new Cartesian3(), new Cartesian3()];\n\n    function computeHorizonQuad(camera, ellipsoid) {\n        var radii = ellipsoid.radii;\n        var p = camera.positionWC;\n\n        // Find the corresponding position in the scaled space of the ellipsoid.\n        var q = Cartesian3.multiplyComponents(ellipsoid.oneOverRadii, p, scratchCartesian3_1);\n\n        var qMagnitude = Cartesian3.magnitude(q);\n        var qUnit = Cartesian3.normalize(q, scratchCartesian3_2);\n\n        // Determine the east and north directions at q.\n        var eUnit;\n        var nUnit;\n        if (Cartesian3.equalsEpsilon(qUnit, Cartesian3.UNIT_Z, CesiumMath.EPSILON10)) {\n            eUnit = new Cartesian3(0, 1, 0);\n            nUnit = new Cartesian3(0, 0, 1);\n        } else {\n            eUnit = Cartesian3.normalize(Cartesian3.cross(Cartesian3.UNIT_Z, qUnit, scratchCartesian3_3), scratchCartesian3_3);\n            nUnit = Cartesian3.normalize(Cartesian3.cross(qUnit, eUnit, scratchCartesian3_4), scratchCartesian3_4);\n        }\n\n        // Determine the radius of the 'limb' of the ellipsoid.\n        var wMagnitude = Math.sqrt(Cartesian3.magnitudeSquared(q) - 1.0);\n\n        // Compute the center and offsets.\n        var center = Cartesian3.multiplyByScalar(qUnit, 1.0 / qMagnitude, scratchCartesian3_1);\n        var scalar = wMagnitude / qMagnitude;\n        var eastOffset = Cartesian3.multiplyByScalar(eUnit, scalar, scratchCartesian3_2);\n        var northOffset = Cartesian3.multiplyByScalar(nUnit, scalar, scratchCartesian3_3);\n\n        // A conservative measure for the longitudes would be to use the min/max longitudes of the bounding frustum.\n        var upperLeft = Cartesian3.add(center, northOffset, horizonPoints[0]);\n        Cartesian3.subtract(upperLeft, eastOffset, upperLeft);\n        Cartesian3.multiplyComponents(radii, upperLeft, upperLeft);\n\n        var lowerLeft = Cartesian3.subtract(center, northOffset, horizonPoints[1]);\n        Cartesian3.subtract(lowerLeft, eastOffset, lowerLeft);\n        Cartesian3.multiplyComponents(radii, lowerLeft, lowerLeft);\n\n        var lowerRight = Cartesian3.subtract(center, northOffset, horizonPoints[2]);\n        Cartesian3.add(lowerRight, eastOffset, lowerRight);\n        Cartesian3.multiplyComponents(radii, lowerRight, lowerRight);\n\n        var upperRight = Cartesian3.add(center, northOffset, horizonPoints[3]);\n        Cartesian3.add(upperRight, eastOffset, upperRight);\n        Cartesian3.multiplyComponents(radii, upperRight, upperRight);\n\n        return horizonPoints;\n    }\n\n    var scratchPickCartesian2 = new Cartesian2();\n    var scratchRectCartesian = new Cartesian3();\n    var cartoArray = [new Cartographic(), new Cartographic(), new Cartographic(), new Cartographic()];\n    function addToResult(x, y, index, camera, ellipsoid, computedHorizonQuad) {\n        scratchPickCartesian2.x = x;\n        scratchPickCartesian2.y = y;\n        var r = camera.pickEllipsoid(scratchPickCartesian2, ellipsoid, scratchRectCartesian);\n        if (defined(r)) {\n            cartoArray[index] = ellipsoid.cartesianToCartographic(r, cartoArray[index]);\n            return 1;\n        }\n        cartoArray[index] = ellipsoid.cartesianToCartographic(computedHorizonQuad[index], cartoArray[index]);\n        return 0;\n    }\n    /**\n     * Computes the approximate visible rectangle on the ellipsoid.\n     *\n     * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid that you want to know the visible region.\n     * @param {Rectangle} [result] The rectangle in which to store the result\n     *\n     * @returns {Rectangle|undefined} The visible rectangle or undefined if the ellipsoid isn't visible at all.\n     */\n    Camera.prototype.computeViewRectangle = function(ellipsoid, result) {\n        ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\n        var cullingVolume = this.frustum.computeCullingVolume(this.positionWC, this.directionWC, this.upWC);\n        var boundingSphere = new BoundingSphere(Cartesian3.ZERO, ellipsoid.maximumRadius);\n        var visibility = cullingVolume.computeVisibility(boundingSphere);\n        if (visibility === Intersect.OUTSIDE) {\n            return undefined;\n        }\n\n        var canvas = this._scene.canvas;\n        var width = canvas.clientWidth;\n        var height = canvas.clientHeight;\n\n        var successfulPickCount = 0;\n\n        var computedHorizonQuad = computeHorizonQuad(this, ellipsoid);\n\n        successfulPickCount += addToResult(0, 0, 0, this, ellipsoid, computedHorizonQuad);\n        successfulPickCount += addToResult(0, height, 1, this, ellipsoid, computedHorizonQuad);\n        successfulPickCount += addToResult(width, height, 2, this, ellipsoid, computedHorizonQuad);\n        successfulPickCount += addToResult(width, 0, 3, this, ellipsoid, computedHorizonQuad);\n\n        if (successfulPickCount < 2) {\n            // If we have space non-globe in 3 or 4 corners then return the whole globe\n            return Rectangle.MAX_VALUE;\n        }\n\n        result = Rectangle.fromCartographicArray(cartoArray, result);\n\n        // Detect if we go over the poles\n        var distance = 0;\n        var lastLon = cartoArray[3].longitude;\n        for (var i = 0; i < 4; ++i) {\n            var lon = cartoArray[i].longitude;\n            var diff = Math.abs(lon - lastLon);\n            if (diff > CesiumMath.PI) {\n                // Crossed the dateline\n                distance += CesiumMath.TWO_PI - diff;\n            } else {\n                distance += diff;\n            }\n\n            lastLon = lon;\n        }\n\n        // We are over one of the poles so adjust the rectangle accordingly\n        if (CesiumMath.equalsEpsilon(Math.abs(distance), CesiumMath.TWO_PI, CesiumMath.EPSILON9)) {\n            result.west = -CesiumMath.PI;\n            result.east = CesiumMath.PI;\n            if (cartoArray[0].latitude >= 0.0) {\n                result.north = CesiumMath.PI_OVER_TWO;\n            } else {\n                result.south = -CesiumMath.PI_OVER_TWO;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Switches the frustum/projection to perspective.\n     *\n     * This function is a no-op in 2D which must always be orthographic.\n     */\n    Camera.prototype.switchToPerspectiveFrustum = function() {\n        if (this._mode === SceneMode.SCENE2D || this.frustum instanceof PerspectiveFrustum) {\n            return;\n        }\n\n        var scene = this._scene;\n        this.frustum = new PerspectiveFrustum();\n        this.frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n        this.frustum.fov = CesiumMath.toRadians(60.0);\n    };\n\n    /**\n     * Switches the frustum/projection to orthographic.\n     *\n     * This function is a no-op in 2D which will always be orthographic.\n     */\n    Camera.prototype.switchToOrthographicFrustum = function() {\n        if (this._mode === SceneMode.SCENE2D || this.frustum instanceof OrthographicFrustum) {\n            return;\n        }\n\n        var scene = this._scene;\n        this.frustum = new OrthographicFrustum();\n        this.frustum.aspectRatio = scene.drawingBufferWidth / scene.drawingBufferHeight;\n\n        // It doesn't matter what we set this to. The adjust below will correct the width based on the camera position.\n        this.frustum.width = Cartesian3.magnitude(this.position);\n\n        // Check the projection matrix. It will always be defined, but we need to force an off-center update.\n        var projectionMatrix = this.frustum.projectionMatrix;\n        if (defined(projectionMatrix)) {\n            this._adjustOrthographicFrustum(true);\n        }\n    };\n\n    /**\n     * @private\n     */\n    Camera.clone = function(camera, result) {\n        if (!defined(result)) {\n            result = new Camera(camera._scene);\n        }\n\n        Cartesian3.clone(camera.position, result.position);\n        Cartesian3.clone(camera.direction, result.direction);\n        Cartesian3.clone(camera.up, result.up);\n        Cartesian3.clone(camera.right, result.right);\n        Matrix4.clone(camera._transform, result.transform);\n        result._transformChanged = true;\n        result.frustum = camera.frustum.clone();\n\n        return result;\n    };\n\n    /**\n     * A function that will execute when a flight completes.\n     * @callback Camera~FlightCompleteCallback\n     */\n\n    /**\n     * A function that will execute when a flight is cancelled.\n     * @callback Camera~FlightCancelledCallback\n     */\n\n    return Camera;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"uniform sampler2D colorTexture;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_FragColor = texture2D(colorTexture, v_textureCoordinates);\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/Check',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        './ContextLimits',\n        './RenderbufferFormat'\n    ], function(\n        Check,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        ContextLimits,\n        RenderbufferFormat) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function Renderbuffer(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        var context = options.context;\n        var gl = context._gl;\n        var maximumRenderbufferSize = ContextLimits.maximumRenderbufferSize;\n\n        var format = defaultValue(options.format, RenderbufferFormat.RGBA4);\n        var width = defined(options.width) ? options.width : gl.drawingBufferWidth;\n        var height = defined(options.height) ? options.height : gl.drawingBufferHeight;\n\n        \n\n        this._gl = gl;\n        this._format = format;\n        this._width = width;\n        this._height = height;\n        this._renderbuffer = this._gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._renderbuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    }\n\n    defineProperties(Renderbuffer.prototype, {\n        format: {\n            get : function() {\n                return this._format;\n            }\n        },\n        width: {\n            get : function() {\n                return this._width;\n            }\n        },\n        height: {\n            get : function() {\n                return this._height;\n            }\n        }\n    });\n\n    Renderbuffer.prototype._getRenderbuffer = function() {\n        return this._renderbuffer;\n    };\n\n    Renderbuffer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    Renderbuffer.prototype.destroy = function() {\n        this._gl.deleteRenderbuffer(this._renderbuffer);\n        return destroyObject(this);\n    };\n\n    return Renderbuffer;\n});\n","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/Cartesian3',\n        '../Core/Check',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/GeometryOffsetAttribute',\n        '../Core/Iso8601',\n        '../Core/oneTimeWarning',\n        '../Scene/GroundPrimitive',\n        '../Scene/HeightReference',\n        './CallbackProperty',\n        './ConstantProperty',\n        './GeometryUpdater',\n        './Property',\n        './TerrainOffsetProperty'\n    ], function(\n        ApproximateTerrainHeights,\n        Cartesian3,\n        Check,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError,\n        GeometryOffsetAttribute,\n        Iso8601,\n        oneTimeWarning,\n        GroundPrimitive,\n        HeightReference,\n        CallbackProperty,\n        ConstantProperty,\n        GeometryUpdater,\n        Property,\n        TerrainOffsetProperty) {\n    'use strict';\n\n    var defaultZIndex = new ConstantProperty(0);\n\n    /**\n     * An abstract class for updating ground geometry entities.\n     * @constructor\n     * @alias GroundGeometryUpdater\n     * @param {Object} options An object with the following properties:\n     * @param {Entity} options.entity The entity containing the geometry to be visualized.\n     * @param {Scene} options.scene The scene where visualization is taking place.\n     * @param {Object} options.geometryOptions Options for the geometry\n     * @param {String} options.geometryPropertyName The geometry property name\n     * @param {String[]} options.observedPropertyNames The entity properties this geometry cares about\n     */\n    function GroundGeometryUpdater(options) {\n        GeometryUpdater.call(this, options);\n\n        this._zIndex = 0;\n        this._terrainOffsetProperty = undefined;\n    }\n\n    if (defined(Object.create)) {\n        GroundGeometryUpdater.prototype = Object.create(GeometryUpdater.prototype);\n        GroundGeometryUpdater.prototype.constructor = GroundGeometryUpdater;\n    }\n\n    defineProperties(GroundGeometryUpdater.prototype, {\n        /**\n         * Gets the zindex\n         * @type {Number}\n         * @memberof GroundGeometryUpdater.prototype\n         * @readonly\n         */\n        zIndex: {\n            get: function() {\n                return this._zIndex;\n            }\n        },\n\n        /**\n         * Gets the terrain offset property\n         * @type {TerrainOffsetProperty}\n         * @memberof GroundGeometryUpdater.prototype\n         * @readonly\n         */\n        terrainOffsetProperty: {\n            get: function() {\n                return this._terrainOffsetProperty;\n            }\n        }\n    });\n\n    GroundGeometryUpdater.prototype._isOnTerrain = function(entity, geometry) {\n        return this._fillEnabled && !defined(geometry.height) && !defined(geometry.extrudedHeight) && GroundPrimitive.isSupported(this._scene);\n    };\n\n    GroundGeometryUpdater.prototype._getIsClosed = function(options) {\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        return height === 0 || (defined(extrudedHeight) && extrudedHeight !== height);\n    };\n\n    GroundGeometryUpdater.prototype._computeCenter = DeveloperError.throwInstantiationError;\n\n    GroundGeometryUpdater.prototype._onEntityPropertyChanged = function(entity, propertyName, newValue, oldValue) {\n        GeometryUpdater.prototype._onEntityPropertyChanged.call(this, entity, propertyName, newValue, oldValue);\n        if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n            return;\n        }\n\n        var geometry = this._entity[this._geometryPropertyName];\n        if (!defined(geometry)) {\n            return;\n        }\n        if (defined(geometry.zIndex) && (defined(geometry.height) || defined(geometry.extrudedHeight))) {\n            oneTimeWarning(oneTimeWarning.geometryZIndex);\n        }\n\n        this._zIndex = defaultValue(geometry.zIndex, defaultZIndex);\n\n        if (defined(this._terrainOffsetProperty)) {\n            this._terrainOffsetProperty.destroy();\n            this._terrainOffsetProperty = undefined;\n        }\n\n        var heightReferenceProperty = geometry.heightReference;\n        var extrudedHeightReferenceProperty = geometry.extrudedHeightReference;\n\n        if (defined(heightReferenceProperty) || defined(extrudedHeightReferenceProperty)) {\n            var centerPosition = new CallbackProperty(this._computeCenter.bind(this), !this._dynamic);\n            this._terrainOffsetProperty = new TerrainOffsetProperty(this._scene, centerPosition, heightReferenceProperty, extrudedHeightReferenceProperty);\n        }\n    };\n\n    /**\n     * Destroys and resources used by the object.  Once an object is destroyed, it should not be used.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     */\n    GroundGeometryUpdater.prototype.destroy = function() {\n        if (defined(this._terrainOffsetProperty)) {\n            this._terrainOffsetProperty.destroy();\n            this._terrainOffsetProperty = undefined;\n        }\n\n        GeometryUpdater.prototype.destroy.call(this);\n    };\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.getGeometryHeight = function(height, heightReference) {\n        \n        if (!defined(height)) {\n            if (heightReference !== HeightReference.NONE) {\n                oneTimeWarning(oneTimeWarning.geometryHeightReference);\n            }\n            return;\n        }\n\n        if (heightReference !== HeightReference.CLAMP_TO_GROUND) {\n            return height;\n        }\n        return 0.0;\n    };\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.getGeometryExtrudedHeight = function(extrudedHeight, extrudedHeightReference) {\n        \n        if (!defined(extrudedHeight)) {\n            if (extrudedHeightReference !== HeightReference.NONE) {\n                oneTimeWarning(oneTimeWarning.geometryExtrudedHeightReference);\n            }\n            return;\n        }\n        if (extrudedHeightReference !== HeightReference.CLAMP_TO_GROUND) {\n            return extrudedHeight;\n        }\n\n        return GroundGeometryUpdater.CLAMP_TO_GROUND;\n    };\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.CLAMP_TO_GROUND = 'clamp';\n\n    /**\n     * @private\n     */\n    GroundGeometryUpdater.computeGeometryOffsetAttribute = function(height, heightReference, extrudedHeight, extrudedHeightReference) {\n        if (!defined(height) || !defined(heightReference)) {\n            heightReference = HeightReference.NONE;\n        }\n        if (!defined(extrudedHeight) || !defined(extrudedHeightReference)) {\n            extrudedHeightReference = HeightReference.NONE;\n        }\n        var n = 0;\n        if (heightReference !== HeightReference.NONE) {\n            n++;\n        }\n        if (extrudedHeightReference === HeightReference.RELATIVE_TO_GROUND) {\n            n++;\n        }\n        if (n === 2) {\n            return GeometryOffsetAttribute.ALL;\n        }\n        if (n === 1) {\n            return GeometryOffsetAttribute.TOP;\n        }\n\n        return undefined;\n    };\n\n    return GroundGeometryUpdater;\n});\n","define([\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/DeveloperError',\n        '../Core/Ellipsoid',\n        '../Core/Event',\n        '../Core/ReferenceFrame',\n        './Property'\n    ], function(\n        defined,\n        defineProperties,\n        DeveloperError,\n        Ellipsoid,\n        Event,\n        ReferenceFrame,\n        Property) {\n    'use strict';\n\n    /**\n     * This is a temporary class for scaling position properties to the WGS84 surface.\n     * It will go away or be refactored to support data with arbitrary height references.\n     * @private\n     */\n    function ScaledPositionProperty(value) {\n        this._definitionChanged = new Event();\n        this._value = undefined;\n        this._removeSubscription = undefined;\n        this.setValue(value);\n    }\n\n    defineProperties(ScaledPositionProperty.prototype, {\n        isConstant : {\n            get : function() {\n                return Property.isConstant(this._value);\n            }\n        },\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        },\n        referenceFrame : {\n            get : function() {\n                return defined(this._value) ? this._value.referenceFrame : ReferenceFrame.FIXED;\n            }\n        }\n    });\n\n    ScaledPositionProperty.prototype.getValue = function(time, result) {\n        return this.getValueInReferenceFrame(time, ReferenceFrame.FIXED, result);\n    };\n\n    ScaledPositionProperty.prototype.setValue = function(value) {\n        if (this._value !== value) {\n            this._value = value;\n\n            if (defined(this._removeSubscription)) {\n                this._removeSubscription();\n                this._removeSubscription = undefined;\n            }\n\n            if (defined(value)) {\n                this._removeSubscription = value.definitionChanged.addEventListener(this._raiseDefinitionChanged, this);\n            }\n            this._definitionChanged.raiseEvent(this);\n        }\n    };\n\n    ScaledPositionProperty.prototype.getValueInReferenceFrame = function(time, referenceFrame, result) {\n        \n\n        if (!defined(this._value)) {\n            return undefined;\n        }\n\n        result = this._value.getValueInReferenceFrame(time, referenceFrame, result);\n        return defined(result) ? Ellipsoid.WGS84.scaleToGeodeticSurface(result, result) : undefined;\n    };\n\n    ScaledPositionProperty.prototype.equals = function(other) {\n        return this === other || (other instanceof ScaledPositionProperty && this._value === other._value);\n    };\n\n    ScaledPositionProperty.prototype._raiseDefinitionChanged = function() {\n        this._definitionChanged.raiseEvent(this);\n    };\n\n    return ScaledPositionProperty;\n});\n","define([\n        './freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * This enumerated type is used in determining to what extent an object, the occludee,\n     * is visible during horizon culling. An occluder may fully block an occludee, in which case\n     * it has no visibility, may partially block an occludee from view, or may not block it at all,\n     * leading to full visibility.\n     *\n     * @exports Visibility\n     */\n    var Visibility = {\n        /**\n         * Represents that no part of an object is visible.\n         *\n         * @type {Number}\n         * @constant\n         */\n        NONE : -1,\n\n        /**\n        * Represents that part, but not all, of an object is visible\n        *\n        * @type {Number}\n        * @constant\n        */\n        PARTIAL : 0,\n\n        /**\n        * Represents that an object is visible in its entirety.\n        *\n        * @type {Number}\n        * @constant\n        */\n        FULL : 1\n    };\n\n    return freezeObject(Visibility);\n});\n","define([\n        './arrayFill',\n        './BoundingSphere',\n        './Cartesian2',\n        './Cartesian3',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './DeveloperError',\n        './Ellipsoid',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './GeometryOffsetAttribute',\n        './IndexDatatype',\n        './Math',\n        './PrimitiveType',\n        './VertexFormat'\n    ], function(\n        arrayFill,\n        BoundingSphere,\n        Cartesian2,\n        Cartesian3,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        DeveloperError,\n        Ellipsoid,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        GeometryOffsetAttribute,\n        IndexDatatype,\n        CesiumMath,\n        PrimitiveType,\n        VertexFormat) {\n    'use strict';\n\n    var scratchPosition = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    var scratchTangent = new Cartesian3();\n    var scratchBitangent = new Cartesian3();\n    var scratchNormalST = new Cartesian3();\n    var defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\n\n    var cos = Math.cos;\n    var sin = Math.sin;\n\n    /**\n     * A description of an ellipsoid centered at the origin.\n     *\n     * @alias EllipsoidGeometry\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\n     * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\n     * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     *\n     * @exception {DeveloperError} options.slicePartitions cannot be less than three.\n     * @exception {DeveloperError} options.stackPartitions cannot be less than three.\n     *\n     * @see EllipsoidGeometry#createGeometry\n     *\n     * @example\n     * var ellipsoid = new Cesium.EllipsoidGeometry({\n     *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\n     *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\n     * });\n     * var geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\n     */\n    function EllipsoidGeometry(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        var radii = defaultValue(options.radii, defaultRadii);\n        var stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\n        var slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        \n\n        this._radii = Cartesian3.clone(radii);\n        this._stackPartitions = stackPartitions;\n        this._slicePartitions = slicePartitions;\n        this._vertexFormat = VertexFormat.clone(vertexFormat);\n        this._offsetAttribute = options.offsetAttribute;\n        this._workerName = 'createEllipsoidGeometry';\n    }\n\n    /**\n     * The number of elements used to pack the object into an array.\n     * @type {Number}\n     */\n    EllipsoidGeometry.packedLength = Cartesian3.packedLength + VertexFormat.packedLength + 3;\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {EllipsoidGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    EllipsoidGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        Cartesian3.pack(value._radii, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n\n        array[startingIndex++] = value._stackPartitions;\n        array[startingIndex++] = value._slicePartitions;\n        array[startingIndex] = defaultValue(value._offsetAttribute, -1);\n\n        return array;\n    };\n\n    var scratchRadii = new Cartesian3();\n    var scratchVertexFormat = new VertexFormat();\n    var scratchOptions = {\n        radii : scratchRadii,\n        vertexFormat : scratchVertexFormat,\n        stackPartitions : undefined,\n        slicePartitions : undefined,\n        offsetAttribute : undefined\n    };\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {EllipsoidGeometry} [result] The object into which to store the result.\n     * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\n     */\n    EllipsoidGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\n        startingIndex += Cartesian3.packedLength;\n\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n\n        var stackPartitions = array[startingIndex++];\n        var slicePartitions = array[startingIndex++];\n        var offsetAttribute = array[startingIndex];\n\n        if (!defined(result)) {\n            scratchOptions.stackPartitions = stackPartitions;\n            scratchOptions.slicePartitions = slicePartitions;\n            scratchOptions.offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n            return new EllipsoidGeometry(scratchOptions);\n        }\n\n        result._radii = Cartesian3.clone(radii, result._radii);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._stackPartitions = stackPartitions;\n        result._slicePartitions = slicePartitions;\n        result._offsetAttribute = offsetAttribute === -1 ? undefined : offsetAttribute;\n\n        return result;\n    };\n\n    /**\n     * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    EllipsoidGeometry.createGeometry = function(ellipsoidGeometry) {\n        var radii = ellipsoidGeometry._radii;\n\n        if ((radii.x <= 0) || (radii.y <= 0) || (radii.z <= 0)) {\n            return;\n        }\n\n        var ellipsoid = Ellipsoid.fromCartesian3(radii);\n        var vertexFormat = ellipsoidGeometry._vertexFormat;\n\n        // The extra slice and stack are for duplicating points at the x axis and poles.\n        // We need the texture coordinates to interpolate from (2 * pi - delta) to 2 * pi instead of\n        // (2 * pi - delta) to 0.\n        var slicePartitions = ellipsoidGeometry._slicePartitions + 1;\n        var stackPartitions = ellipsoidGeometry._stackPartitions + 1;\n\n        var vertexCount = stackPartitions * slicePartitions;\n        var positions = new Float64Array(vertexCount * 3);\n\n        var numIndices = 6 * (slicePartitions - 1) * (stackPartitions - 2);\n        var indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\n\n        var normals = (vertexFormat.normal) ? new Float32Array(vertexCount * 3) : undefined;\n        var tangents = (vertexFormat.tangent) ? new Float32Array(vertexCount * 3) : undefined;\n        var bitangents = (vertexFormat.bitangent) ? new Float32Array(vertexCount * 3) : undefined;\n        var st = (vertexFormat.st) ? new Float32Array(vertexCount * 2) : undefined;\n\n        var cosTheta = new Array(slicePartitions);\n        var sinTheta = new Array(slicePartitions);\n\n        var i;\n        var j;\n        var index = 0;\n\n        for (i = 0; i < slicePartitions; i++) {\n            var theta = CesiumMath.TWO_PI * i / (slicePartitions - 1);\n            cosTheta[i] = cos(theta);\n            sinTheta[i] = sin(theta);\n\n            // duplicate first point for correct\n            // texture coordinates at the north pole.\n            positions[index++] = 0.0;\n            positions[index++] = 0.0;\n            positions[index++] = radii.z;\n        }\n\n        for (i = 1; i < stackPartitions - 1; i++) {\n            var phi = Math.PI * i / (stackPartitions - 1);\n            var sinPhi = sin(phi);\n\n            var xSinPhi = radii.x * sinPhi;\n            var ySinPhi = radii.y * sinPhi;\n            var zCosPhi = radii.z * cos(phi);\n\n            for (j = 0; j < slicePartitions; j++) {\n                positions[index++] = cosTheta[j] * xSinPhi;\n                positions[index++] = sinTheta[j] * ySinPhi;\n                positions[index++] = zCosPhi;\n            }\n        }\n\n        for (i = 0; i < slicePartitions; i++) {\n            // duplicate first point for correct\n            // texture coordinates at the south pole.\n            positions[index++] = 0.0;\n            positions[index++] = 0.0;\n            positions[index++] = -radii.z;\n        }\n\n        var attributes = new GeometryAttributes();\n\n        if (vertexFormat.position) {\n            attributes.position = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            });\n        }\n\n        var stIndex = 0;\n        var normalIndex = 0;\n        var tangentIndex = 0;\n        var bitangentIndex = 0;\n\n        if (vertexFormat.st || vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\n            for( i = 0; i < vertexCount; i++) {\n                var position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\n                var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n\n                if (vertexFormat.st) {\n                    var normalST = Cartesian2.negate(normal, scratchNormalST);\n\n                    // if the point is at or close to the pole, find a point along the same longitude\n                    // close to the xy-plane for the s coordinate.\n                    if (Cartesian2.magnitude(normalST) < CesiumMath.EPSILON6) {\n                        index = (i + slicePartitions * Math.floor(stackPartitions * 0.5)) * 3;\n                        if (index > positions.length) {\n                            index = (i - slicePartitions * Math.floor(stackPartitions * 0.5)) * 3;\n                        }\n                        Cartesian3.fromArray(positions, index, normalST);\n                        ellipsoid.geodeticSurfaceNormal(normalST, normalST);\n                        Cartesian2.negate(normalST, normalST);\n                    }\n\n                    st[stIndex++] = (Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI) + 0.5;\n                    st[stIndex++] = (Math.asin(normal.z) / Math.PI) + 0.5;\n                }\n\n                if (vertexFormat.normal) {\n                    normals[normalIndex++] = normal.x;\n                    normals[normalIndex++] = normal.y;\n                    normals[normalIndex++] = normal.z;\n                }\n\n                if (vertexFormat.tangent || vertexFormat.bitangent) {\n                    var tangent = scratchTangent;\n                    if (i < slicePartitions || i > vertexCount - slicePartitions - 1) {\n                        Cartesian3.cross(Cartesian3.UNIT_X, normal, tangent);\n                        Cartesian3.normalize(tangent, tangent);\n                    } else {\n                        Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n                        Cartesian3.normalize(tangent, tangent);\n                    }\n\n                    if (vertexFormat.tangent) {\n                        tangents[tangentIndex++] = tangent.x;\n                        tangents[tangentIndex++] = tangent.y;\n                        tangents[tangentIndex++] = tangent.z;\n                    }\n\n                    if (vertexFormat.bitangent) {\n                        var bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\n                        Cartesian3.normalize(bitangent, bitangent);\n\n                        bitangents[bitangentIndex++] = bitangent.x;\n                        bitangents[bitangentIndex++] = bitangent.y;\n                        bitangents[bitangentIndex++] = bitangent.z;\n                    }\n                }\n            }\n\n            if (vertexFormat.st) {\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : st\n                });\n            }\n\n            if (vertexFormat.normal) {\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n\n            if (vertexFormat.tangent) {\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n\n            if (vertexFormat.bitangent) {\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n        }\n\n        if (defined(ellipsoidGeometry._offsetAttribute)) {\n            var length = positions.length;\n            var applyOffset = new Uint8Array(length / 3);\n            var offsetValue = ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n            arrayFill(applyOffset, offsetValue);\n            attributes.applyOffset = new GeometryAttribute({\n                componentDatatype : ComponentDatatype.UNSIGNED_BYTE,\n                componentsPerAttribute : 1,\n                values: applyOffset\n            });\n        }\n\n        index = 0;\n        for (j = 0; j < slicePartitions - 1; j++) {\n            indices[index++] = slicePartitions + j;\n            indices[index++] = slicePartitions + j + 1;\n            indices[index++] = j + 1;\n        }\n\n        var topOffset;\n        var bottomOffset;\n        for (i = 1; i < stackPartitions - 2; i++) {\n            topOffset = i * slicePartitions;\n            bottomOffset = (i + 1) * slicePartitions;\n\n            for (j = 0; j < slicePartitions - 1; j++) {\n                indices[index++] = bottomOffset + j;\n                indices[index++] = bottomOffset + j + 1;\n                indices[index++] = topOffset + j + 1;\n\n                indices[index++] = bottomOffset + j;\n                indices[index++] = topOffset + j + 1;\n                indices[index++] = topOffset + j;\n            }\n        }\n\n        i = stackPartitions - 2;\n        topOffset = i * slicePartitions;\n        bottomOffset = (i + 1) * slicePartitions;\n\n        for (j = 0; j < slicePartitions - 1; j++) {\n            indices[index++] = bottomOffset + j;\n            indices[index++] = topOffset + j + 1;\n            indices[index++] = topOffset + j;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromEllipsoid(ellipsoid),\n            offsetAttribute : ellipsoidGeometry._offsetAttribute\n        });\n    };\n\n    var unitEllipsoidGeometry;\n\n    /**\n     * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\n     * @returns {Geometry} The computed vertices and indices.\n     *\n     * @private\n     */\n    EllipsoidGeometry.getUnitEllipsoid = function() {\n        if (!defined(unitEllipsoidGeometry)) {\n            unitEllipsoidGeometry = EllipsoidGeometry.createGeometry((new EllipsoidGeometry({\n                radii : new Cartesian3(1.0, 1.0, 1.0),\n                vertexFormat : VertexFormat.POSITION_ONLY\n            })));\n        }\n        return unitEllipsoidGeometry;\n    };\n\n    return EllipsoidGeometry;\n});\n","define([\n        '../Core/freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * Describes how the map will operate in 2D.\n     *\n     * @exports MapMode2D\n     */\n    var MapMode2D = {\n        /**\n         * The 2D map can be rotated about the z axis.\n         *\n         * @type {Number}\n         * @constant\n         */\n        ROTATE : 0,\n\n        /**\n         * The 2D map can be scrolled infinitely in the horizontal direction.\n         *\n         * @type {Number}\n         * @constant\n         */\n        INFINITE_SCROLL : 1\n    };\n\n    return freezeObject(MapMode2D);\n});\n","define(function() {\n    'use strict';\n\n    /**\n     * Determines how input texture to a {@link PostProcessStage} is sampled.\n     *\n     * @exports PostProcessStageSampleMode\n     */\n    var PostProcessStageSampleMode = {\n        /**\n         * Samples the texture by returning the closest texel.\n         *\n         * @type {Number}\n         * @constant\n         */\n        NEAREST : 0,\n        /**\n         * Samples the texture through bi-linear interpolation of the four nearest texels.\n         *\n         * @type {Number}\n         * @constant\n         */\n        LINEAR : 1\n    };\n\n    return PostProcessStageSampleMode;\n});\n","define([\n        '../Core/createGuid',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError'\n    ], function(\n        createGuid,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError) {\n    'use strict';\n\n    /**\n     * A collection of primitives.  This is most often used with {@link Scene#primitives},\n     * but <code>PrimitiveCollection</code> is also a primitive itself so collections can\n     * be added to collections forming a hierarchy.\n     *\n     * @alias PrimitiveCollection\n     * @constructor\n     *\n     * @param {Object} [options] Object with the following properties:\n     * @param {Boolean} [options.show=true] Determines if the primitives in the collection will be shown.\n     * @param {Boolean} [options.destroyPrimitives=true] Determines if primitives in the collection are destroyed when they are removed.\n     *\n     * @example\n     * var billboards = new Cesium.BillboardCollection();\n     * var labels = new Cesium.LabelCollection();\n     *\n     * var collection = new Cesium.PrimitiveCollection();\n     * collection.add(billboards);\n     *\n     * scene.primitives.add(collection);  // Add collection\n     * scene.primitives.add(labels);      // Add regular primitive\n     */\n    function PrimitiveCollection(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        this._primitives = [];\n        this._guid = createGuid();\n\n        // Used by the OrderedGroundPrimitiveCollection\n        this._zIndex = undefined;\n\n        /**\n         * Determines if primitives in this collection will be shown.\n         *\n         * @type {Boolean}\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * Determines if primitives in the collection are destroyed when they are removed by\n         * {@link PrimitiveCollection#destroy} or  {@link PrimitiveCollection#remove} or implicitly\n         * by {@link PrimitiveCollection#removeAll}.\n         *\n         * @type {Boolean}\n         * @default true\n         *\n         * @example\n         * // Example 1. Primitives are destroyed by default.\n         * var primitives = new Cesium.PrimitiveCollection();\n         * var labels = primitives.add(new Cesium.LabelCollection());\n         * primitives = primitives.destroy();\n         * var b = labels.isDestroyed(); // true\n         *\n         * @example\n         * // Example 2. Do not destroy primitives in a collection.\n         * var primitives = new Cesium.PrimitiveCollection();\n         * primitives.destroyPrimitives = false;\n         * var labels = primitives.add(new Cesium.LabelCollection());\n         * primitives = primitives.destroy();\n         * var b = labels.isDestroyed(); // false\n         * labels = labels.destroy();    // explicitly destroy\n         */\n        this.destroyPrimitives = defaultValue(options.destroyPrimitives, true);\n    }\n\n    defineProperties(PrimitiveCollection.prototype, {\n        /**\n         * Gets the number of primitives in the collection.\n         *\n         * @memberof PrimitiveCollection.prototype\n         *\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                return this._primitives.length;\n            }\n        }\n    });\n\n    /**\n     * Adds a primitive to the collection.\n     *\n     * @param {Object} primitive The primitive to add.\n     * @param {Number} [index] the index to add the layer at.  If omitted, the primitive will\n     *                         added at the bottom  of all existing primitives.\n     * @returns {Object} The primitive added to the collection.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @example\n     * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n     */\n    PrimitiveCollection.prototype.add = function(primitive, index) {\n        var hasIndex = defined(index);\n\n        \n\n        var external = (primitive._external = primitive._external || {});\n        var composites = (external._composites = external._composites || {});\n        composites[this._guid] = {\n            collection : this\n        };\n\n        if (!hasIndex) {\n            this._primitives.push(primitive);\n        } else {\n            this._primitives.splice(index, 0, primitive);\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Removes a primitive from the collection.\n     *\n     * @param {Object} [primitive] The primitive to remove.\n     * @returns {Boolean} <code>true</code> if the primitive was removed; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * var billboards = scene.primitives.add(new Cesium.BillboardCollection());\n     * scene.primitives.remove(p);  // Returns true\n     *\n     * @see PrimitiveCollection#destroyPrimitives\n     */\n    PrimitiveCollection.prototype.remove = function(primitive) {\n        // PERFORMANCE_IDEA:  We can obviously make this a lot faster.\n        if (this.contains(primitive)) {\n            var index = this._primitives.indexOf(primitive);\n            if (index !== -1) {\n                this._primitives.splice(index, 1);\n\n                delete primitive._external._composites[this._guid];\n\n                if (this.destroyPrimitives) {\n                    primitive.destroy();\n                }\n\n                return true;\n            }\n            // else ... this is not possible, I swear.\n        }\n\n        return false;\n    };\n\n    /**\n     * Removes and destroys a primitive, regardless of destroyPrimitives setting.\n     * @private\n     */\n    PrimitiveCollection.prototype.removeAndDestroy = function(primitive) {\n        var removed = this.remove(primitive);\n        if (removed && !this.destroyPrimitives) {\n            primitive.destroy();\n        }\n        return removed;\n    };\n\n    /**\n     * Removes all primitives in the collection.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PrimitiveCollection#destroyPrimitives\n     */\n    PrimitiveCollection.prototype.removeAll = function() {\n        var primitives = this._primitives;\n        var length = primitives.length;\n        for (var i = 0; i < length; ++i) {\n            delete primitives[i]._external._composites[this._guid];\n            if (this.destroyPrimitives) {\n                primitives[i].destroy();\n            }\n        }\n        this._primitives = [];\n    };\n\n    /**\n     * Determines if this collection contains a primitive.\n     *\n     * @param {Object} [primitive] The primitive to check for.\n     * @returns {Boolean} <code>true</code> if the primitive is in the collection; <code>false</code> if the primitive is <code>undefined</code> or was not found in the collection.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PrimitiveCollection#get\n     */\n    PrimitiveCollection.prototype.contains = function(primitive) {\n        return !!(defined(primitive) &&\n                  primitive._external &&\n                  primitive._external._composites &&\n                  primitive._external._composites[this._guid]);\n    };\n\n    function getPrimitiveIndex(compositePrimitive, primitive) {\n        \n\n        return compositePrimitive._primitives.indexOf(primitive);\n    }\n\n    /**\n     * Raises a primitive \"up one\" in the collection.  If all primitives in the collection are drawn\n     * on the globe surface, this visually moves the primitive up one.\n     *\n     * @param {Object} [primitive] The primitive to raise.\n     *\n     * @exception {DeveloperError} primitive is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PrimitiveCollection#raiseToTop\n     * @see PrimitiveCollection#lower\n     * @see PrimitiveCollection#lowerToBottom\n     */\n    PrimitiveCollection.prototype.raise = function(primitive) {\n        if (defined(primitive)) {\n            var index = getPrimitiveIndex(this, primitive);\n            var primitives = this._primitives;\n\n            if (index !== primitives.length - 1) {\n                var p = primitives[index];\n                primitives[index] = primitives[index + 1];\n                primitives[index + 1] = p;\n            }\n        }\n    };\n\n    /**\n     * Raises a primitive to the \"top\" of the collection.  If all primitives in the collection are drawn\n     * on the globe surface, this visually moves the primitive to the top.\n     *\n     * @param {Object} [primitive] The primitive to raise the top.\n     *\n     * @exception {DeveloperError} primitive is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PrimitiveCollection#raise\n     * @see PrimitiveCollection#lower\n     * @see PrimitiveCollection#lowerToBottom\n     */\n    PrimitiveCollection.prototype.raiseToTop = function(primitive) {\n        if (defined(primitive)) {\n            var index = getPrimitiveIndex(this, primitive);\n            var primitives = this._primitives;\n\n            if (index !== primitives.length - 1) {\n                // PERFORMANCE_IDEA:  Could be faster\n                primitives.splice(index, 1);\n                primitives.push(primitive);\n            }\n        }\n    };\n\n    /**\n     * Lowers a primitive \"down one\" in the collection.  If all primitives in the collection are drawn\n     * on the globe surface, this visually moves the primitive down one.\n     *\n     * @param {Object} [primitive] The primitive to lower.\n     *\n     * @exception {DeveloperError} primitive is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PrimitiveCollection#lowerToBottom\n     * @see PrimitiveCollection#raise\n     * @see PrimitiveCollection#raiseToTop\n     */\n    PrimitiveCollection.prototype.lower = function(primitive) {\n        if (defined(primitive)) {\n            var index = getPrimitiveIndex(this, primitive);\n            var primitives = this._primitives;\n\n            if (index !== 0) {\n                var p = primitives[index];\n                primitives[index] = primitives[index - 1];\n                primitives[index - 1] = p;\n            }\n        }\n    };\n\n    /**\n     * Lowers a primitive to the \"bottom\" of the collection.  If all primitives in the collection are drawn\n     * on the globe surface, this visually moves the primitive to the bottom.\n     *\n     * @param {Object} [primitive] The primitive to lower to the bottom.\n     *\n     * @exception {DeveloperError} primitive is not in this collection.\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PrimitiveCollection#lower\n     * @see PrimitiveCollection#raise\n     * @see PrimitiveCollection#raiseToTop\n     */\n    PrimitiveCollection.prototype.lowerToBottom = function(primitive) {\n        if (defined(primitive)) {\n            var index = getPrimitiveIndex(this, primitive);\n            var primitives = this._primitives;\n\n            if (index !== 0) {\n                // PERFORMANCE_IDEA:  Could be faster\n                primitives.splice(index, 1);\n                primitives.unshift(primitive);\n            }\n        }\n    };\n\n    /**\n     * Returns the primitive in the collection at the specified index.\n     *\n     * @param {Number} index The zero-based index of the primitive to return.\n     * @returns {Object} The primitive at the <code>index</code>.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * // Toggle the show property of every primitive in the collection.\n     * var primitives = scene.primitives;\n     * var length = primitives.length;\n     * for (var i = 0; i < length; ++i) {\n     *   var p = primitives.get(i);\n     *   p.show = !p.show;\n     * }\n     *\n     * @see PrimitiveCollection#length\n     */\n    PrimitiveCollection.prototype.get = function(index) {\n        \n\n        return this._primitives[index];\n    };\n\n    /**\n     * @private\n     */\n    PrimitiveCollection.prototype.update = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        var primitives = this._primitives;\n        // Using primitives.length in the loop is a temporary workaround\n        // to allow quadtree updates to add and remove primitives in\n        // update().  This will be changed to manage added and removed lists.\n        for (var i = 0; i < primitives.length; ++i) {\n            primitives[i].update(frameState);\n        }\n    };\n\n    /**\n     * @private\n     */\n    PrimitiveCollection.prototype.prePassesUpdate = function(frameState) {\n        var primitives = this._primitives;\n        // Using primitives.length in the loop is a temporary workaround\n        // to allow quadtree updates to add and remove primitives in\n        // update().  This will be changed to manage added and removed lists.\n        for (var i = 0; i < primitives.length; ++i) {\n            var primitive = primitives[i];\n            if (defined(primitive.prePassesUpdate)) {\n                primitive.prePassesUpdate(frameState);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    PrimitiveCollection.prototype.updateForPass = function(frameState, passState) {\n        var primitives = this._primitives;\n        // Using primitives.length in the loop is a temporary workaround\n        // to allow quadtree updates to add and remove primitives in\n        // update().  This will be changed to manage added and removed lists.\n        for (var i = 0; i < primitives.length; ++i) {\n            var primitive = primitives[i];\n            if (defined(primitive.updateForPass)) {\n                primitive.updateForPass(frameState, passState);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    PrimitiveCollection.prototype.postPassesUpdate = function(frameState) {\n        var primitives = this._primitives;\n        // Using primitives.length in the loop is a temporary workaround\n        // to allow quadtree updates to add and remove primitives in\n        // update().  This will be changed to manage added and removed lists.\n        for (var i = 0; i < primitives.length; ++i) {\n            var primitive = primitives[i];\n            if (defined(primitive.postPassesUpdate)) {\n                primitive.postPassesUpdate(frameState);\n            }\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see PrimitiveCollection#destroy\n     */\n    PrimitiveCollection.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by each primitive in this collection.  Explicitly destroying this\n     * collection allows for deterministic release of WebGL resources, instead of relying on the garbage\n     * collector to destroy this collection.\n     * <br /><br />\n     * Since destroying a collection destroys all the contained primitives, only destroy a collection\n     * when you are sure no other code is still using any of the contained primitives.\n     * <br /><br />\n     * Once this collection is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * primitives = primitives && primitives.destroy();\n     *\n     * @see PrimitiveCollection#isDestroyed\n     */\n    PrimitiveCollection.prototype.destroy = function() {\n        this.removeAll();\n        return destroyObject(this);\n    };\n\n    return PrimitiveCollection;\n});\n","define([\n        '../Core/defaultValue',\n        '../Core/defined',\n        './CallbackProperty',\n        './GeometryUpdater',\n        './TerrainOffsetProperty'\n    ], function(\n        defaultValue,\n        defined,\n        CallbackProperty,\n        GeometryUpdater,\n        TerrainOffsetProperty) {\n    'use strict';\n\n    function heightReferenceOnEntityPropertyChanged(entity, propertyName, newValue, oldValue) {\n        GeometryUpdater.prototype._onEntityPropertyChanged.call(this, entity, propertyName, newValue, oldValue);\n        if (this._observedPropertyNames.indexOf(propertyName) === -1) {\n            return;\n        }\n\n        var geometry = this._entity[this._geometryPropertyName];\n        if (!defined(geometry)) {\n            return;\n        }\n\n        if (defined(this._terrainOffsetProperty)) {\n            this._terrainOffsetProperty.destroy();\n            this._terrainOffsetProperty = undefined;\n        }\n\n        var heightReferenceProperty = geometry.heightReference;\n\n        if (defined(heightReferenceProperty)) {\n            var centerPosition = new CallbackProperty(this._computeCenter.bind(this), !this._dynamic);\n            this._terrainOffsetProperty = new TerrainOffsetProperty(this._scene, centerPosition, heightReferenceProperty);\n        }\n    }\n\n    return heightReferenceOnEntityPropertyChanged;\n});\n","define([\n        './Cartesian2',\n        './Cartesian3',\n        './Cartesian4',\n        './Cartographic',\n        './CornerType',\n        './EllipsoidTangentPlane',\n        './Math',\n        './Matrix3',\n        './Matrix4',\n        './PolylinePipeline',\n        './Quaternion',\n        './Transforms'\n    ], function(\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        CornerType,\n        EllipsoidTangentPlane,\n        CesiumMath,\n        Matrix3,\n        Matrix4,\n        PolylinePipeline,\n        Quaternion,\n        Transforms) {\n    'use strict';\n\n    var scratch2Array = [new Cartesian3(), new Cartesian3()];\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchCartesian4 = new Cartesian3();\n    var scratchCartesian5 = new Cartesian3();\n    var scratchCartesian6 = new Cartesian3();\n    var scratchCartesian7 = new Cartesian3();\n    var scratchCartesian8 = new Cartesian3();\n    var scratchCartesian9 = new Cartesian3();\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n\n    /**\n     * @private\n     */\n    var PolylineVolumeGeometryLibrary = {};\n\n    var cartographic = new Cartographic();\n    function scaleToSurface(positions, ellipsoid) {\n        var heights = new Array(positions.length);\n        for (var i = 0; i < positions.length; i++) {\n            var pos = positions[i];\n            cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\n            heights[i] = cartographic.height;\n            positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\n        }\n        return heights;\n    }\n\n    function subdivideHeights(points, h0, h1, granularity) {\n        var p0 = points[0];\n        var p1 = points[1];\n        var angleBetween = Cartesian3.angleBetween(p0, p1);\n        var numPoints = Math.ceil(angleBetween / granularity);\n        var heights = new Array(numPoints);\n        var i;\n        if (h0 === h1) {\n            for (i = 0; i < numPoints; i++) {\n                heights[i] = h0;\n            }\n            heights.push(h1);\n            return heights;\n        }\n\n        var dHeight = h1 - h0;\n        var heightPerVertex = dHeight / (numPoints);\n\n        for (i = 1; i < numPoints; i++) {\n            var h = h0 + i * heightPerVertex;\n            heights[i] = h;\n        }\n\n        heights[0] = h0;\n        heights.push(h1);\n        return heights;\n    }\n\n    var nextScratch = new Cartesian3();\n    var prevScratch = new Cartesian3();\n\n    function computeRotationAngle(start, end, position, ellipsoid) {\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, start, nextScratch), nextScratch);\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, end, prevScratch), prevScratch);\n        var angle = Cartesian2.angleBetween(next, prev);\n\n        return (prev.x * next.y - prev.y * next.x >= 0.0) ? -angle : angle;\n    }\n\n    var negativeX = new Cartesian3(-1, 0, 0);\n    var transform = new Matrix4();\n    var translation = new Matrix4();\n    var rotationZ = new Matrix3();\n    var scaleMatrix = Matrix3.IDENTITY.clone();\n    var westScratch = new Cartesian3();\n    var finalPosScratch = new Cartesian4();\n    var heightCartesian = new Cartesian3();\n    function addPosition(center, left, shape, finalPositions, ellipsoid, height, xScalar, repeat) {\n        var west = westScratch;\n        var finalPosition = finalPosScratch;\n        transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\n\n        west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\n        west = Cartesian3.normalize(west, west);\n        var angle = computeRotationAngle(west, left, center, ellipsoid);\n        rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\n\n        heightCartesian.z = height;\n        transform = Matrix4.multiplyTransformation(transform, Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation), transform);\n        var scale = scaleMatrix;\n        scale[0] = xScalar;\n\n        for (var j = 0; j < repeat; j++) {\n            for (var i = 0; i < shape.length; i += 3) {\n                finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\n                finalPosition = Matrix3.multiplyByVector(scale, finalPosition, finalPosition);\n                finalPosition = Matrix4.multiplyByPoint(transform, finalPosition, finalPosition);\n                finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\n            }\n        }\n\n        return finalPositions;\n    }\n\n    var centerScratch = new Cartesian3();\n    function addPositions(centers, left, shape, finalPositions, ellipsoid, heights, xScalar) {\n        for (var i = 0; i < centers.length; i += 3) {\n            var center = Cartesian3.fromArray(centers, i, centerScratch);\n            finalPositions = addPosition(center, left, shape, finalPositions, ellipsoid, heights[i / 3], xScalar, 1);\n        }\n        return finalPositions;\n    }\n\n    function convertShapeTo3DDuplicate(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\n        var length = shape2D.length;\n        var shape = new Array(length * 6);\n        var index = 0;\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n        var point = shape2D[0];\n        shape[index++] = point.x - xOffset;\n        shape[index++] = 0.0;\n        shape[index++] = point.y - yOffset;\n        for (var i = 1; i < length; i++) {\n            point = shape2D[i];\n            var x = point.x - xOffset;\n            var z = point.y - yOffset;\n            shape[index++] = x;\n            shape[index++] = 0.0;\n            shape[index++] = z;\n\n            shape[index++] = x;\n            shape[index++] = 0.0;\n            shape[index++] = z;\n        }\n        point = shape2D[0];\n        shape[index++] = point.x - xOffset;\n        shape[index++] = 0.0;\n        shape[index++] = point.y - yOffset;\n\n        return shape;\n    }\n\n    function convertShapeTo3D(shape2D, boundingRectangle) { //orientate 2D shape to XZ plane center at (0, 0, 0)\n        var length = shape2D.length;\n        var shape = new Array(length * 3);\n        var index = 0;\n        var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\n        var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\n\n        for (var i = 0; i < length; i++) {\n            shape[index++] = shape2D[i].x - xOffset;\n            shape[index++] = 0;\n            shape[index++] = shape2D[i].y - yOffset;\n        }\n\n        return shape;\n    }\n\n    var quaterion = new Quaternion();\n    var startPointScratch = new Cartesian3();\n    var rotMatrix = new Matrix3();\n    function computeRoundCorner(pivot, startPoint, endPoint, cornerType, leftIsOutside, ellipsoid, finalPositions, shape, height, duplicatePoints) {\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, pivot, scratch1), Cartesian3.subtract(endPoint, pivot, scratch2));\n        var granularity = (cornerType === CornerType.BEVELED) ? 0 : Math.ceil(angle / CesiumMath.toRadians(5));\n\n        var m;\n        if (leftIsOutside) {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(pivot, scratch1), angle / (granularity + 1), quaterion), rotMatrix);\n        } else {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion), rotMatrix);\n        }\n\n        var left;\n        var surfacePoint;\n        startPoint = Cartesian3.clone(startPoint, startPointScratch);\n        if (granularity > 0) {\n            var repeat = duplicatePoints ? 2 : 1;\n            for (var i = 0; i < granularity; i++) {\n                startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n                left = Cartesian3.subtract(startPoint, pivot, scratch1);\n                left = Cartesian3.normalize(left, left);\n                if (!leftIsOutside) {\n                    left = Cartesian3.negate(left, left);\n                }\n                surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n                finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, repeat);\n            }\n        } else {\n            left = Cartesian3.subtract(startPoint, pivot, scratch1);\n            left = Cartesian3.normalize(left, left);\n            if (!leftIsOutside) {\n                left = Cartesian3.negate(left, left);\n            }\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\n\n            endPoint = Cartesian3.clone(endPoint, startPointScratch);\n            left = Cartesian3.subtract(endPoint, pivot, scratch1);\n            left = Cartesian3.normalize(left, left);\n            if (!leftIsOutside) {\n                left = Cartesian3.negate(left, left);\n            }\n            surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\n            finalPositions = addPosition(surfacePoint, left, shape, finalPositions, ellipsoid, height, 1, 1);\n        }\n\n        return finalPositions;\n    }\n\n    PolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function(shapePositions) {\n        var length = shapePositions.length;\n        var cleanedPositions = [];\n        for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\n            var v0 = shapePositions[i0];\n            var v1 = shapePositions[i1];\n\n            if (!Cartesian2.equals(v0, v1)) {\n                cleanedPositions.push(v1); // Shallow copy!\n            }\n        }\n\n        return cleanedPositions;\n    };\n\n    PolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function(forward, backward, position, ellipsoid) {\n        var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\n        var next = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, forward, nextScratch), nextScratch);\n        var prev = tangentPlane.projectPointOntoPlane(Cartesian3.add(position, backward, prevScratch), prevScratch);\n\n        return ((prev.x * next.y) - (prev.y * next.x)) >= 0.0;\n    };\n\n    var scratchForwardProjection = new Cartesian3();\n    var scratchBackwardProjection = new Cartesian3();\n\n    PolylineVolumeGeometryLibrary.computePositions = function(positions, shape2D, boundingRectangle, geometry, duplicatePoints) {\n        var ellipsoid = geometry._ellipsoid;\n        var heights = scaleToSurface(positions, ellipsoid);\n        var granularity = geometry._granularity;\n        var cornerType = geometry._cornerType;\n        var shapeForSides = duplicatePoints ? convertShapeTo3DDuplicate(shape2D, boundingRectangle) : convertShapeTo3D(shape2D, boundingRectangle);\n        var shapeForEnds = duplicatePoints ? convertShapeTo3D(shape2D, boundingRectangle) : undefined;\n        var heightOffset = boundingRectangle.height / 2;\n        var width = boundingRectangle.width / 2;\n        var length = positions.length;\n        var finalPositions = [];\n        var ends = duplicatePoints ? [] : undefined;\n\n        var forward = scratchCartesian1;\n        var backward = scratchCartesian2;\n        var cornerDirection = scratchCartesian3;\n        var surfaceNormal = scratchCartesian4;\n        var pivot = scratchCartesian5;\n        var start = scratchCartesian6;\n        var end = scratchCartesian7;\n        var left = scratchCartesian8;\n        var previousPosition = scratchCartesian9;\n\n        var position = positions[0];\n        var nextPosition = positions[1];\n        surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n        forward = Cartesian3.subtract(nextPosition, position, forward);\n        forward = Cartesian3.normalize(forward, forward);\n        left = Cartesian3.cross(surfaceNormal, forward, left);\n        left = Cartesian3.normalize(left, left);\n        var h0 = heights[0];\n        var h1 = heights[1];\n        if (duplicatePoints) {\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h0 + heightOffset, 1, 1);\n        }\n        previousPosition = Cartesian3.clone(position, previousPosition);\n        position = nextPosition;\n        backward = Cartesian3.negate(forward, backward);\n        var subdividedHeights;\n        var subdividedPositions;\n        for (var i = 1; i < length - 1; i++) {\n            var repeat = duplicatePoints ? 2 : 1;\n            nextPosition = positions[i + 1];\n            forward = Cartesian3.subtract(nextPosition, position, forward);\n            forward = Cartesian3.normalize(forward, forward);\n            cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\n            cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n            surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\n\n            var forwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(forward, surfaceNormal), scratchForwardProjection);\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n            Cartesian3.normalize(forwardProjection, forwardProjection);\n\n            var backwardProjection = Cartesian3.multiplyByScalar(surfaceNormal, Cartesian3.dot(backward, surfaceNormal), scratchBackwardProjection);\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n            Cartesian3.normalize(backwardProjection, backwardProjection);\n\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\n\n            if (doCorner) {\n                cornerDirection = Cartesian3.cross(cornerDirection, surfaceNormal, cornerDirection);\n                cornerDirection = Cartesian3.cross(surfaceNormal, cornerDirection, cornerDirection);\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n                var scalar = 1 / Math.max(0.25, (Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1))));\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\n                if (leftIsOutside) {\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, start), start);\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scratch2Array,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\n                    left = Cartesian3.normalize(left, left);\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, width, end), end);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\n                    } else {\n                        cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\n                    }\n                    previousPosition = Cartesian3.clone(end, previousPosition);\n                } else {\n                    pivot = Cartesian3.add(position, Cartesian3.multiplyByScalar(cornerDirection, scalar * width, cornerDirection), pivot);\n                    start = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, start), start);\n                    scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n                    scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\n                    subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scratch2Array,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\n                    left = Cartesian3.cross(surfaceNormal, forward, left);\n                    left = Cartesian3.normalize(left, left);\n                    end = Cartesian3.add(pivot, Cartesian3.multiplyByScalar(left, -width, end), end);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        computeRoundCorner(pivot, start, end, cornerType, leftIsOutside, ellipsoid, finalPositions, shapeForSides, h1 + heightOffset, duplicatePoints);\n                    } else {\n                        finalPositions = addPosition(position, cornerDirection, shapeForSides, finalPositions, ellipsoid, h1 + heightOffset, scalar, repeat);\n                    }\n                    previousPosition = Cartesian3.clone(end, previousPosition);\n                }\n                backward = Cartesian3.negate(forward, backward);\n            } else {\n                finalPositions = addPosition(previousPosition, left, shapeForSides, finalPositions, ellipsoid, h0 + heightOffset, 1, 1);\n                previousPosition = position;\n            }\n            h0 = h1;\n            h1 = heights[i + 1];\n            position = nextPosition;\n        }\n\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\n        scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\n        subdividedHeights = subdivideHeights(scratch2Array, h0 + heightOffset, h1 + heightOffset, granularity);\n        subdividedPositions = PolylinePipeline.generateArc({\n            positions: scratch2Array,\n            granularity: granularity,\n            ellipsoid: ellipsoid\n        });\n        finalPositions = addPositions(subdividedPositions, left, shapeForSides, finalPositions, ellipsoid, subdividedHeights, 1);\n        if (duplicatePoints) {\n            ends = addPosition(position, left, shapeForEnds, ends, ellipsoid, h1 + heightOffset, 1, 1);\n        }\n\n        length = finalPositions.length;\n        var posLength = duplicatePoints ? length + ends.length : length;\n        var combinedPositions = new Float64Array(posLength);\n        combinedPositions.set(finalPositions);\n        if (duplicatePoints) {\n            combinedPositions.set(ends, length);\n        }\n\n        return combinedPositions;\n    };\n\n    return PolylineVolumeGeometryLibrary;\n});\n","define([\n        '../../Core/buildModuleUrl',\n        '../../Core/Cartesian3',\n        '../../Core/Clock',\n        '../../Core/defaultValue',\n        '../../Core/defined',\n        '../../Core/defineProperties',\n        '../../Core/destroyObject',\n        '../../Core/DeveloperError',\n        '../../Core/Ellipsoid',\n        '../../Core/FeatureDetection',\n        '../../Core/formatError',\n        '../../Core/requestAnimationFrame',\n        '../../Core/ScreenSpaceEventHandler',\n        '../../Scene/createWorldImagery',\n        '../../Scene/Globe',\n        '../../Scene/Moon',\n        '../../Scene/Scene',\n        '../../Scene/SceneMode',\n        '../../Scene/ShadowMode',\n        '../../Scene/SkyAtmosphere',\n        '../../Scene/SkyBox',\n        '../../Scene/Sun',\n        '../getElement'\n    ], function(\n        buildModuleUrl,\n        Cartesian3,\n        Clock,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        Ellipsoid,\n        FeatureDetection,\n        formatError,\n        requestAnimationFrame,\n        ScreenSpaceEventHandler,\n        createWorldImagery,\n        Globe,\n        Moon,\n        Scene,\n        SceneMode,\n        ShadowMode,\n        SkyAtmosphere,\n        SkyBox,\n        Sun,\n        getElement) {\n    'use strict';\n\n    function getDefaultSkyBoxUrl(suffix) {\n        return require('/Users/pawanmacbook/Documents/ppb/ppbcha-terriamap/node_modules/terriajs-cesium/Source/Assets/Textures/SkyBox/tycho2t3_80_' + suffix + '.jpg');\n    }\n\n    function startRenderLoop(widget) {\n        widget._renderLoopRunning = true;\n\n        var lastFrameTime = 0;\n        function render(frameTime) {\n            if (widget.isDestroyed()) {\n                return;\n            }\n\n            if (widget._useDefaultRenderLoop) {\n                try {\n                    var targetFrameRate = widget._targetFrameRate;\n                    if (!defined(targetFrameRate)) {\n                        widget.resize();\n                        widget.render();\n                        requestAnimationFrame(render);\n                    } else {\n                        var interval = 1000.0 / targetFrameRate;\n                        var delta = frameTime - lastFrameTime;\n\n                        if (delta > interval) {\n                            widget.resize();\n                            widget.render();\n                            lastFrameTime = frameTime - (delta % interval);\n                        }\n                        requestAnimationFrame(render);\n                    }\n                } catch (error) {\n                    widget._useDefaultRenderLoop = false;\n                    widget._renderLoopRunning = false;\n                    if (widget._showRenderLoopErrors) {\n                        var title = 'An error occurred while rendering.  Rendering has stopped.';\n                        widget.showErrorPanel(title, undefined, error);\n                    }\n                }\n            } else {\n                widget._renderLoopRunning = false;\n            }\n        }\n\n        requestAnimationFrame(render);\n    }\n\n    function configureSceneResolution(widget) {\n        var devicePixelRatio = window.devicePixelRatio;\n        var resolutionScale = widget._resolutionScale * devicePixelRatio;\n        if (defined(widget._scene)) {\n            widget._scene.pixelRatio = resolutionScale;\n        }\n\n        return resolutionScale;\n    }\n\n    function configureCanvasSize(widget) {\n        var canvas = widget._canvas;\n        var width = canvas.clientWidth;\n        var height = canvas.clientHeight;\n        var resolutionScale = configureSceneResolution(widget);\n\n        widget._canvasWidth = width;\n        widget._canvasHeight = height;\n\n        width *= resolutionScale;\n        height *= resolutionScale;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        widget._canRender = width !== 0 && height !== 0;\n        widget._lastDevicePixelRatio = window.devicePixelRatio;\n    }\n\n    function configureCameraFrustum(widget) {\n        var canvas = widget._canvas;\n        var width = canvas.width;\n        var height = canvas.height;\n        if (width !== 0 && height !== 0) {\n            var frustum = widget._scene.camera.frustum;\n            if (defined(frustum.aspectRatio)) {\n                frustum.aspectRatio = width / height;\n            } else {\n                frustum.top = frustum.right * (height / width);\n                frustum.bottom = -frustum.top;\n            }\n        }\n    }\n\n    /**\n     * A widget containing a Cesium scene.\n     *\n     * @alias CesiumWidget\n     * @constructor\n     *\n     * @param {Element|String} container The DOM element or ID that will contain the widget.\n     * @param {Object} [options] Object with the following properties:\n     * @param {Clock} [options.clock=new Clock()] The clock to use to control current time.\n     * @param {ImageryProvider} [options.imageryProvider=createWorldImagery()] The imagery provider to serve as the base layer. If set to <code>false</code>, no imagery provider will be added.\n     * @param {TerrainProvider} [options.terrainProvider=new EllipsoidTerrainProvider] The terrain provider.\n     * @param {SkyBox} [options.skyBox] The skybox used to render the stars.  When <code>undefined</code>, the default stars are used. If set to <code>false</code>, no skyBox, Sun, or Moon will be added.\n     * @param {SkyAtmosphere} [options.skyAtmosphere] Blue sky, and the glow around the Earth's limb.  Set to <code>false</code> to turn it off.\n     * @param {SceneMode} [options.sceneMode=SceneMode.SCENE3D] The initial scene mode.\n     * @param {Boolean} [options.scene3DOnly=false] When <code>true</code>, each geometry instance will only be rendered in 3D to save GPU memory.\n     * @param {Boolean} [options.orderIndependentTranslucency=true] If true and the configuration supports it, use order independent translucency.\n     * @param {MapProjection} [options.mapProjection=new GeographicProjection()] The map projection to use in 2D and Columbus View modes.\n     * @param {Globe} [options.globe=new Globe(mapProjection.ellipsoid)] The globe to use in the scene.  If set to <code>false</code>, no globe will be added.\n     * @param {Boolean} [options.useDefaultRenderLoop=true] True if this widget should control the render loop, false otherwise.\n     * @param {Number} [options.targetFrameRate] The target frame rate when using the default render loop.\n     * @param {Boolean} [options.showRenderLoopErrors=true] If true, this widget will automatically display an HTML panel to the user containing the error, if a render loop error occurs.\n     * @param {Object} [options.contextOptions] Context and WebGL creation properties corresponding to <code>options</code> passed to {@link Scene}.\n     * @param {Element|String} [options.creditContainer] The DOM element or ID that will contain the {@link CreditDisplay}.  If not specified, the credits are added\n     *        to the bottom of the widget itself.\n     * @param {Element|String} [options.creditViewport] The DOM element or ID that will contain the credit pop up created by the {@link CreditDisplay}.  If not specified, it will appear over the widget itself.\n     * @param {Number} [options.terrainExaggeration=1.0] A scalar used to exaggerate the terrain. Note that terrain exaggeration will not modify any other primitive as they are positioned relative to the ellipsoid.\n     * @param {Boolean} [options.shadows=false] Determines if shadows are cast by the sun.\n     * @param {ShadowMode} [options.terrainShadows=ShadowMode.RECEIVE_ONLY] Determines if the terrain casts or receives shadows from the sun.\n     * @param {MapMode2D} [options.mapMode2D=MapMode2D.INFINITE_SCROLL] Determines if the 2D map is rotatable or can be scrolled infinitely in the horizontal direction.\n     * @param {Boolean} [options.requestRenderMode=false] If true, rendering a frame will only occur when needed as determined by changes within the scene. Enabling improves performance of the application, but requires using {@link Scene#requestRender} to render a new frame explicitly in this mode. This will be necessary in many cases after making changes to the scene in other parts of the API. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n     * @param {Number} [options.maximumRenderTimeChange=0.0] If requestRenderMode is true, this value defines the maximum change in simulation time allowed before a render is requested. See {@link https://cesium.com/blog/2018/01/24/cesium-scene-rendering-performance/|Improving Performance with Explicit Rendering}.\n     *\n     * @exception {DeveloperError} Element with id \"container\" does not exist in the document.\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Cesium%20Widget.html|Cesium Sandcastle Cesium Widget Demo}\n     *\n     * @example\n     * // For each example, include a link to CesiumWidget.css stylesheet in HTML head,\n     * // and in the body, include: <div id=\"cesiumContainer\"></div>\n     *\n     * //Widget with no terrain and default Bing Maps imagery provider.\n     * var widget = new Cesium.CesiumWidget('cesiumContainer');\n     *\n     * //Widget with OpenStreetMaps imagery provider and Cesium World Terrain.\n     * var widget = new Cesium.CesiumWidget('cesiumContainer', {\n     *     imageryProvider : Cesium.createOpenStreetMapImageryProvider(),\n     *     terrainProvider : Cesium.createWorldTerrain(),\n     *     // Use high-res stars downloaded from https://github.com/AnalyticalGraphicsInc/cesium-assets\n     *     skyBox : new Cesium.SkyBox({\n     *         sources : {\n     *           positiveX : 'stars/TychoSkymapII.t3_08192x04096_80_px.jpg',\n     *           negativeX : 'stars/TychoSkymapII.t3_08192x04096_80_mx.jpg',\n     *           positiveY : 'stars/TychoSkymapII.t3_08192x04096_80_py.jpg',\n     *           negativeY : 'stars/TychoSkymapII.t3_08192x04096_80_my.jpg',\n     *           positiveZ : 'stars/TychoSkymapII.t3_08192x04096_80_pz.jpg',\n     *           negativeZ : 'stars/TychoSkymapII.t3_08192x04096_80_mz.jpg'\n     *         }\n     *     }),\n     *     // Show Columbus View map with Web Mercator projection\n     *     sceneMode : Cesium.SceneMode.COLUMBUS_VIEW,\n     *     mapProjection : new Cesium.WebMercatorProjection()\n     * });\n     */\n    function CesiumWidget(container, options) {\n        \n\n        container = getElement(container);\n\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        //Configure the widget DOM elements\n        var element = document.createElement('div');\n        element.className = 'cesium-widget';\n        container.appendChild(element);\n\n        var canvas = document.createElement('canvas');\n        var supportsImageRenderingPixelated = FeatureDetection.supportsImageRenderingPixelated();\n        this._supportsImageRenderingPixelated = supportsImageRenderingPixelated;\n        if (supportsImageRenderingPixelated) {\n            canvas.style.imageRendering = FeatureDetection.imageRenderingValue();\n        }\n\n        canvas.oncontextmenu = function() {\n            return false;\n        };\n        canvas.onselectstart = function() {\n            return false;\n        };\n        element.appendChild(canvas);\n\n        var innerCreditContainer = document.createElement('div');\n        innerCreditContainer.className = 'cesium-widget-credits';\n\n        var creditContainer = defined(options.creditContainer) ? getElement(options.creditContainer) : element;\n        creditContainer.appendChild(innerCreditContainer);\n\n        var creditViewport = defined(options.creditViewport) ? getElement(options.creditViewport) : element;\n\n        var showRenderLoopErrors = defaultValue(options.showRenderLoopErrors, true);\n\n        this._element = element;\n        this._container = container;\n        this._canvas = canvas;\n        this._canvasWidth = 0;\n        this._canvasHeight = 0;\n        this._lastDevicePixelRatio = 0;\n        this._creditViewport = creditViewport;\n        this._creditContainer = creditContainer;\n        this._innerCreditContainer = innerCreditContainer;\n        this._canRender = false;\n        this._renderLoopRunning = false;\n        this._showRenderLoopErrors = showRenderLoopErrors;\n        this._resolutionScale = 1.0;\n        this._forceResize = false;\n        this._clock = defined(options.clock) ? options.clock : new Clock();\n\n        configureCanvasSize(this);\n\n        try {\n            var scene = new Scene({\n                canvas : canvas,\n                contextOptions : options.contextOptions,\n                creditContainer : innerCreditContainer,\n                creditViewport: creditViewport,\n                mapProjection : options.mapProjection,\n                orderIndependentTranslucency : options.orderIndependentTranslucency,\n                scene3DOnly : defaultValue(options.scene3DOnly, false),\n                terrainExaggeration : options.terrainExaggeration,\n                shadows : options.shadows,\n                mapMode2D : options.mapMode2D,\n                requestRenderMode : options.requestRenderMode,\n                maximumRenderTimeChange : options.maximumRenderTimeChange\n            });\n            this._scene = scene;\n\n            scene.camera.constrainedAxis = Cartesian3.UNIT_Z;\n\n            configureSceneResolution(this);\n            configureCameraFrustum(this);\n\n            var ellipsoid = defaultValue(scene.mapProjection.ellipsoid, Ellipsoid.WGS84);\n\n            var globe = options.globe;\n            if (!defined(globe)) {\n                globe = new Globe(ellipsoid);\n            }\n            if (globe !== false) {\n                scene.globe = globe;\n                scene.globe.shadows = defaultValue(options.terrainShadows, ShadowMode.RECEIVE_ONLY);\n            }\n\n            var skyBox = options.skyBox;\n            if (!defined(skyBox)) {\n                skyBox = new SkyBox({\n                    sources : {\n                        positiveX : getDefaultSkyBoxUrl('px'),\n                        negativeX : getDefaultSkyBoxUrl('mx'),\n                        positiveY : getDefaultSkyBoxUrl('py'),\n                        negativeY : getDefaultSkyBoxUrl('my'),\n                        positiveZ : getDefaultSkyBoxUrl('pz'),\n                        negativeZ : getDefaultSkyBoxUrl('mz')\n                    }\n                });\n            }\n            if (skyBox !== false) {\n                scene.skyBox = skyBox;\n                scene.sun = new Sun();\n                scene.moon = new Moon();\n            }\n\n            // Blue sky, and the glow around the Earth's limb.\n            var skyAtmosphere = options.skyAtmosphere;\n            if (!defined(skyAtmosphere)) {\n                skyAtmosphere = new SkyAtmosphere(ellipsoid);\n            }\n            if (skyAtmosphere !== false) {\n                scene.skyAtmosphere = skyAtmosphere;\n            }\n\n            //Set the base imagery layer\n            var imageryProvider = (options.globe === false) ? false : options.imageryProvider;\n            if (!defined(imageryProvider)) {\n                imageryProvider = createWorldImagery();\n            }\n\n            if (imageryProvider !== false) {\n                scene.imageryLayers.addImageryProvider(imageryProvider);\n            }\n\n            //Set the terrain provider if one is provided.\n            if (defined(options.terrainProvider) && options.globe !== false) {\n                scene.terrainProvider = options.terrainProvider;\n            }\n\n            this._screenSpaceEventHandler = new ScreenSpaceEventHandler(canvas, false);\n\n            if (defined(options.sceneMode)) {\n                if (options.sceneMode === SceneMode.SCENE2D) {\n                    this._scene.morphTo2D(0);\n                }\n                if (options.sceneMode === SceneMode.COLUMBUS_VIEW) {\n                    this._scene.morphToColumbusView(0);\n                }\n            }\n\n            this._useDefaultRenderLoop = undefined;\n            this.useDefaultRenderLoop = defaultValue(options.useDefaultRenderLoop, true);\n\n            this._targetFrameRate = undefined;\n            this.targetFrameRate = options.targetFrameRate;\n\n            var that = this;\n            scene.renderError.addEventListener(function(scene, error) {\n                that._useDefaultRenderLoop = false;\n                that._renderLoopRunning = false;\n                if (that._showRenderLoopErrors) {\n                    var title = 'An error occurred while rendering.  Rendering has stopped.';\n                    that.showErrorPanel(title, undefined, error);\n                }\n            });\n        } catch (error) {\n            if (showRenderLoopErrors) {\n                var title = 'Error constructing CesiumWidget.';\n                var message = 'Visit <a href=\"http://get.webgl.org\">http://get.webgl.org</a> to verify that your web browser and hardware support WebGL.  Consider trying a different web browser or updating your video drivers.  Detailed error information is below:';\n                this.showErrorPanel(title, message, error);\n            }\n            throw error;\n        }\n    }\n\n    defineProperties(CesiumWidget.prototype, {\n        /**\n         * Gets the parent container.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Element}\n         */\n        container : {\n            get : function() {\n                return this._container;\n            }\n        },\n\n        /**\n         * Gets the canvas.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Canvas}\n         */\n        canvas : {\n            get : function() {\n                return this._canvas;\n            }\n        },\n\n        /**\n         * Gets the credit container.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Element}\n         */\n        creditContainer: {\n            get : function() {\n                return this._creditContainer;\n            }\n        },\n\n        /**\n         * Gets the credit viewport\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Element}\n         */\n        creditViewport: {\n            get: function() {\n                return this._creditViewport;\n            }\n        },\n\n        /**\n         * Gets the scene.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Scene}\n         */\n        scene : {\n            get : function() {\n                return this._scene;\n            }\n        },\n\n        /**\n         * Gets the collection of image layers that will be rendered on the globe.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {ImageryLayerCollection}\n         * @readonly\n         */\n        imageryLayers : {\n            get : function() {\n                return this._scene.imageryLayers;\n            }\n        },\n\n        /**\n         * The terrain provider providing surface geometry for the globe.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {TerrainProvider}\n         */\n        terrainProvider : {\n            get : function() {\n                return this._scene.terrainProvider;\n            },\n            set : function(terrainProvider) {\n                this._scene.terrainProvider = terrainProvider;\n            }\n        },\n\n        /**\n         * Gets the camera.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Camera}\n         * @readonly\n         */\n        camera : {\n            get : function() {\n                return this._scene.camera;\n            }\n        },\n\n        /**\n         * Gets the clock.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Clock}\n         */\n        clock : {\n            get : function() {\n                return this._clock;\n            }\n        },\n\n        /**\n         * Gets the screen space event handler.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {ScreenSpaceEventHandler}\n         */\n        screenSpaceEventHandler : {\n            get : function() {\n                return this._screenSpaceEventHandler;\n            }\n        },\n\n        /**\n         * Gets or sets the target frame rate of the widget when <code>useDefaultRenderLoop</code>\n         * is true. If undefined, the browser's {@link requestAnimationFrame} implementation\n         * determines the frame rate.  If defined, this value must be greater than 0.  A value higher\n         * than the underlying requestAnimationFrame implementation will have no effect.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Number}\n         */\n        targetFrameRate : {\n            get : function() {\n                return this._targetFrameRate;\n            },\n            set : function(value) {\n                \n                this._targetFrameRate = value;\n            }\n        },\n\n        /**\n         * Gets or sets whether or not this widget should control the render loop.\n         * If set to true the widget will use {@link requestAnimationFrame} to\n         * perform rendering and resizing of the widget, as well as drive the\n         * simulation clock. If set to false, you must manually call the\n         * <code>resize</code>, <code>render</code> methods as part of a custom\n         * render loop.  If an error occurs during rendering, {@link Scene}'s\n         * <code>renderError</code> event will be raised and this property\n         * will be set to false.  It must be set back to true to continue rendering\n         * after the error.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Boolean}\n         */\n        useDefaultRenderLoop : {\n            get : function() {\n                return this._useDefaultRenderLoop;\n            },\n            set : function(value) {\n                if (this._useDefaultRenderLoop !== value) {\n                    this._useDefaultRenderLoop = value;\n                    if (value && !this._renderLoopRunning) {\n                        startRenderLoop(this);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Gets or sets a scaling factor for rendering resolution.  Values less than 1.0 can improve\n         * performance on less powerful devices while values greater than 1.0 will render at a higher\n         * resolution and then scale down, resulting in improved visual fidelity.\n         * For example, if the widget is laid out at a size of 640x480, setting this value to 0.5\n         * will cause the scene to be rendered at 320x240 and then scaled up while setting\n         * it to 2.0 will cause the scene to be rendered at 1280x960 and then scaled down.\n         * @memberof CesiumWidget.prototype\n         *\n         * @type {Number}\n         * @default 1.0\n         */\n        resolutionScale : {\n            get : function() {\n                return this._resolutionScale;\n            },\n            set : function(value) {\n                \n                this._resolutionScale = value;\n                this._forceResize = true;\n            }\n        }\n    });\n\n    /**\n     * Show an error panel to the user containing a title and a longer error message,\n     * which can be dismissed using an OK button.  This panel is displayed automatically\n     * when a render loop error occurs, if showRenderLoopErrors was not false when the\n     * widget was constructed.\n     *\n     * @param {String} title The title to be displayed on the error panel.  This string is interpreted as text.\n     * @param {String} message A helpful, user-facing message to display prior to the detailed error information.  This string is interpreted as HTML.\n     * @param {String} [error] The error to be displayed on the error panel.  This string is formatted using {@link formatError} and then displayed as text.\n     */\n    CesiumWidget.prototype.showErrorPanel = function(title, message, error) {\n        var element = this._element;\n        var overlay = document.createElement('div');\n        overlay.className = 'cesium-widget-errorPanel';\n\n        var content = document.createElement('div');\n        content.className = 'cesium-widget-errorPanel-content';\n        overlay.appendChild(content);\n\n        var errorHeader = document.createElement('div');\n        errorHeader.className = 'cesium-widget-errorPanel-header';\n        errorHeader.appendChild(document.createTextNode(title));\n        content.appendChild(errorHeader);\n\n        var errorPanelScroller = document.createElement('div');\n        errorPanelScroller.className = 'cesium-widget-errorPanel-scroll';\n        content.appendChild(errorPanelScroller);\n        function resizeCallback() {\n            errorPanelScroller.style.maxHeight = Math.max(Math.round(element.clientHeight * 0.9 - 100), 30) + 'px';\n        }\n        resizeCallback();\n        if (defined(window.addEventListener)) {\n            window.addEventListener('resize', resizeCallback, false);\n        }\n\n        if (defined(message)) {\n            var errorMessage = document.createElement('div');\n            errorMessage.className = 'cesium-widget-errorPanel-message';\n            errorMessage.innerHTML = '<p>' + message + '</p>';\n            errorPanelScroller.appendChild(errorMessage);\n        }\n\n        var errorDetails = '(no error details available)';\n        if (defined(error)) {\n            errorDetails = formatError(error);\n        }\n\n        var errorMessageDetails = document.createElement('div');\n        errorMessageDetails.className = 'cesium-widget-errorPanel-message';\n        errorMessageDetails.appendChild(document.createTextNode(errorDetails));\n        errorPanelScroller.appendChild(errorMessageDetails);\n\n        var buttonPanel = document.createElement('div');\n        buttonPanel.className = 'cesium-widget-errorPanel-buttonPanel';\n        content.appendChild(buttonPanel);\n\n        var okButton = document.createElement('button');\n        okButton.setAttribute('type', 'button');\n        okButton.className = 'cesium-button';\n        okButton.appendChild(document.createTextNode('OK'));\n        okButton.onclick = function() {\n            if (defined(resizeCallback) && defined(window.removeEventListener)) {\n                window.removeEventListener('resize', resizeCallback, false);\n            }\n            element.removeChild(overlay);\n        };\n\n        buttonPanel.appendChild(okButton);\n\n        element.appendChild(overlay);\n\n        //IE8 does not have a console object unless the dev tools are open.\n        if (typeof console !== 'undefined') {\n            console.error(title + '\\n' + message + '\\n' + errorDetails);\n        }\n    };\n\n    /**\n     * @returns {Boolean} true if the object has been destroyed, false otherwise.\n     */\n    CesiumWidget.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the widget.  Should be called if permanently\n     * removing the widget from layout.\n     */\n    CesiumWidget.prototype.destroy = function() {\n        this._scene = this._scene && this._scene.destroy();\n        this._container.removeChild(this._element);\n        this._creditContainer.removeChild(this._innerCreditContainer);\n        destroyObject(this);\n    };\n\n    /**\n     * Updates the canvas size, camera aspect ratio, and viewport size.\n     * This function is called automatically as needed unless\n     * <code>useDefaultRenderLoop</code> is set to false.\n     */\n    CesiumWidget.prototype.resize = function() {\n        var canvas = this._canvas;\n        var width = canvas.clientWidth;\n        var height = canvas.clientHeight;\n        if (!this._forceResize && this._canvasWidth === width && this._canvasHeight === height && this._lastDevicePixelRatio === window.devicePixelRatio) {\n            return;\n        }\n        this._forceResize = false;\n\n        configureCanvasSize(this);\n        configureCameraFrustum(this);\n\n        this._scene.requestRender();\n    };\n\n    /**\n     * This forces the widget to re-think its layout, including\n     * widget sizes and credit placement.\n     */\n    CesiumWidget.prototype.forceResize = function() {\n        this._lastWidth = 0;\n        this.resize();\n    };\n\n    /**\n     * Renders the scene.  This function is called automatically\n     * unless <code>useDefaultRenderLoop</code> is set to false;\n     */\n    CesiumWidget.prototype.render = function() {\n        if (this._canRender) {\n            this._scene.initializeFrame();\n            var currentTime = this._clock.tick();\n            this._scene.render(currentTime);\n        } else {\n            this._clock.tick();\n        }\n    };\n\n    return CesiumWidget;\n});\n","define([\n        '../Core/BoundingSphere',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/IndexDatatype',\n        '../Core/IntersectionTests',\n        '../Core/OrientedBoundingBox',\n        '../Core/PixelFormat',\n        '../Core/Request',\n        '../Core/RequestState',\n        '../Core/RequestType',\n        '../Core/TileProviderError',\n        '../Renderer/Buffer',\n        '../Renderer/BufferUsage',\n        '../Renderer/PixelDatatype',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap',\n        '../Renderer/VertexArray',\n        './ImageryState',\n        './QuadtreeTileLoadState',\n        './SceneMode',\n        './TerrainState',\n        './TileBoundingRegion',\n        '../ThirdParty/when'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        Cartesian4,\n        defined,\n        defineProperties,\n        IndexDatatype,\n        IntersectionTests,\n        OrientedBoundingBox,\n        PixelFormat,\n        Request,\n        RequestState,\n        RequestType,\n        TileProviderError,\n        Buffer,\n        BufferUsage,\n        PixelDatatype,\n        Sampler,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap,\n        VertexArray,\n        ImageryState,\n        QuadtreeTileLoadState,\n        SceneMode,\n        TerrainState,\n        TileBoundingRegion,\n        when) {\n    'use strict';\n\n    /**\n     * Contains additional information about a {@link QuadtreeTile} of the globe's surface, and\n     * encapsulates state transition logic for loading tiles.\n     *\n     * @constructor\n     * @alias GlobeSurfaceTile\n     * @private\n     */\n    function GlobeSurfaceTile() {\n        /**\n         * The {@link TileImagery} attached to this tile.\n         * @type {TileImagery[]}\n         * @default []\n         */\n        this.imagery = [];\n\n        this.waterMaskTexture = undefined;\n        this.waterMaskTranslationAndScale = new Cartesian4(0.0, 0.0, 1.0, 1.0);\n\n        this.terrainData = undefined;\n        this.vertexArray = undefined;\n        this.orientedBoundingBox = undefined;\n        this.boundingVolumeSourceTile = undefined;\n\n        /**\n         * A bounding region used to estimate distance to the tile. The horizontal bounds are always tight-fitting,\n         * but the `minimumHeight` and `maximumHeight` properties may be derived from the min/max of an ancestor tile\n         * and be quite loose-fitting and thus very poor for estimating distance. The {@link TileBoundingRegion#boundingVolume}\n         * and {@link TileBoundingRegion#boundingSphere} will always be undefined; tiles store these separately.\n         * @type {TileBoundingRegion}\n         */\n        this.tileBoundingRegion = undefined;\n        this.occludeePointInScaledSpace = new Cartesian3();\n\n        this.terrainState = TerrainState.UNLOADED;\n        this.mesh = undefined;\n        this.fill = undefined;\n\n        this.pickBoundingSphere = new BoundingSphere();\n\n        this.surfaceShader = undefined;\n        this.isClipped = true;\n\n        this.clippedByBoundaries = false;\n    }\n\n    defineProperties(GlobeSurfaceTile.prototype, {\n        /**\n         * Gets a value indicating whether or not this tile is eligible to be unloaded.\n         * Typically, a tile is ineligible to be unloaded while an asynchronous operation,\n         * such as a request for data, is in progress on it.  A tile will never be\n         * unloaded while it is needed for rendering, regardless of the value of this\n         * property.\n         * @memberof GlobeSurfaceTile.prototype\n         * @type {Boolean}\n         */\n        eligibleForUnloading : {\n            get : function() {\n                // Do not remove tiles that are transitioning or that have\n                // imagery that is transitioning.\n                var terrainState = this.terrainState;\n                var loadingIsTransitioning = terrainState === TerrainState.RECEIVING || terrainState === TerrainState.TRANSFORMING;\n\n                var shouldRemoveTile = !loadingIsTransitioning;\n\n                var imagery = this.imagery;\n                for (var i = 0, len = imagery.length; shouldRemoveTile && i < len; ++i) {\n                    var tileImagery = imagery[i];\n                    shouldRemoveTile = !defined(tileImagery.loadingImagery) || tileImagery.loadingImagery.state !== ImageryState.TRANSITIONING;\n                }\n\n                return shouldRemoveTile;\n            }\n        },\n\n        /**\n         * Gets the {@link TerrainMesh} that is used for rendering this tile, if any.\n         * Returns the value of the {@link GlobeSurfaceTile#mesh} property if\n         * {@link GlobeSurfaceTile#vertexArray} is defined. Otherwise, It returns the\n         * {@link TerrainFillMesh#mesh} property of the {@link GlobeSurfaceTile#fill}.\n         * If there is no fill, it returns undefined.\n         *\n         * @memberof GlobeSurfaceTile.prototype\n         * @type {TerrainMesh}\n         */\n        renderedMesh : {\n            get : function() {\n                if (defined(this.vertexArray)) {\n                    return this.mesh;\n                } else if (defined(this.fill)) {\n                    return this.fill.mesh;\n                }\n                return undefined;\n            }\n        }\n    });\n\n    function getPosition(encoding, mode, projection, vertices, index, result) {\n        encoding.decodePosition(vertices, index, result);\n\n        if (defined(mode) && mode !== SceneMode.SCENE3D) {\n            var ellipsoid = projection.ellipsoid;\n            var positionCart = ellipsoid.cartesianToCartographic(result);\n            projection.project(positionCart, result);\n            Cartesian3.fromElements(result.z, result.x, result.y, result);\n        }\n\n        return result;\n    }\n\n    var scratchV0 = new Cartesian3();\n    var scratchV1 = new Cartesian3();\n    var scratchV2 = new Cartesian3();\n    var scratchResult = new Cartesian3();\n\n    GlobeSurfaceTile.prototype.pick = function(ray, mode, projection, cullBackFaces, result) {\n        var mesh = this.renderedMesh;\n        if (!defined(mesh)) {\n            return undefined;\n        }\n\n        var vertices = mesh.vertices;\n        var indices = mesh.indices;\n        var encoding = mesh.encoding;\n\n        var length = indices.length;\n        for (var i = 0; i < length; i += 3) {\n            var i0 = indices[i];\n            var i1 = indices[i + 1];\n            var i2 = indices[i + 2];\n\n            var v0 = getPosition(encoding, mode, projection, vertices, i0, scratchV0);\n            var v1 = getPosition(encoding, mode, projection, vertices, i1, scratchV1);\n            var v2 = getPosition(encoding, mode, projection, vertices, i2, scratchV2);\n\n            var intersection = IntersectionTests.rayTriangle(ray, v0, v1, v2, cullBackFaces, scratchResult);\n            if (defined(intersection)) {\n                return Cartesian3.clone(intersection, result);\n            }\n        }\n\n        return undefined;\n    };\n\n    GlobeSurfaceTile.prototype.pickTriangle = function(ray, mode, projection, cullBackFaces) {\n        var mesh = this.renderedMesh;\n        if (!defined(mesh)) {\n            return undefined;\n        }\n\n        var vertices = mesh.vertices;\n        var indices = mesh.indices;\n        var encoding = mesh.encoding;\n\n        var length = indices.length;\n        for (var i = 0; i < length; i += 3) {\n            var i0 = indices[i];\n            var i1 = indices[i + 1];\n            var i2 = indices[i + 2];\n\n            var v0 = getPosition(encoding, mode, projection, vertices, i0, scratchV0);\n            var v1 = getPosition(encoding, mode, projection, vertices, i1, scratchV1);\n            var v2 = getPosition(encoding, mode, projection, vertices, i2, scratchV2);\n\n            var intersection = IntersectionTests.rayTriangle(ray, v0, v1, v2, cullBackFaces, scratchResult);\n            if (defined(intersection)) {\n                return {\n                    intersection : intersection,\n                    v0 : v0,\n                    v1 : v1,\n                    v2 : v2\n                };\n            }\n        }\n\n        return undefined;\n    };\n\n    GlobeSurfaceTile.prototype.freeResources = function() {\n        if (defined(this.waterMaskTexture)) {\n            --this.waterMaskTexture.referenceCount;\n            if (this.waterMaskTexture.referenceCount === 0) {\n                this.waterMaskTexture.destroy();\n            }\n            this.waterMaskTexture = undefined;\n        }\n\n        this.terrainData = undefined;\n\n        this.terrainState = TerrainState.UNLOADED;\n        this.mesh = undefined;\n        this.fill = this.fill && this.fill.destroy();\n\n        var imageryList = this.imagery;\n        for (var i = 0, len = imageryList.length; i < len; ++i) {\n            imageryList[i].freeResources();\n        }\n        this.imagery.length = 0;\n\n        this.freeVertexArray();\n    };\n\n    GlobeSurfaceTile.prototype.freeVertexArray = function() {\n        GlobeSurfaceTile._freeVertexArray(this.vertexArray);\n        this.vertexArray = undefined;\n        GlobeSurfaceTile._freeVertexArray(this.wireframeVertexArray);\n        this.wireframeVertexArray = undefined;\n    };\n\n    GlobeSurfaceTile.initialize = function(tile, terrainProvider, imageryLayerCollection) {\n        var surfaceTile = tile.data;\n        if (!defined(surfaceTile)) {\n            surfaceTile = tile.data = new GlobeSurfaceTile();\n        }\n\n        if (tile.state === QuadtreeTileLoadState.START) {\n            prepareNewTile(tile, terrainProvider, imageryLayerCollection);\n            tile.state = QuadtreeTileLoadState.LOADING;\n        }\n    };\n\n    GlobeSurfaceTile.processStateMachine = function(tile, frameState, terrainProvider, imageryLayerCollection, vertexArraysToDestroy, terrainOnly) {\n        GlobeSurfaceTile.initialize(tile, terrainProvider, imageryLayerCollection);\n\n        var surfaceTile = tile.data;\n\n        if (tile.state === QuadtreeTileLoadState.LOADING) {\n            processTerrainStateMachine(tile, frameState, terrainProvider, imageryLayerCollection, vertexArraysToDestroy);\n        }\n\n        // From here down we're loading imagery, not terrain. We don't want to load imagery until\n        // we're certain that the terrain tiles are actually visible, though. We'll load terrainOnly\n        // in these scenarios:\n        //   * our bounding volume isn't accurate so we're not certain this tile is really visible (see GlobeSurfaceTileProvider#loadTile).\n        //   * we want to upsample from this tile but don't plan to render it (see processTerrainStateMachine).\n        if (terrainOnly) {\n            return;\n        }\n\n        var wasAlreadyRenderable = tile.renderable;\n\n        // The terrain is renderable as soon as we have a valid vertex array.\n        tile.renderable = defined(surfaceTile.vertexArray);\n\n        // But it's not done loading until it's in the READY state.\n        var isTerrainDoneLoading = surfaceTile.terrainState === TerrainState.READY;\n\n        // If this tile's terrain and imagery are just upsampled from its parent, mark the tile as\n        // upsampled only.  We won't refine a tile if its four children are upsampled only.\n        tile.upsampledFromParent = defined(surfaceTile.terrainData) && surfaceTile.terrainData.wasCreatedByUpsampling();\n\n        var isImageryDoneLoading = surfaceTile.processImagery(tile, terrainProvider, frameState);\n\n        if (isTerrainDoneLoading && isImageryDoneLoading) {\n            var callbacks = tile._loadedCallbacks;\n            var newCallbacks = {};\n            for(var layerId in callbacks) {\n                if (callbacks.hasOwnProperty(layerId)) {\n                    if(!callbacks[layerId](tile)) {\n                        newCallbacks[layerId] = callbacks[layerId];\n                    }\n                }\n            }\n            tile._loadedCallbacks = newCallbacks;\n\n            tile.state = QuadtreeTileLoadState.DONE;\n        }\n\n        // Once a tile is renderable, it stays renderable, because doing otherwise would\n        // cause detail (or maybe even the entire globe) to vanish when adding a new\n        // imagery layer. `GlobeSurfaceTileProvider._onLayerAdded` sets renderable to\n        // false for all affected tiles that are not currently being rendered.\n        if (wasAlreadyRenderable) {\n            tile.renderable = true;\n        }\n    };\n\n    GlobeSurfaceTile.prototype.processImagery = function(tile, terrainProvider, frameState, skipLoading) {\n        var surfaceTile = tile.data;\n        var isUpsampledOnly = tile.upsampledFromParent;\n        var isRenderable = tile.renderable;\n        var isDoneLoading = true;\n\n        // Transition imagery states\n        var tileImageryCollection = surfaceTile.imagery;\n        var i, len;\n        for (i = 0, len = tileImageryCollection.length; i < len; ++i) {\n            var tileImagery = tileImageryCollection[i];\n            if (!defined(tileImagery.loadingImagery)) {\n                isUpsampledOnly = false;\n                continue;\n            }\n\n            if (tileImagery.loadingImagery.state === ImageryState.PLACEHOLDER) {\n                var imageryLayer = tileImagery.loadingImagery.imageryLayer;\n                if (imageryLayer.imageryProvider.ready) {\n                    // Remove the placeholder and add the actual skeletons (if any)\n                    // at the same position.  Then continue the loop at the same index.\n                    tileImagery.freeResources();\n                    tileImageryCollection.splice(i, 1);\n                    imageryLayer._createTileImagerySkeletons(tile, terrainProvider, i);\n                    --i;\n                    len = tileImageryCollection.length;\n                    continue;\n                } else {\n                    isUpsampledOnly = false;\n                }\n            }\n\n            var thisTileDoneLoading = tileImagery.processStateMachine(tile, frameState, skipLoading);\n            isDoneLoading = isDoneLoading && thisTileDoneLoading;\n\n            // The imagery is renderable as soon as we have any renderable imagery for this region.\n            isRenderable = isRenderable && (thisTileDoneLoading || defined(tileImagery.readyImagery));\n\n            isUpsampledOnly = isUpsampledOnly && defined(tileImagery.loadingImagery) &&\n                              (tileImagery.loadingImagery.state === ImageryState.FAILED || tileImagery.loadingImagery.state === ImageryState.INVALID);\n        }\n\n        tile.upsampledFromParent = isUpsampledOnly;\n        tile.renderable = isRenderable;\n\n        return isDoneLoading;\n    };\n\n    function prepareNewTile(tile, terrainProvider, imageryLayerCollection) {\n        var available = terrainProvider.getTileDataAvailable(tile.x, tile.y, tile.level);\n\n        if (!defined(available) && defined(tile.parent)) {\n            // Provider doesn't know if this tile is available. Does the parent tile know?\n            var parent = tile.parent;\n            var parentSurfaceTile = parent.data;\n            if (defined(parentSurfaceTile) && defined(parentSurfaceTile.terrainData)) {\n                available = parentSurfaceTile.terrainData.isChildAvailable(parent.x, parent.y, tile.x, tile.y);\n            }\n        }\n\n        if (available === false) {\n            // This tile is not available, so mark it failed so we start upsampling right away.\n            tile.data.terrainState = TerrainState.FAILED;\n        }\n\n        // Map imagery tiles to this terrain tile\n        for (var i = 0, len = imageryLayerCollection.length; i < len; ++i) {\n            var layer = imageryLayerCollection.get(i);\n            if (layer.show) {\n                layer._createTileImagerySkeletons(tile, terrainProvider);\n            }\n        }\n    }\n\n    function processTerrainStateMachine(tile, frameState, terrainProvider, imageryLayerCollection, vertexArraysToDestroy) {\n        var surfaceTile = tile.data;\n\n        // If this tile is FAILED, we'll need to upsample from the parent. If the parent isn't\n        // ready for that, let's push it along.\n        var parent = tile.parent;\n        if (surfaceTile.terrainState === TerrainState.FAILED && parent !== undefined) {\n            var parentReady = parent.data !== undefined && parent.data.terrainData !== undefined && parent.data.terrainData.canUpsample !== false;\n            if (!parentReady) {\n                GlobeSurfaceTile.processStateMachine(parent, frameState, terrainProvider, imageryLayerCollection, true);\n            }\n        }\n\n        if (surfaceTile.terrainState === TerrainState.FAILED) {\n            upsample(surfaceTile, tile, frameState, terrainProvider, tile.x, tile.y, tile.level);\n        }\n\n        if (surfaceTile.terrainState === TerrainState.UNLOADED) {\n            requestTileGeometry(surfaceTile, terrainProvider, tile.x, tile.y, tile.level);\n        }\n\n        if (surfaceTile.terrainState === TerrainState.RECEIVED) {\n            transform(surfaceTile, frameState, terrainProvider, tile.x, tile.y, tile.level);\n        }\n\n        if (surfaceTile.terrainState === TerrainState.TRANSFORMED) {\n            createResources(surfaceTile, frameState.context, terrainProvider, tile.x, tile.y, tile.level, vertexArraysToDestroy);\n        }\n\n        if (surfaceTile.terrainState >= TerrainState.RECEIVED && surfaceTile.waterMaskTexture === undefined && terrainProvider.hasWaterMask) {\n            var terrainData = surfaceTile.terrainData;\n            if (terrainData.waterMask !== undefined) {\n                createWaterMaskTextureIfNeeded(frameState.context, surfaceTile);\n            } else {\n                var sourceTile = surfaceTile._findAncestorTileWithTerrainData(tile);\n                if (defined(sourceTile) && defined(sourceTile.data.waterMaskTexture)) {\n                    surfaceTile.waterMaskTexture = sourceTile.data.waterMaskTexture;\n                    ++surfaceTile.waterMaskTexture.referenceCount;\n                    surfaceTile._computeWaterMaskTranslationAndScale(tile, sourceTile, surfaceTile.waterMaskTranslationAndScale);\n                }\n            }\n        }\n    }\n\n    function upsample(surfaceTile, tile, frameState, terrainProvider, x, y, level) {\n        var parent = tile.parent;\n        if (!parent) {\n            // Trying to upsample from a root tile. No can do. This tile is a failure.\n            tile.state = QuadtreeTileLoadState.FAILED;\n            return;\n        }\n\n        var sourceData = parent.data.terrainData;\n        var sourceX = parent.x;\n        var sourceY = parent.y;\n        var sourceLevel = parent.level;\n\n        if (!defined(sourceData)) {\n            // Parent is not available, so we can't upsample this tile yet.\n            return;\n        }\n\n        var terrainDataPromise = sourceData.upsample(terrainProvider.tilingScheme, sourceX, sourceY, sourceLevel, x, y, level);\n        if (!defined(terrainDataPromise)) {\n            // The upsample request has been deferred - try again later.\n            return;\n        }\n\n        surfaceTile.terrainState = TerrainState.RECEIVING;\n\n        when(terrainDataPromise, function(terrainData) {\n            surfaceTile.terrainData = terrainData;\n            surfaceTile.terrainState = TerrainState.RECEIVED;\n        }, function() {\n            surfaceTile.terrainState = TerrainState.FAILED;\n        });\n    }\n\n    function requestTileGeometry(surfaceTile, terrainProvider, x, y, level) {\n        function success(terrainData) {\n            surfaceTile.terrainData = terrainData;\n            surfaceTile.terrainState = TerrainState.RECEIVED;\n            surfaceTile.request = undefined;\n        }\n\n        function failure() {\n            if (surfaceTile.request.state === RequestState.CANCELLED) {\n                // Cancelled due to low priority - try again later.\n                surfaceTile.terrainData = undefined;\n                surfaceTile.terrainState = TerrainState.UNLOADED;\n                surfaceTile.request = undefined;\n                return;\n            }\n\n            // Initially assume failure.  handleError may retry, in which case the state will\n            // change to RECEIVING or UNLOADED.\n            surfaceTile.terrainState = TerrainState.FAILED;\n            surfaceTile.request = undefined;\n\n            var message = 'Failed to obtain terrain tile X: ' + x + ' Y: ' + y + ' Level: ' + level + '.';\n            terrainProvider._requestError = TileProviderError.handleError(\n                terrainProvider._requestError,\n                terrainProvider,\n                terrainProvider.errorEvent,\n                message,\n                x, y, level,\n                doRequest);\n        }\n\n        function doRequest() {\n            // Request the terrain from the terrain provider.\n            var request = new Request({\n                throttle : false,\n                throttleByServer : true,\n                type : RequestType.TERRAIN\n            });\n            surfaceTile.request = request;\n            var requestPromise = terrainProvider.requestTileGeometry(x, y, level, request);\n\n            // If the request method returns undefined (instead of a promise), the request\n            // has been deferred.\n            if (defined(requestPromise)) {\n                surfaceTile.terrainState = TerrainState.RECEIVING;\n                when(requestPromise, success, failure);\n            } else {\n                // Deferred - try again later.\n                surfaceTile.terrainState = TerrainState.UNLOADED;\n                surfaceTile.request = undefined;\n            }\n        }\n\n        doRequest();\n    }\n\n    function transform(surfaceTile, frameState, terrainProvider, x, y, level) {\n        var tilingScheme = terrainProvider.tilingScheme;\n\n        var terrainData = surfaceTile.terrainData;\n        var meshPromise = terrainData.createMesh(tilingScheme, x, y, level, frameState.terrainExaggeration);\n\n        if (!defined(meshPromise)) {\n            // Postponed.\n            return;\n        }\n\n        surfaceTile.terrainState = TerrainState.TRANSFORMING;\n\n        when(meshPromise, function(mesh) {\n            surfaceTile.mesh = mesh;\n            surfaceTile.orientedBoundingBox = OrientedBoundingBox.clone(mesh.orientedBoundingBox, surfaceTile.orientedBoundingBox);\n            surfaceTile.occludeePointInScaledSpace = Cartesian3.clone(mesh.occludeePointInScaledSpace, surfaceTile.occludeePointInScaledSpace);\n            surfaceTile.terrainState = TerrainState.TRANSFORMED;\n        }, function() {\n            surfaceTile.terrainState = TerrainState.FAILED;\n        });\n    }\n\n    GlobeSurfaceTile._createVertexArrayForMesh = function(context, mesh) {\n        var typedArray = mesh.vertices;\n        var buffer = Buffer.createVertexBuffer({\n            context : context,\n            typedArray : typedArray,\n            usage : BufferUsage.STATIC_DRAW\n        });\n        var attributes = mesh.encoding.getAttributes(buffer);\n\n        var indexBuffers = mesh.indices.indexBuffers || {};\n        var indexBuffer = indexBuffers[context.id];\n        if (!defined(indexBuffer) || indexBuffer.isDestroyed()) {\n            var indices = mesh.indices;\n            indexBuffer = Buffer.createIndexBuffer({\n                context : context,\n                typedArray : indices,\n                usage : BufferUsage.STATIC_DRAW,\n                indexDatatype : IndexDatatype.fromSizeInBytes(indices.BYTES_PER_ELEMENT)\n            });\n            indexBuffer.vertexArrayDestroyable = false;\n            indexBuffer.referenceCount = 1;\n            indexBuffers[context.id] = indexBuffer;\n            mesh.indices.indexBuffers = indexBuffers;\n        } else {\n            ++indexBuffer.referenceCount;\n        }\n\n        return new VertexArray({\n            context : context,\n            attributes : attributes,\n            indexBuffer : indexBuffer\n        });\n    };\n\n    GlobeSurfaceTile._freeVertexArray = function(vertexArray) {\n        if (defined(vertexArray)) {\n            var indexBuffer = vertexArray.indexBuffer;\n\n            vertexArray.destroy();\n\n            if (defined(indexBuffer) && !indexBuffer.isDestroyed() && defined(indexBuffer.referenceCount)) {\n                --indexBuffer.referenceCount;\n                if (indexBuffer.referenceCount === 0) {\n                    indexBuffer.destroy();\n                }\n            }\n        }\n\n    };\n\n    function createResources(surfaceTile, context, terrainProvider, x, y, level, vertexArraysToDestroy) {\n        surfaceTile.vertexArray = GlobeSurfaceTile._createVertexArrayForMesh(context, surfaceTile.mesh);\n        surfaceTile.terrainState = TerrainState.READY;\n        surfaceTile.fill = surfaceTile.fill && surfaceTile.fill.destroy(vertexArraysToDestroy);\n    }\n\n    function getContextWaterMaskData(context) {\n        var data = context.cache.tile_waterMaskData;\n\n        if (!defined(data)) {\n            var allWaterTexture = Texture.create({\n                context : context,\n                pixelFormat : PixelFormat.LUMINANCE,\n                pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n                source : {\n                    arrayBufferView : new Uint8Array([255]),\n                    width : 1,\n                    height : 1\n                }\n            });\n            allWaterTexture.referenceCount = 1;\n\n            var sampler = new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.LINEAR,\n                magnificationFilter : TextureMagnificationFilter.LINEAR\n            });\n\n            data = {\n                allWaterTexture : allWaterTexture,\n                sampler : sampler,\n                destroy : function() {\n                    this.allWaterTexture.destroy();\n                }\n            };\n\n            context.cache.tile_waterMaskData = data;\n        }\n\n        return data;\n    }\n\n    function createWaterMaskTextureIfNeeded(context, surfaceTile) {\n        var waterMask = surfaceTile.terrainData.waterMask;\n        var waterMaskData = getContextWaterMaskData(context);\n        var texture;\n\n        var waterMaskLength = waterMask.length;\n        if (waterMaskLength === 1) {\n            // Length 1 means the tile is entirely land or entirely water.\n            // A value of 0 indicates entirely land, a value of 1 indicates entirely water.\n            if (waterMask[0] !== 0) {\n                texture = waterMaskData.allWaterTexture;\n            } else {\n                // Leave the texture undefined if the tile is entirely land.\n                return;\n            }\n        } else {\n            var textureSize = Math.sqrt(waterMaskLength);\n            texture = Texture.create({\n                context : context,\n                pixelFormat : PixelFormat.LUMINANCE,\n                pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n                source : {\n                    width : textureSize,\n                    height : textureSize,\n                    arrayBufferView : waterMask\n                },\n                sampler : waterMaskData.sampler,\n                flipY : false\n            });\n\n            texture.referenceCount = 0;\n        }\n\n        ++texture.referenceCount;\n        surfaceTile.waterMaskTexture = texture;\n\n        Cartesian4.fromElements(0.0, 0.0, 1.0, 1.0, surfaceTile.waterMaskTranslationAndScale);\n    }\n\n    GlobeSurfaceTile.prototype._findAncestorTileWithTerrainData = function(tile) {\n        var sourceTile = tile.parent;\n\n        while (defined(sourceTile) && (!defined(sourceTile.data) || !defined(sourceTile.data.terrainData) || sourceTile.data.terrainData.wasCreatedByUpsampling())) {\n            sourceTile = sourceTile.parent;\n        }\n\n        return sourceTile;\n    };\n\n    GlobeSurfaceTile.prototype._computeWaterMaskTranslationAndScale = function(tile, sourceTile, result) {\n        var sourceTileRectangle = sourceTile.rectangle;\n        var tileRectangle = tile.rectangle;\n        var tileWidth = tileRectangle.width;\n        var tileHeight = tileRectangle.height;\n\n        var scaleX = tileWidth / sourceTileRectangle.width;\n        var scaleY = tileHeight / sourceTileRectangle.height;\n        result.x = scaleX * (tileRectangle.west - sourceTileRectangle.west) / tileWidth;\n        result.y = scaleY * (tileRectangle.south - sourceTileRectangle.south) / tileHeight;\n        result.z = scaleX;\n        result.w = scaleY;\n\n        return result;\n    };\n\n    return GlobeSurfaceTile;\n});\n","define([\n        '../Core/freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    var TerrainState = {\n        FAILED : 0,\n        UNLOADED : 1,\n        RECEIVING : 2,\n        RECEIVED : 3,\n        TRANSFORMING : 4,\n        TRANSFORMED : 5,\n        READY : 6\n    };\n\n    return freezeObject(TerrainState);\n});\n","define([\n        './Cartesian3',\n        './defined',\n        './DeveloperError',\n        './JulianDate',\n        './Math',\n        './Matrix3',\n        './TimeConstants',\n        './TimeStandard'\n    ], function(\n        Cartesian3,\n        defined,\n        DeveloperError,\n        JulianDate,\n        CesiumMath,\n        Matrix3,\n        TimeConstants,\n        TimeStandard) {\n    'use strict';\n\n    /**\n     * Contains functions for finding the Cartesian coordinates of the sun and the moon in the\n     * Earth-centered inertial frame.\n     *\n     * @exports Simon1994PlanetaryPositions\n     */\n    var Simon1994PlanetaryPositions = {};\n\n    function computeTdbMinusTtSpice(daysSinceJ2000InTerrestrialTime) {\n        /* STK Comments ------------------------------------------------------\n         * This function uses constants designed to be consistent with\n         * the SPICE Toolkit from JPL version N0051 (unitim.c)\n         * M0 = 6.239996\n         * M0Dot = 1.99096871e-7 rad/s = 0.01720197 rad/d\n         * EARTH_ECC = 1.671e-2\n         * TDB_AMPL = 1.657e-3 secs\n         *--------------------------------------------------------------------*/\n\n        //* Values taken as specified in STK Comments except: 0.01720197 rad/day = 1.99096871e-7 rad/sec\n        //* Here we use the more precise value taken from the SPICE value 1.99096871e-7 rad/sec converted to rad/day\n        //* All other constants are consistent with the SPICE implementation of the TDB conversion\n        //* except where we treat the independent time parameter to be in TT instead of TDB.\n        //* This is an approximation made to facilitate performance due to the higher prevalance of\n        //* the TT2TDB conversion over TDB2TT in order to avoid having to iterate when converting to TDB for the JPL ephemeris.\n        //* Days are used instead of seconds to provide a slight improvement in numerical precision.\n\n        //* For more information see:\n        //* http://www.cv.nrao.edu/~rfisher/Ephemerides/times.html#TDB\n        //* ftp://ssd.jpl.nasa.gov/pub/eph/planets/ioms/ExplSupplChap8.pdf\n\n        var g = 6.239996 + (0.0172019696544) * daysSinceJ2000InTerrestrialTime;\n        return 1.657e-3 * Math.sin(g + 1.671e-2 * Math.sin(g));\n    }\n\n    var TdtMinusTai = 32.184;\n    var J2000d = 2451545;\n    function taiToTdb(date, result) {\n        //Converts TAI to TT\n        result = JulianDate.addSeconds(date, TdtMinusTai, result);\n\n        //Converts TT to TDB\n        var days = JulianDate.totalDays(result) - J2000d;\n        result = JulianDate.addSeconds(result, computeTdbMinusTtSpice(days), result);\n\n        return result;\n    }\n\n    var epoch = new JulianDate(2451545, 0, TimeStandard.TAI); //Actually TDB (not TAI)\n    var MetersPerKilometer = 1000.0;\n    var RadiansPerDegree = CesiumMath.RADIANS_PER_DEGREE;\n    var RadiansPerArcSecond = CesiumMath.RADIANS_PER_ARCSECOND;\n    var MetersPerAstronomicalUnit = 1.49597870e+11; // IAU 1976 value\n\n    var perifocalToEquatorial = new Matrix3();\n    function elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee, longitudeOfNode, meanLongitude, result) {\n        if (inclination < 0.0) {\n            inclination = -inclination;\n            longitudeOfNode += CesiumMath.PI;\n        }\n\n        \n\n        var radiusOfPeriapsis = semimajorAxis * (1.0 - eccentricity);\n        var argumentOfPeriapsis = longitudeOfPerigee - longitudeOfNode;\n        var rightAscensionOfAscendingNode = longitudeOfNode;\n        var trueAnomaly = meanAnomalyToTrueAnomaly(meanLongitude - longitudeOfPerigee, eccentricity);\n        var type = chooseOrbit(eccentricity, 0.0);\n\n        \n\n        perifocalToCartesianMatrix(argumentOfPeriapsis, inclination, rightAscensionOfAscendingNode, perifocalToEquatorial);\n        var semilatus = radiusOfPeriapsis * (1.0 + eccentricity);\n        var costheta = Math.cos(trueAnomaly);\n        var sintheta = Math.sin(trueAnomaly);\n\n        var denom = (1.0 + eccentricity * costheta);\n\n        \n\n        var radius = semilatus / denom;\n        if (!defined(result)) {\n            result = new Cartesian3(radius * costheta, radius * sintheta, 0.0);\n        } else {\n            result.x = radius * costheta;\n            result.y = radius * sintheta;\n            result.z = 0.0;\n        }\n\n        return Matrix3.multiplyByVector(perifocalToEquatorial, result, result);\n    }\n\n    function chooseOrbit(eccentricity, tolerance) {\n        \n\n        if (eccentricity <= tolerance) {\n            return 'Circular';\n        } else if (eccentricity < 1.0 - tolerance) {\n            return 'Elliptical';\n        } else if (eccentricity <= 1.0 + tolerance) {\n            return 'Parabolic';\n        }\n        return 'Hyperbolic';\n    }\n\n    // Calculates the true anomaly given the mean anomaly and the eccentricity.\n    function meanAnomalyToTrueAnomaly(meanAnomaly, eccentricity) {\n        \n\n        var eccentricAnomaly = meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity);\n        return eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity);\n    }\n\n    var maxIterationCount = 50;\n    var keplerEqConvergence = CesiumMath.EPSILON8;\n    // Calculates the eccentric anomaly given the mean anomaly and the eccentricity.\n    function meanAnomalyToEccentricAnomaly(meanAnomaly, eccentricity) {\n        \n\n        var revs = Math.floor(meanAnomaly / CesiumMath.TWO_PI);\n\n        // Find angle in current revolution\n        meanAnomaly -= revs * CesiumMath.TWO_PI;\n\n        // calculate starting value for iteration sequence\n        var iterationValue = meanAnomaly + (eccentricity * Math.sin(meanAnomaly)) /\n            (1.0 - Math.sin(meanAnomaly + eccentricity) + Math.sin(meanAnomaly));\n\n        // Perform Newton-Raphson iteration on Kepler's equation\n        var eccentricAnomaly = Number.MAX_VALUE;\n\n        var count;\n        for (count = 0;\n            count < maxIterationCount && Math.abs(eccentricAnomaly - iterationValue) > keplerEqConvergence;\n            ++count)\n        {\n            eccentricAnomaly = iterationValue;\n            var NRfunction = eccentricAnomaly - eccentricity * Math.sin(eccentricAnomaly) - meanAnomaly;\n            var dNRfunction = 1 - eccentricity * Math.cos(eccentricAnomaly);\n            iterationValue = eccentricAnomaly - NRfunction / dNRfunction;\n        }\n\n        \n\n        eccentricAnomaly = iterationValue + revs * CesiumMath.TWO_PI;\n        return eccentricAnomaly;\n    }\n\n     // Calculates the true anomaly given the eccentric anomaly and the eccentricity.\n    function eccentricAnomalyToTrueAnomaly(eccentricAnomaly, eccentricity) {\n        \n\n        // Calculate the number of previous revolutions\n        var revs = Math.floor(eccentricAnomaly / CesiumMath.TWO_PI);\n\n        // Find angle in current revolution\n        eccentricAnomaly -= revs * CesiumMath.TWO_PI;\n\n        // Calculate true anomaly from eccentric anomaly\n        var trueAnomalyX = Math.cos(eccentricAnomaly) - eccentricity;\n        var trueAnomalyY = Math.sin(eccentricAnomaly) * Math.sqrt(1 - eccentricity * eccentricity);\n\n        var trueAnomaly = Math.atan2(trueAnomalyY, trueAnomalyX);\n\n        // Ensure the correct quadrant\n        trueAnomaly = CesiumMath.zeroToTwoPi(trueAnomaly);\n        if (eccentricAnomaly < 0)\n        {\n            trueAnomaly -= CesiumMath.TWO_PI;\n        }\n\n        // Add on previous revolutions\n        trueAnomaly += revs * CesiumMath.TWO_PI;\n\n        return trueAnomaly;\n    }\n\n     // Calculates the transformation matrix to convert from the perifocal (PQW) coordinate\n     // system to inertial cartesian coordinates.\n    function perifocalToCartesianMatrix(argumentOfPeriapsis, inclination, rightAscension, result) {\n        \n\n        var cosap = Math.cos(argumentOfPeriapsis);\n        var sinap = Math.sin(argumentOfPeriapsis);\n\n        var cosi = Math.cos(inclination);\n        var sini = Math.sin(inclination);\n\n        var cosraan = Math.cos(rightAscension);\n        var sinraan = Math.sin(rightAscension);\n        if (!defined(result)) {\n            result = new Matrix3(\n                    cosraan * cosap - sinraan * sinap * cosi,\n                    -cosraan * sinap - sinraan * cosap * cosi,\n                    sinraan * sini,\n\n                    sinraan * cosap + cosraan * sinap * cosi,\n                    -sinraan * sinap + cosraan * cosap * cosi,\n                    -cosraan * sini,\n\n                    sinap * sini,\n                    cosap * sini,\n                    cosi);\n        } else {\n            result[0] = cosraan * cosap - sinraan * sinap * cosi;\n            result[1] = sinraan * cosap + cosraan * sinap * cosi;\n            result[2] = sinap * sini;\n            result[3] = -cosraan * sinap - sinraan * cosap * cosi;\n            result[4] = -sinraan * sinap + cosraan * cosap * cosi;\n            result[5] = cosap * sini;\n            result[6] = sinraan * sini;\n            result[7] = -cosraan * sini;\n            result[8] = cosi;\n        }\n        return result;\n    }\n\n    // From section 5.8\n    var semiMajorAxis0 = 1.0000010178 * MetersPerAstronomicalUnit;\n    var meanLongitude0 = 100.46645683 * RadiansPerDegree;\n    var meanLongitude1 = 1295977422.83429 * RadiansPerArcSecond;\n\n    // From table 6\n    var p1u = 16002;\n    var p2u = 21863;\n    var p3u = 32004;\n    var p4u = 10931;\n    var p5u = 14529;\n    var p6u = 16368;\n    var p7u = 15318;\n    var p8u = 32794;\n\n    var Ca1 = 64 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca2 = -152 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca3 = 62 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca4 = -8 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca5 = 32 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca6 = -41 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca7 = 19 * 1e-7 * MetersPerAstronomicalUnit;\n    var Ca8 = -11 * 1e-7 * MetersPerAstronomicalUnit;\n\n    var Sa1 = -150 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa2 = -46 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa3 = 68 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa4 = 54 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa5 = 14 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa6 = 24 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa7 = -28 * 1e-7 * MetersPerAstronomicalUnit;\n    var Sa8 = 22 * 1e-7 * MetersPerAstronomicalUnit;\n\n    var q1u = 10;\n    var q2u = 16002;\n    var q3u = 21863;\n    var q4u = 10931;\n    var q5u = 1473;\n    var q6u = 32004;\n    var q7u = 4387;\n    var q8u = 73;\n\n    var Cl1 = -325 * 1e-7;\n    var Cl2 = -322 * 1e-7;\n    var Cl3 = -79 * 1e-7;\n    var Cl4 = 232 * 1e-7;\n    var Cl5 = -52 * 1e-7;\n    var Cl6 = 97 * 1e-7;\n    var Cl7 = 55 * 1e-7;\n    var Cl8 = -41 * 1e-7;\n\n    var Sl1 = -105 * 1e-7;\n    var Sl2 = -137 * 1e-7;\n    var Sl3 = 258 * 1e-7;\n    var Sl4 = 35 * 1e-7;\n    var Sl5 = -116 * 1e-7;\n    var Sl6 = -88 * 1e-7;\n    var Sl7 = -112 * 1e-7;\n    var Sl8 = -80 * 1e-7;\n\n    var scratchDate = new JulianDate(0, 0.0, TimeStandard.TAI);\n     // Gets a point describing the motion of the Earth-Moon barycenter according to the equations described in section 6.\n    function computeSimonEarthMoonBarycenter(date, result) {\n\n        // t is thousands of years from J2000 TDB\n        taiToTdb(date, scratchDate);\n        var x = (scratchDate.dayNumber - epoch.dayNumber) + ((scratchDate.secondsOfDay - epoch.secondsOfDay)/TimeConstants.SECONDS_PER_DAY);\n        var t = x / (TimeConstants.DAYS_PER_JULIAN_CENTURY * 10.0);\n\n        var u = 0.35953620 * t;\n        var semimajorAxis = semiMajorAxis0 +\n                            Ca1 * Math.cos(p1u * u) + Sa1 * Math.sin(p1u * u) +\n                            Ca2 * Math.cos(p2u * u) + Sa2 * Math.sin(p2u * u) +\n                            Ca3 * Math.cos(p3u * u) + Sa3 * Math.sin(p3u * u) +\n                            Ca4 * Math.cos(p4u * u) + Sa4 * Math.sin(p4u * u) +\n                            Ca5 * Math.cos(p5u * u) + Sa5 * Math.sin(p5u * u) +\n                            Ca6 * Math.cos(p6u * u) + Sa6 * Math.sin(p6u * u) +\n                            Ca7 * Math.cos(p7u * u) + Sa7 * Math.sin(p7u * u) +\n                            Ca8 * Math.cos(p8u * u) + Sa8 * Math.sin(p8u * u);\n        var meanLongitude = meanLongitude0 + meanLongitude1 * t +\n                            Cl1 * Math.cos(q1u * u) + Sl1 * Math.sin(q1u * u) +\n                            Cl2 * Math.cos(q2u * u) + Sl2 * Math.sin(q2u * u) +\n                            Cl3 * Math.cos(q3u * u) + Sl3 * Math.sin(q3u * u) +\n                            Cl4 * Math.cos(q4u * u) + Sl4 * Math.sin(q4u * u) +\n                            Cl5 * Math.cos(q5u * u) + Sl5 * Math.sin(q5u * u) +\n                            Cl6 * Math.cos(q6u * u) + Sl6 * Math.sin(q6u * u) +\n                            Cl7 * Math.cos(q7u * u) + Sl7 * Math.sin(q7u * u) +\n                            Cl8 * Math.cos(q8u * u) + Sl8 * Math.sin(q8u * u);\n\n        // All constants in this part are from section 5.8\n        var eccentricity = 0.0167086342 - 0.0004203654 * t;\n        var longitudeOfPerigee = 102.93734808 * RadiansPerDegree + 11612.35290 * RadiansPerArcSecond * t;\n        var inclination = 469.97289 * RadiansPerArcSecond * t;\n        var longitudeOfNode = 174.87317577 * RadiansPerDegree - 8679.27034 * RadiansPerArcSecond * t;\n\n        return elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee,\n                longitudeOfNode, meanLongitude, result);\n    }\n\n     // Gets a point describing the position of the moon according to the equations described in section 4.\n    function computeSimonMoon(date, result) {\n        taiToTdb(date, scratchDate);\n        var x = (scratchDate.dayNumber - epoch.dayNumber) + ((scratchDate.secondsOfDay - epoch.secondsOfDay)/TimeConstants.SECONDS_PER_DAY);\n        var t = x / (TimeConstants.DAYS_PER_JULIAN_CENTURY);\n        var t2 = t * t;\n        var t3 = t2 * t;\n        var t4 = t3 * t;\n\n        // Terms from section 3.4 (b.1)\n        var semimajorAxis = 383397.7725 + 0.0040 * t;\n        var eccentricity = 0.055545526 - 0.000000016 * t;\n        var inclinationConstant = 5.15668983 * RadiansPerDegree;\n        var inclinationSecPart = -0.00008 * t + 0.02966 * t2 -\n                                  0.000042 * t3 - 0.00000013 * t4;\n        var longitudeOfPerigeeConstant = 83.35324312 * RadiansPerDegree;\n        var longitudeOfPerigeeSecPart = 14643420.2669 * t - 38.2702 * t2 -\n                                        0.045047 * t3 + 0.00021301 * t4;\n        var longitudeOfNodeConstant = 125.04455501 * RadiansPerDegree;\n        var longitudeOfNodeSecPart = -6967919.3631 * t + 6.3602 * t2 +\n                                      0.007625 * t3 - 0.00003586 * t4;\n        var meanLongitudeConstant = 218.31664563 * RadiansPerDegree;\n        var meanLongitudeSecPart = 1732559343.48470 * t - 6.3910 * t2 +\n                                   0.006588 * t3 - 0.00003169 * t4;\n\n        // Delaunay arguments from section 3.5 b\n        var D = 297.85019547 * RadiansPerDegree + RadiansPerArcSecond *\n                    (1602961601.2090 * t - 6.3706 * t2 + 0.006593 * t3 - 0.00003169 * t4);\n        var F = 93.27209062 * RadiansPerDegree + RadiansPerArcSecond *\n                    (1739527262.8478 * t - 12.7512 * t2 - 0.001037 * t3 + 0.00000417 * t4);\n        var l = 134.96340251 * RadiansPerDegree + RadiansPerArcSecond *\n                    (1717915923.2178 * t + 31.8792 * t2 + 0.051635 * t3 - 0.00024470 * t4);\n        var lprime = 357.52910918 * RadiansPerDegree + RadiansPerArcSecond *\n                    (129596581.0481 * t - 0.5532 * t2 + 0.000136 * t3 - 0.00001149 * t4);\n        var psi = 310.17137918 * RadiansPerDegree - RadiansPerArcSecond *\n                    (6967051.4360 * t + 6.2068 * t2 + 0.007618 * t3 - 0.00003219 * t4);\n\n        // Add terms from Table 4\n        var twoD = 2.0 * D;\n        var fourD = 4.0 * D;\n        var sixD = 6.0 * D;\n        var twol = 2.0 * l;\n        var threel = 3.0 * l;\n        var fourl = 4.0 * l;\n        var twoF = 2.0 * F;\n        semimajorAxis += 3400.4 * Math.cos(twoD) - 635.6 * Math.cos(twoD - l) -\n                         235.6 * Math.cos(l) + 218.1 * Math.cos(twoD - lprime) +\n                         181.0 * Math.cos(twoD + l);\n        eccentricity += 0.014216 * Math.cos(twoD - l) + 0.008551 * Math.cos(twoD - twol) -\n                        0.001383 * Math.cos(l) + 0.001356 * Math.cos(twoD + l) -\n                        0.001147 * Math.cos(fourD - threel) - 0.000914 * Math.cos(fourD - twol) +\n                        0.000869 * Math.cos(twoD - lprime - l) - 0.000627 * Math.cos(twoD) -\n                        0.000394 * Math.cos(fourD - fourl) + 0.000282 * Math.cos(twoD - lprime - twol) -\n                        0.000279 * Math.cos(D - l) - 0.000236 * Math.cos(twol) +\n                        0.000231 * Math.cos(fourD) + 0.000229 * Math.cos(sixD - fourl) -\n                        0.000201 * Math.cos(twol - twoF);\n        inclinationSecPart += 486.26 * Math.cos(twoD - twoF) - 40.13 * Math.cos(twoD) +\n                              37.51 * Math.cos(twoF) + 25.73 * Math.cos(twol - twoF) +\n                              19.97 * Math.cos(twoD - lprime - twoF);\n        longitudeOfPerigeeSecPart += -55609 * Math.sin(twoD - l) - 34711 * Math.sin(twoD - twol) -\n                                      9792 * Math.sin(l) + 9385 * Math.sin(fourD - threel) +\n                                      7505 * Math.sin(fourD - twol) + 5318 * Math.sin(twoD + l) +\n                                      3484 * Math.sin(fourD - fourl) - 3417 * Math.sin(twoD - lprime - l) -\n                                      2530 * Math.sin(sixD - fourl) - 2376 * Math.sin(twoD) -\n                                      2075 * Math.sin(twoD - threel) - 1883 * Math.sin(twol) -\n                                      1736 * Math.sin(sixD - 5.0 * l) + 1626 * Math.sin(lprime) -\n                                      1370 * Math.sin(sixD - threel);\n        longitudeOfNodeSecPart += -5392 * Math.sin(twoD - twoF) - 540 * Math.sin(lprime) -\n                                  441 * Math.sin(twoD) + 423 * Math.sin(twoF) -\n                                  288 * Math.sin(twol - twoF);\n        meanLongitudeSecPart += -3332.9 * Math.sin(twoD) + 1197.4 * Math.sin(twoD - l) -\n                                662.5 * Math.sin(lprime) + 396.3 * Math.sin(l) -\n                                218.0 * Math.sin(twoD - lprime);\n\n        // Add terms from Table 5\n        var twoPsi = 2.0 * psi;\n        var threePsi = 3.0 * psi;\n        inclinationSecPart += 46.997 * Math.cos(psi) * t - 0.614 * Math.cos(twoD - twoF + psi) * t +\n                              0.614 * Math.cos(twoD - twoF - psi) * t - 0.0297 * Math.cos(twoPsi) * t2 -\n                              0.0335 * Math.cos(psi) * t2 + 0.0012 * Math.cos(twoD - twoF + twoPsi) * t2 -\n                              0.00016 * Math.cos(psi) * t3 + 0.00004 * Math.cos(threePsi) * t3 +\n                              0.00004 * Math.cos(twoPsi) * t3;\n        var perigeeAndMean = 2.116 * Math.sin(psi) * t - 0.111 * Math.sin(twoD - twoF - psi) * t -\n                                0.0015 * Math.sin(psi) * t2;\n        longitudeOfPerigeeSecPart += perigeeAndMean;\n        meanLongitudeSecPart += perigeeAndMean;\n        longitudeOfNodeSecPart += -520.77 * Math.sin(psi) * t + 13.66 * Math.sin(twoD - twoF + psi) * t +\n                                  1.12 * Math.sin(twoD - psi) * t - 1.06 * Math.sin(twoF - psi) * t +\n                                  0.660 * Math.sin(twoPsi) * t2 + 0.371 * Math.sin(psi) * t2 -\n                                  0.035 * Math.sin(twoD - twoF + twoPsi) * t2 - 0.015 * Math.sin(twoD - twoF + psi) * t2 +\n                                  0.0014 * Math.sin(psi) * t3 - 0.0011 * Math.sin(threePsi) * t3 -\n                                  0.0009 * Math.sin(twoPsi) * t3;\n\n        // Add constants and convert units\n        semimajorAxis *= MetersPerKilometer;\n        var inclination = inclinationConstant + inclinationSecPart * RadiansPerArcSecond;\n        var longitudeOfPerigee = longitudeOfPerigeeConstant + longitudeOfPerigeeSecPart * RadiansPerArcSecond;\n        var meanLongitude = meanLongitudeConstant + meanLongitudeSecPart * RadiansPerArcSecond;\n        var longitudeOfNode = longitudeOfNodeConstant + longitudeOfNodeSecPart * RadiansPerArcSecond;\n\n        return elementsToCartesian(semimajorAxis, eccentricity, inclination, longitudeOfPerigee,\n                                   longitudeOfNode, meanLongitude, result);\n    }\n\n    // Gets a point describing the motion of the Earth.  This point uses the Moon point and\n    // the 1992 mu value (ratio between Moon and Earth masses) in Table 2 of the paper in order\n    // to determine the position of the Earth relative to the Earth-Moon barycenter.\n    var moonEarthMassRatio = 0.012300034; // From 1992 mu value in Table 2\n    var factor = moonEarthMassRatio / (moonEarthMassRatio + 1.0) * -1;\n    function computeSimonEarth(date, result) {\n        result = computeSimonMoon(date, result);\n        return Cartesian3.multiplyByScalar(result, factor, result);\n    }\n\n    // Values for the <code>axesTransformation</code> needed for the rotation were found using the STK Components\n    // GreographicTransformer on the position of the sun center of mass point and the earth J2000 frame.\n\n    var axesTransformation = new Matrix3(1.0000000000000002, 5.619723173785822e-16, 4.690511510146299e-19,\n            -5.154129427414611e-16, 0.9174820620691819, -0.39777715593191376,\n             -2.23970096136568e-16, 0.39777715593191376, 0.9174820620691819);\n    var translation = new Cartesian3();\n    /**\n     * Computes the position of the Sun in the Earth-centered inertial frame\n     *\n     * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} Calculated sun position\n     */\n    Simon1994PlanetaryPositions.computeSunPositionInEarthInertialFrame= function(julianDate, result){\n        if (!defined(julianDate)) {\n            julianDate = JulianDate.now();\n        }\n\n        if (!defined(result)) {\n            result = new Cartesian3();\n        }\n\n        //first forward transformation\n        translation = computeSimonEarthMoonBarycenter(julianDate, translation);\n        result = Cartesian3.negate(translation, result);\n\n        //second forward transformation\n        computeSimonEarth(julianDate, translation);\n\n        Cartesian3.subtract(result, translation, result);\n        Matrix3.multiplyByVector(axesTransformation, result, result);\n\n        return result;\n    };\n\n    /**\n     * Computes the position of the Moon in the Earth-centered inertial frame\n     *\n     * @param {JulianDate} [julianDate] The time at which to compute the Sun's position, if not provided the current system time is used.\n     * @param {Cartesian3} [result] The object onto which to store the result.\n     * @returns {Cartesian3} Calculated moon position\n     */\n    Simon1994PlanetaryPositions.computeMoonPositionInEarthInertialFrame = function(julianDate, result){\n        if (!defined(julianDate)) {\n            julianDate = JulianDate.now();\n        }\n\n        result = computeSimonMoon(julianDate, result);\n        Matrix3.multiplyByVector(axesTransformation, result, result);\n\n        return result;\n    };\n\n    return Simon1994PlanetaryPositions;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"attribute vec4 position;\\n\\\nattribute vec2 textureCoordinates;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    gl_Position = position;\\n\\\n    v_textureCoordinates = textureCoordinates;\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/FrustumGeometry',\n        '../Core/FrustumOutlineGeometry',\n        '../Core/GeometryInstance',\n        '../Core/Matrix3',\n        '../Core/OrthographicFrustum',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Core/PerspectiveFrustum',\n        '../Core/PerspectiveOffCenterFrustum',\n        '../Core/Quaternion',\n        './PerInstanceColorAppearance',\n        './Primitive'\n    ], function(\n        Cartesian3,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defaultValue,\n        defined,\n        destroyObject,\n        DeveloperError,\n        FrustumGeometry,\n        FrustumOutlineGeometry,\n        GeometryInstance,\n        Matrix3,\n        OrthographicFrustum,\n        OrthographicOffCenterFrustum,\n        PerspectiveFrustum,\n        PerspectiveOffCenterFrustum,\n        Quaternion,\n        PerInstanceColorAppearance,\n        Primitive) {\n    'use strict';\n\n    /**\n     * Draws the outline of the camera's view frustum.\n     *\n     * @alias DebugCameraPrimitive\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Camera} options.camera The camera.\n     * @param {Color} [options.color=Color.CYAN] The color of the debug outline.\n     * @param {Boolean} [options.updateOnChange=true] Whether the primitive updates when the underlying camera changes.\n     * @param {Boolean} [options.show=true] Determines if this primitive will be shown.\n     * @param {Object} [options.id] A user-defined object to return when the instance is picked with {@link Scene#pick}.\n     *\n     * @example\n     * primitives.add(new Cesium.DebugCameraPrimitive({\n     *   camera : camera,\n     *   color : Cesium.Color.YELLOW\n     * }));\n     */\n    function DebugCameraPrimitive(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        this._camera = options.camera;\n        this._color = defaultValue(options.color, Color.CYAN);\n        this._updateOnChange = defaultValue(options.updateOnChange, true);\n\n        /**\n         * Determines if this primitive will be shown.\n         *\n         * @type Boolean\n         * @default true\n         */\n        this.show = defaultValue(options.show, true);\n\n        /**\n         * User-defined value returned when the primitive is picked.\n         *\n         * @type {*}\n         * @default undefined\n         *\n         * @see Scene#pick\n         */\n        this.id = options.id;\n        this._id = undefined;\n\n        this._outlinePrimitives = [];\n        this._planesPrimitives = [];\n    }\n\n    var scratchRight = new Cartesian3();\n    var scratchRotation = new Matrix3();\n    var scratchOrientation = new Quaternion();\n    var scratchPerspective = new PerspectiveFrustum();\n    var scratchPerspectiveOffCenter = new PerspectiveOffCenterFrustum();\n    var scratchOrthographic = new OrthographicFrustum();\n    var scratchOrthographicOffCenter = new OrthographicOffCenterFrustum();\n\n    var scratchColor = new Color();\n    var scratchSplits = [1.0, 100000.0];\n\n    /**\n     * @private\n     */\n    DebugCameraPrimitive.prototype.update = function(frameState) {\n        if (!this.show) {\n            return;\n        }\n\n        var planesPrimitives = this._planesPrimitives;\n        var outlinePrimitives = this._outlinePrimitives;\n        var i;\n        var length;\n\n        if (this._updateOnChange) {\n            // Recreate the primitive every frame\n            length = planesPrimitives.length;\n            for (i = 0; i < length; ++i) {\n                outlinePrimitives[i] = outlinePrimitives[i] && outlinePrimitives[i].destroy();\n                planesPrimitives[i] = planesPrimitives[i] && planesPrimitives[i].destroy();\n            }\n            planesPrimitives.length = 0;\n            outlinePrimitives.length = 0;\n        }\n\n        if (planesPrimitives.length === 0) {\n            var camera = this._camera;\n            var cameraFrustum = camera.frustum;\n            var frustum;\n            if (cameraFrustum instanceof PerspectiveFrustum) {\n                frustum = scratchPerspective;\n            } else if (cameraFrustum instanceof PerspectiveOffCenterFrustum) {\n                frustum = scratchPerspectiveOffCenter;\n            } else if (cameraFrustum instanceof OrthographicFrustum) {\n                frustum = scratchOrthographic;\n            } else {\n                frustum = scratchOrthographicOffCenter;\n            }\n            frustum = cameraFrustum.clone(frustum);\n\n            var frustumSplits = frameState.frustumSplits;\n            var numFrustums = frustumSplits.length - 1;\n            if (numFrustums <= 0) {\n                frustumSplits = scratchSplits; // Use near and far planes if no splits created\n                frustumSplits[0] = this._camera.frustum.near;\n                frustumSplits[1] = this._camera.frustum.far;\n                numFrustums = 1;\n            }\n\n            var position = camera.positionWC;\n            var direction = camera.directionWC;\n            var up = camera.upWC;\n            var right = camera.rightWC;\n            right = Cartesian3.negate(right, scratchRight);\n\n            var rotation = scratchRotation;\n            Matrix3.setColumn(rotation, 0, right, rotation);\n            Matrix3.setColumn(rotation, 1, up, rotation);\n            Matrix3.setColumn(rotation, 2, direction, rotation);\n\n            var orientation = Quaternion.fromRotationMatrix(rotation, scratchOrientation);\n\n            planesPrimitives.length = outlinePrimitives.length = numFrustums;\n\n            for (i = 0; i < numFrustums; ++i) {\n                frustum.near = frustumSplits[i];\n                frustum.far = frustumSplits[i + 1];\n\n                planesPrimitives[i] = new Primitive({\n                    geometryInstances : new GeometryInstance({\n                        geometry : new FrustumGeometry({\n                            origin : position,\n                            orientation : orientation,\n                            frustum : frustum,\n                            _drawNearPlane : i === 0\n                        }),\n                        attributes : {\n                            color : ColorGeometryInstanceAttribute.fromColor(Color.fromAlpha(this._color, 0.1, scratchColor))\n                        },\n                        id : this.id,\n                        pickPrimitive : this\n                    }),\n                    appearance : new PerInstanceColorAppearance({\n                        translucent : true,\n                        flat : true\n                    }),\n                    asynchronous : false\n                });\n\n                outlinePrimitives[i] = new Primitive({\n                    geometryInstances : new GeometryInstance({\n                        geometry : new FrustumOutlineGeometry({\n                            origin : position,\n                            orientation : orientation,\n                            frustum : frustum,\n                            _drawNearPlane : i === 0\n                        }),\n                        attributes : {\n                            color : ColorGeometryInstanceAttribute.fromColor(this._color)\n                        },\n                        id : this.id,\n                        pickPrimitive : this\n                    }),\n                    appearance : new PerInstanceColorAppearance({\n                        translucent : false,\n                        flat : true\n                    }),\n                    asynchronous : false\n                });\n            }\n        }\n\n        length = planesPrimitives.length;\n        for (i = 0; i < length; ++i) {\n            outlinePrimitives[i].update(frameState);\n            planesPrimitives[i].update(frameState);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see DebugCameraPrimitive#destroy\n     */\n    DebugCameraPrimitive.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @example\n     * p = p && p.destroy();\n     *\n     * @see DebugCameraPrimitive#isDestroyed\n     */\n    DebugCameraPrimitive.prototype.destroy = function() {\n        var length = this._planesPrimitives.length;\n        for (var i = 0; i < length; ++i) {\n            this._outlinePrimitives[i] = this._outlinePrimitives[i] && this._outlinePrimitives[i].destroy();\n            this._planesPrimitives[i] = this._planesPrimitives[i] && this._planesPrimitives[i].destroy();\n        }\n        return destroyObject(this);\n    };\n\n    return DebugCameraPrimitive;\n});\n","define([\n        './BoundingSphere',\n        './Cartesian3',\n        './Cartesian4',\n        './Check',\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './Geometry',\n        './GeometryAttribute',\n        './GeometryAttributes',\n        './Matrix3',\n        './Matrix4',\n        './OrthographicFrustum',\n        './PerspectiveFrustum',\n        './PrimitiveType',\n        './Quaternion',\n        './VertexFormat'\n    ], function(\n        BoundingSphere,\n        Cartesian3,\n        Cartesian4,\n        Check,\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        Geometry,\n        GeometryAttribute,\n        GeometryAttributes,\n        Matrix3,\n        Matrix4,\n        OrthographicFrustum,\n        PerspectiveFrustum,\n        PrimitiveType,\n        Quaternion,\n        VertexFormat) {\n    'use strict';\n\n    var PERSPECTIVE = 0;\n    var ORTHOGRAPHIC = 1;\n\n    /**\n     * Describes a frustum at the given the origin and orientation.\n     *\n     * @alias FrustumGeometry\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {PerspectiveFrustum|OrthographicFrustum} options.frustum The frustum.\n     * @param {Cartesian3} options.origin The origin of the frustum.\n     * @param {Quaternion} options.orientation The orientation of the frustum.\n     * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n     */\n    function FrustumGeometry(options) {\n        \n\n        var frustum = options.frustum;\n        var orientation = options.orientation;\n        var origin = options.origin;\n        var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n\n        // This is private because it is used by DebugCameraPrimitive to draw a multi-frustum by\n        // creating multiple FrustumGeometrys. This way the near plane of one frustum doesn't overlap\n        // the far plane of another.\n        var drawNearPlane = defaultValue(options._drawNearPlane, true);\n\n        var frustumType;\n        var frustumPackedLength;\n        if (frustum instanceof PerspectiveFrustum) {\n            frustumType = PERSPECTIVE;\n            frustumPackedLength = PerspectiveFrustum.packedLength;\n        } else if (frustum instanceof OrthographicFrustum) {\n            frustumType = ORTHOGRAPHIC;\n            frustumPackedLength = OrthographicFrustum.packedLength;\n        }\n\n        this._frustumType = frustumType;\n        this._frustum = frustum.clone();\n        this._origin = Cartesian3.clone(origin);\n        this._orientation = Quaternion.clone(orientation);\n        this._drawNearPlane = drawNearPlane;\n        this._vertexFormat = vertexFormat;\n        this._workerName = 'createFrustumGeometry';\n\n        /**\n         * The number of elements used to pack the object into an array.\n         * @type {Number}\n         */\n        this.packedLength = 2 + frustumPackedLength + Cartesian3.packedLength + Quaternion.packedLength + VertexFormat.packedLength;\n    }\n\n    /**\n     * Stores the provided instance into the provided array.\n     *\n     * @param {FrustumGeometry} value The value to pack.\n     * @param {Number[]} array The array to pack into.\n     * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n     *\n     * @returns {Number[]} The array that was packed into\n     */\n    FrustumGeometry.pack = function(value, array, startingIndex) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var frustumType = value._frustumType;\n        var frustum = value._frustum;\n\n        array[startingIndex++] = frustumType;\n\n        if (frustumType === PERSPECTIVE) {\n            PerspectiveFrustum.pack(frustum, array, startingIndex);\n            startingIndex += PerspectiveFrustum.packedLength;\n        } else {\n            OrthographicFrustum.pack(frustum, array, startingIndex);\n            startingIndex += OrthographicFrustum.packedLength;\n        }\n\n        Cartesian3.pack(value._origin, array, startingIndex);\n        startingIndex += Cartesian3.packedLength;\n        Quaternion.pack(value._orientation, array, startingIndex);\n        startingIndex += Quaternion.packedLength;\n        VertexFormat.pack(value._vertexFormat, array, startingIndex);\n        startingIndex += VertexFormat.packedLength;\n        array[startingIndex] = value._drawNearPlane ? 1.0 : 0.0;\n\n        return array;\n    };\n\n    var scratchPackPerspective = new PerspectiveFrustum();\n    var scratchPackOrthographic = new OrthographicFrustum();\n    var scratchPackQuaternion = new Quaternion();\n    var scratchPackorigin = new Cartesian3();\n    var scratchVertexFormat = new VertexFormat();\n\n    /**\n     * Retrieves an instance from a packed array.\n     *\n     * @param {Number[]} array The packed array.\n     * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n     * @param {FrustumGeometry} [result] The object into which to store the result.\n     */\n    FrustumGeometry.unpack = function(array, startingIndex, result) {\n        \n\n        startingIndex = defaultValue(startingIndex, 0);\n\n        var frustumType = array[startingIndex++];\n\n        var frustum;\n        if (frustumType === PERSPECTIVE) {\n            frustum = PerspectiveFrustum.unpack(array, startingIndex, scratchPackPerspective);\n            startingIndex += PerspectiveFrustum.packedLength;\n        } else {\n            frustum = OrthographicFrustum.unpack(array, startingIndex, scratchPackOrthographic);\n            startingIndex += OrthographicFrustum.packedLength;\n        }\n\n        var origin = Cartesian3.unpack(array, startingIndex, scratchPackorigin);\n        startingIndex += Cartesian3.packedLength;\n        var orientation = Quaternion.unpack(array, startingIndex, scratchPackQuaternion);\n        startingIndex += Quaternion.packedLength;\n        var vertexFormat = VertexFormat.unpack(array, startingIndex, scratchVertexFormat);\n        startingIndex += VertexFormat.packedLength;\n        var drawNearPlane = array[startingIndex] === 1.0;\n\n        if (!defined(result)) {\n            return new FrustumGeometry({\n                frustum : frustum,\n                origin : origin,\n                orientation : orientation,\n                vertexFormat : vertexFormat,\n                _drawNearPlane : drawNearPlane\n            });\n        }\n\n        var frustumResult = frustumType === result._frustumType ? result._frustum : undefined;\n        result._frustum = frustum.clone(frustumResult);\n\n        result._frustumType = frustumType;\n        result._origin = Cartesian3.clone(origin, result._origin);\n        result._orientation = Quaternion.clone(orientation, result._orientation);\n        result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n        result._drawNearPlane = drawNearPlane;\n\n        return result;\n    };\n\n    function getAttributes(offset, normals, tangents, bitangents, st, normal, tangent, bitangent) {\n        var stOffset = offset / 3 * 2;\n\n        for (var i = 0; i < 4; ++i) {\n            if (defined(normals)) {\n                normals[offset] = normal.x;\n                normals[offset + 1] = normal.y;\n                normals[offset + 2] = normal.z;\n            }\n            if (defined(tangents)) {\n                tangents[offset] = tangent.x;\n                tangents[offset + 1] = tangent.y;\n                tangents[offset + 2] = tangent.z;\n            }\n            if (defined(bitangents)) {\n                bitangents[offset] = bitangent.x;\n                bitangents[offset + 1] = bitangent.y;\n                bitangents[offset + 2] = bitangent.z;\n            }\n            offset += 3;\n        }\n\n        st[stOffset] = 0.0;\n        st[stOffset + 1] = 0.0;\n        st[stOffset + 2] = 1.0;\n        st[stOffset + 3] = 0.0;\n        st[stOffset + 4] = 1.0;\n        st[stOffset + 5] = 1.0;\n        st[stOffset + 6] = 0.0;\n        st[stOffset + 7] = 1.0;\n    }\n\n    var scratchRotationMatrix = new Matrix3();\n    var scratchViewMatrix = new Matrix4();\n    var scratchInverseMatrix = new Matrix4();\n\n    var scratchXDirection = new Cartesian3();\n    var scratchYDirection = new Cartesian3();\n    var scratchZDirection = new Cartesian3();\n    var scratchNegativeX = new Cartesian3();\n    var scratchNegativeY = new Cartesian3();\n    var scratchNegativeZ = new Cartesian3();\n\n    var frustumSplits = new Array(3);\n\n    var frustumCornersNDC = new Array(4);\n    frustumCornersNDC[0] = new Cartesian4(-1.0, -1.0, 1.0, 1.0);\n    frustumCornersNDC[1] = new Cartesian4(1.0, -1.0, 1.0, 1.0);\n    frustumCornersNDC[2] = new Cartesian4(1.0, 1.0, 1.0, 1.0);\n    frustumCornersNDC[3] = new Cartesian4(-1.0, 1.0, 1.0, 1.0);\n\n    var scratchFrustumCorners = new Array(4);\n    for (var i = 0; i < 4; ++i) {\n        scratchFrustumCorners[i] = new Cartesian4();\n    }\n\n    FrustumGeometry._computeNearFarPlanes = function(origin, orientation, frustumType, frustum, positions, xDirection, yDirection, zDirection) {\n        var rotationMatrix = Matrix3.fromQuaternion(orientation, scratchRotationMatrix);\n        var x = defaultValue(xDirection, scratchXDirection);\n        var y = defaultValue(yDirection, scratchYDirection);\n        var z = defaultValue(zDirection, scratchZDirection);\n\n        x = Matrix3.getColumn(rotationMatrix, 0, x);\n        y = Matrix3.getColumn(rotationMatrix, 1, y);\n        z = Matrix3.getColumn(rotationMatrix, 2, z);\n\n        Cartesian3.normalize(x, x);\n        Cartesian3.normalize(y, y);\n        Cartesian3.normalize(z, z);\n\n        Cartesian3.negate(x, x);\n\n        var view = Matrix4.computeView(origin, z, y, x, scratchViewMatrix);\n\n        var inverseView;\n        var inverseViewProjection;\n        if (frustumType === PERSPECTIVE) {\n            var projection = frustum.projectionMatrix;\n            var viewProjection = Matrix4.multiply(projection, view, scratchInverseMatrix);\n            inverseViewProjection = Matrix4.inverse(viewProjection, scratchInverseMatrix);\n        } else {\n            inverseView = Matrix4.inverseTransformation(view, scratchInverseMatrix);\n        }\n\n        if (defined(inverseViewProjection)) {\n            frustumSplits[0] = frustum.near;\n            frustumSplits[1] = frustum.far;\n        } else {\n            frustumSplits[0] = 0.0;\n            frustumSplits[1] = frustum.near;\n            frustumSplits[2] = frustum.far;\n        }\n\n        for (var i = 0; i < 2; ++i) {\n            for (var j = 0; j < 4; ++j) {\n                var corner = Cartesian4.clone(frustumCornersNDC[j], scratchFrustumCorners[j]);\n\n                if (!defined(inverseViewProjection)) {\n                    if (defined(frustum._offCenterFrustum)) {\n                        frustum = frustum._offCenterFrustum;\n                    }\n\n                    var near = frustumSplits[i];\n                    var far = frustumSplits[i + 1];\n\n                    corner.x = (corner.x * (frustum.right - frustum.left) + frustum.left + frustum.right) * 0.5;\n                    corner.y = (corner.y * (frustum.top - frustum.bottom) + frustum.bottom + frustum.top) * 0.5;\n                    corner.z = (corner.z * (near - far) - near - far) * 0.5;\n                    corner.w = 1.0;\n\n                    Matrix4.multiplyByVector(inverseView, corner, corner);\n                } else {\n                    corner = Matrix4.multiplyByVector(inverseViewProjection, corner, corner);\n\n                    // Reverse perspective divide\n                    var w = 1.0 / corner.w;\n                    Cartesian3.multiplyByScalar(corner, w, corner);\n\n                    Cartesian3.subtract(corner, origin, corner);\n                    Cartesian3.normalize(corner, corner);\n\n                    var fac = Cartesian3.dot(z, corner);\n                    Cartesian3.multiplyByScalar(corner, frustumSplits[i] / fac, corner);\n                    Cartesian3.add(corner, origin, corner);\n                }\n\n                positions[12 * i + j * 3] = corner.x;\n                positions[12 * i + j * 3 + 1] = corner.y;\n                positions[12 * i + j * 3 + 2] = corner.z;\n            }\n        }\n    };\n\n    /**\n     * Computes the geometric representation of a frustum, including its vertices, indices, and a bounding sphere.\n     *\n     * @param {FrustumGeometry} frustumGeometry A description of the frustum.\n     * @returns {Geometry|undefined} The computed vertices and indices.\n     */\n    FrustumGeometry.createGeometry = function(frustumGeometry) {\n        var frustumType = frustumGeometry._frustumType;\n        var frustum = frustumGeometry._frustum;\n        var origin = frustumGeometry._origin;\n        var orientation = frustumGeometry._orientation;\n        var drawNearPlane = frustumGeometry._drawNearPlane;\n        var vertexFormat = frustumGeometry._vertexFormat;\n\n        var numberOfPlanes = drawNearPlane ? 6 : 5;\n        var positions = new Float64Array(3 * 4 * 6);\n        FrustumGeometry._computeNearFarPlanes(origin, orientation, frustumType, frustum, positions);\n\n        // -x plane\n        var offset = 3 * 4 * 2;\n        positions[offset]      = positions[3 * 4];\n        positions[offset + 1]  = positions[3 * 4 + 1];\n        positions[offset + 2]  = positions[3 * 4 + 2];\n        positions[offset + 3]  = positions[0];\n        positions[offset + 4]  = positions[1];\n        positions[offset + 5]  = positions[2];\n        positions[offset + 6]  = positions[3 * 3];\n        positions[offset + 7]  = positions[3 * 3 + 1];\n        positions[offset + 8]  = positions[3 * 3 + 2];\n        positions[offset + 9]  = positions[3 * 7];\n        positions[offset + 10] = positions[3 * 7 + 1];\n        positions[offset + 11] = positions[3 * 7 + 2];\n\n        // -y plane\n        offset += 3 * 4;\n        positions[offset]      = positions[3 * 5];\n        positions[offset + 1]  = positions[3 * 5 + 1];\n        positions[offset + 2]  = positions[3 * 5 + 2];\n        positions[offset + 3]  = positions[3];\n        positions[offset + 4]  = positions[3 + 1];\n        positions[offset + 5]  = positions[3 + 2];\n        positions[offset + 6]  = positions[0];\n        positions[offset + 7]  = positions[1];\n        positions[offset + 8]  = positions[2];\n        positions[offset + 9]  = positions[3 * 4];\n        positions[offset + 10] = positions[3 * 4 + 1];\n        positions[offset + 11] = positions[3 * 4 + 2];\n\n        // +x plane\n        offset += 3 * 4;\n        positions[offset]      = positions[3];\n        positions[offset + 1]  = positions[3 + 1];\n        positions[offset + 2]  = positions[3 + 2];\n        positions[offset + 3]  = positions[3 * 5];\n        positions[offset + 4]  = positions[3 * 5 + 1];\n        positions[offset + 5]  = positions[3 * 5 + 2];\n        positions[offset + 6]  = positions[3 * 6];\n        positions[offset + 7]  = positions[3 * 6 + 1];\n        positions[offset + 8]  = positions[3 * 6 + 2];\n        positions[offset + 9]  = positions[3 * 2];\n        positions[offset + 10] = positions[3 * 2 + 1];\n        positions[offset + 11] = positions[3 * 2 + 2];\n\n        // +y plane\n        offset += 3 * 4;\n        positions[offset]      = positions[3 * 2];\n        positions[offset + 1]  = positions[3 * 2 + 1];\n        positions[offset + 2]  = positions[3 * 2 + 2];\n        positions[offset + 3]  = positions[3 * 6];\n        positions[offset + 4]  = positions[3 * 6 + 1];\n        positions[offset + 5]  = positions[3 * 6 + 2];\n        positions[offset + 6]  = positions[3 * 7];\n        positions[offset + 7]  = positions[3 * 7 + 1];\n        positions[offset + 8]  = positions[3 * 7 + 2];\n        positions[offset + 9]  = positions[3 * 3];\n        positions[offset + 10] = positions[3 * 3 + 1];\n        positions[offset + 11] = positions[3 * 3 + 2];\n\n        if (!drawNearPlane) {\n            positions = positions.subarray(3 * 4);\n        }\n\n        var attributes = new GeometryAttributes({\n            position : new GeometryAttribute({\n                componentDatatype : ComponentDatatype.DOUBLE,\n                componentsPerAttribute : 3,\n                values : positions\n            })\n        });\n\n        if (defined(vertexFormat.normal) || defined(vertexFormat.tangent) || defined(vertexFormat.bitangent) || defined(vertexFormat.st)) {\n            var normals = defined(vertexFormat.normal) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\n            var tangents = defined(vertexFormat.tangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\n            var bitangents = defined(vertexFormat.bitangent) ? new Float32Array(3 * 4 * numberOfPlanes) : undefined;\n            var st = defined(vertexFormat.st) ? new Float32Array(2 * 4 * numberOfPlanes) : undefined;\n\n            var x = scratchXDirection;\n            var y = scratchYDirection;\n            var z = scratchZDirection;\n\n            var negativeX = Cartesian3.negate(x, scratchNegativeX);\n            var negativeY = Cartesian3.negate(y, scratchNegativeY);\n            var negativeZ = Cartesian3.negate(z, scratchNegativeZ);\n\n            offset = 0;\n            if (drawNearPlane) {\n                getAttributes(offset, normals, tangents, bitangents, st, negativeZ, x, y); // near\n                offset += 3 * 4;\n            }\n            getAttributes(offset, normals, tangents, bitangents, st, z, negativeX, y); // far\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, negativeX, negativeZ, y); // -x\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, negativeY, negativeZ, negativeX); // -y\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, x, z, y); // +x\n            offset += 3 * 4;\n            getAttributes(offset, normals, tangents, bitangents, st, y, z, negativeX); // +y\n\n            if (defined(normals)) {\n                attributes.normal = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : normals\n                });\n            }\n            if (defined(tangents)) {\n                attributes.tangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : tangents\n                });\n            }\n            if (defined(bitangents)) {\n                attributes.bitangent = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 3,\n                    values : bitangents\n                });\n            }\n            if (defined(st)) {\n                attributes.st = new GeometryAttribute({\n                    componentDatatype : ComponentDatatype.FLOAT,\n                    componentsPerAttribute : 2,\n                    values : st\n                });\n            }\n        }\n\n        var indices = new Uint16Array(6 * numberOfPlanes);\n        for (var i = 0; i < numberOfPlanes; ++i) {\n            var indexOffset = i * 6;\n            var index = i * 4;\n\n            indices[indexOffset] = index;\n            indices[indexOffset + 1] = index + 1;\n            indices[indexOffset + 2] = index + 2;\n            indices[indexOffset + 3] = index;\n            indices[indexOffset + 4] = index + 2;\n            indices[indexOffset + 5] = index + 3;\n        }\n\n        return new Geometry({\n            attributes : attributes,\n            indices : indices,\n            primitiveType : PrimitiveType.TRIANGLES,\n            boundingSphere : BoundingSphere.fromVertices(positions)\n        });\n    };\n\n    return FrustumGeometry;\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/ClearCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/ShaderSource',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureWrap',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Shaders/PostProcessStages/DepthViewPacked',\n        '../Shaders/PostProcessStages/PassThrough',\n        '../Shaders/PostProcessStages/PassThroughDepth',\n        './StencilConstants',\n        './StencilFunction',\n        './StencilOperation'\n    ], function(\n        BoundingRectangle,\n        Color,\n        defined,\n        destroyObject,\n        PixelFormat,\n        ClearCommand,\n        Framebuffer,\n        PixelDatatype,\n        RenderState,\n        ShaderSource,\n        Sampler,\n        Texture,\n        TextureWrap,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        DepthViewPacked,\n        PassThrough,\n        PassThroughDepth,\n        StencilConstants,\n        StencilFunction,\n        StencilOperation) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function GlobeDepth() {\n        this._colorTexture = undefined;\n        this._depthStencilTexture = undefined;\n        this._globeDepthTexture = undefined;\n        this._tempGlobeDepthTexture = undefined;\n        this._tempCopyDepthTexture = undefined;\n\n        this.framebuffer = undefined;\n        this._copyDepthFramebuffer = undefined;\n        this._tempCopyDepthFramebuffer = undefined;\n        this._updateDepthFramebuffer = undefined;\n\n        this._clearColorCommand = undefined;\n        this._copyColorCommand = undefined;\n        this._copyDepthCommand = undefined;\n        this._tempCopyDepthCommand = undefined;\n        this._updateDepthCommand = undefined;\n\n        this._viewport = new BoundingRectangle();\n        this._rs = undefined;\n        this._rsUpdate = undefined;\n\n        this._useScissorTest = false;\n        this._scissorRectangle = undefined;\n\n        this._useLogDepth = undefined;\n        this._useHdr = undefined;\n\n        this._debugGlobeDepthViewportCommand = undefined;\n    }\n\n    function executeDebugGlobeDepth(globeDepth, context, passState, useLogDepth) {\n        if (!defined(globeDepth._debugGlobeDepthViewportCommand) || useLogDepth !== globeDepth._useLogDepth) {\n            var fsSource =\n                'uniform sampler2D u_depthTexture;\\n' +\n                'varying vec2 v_textureCoordinates;\\n' +\n                'void main()\\n' +\n                '{\\n' +\n                '    float z_window = czm_unpackDepth(texture2D(u_depthTexture, v_textureCoordinates));\\n' +\n                '    z_window = czm_reverseLogDepth(z_window); \\n' +\n                '    float n_range = czm_depthRange.near;\\n' +\n                '    float f_range = czm_depthRange.far;\\n' +\n                '    float z_ndc = (2.0 * z_window - n_range - f_range) / (f_range - n_range);\\n' +\n                '    float scale = pow(z_ndc * 0.5 + 0.5, 8.0);\\n' +\n                '    gl_FragColor = vec4(mix(vec3(0.0), vec3(1.0), scale), 1.0);\\n' +\n                '}\\n';\n            var fs = new ShaderSource({\n                defines : [useLogDepth ? 'LOG_DEPTH' : ''],\n                sources : [fsSource]\n            });\n\n            globeDepth._debugGlobeDepthViewportCommand = context.createViewportQuadCommand(fs, {\n                uniformMap : {\n                    u_depthTexture : function() {\n                        return globeDepth._globeDepthTexture;\n                    }\n                },\n                owner : globeDepth\n            });\n\n            globeDepth._useLogDepth = useLogDepth;\n        }\n\n        globeDepth._debugGlobeDepthViewportCommand.execute(context, passState);\n    }\n\n    function destroyTextures(globeDepth) {\n        globeDepth._colorTexture = globeDepth._colorTexture && !globeDepth._colorTexture.isDestroyed() && globeDepth._colorTexture.destroy();\n        globeDepth._depthStencilTexture = globeDepth._depthStencilTexture && !globeDepth._depthStencilTexture.isDestroyed() && globeDepth._depthStencilTexture.destroy();\n        globeDepth._globeDepthTexture = globeDepth._globeDepthTexture && !globeDepth._globeDepthTexture.isDestroyed() && globeDepth._globeDepthTexture.destroy();\n    }\n\n    function destroyFramebuffers(globeDepth) {\n        globeDepth.framebuffer = globeDepth.framebuffer && !globeDepth.framebuffer.isDestroyed() && globeDepth.framebuffer.destroy();\n        globeDepth._copyDepthFramebuffer = globeDepth._copyDepthFramebuffer && !globeDepth._copyDepthFramebuffer.isDestroyed() && globeDepth._copyDepthFramebuffer.destroy();\n    }\n\n    function destroyUpdateDepthResources(globeDepth) {\n        globeDepth._tempCopyDepthFramebuffer = globeDepth._tempCopyDepthFramebuffer && !globeDepth._tempCopyDepthFramebuffer.isDestroyed() && globeDepth._tempCopyDepthFramebuffer.destroy();\n        globeDepth._updateDepthFramebuffer = globeDepth._updateDepthFramebuffer && !globeDepth._updateDepthFramebuffer.isDestroyed() && globeDepth._updateDepthFramebuffer.destroy();\n        globeDepth._tempGlobeDepthTexture = globeDepth._tempGlobeDepthTexture && !globeDepth._tempGlobeDepthTexture.isDestroyed() && globeDepth._tempGlobeDepthTexture.destroy();\n    }\n\n    function createUpdateDepthResources(globeDepth, context, width, height, passState) {\n        globeDepth._tempGlobeDepthTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n        globeDepth._tempCopyDepthFramebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [globeDepth._tempGlobeDepthTexture],\n            destroyAttachments : false\n        });\n        globeDepth._updateDepthFramebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [globeDepth._globeDepthTexture],\n            depthStencilTexture : passState.framebuffer.depthStencilTexture,\n            destroyAttachments : false\n        });\n    }\n\n    function createTextures(globeDepth, context, width, height, hdr) {\n        var pixelDatatype = hdr ? (context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT) : PixelDatatype.UNSIGNED_BYTE;\n        globeDepth._colorTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : pixelDatatype,\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n\n        globeDepth._depthStencilTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.DEPTH_STENCIL,\n            pixelDatatype : PixelDatatype.UNSIGNED_INT_24_8\n        });\n\n        globeDepth._globeDepthTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n    }\n\n    function createFramebuffers(globeDepth, context) {\n        globeDepth.framebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [globeDepth._colorTexture],\n            depthStencilTexture : globeDepth._depthStencilTexture,\n            destroyAttachments : false\n        });\n\n        globeDepth._copyDepthFramebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [globeDepth._globeDepthTexture],\n            destroyAttachments : false\n        });\n    }\n\n    function updateFramebuffers(globeDepth, context, width, height, hdr) {\n        var colorTexture = globeDepth._colorTexture;\n        var textureChanged = !defined(colorTexture) || colorTexture.width !== width || colorTexture.height !== height || hdr !== globeDepth._useHdr;\n        if (!defined(globeDepth.framebuffer) || textureChanged) {\n            destroyTextures(globeDepth);\n            destroyFramebuffers(globeDepth);\n            createTextures(globeDepth, context, width, height, hdr);\n            createFramebuffers(globeDepth, context);\n        }\n    }\n\n    function updateCopyCommands(globeDepth, context, width, height, passState) {\n        globeDepth._viewport.width = width;\n        globeDepth._viewport.height = height;\n\n        var useScissorTest = !BoundingRectangle.equals(globeDepth._viewport, passState.viewport);\n        var updateScissor = useScissorTest !== globeDepth._useScissorTest;\n        globeDepth._useScissorTest = useScissorTest;\n\n        if (!BoundingRectangle.equals(globeDepth._scissorRectangle, passState.viewport)) {\n            globeDepth._scissorRectangle = BoundingRectangle.clone(passState.viewport, globeDepth._scissorRectangle);\n            updateScissor = true;\n        }\n\n        if (!defined(globeDepth._rs) || !BoundingRectangle.equals(globeDepth._viewport, globeDepth._rs.viewport) || updateScissor) {\n            globeDepth._rs = RenderState.fromCache({\n                viewport : globeDepth._viewport,\n                scissorTest : {\n                    enabled : globeDepth._useScissorTest,\n                    rectangle : globeDepth._scissorRectangle\n                }\n            });\n            // Copy packed depth only if the 3D Tiles bit is set\n            globeDepth._rsUpdate = RenderState.fromCache({\n                viewport : globeDepth._viewport,\n                scissorTest : {\n                    enabled : globeDepth._useScissorTest,\n                    rectangle : globeDepth._scissorRectangle\n                },\n                stencilTest : {\n                    enabled : true,\n                    frontFunction : StencilFunction.EQUAL,\n                    frontOperation : {\n                        fail : StencilOperation.KEEP,\n                        zFail : StencilOperation.KEEP,\n                        zPass : StencilOperation.KEEP\n                    },\n                    backFunction : StencilFunction.NEVER,\n                    reference : StencilConstants.CESIUM_3D_TILE_MASK,\n                    mask : StencilConstants.CESIUM_3D_TILE_MASK\n                }\n            });\n        }\n\n        if (!defined(globeDepth._copyDepthCommand)) {\n            globeDepth._copyDepthCommand = context.createViewportQuadCommand(PassThroughDepth, {\n                uniformMap : {\n                    u_depthTexture : function() {\n                        return globeDepth._depthStencilTexture;\n                    }\n                },\n                owner : globeDepth\n            });\n        }\n\n        globeDepth._copyDepthCommand.framebuffer = globeDepth._copyDepthFramebuffer;\n        globeDepth._copyDepthCommand.renderState = globeDepth._rs;\n\n        if (!defined(globeDepth._copyColorCommand)) {\n            globeDepth._copyColorCommand = context.createViewportQuadCommand(PassThrough, {\n                uniformMap : {\n                    colorTexture : function() {\n                        return globeDepth._colorTexture;\n                    }\n                },\n                owner : globeDepth\n            });\n        }\n\n        globeDepth._copyColorCommand.renderState = globeDepth._rs;\n\n        if (!defined(globeDepth._tempCopyDepthCommand)) {\n            globeDepth._tempCopyDepthCommand = context.createViewportQuadCommand(PassThroughDepth, {\n                uniformMap : {\n                    u_depthTexture : function() {\n                        return globeDepth._tempCopyDepthTexture;\n                    }\n                },\n                owner : globeDepth\n            });\n        }\n\n        globeDepth._tempCopyDepthCommand.framebuffer = globeDepth._tempCopyDepthFramebuffer;\n        globeDepth._tempCopyDepthCommand.renderState = globeDepth._rs;\n\n        if (!defined(globeDepth._updateDepthCommand)) {\n            globeDepth._updateDepthCommand = context.createViewportQuadCommand(PassThrough, {\n                uniformMap : {\n                    colorTexture : function() {\n                        return globeDepth._tempGlobeDepthTexture;\n                    }\n                },\n                owner : globeDepth\n            });\n        }\n\n        globeDepth._updateDepthCommand.framebuffer = globeDepth._updateDepthFramebuffer;\n        globeDepth._updateDepthCommand.renderState = globeDepth._rsUpdate;\n\n        if (!defined(globeDepth._clearColorCommand)) {\n            globeDepth._clearColorCommand = new ClearCommand({\n                color : new Color(0.0, 0.0, 0.0, 0.0),\n                stencil : 0.0,\n                owner : globeDepth\n            });\n        }\n\n        globeDepth._clearColorCommand.framebuffer = globeDepth.framebuffer;\n    }\n\n    GlobeDepth.prototype.executeDebugGlobeDepth = function(context, passState, useLogDepth) {\n        executeDebugGlobeDepth(this, context, passState, useLogDepth);\n    };\n\n    GlobeDepth.prototype.update = function(context, passState, viewport, hdr) {\n        var width = viewport.width;\n        var height = viewport.height;\n\n        updateFramebuffers(this, context, width, height, hdr);\n        updateCopyCommands(this, context, width, height, passState);\n        context.uniformState.globeDepthTexture = undefined;\n\n        this._useHdr = hdr;\n    };\n\n    GlobeDepth.prototype.executeCopyDepth = function(context, passState) {\n        if (defined(this._copyDepthCommand)) {\n            this._copyDepthCommand.execute(context, passState);\n            context.uniformState.globeDepthTexture = this._globeDepthTexture;\n        }\n    };\n\n    GlobeDepth.prototype.executeUpdateDepth = function(context, passState, clearGlobeDepth) {\n        var depthTextureToCopy = passState.framebuffer.depthStencilTexture;\n        if (clearGlobeDepth || (depthTextureToCopy !== this._depthStencilTexture)) {\n            // First copy the depth to a temporary globe depth texture, then update the\n            // main globe depth texture where the stencil bit for 3D Tiles is set.\n            // This preserves the original globe depth except where 3D Tiles is rendered.\n            // The additional texture and framebuffer resources are created on demand.\n            if (defined(this._updateDepthCommand)) {\n                if (!defined(this._updateDepthFramebuffer) ||\n                    (this._updateDepthFramebuffer.depthStencilTexture !== depthTextureToCopy) ||\n                    (this._updateDepthFramebuffer.getColorTexture(0) !== this._globeDepthTexture)) {\n                    var width = this._globeDepthTexture.width;\n                    var height = this._globeDepthTexture.height;\n                    destroyUpdateDepthResources(this);\n                    createUpdateDepthResources(this, context, width, height, passState);\n                    updateCopyCommands(this, context, width, height, passState);\n                }\n                this._tempCopyDepthTexture = depthTextureToCopy;\n                this._tempCopyDepthCommand.execute(context, passState);\n                this._updateDepthCommand.execute(context, passState);\n            }\n            return;\n        }\n\n        // Fast path - the depth texture can be copied normally.\n        if (defined(this._copyDepthCommand)) {\n            this._copyDepthCommand.execute(context, passState);\n        }\n    };\n\n    GlobeDepth.prototype.executeCopyColor = function(context, passState) {\n        if (defined(this._copyColorCommand)) {\n            this._copyColorCommand.execute(context, passState);\n        }\n    };\n\n    GlobeDepth.prototype.clear = function(context, passState, clearColor) {\n        var clear = this._clearColorCommand;\n        if (defined(clear)) {\n            Color.clone(clearColor, clear.color);\n            clear.execute(context, passState);\n        }\n    };\n\n    GlobeDepth.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    GlobeDepth.prototype.destroy = function() {\n        destroyTextures(this);\n        destroyFramebuffers(this);\n        destroyUpdateDepthResources(this);\n\n        if (defined(this._copyColorCommand)) {\n            this._copyColorCommand.shaderProgram = this._copyColorCommand.shaderProgram.destroy();\n        }\n\n        if (defined(this._copyDepthCommand)) {\n            this._copyDepthCommand.shaderProgram = this._copyDepthCommand.shaderProgram.destroy();\n        }\n\n        var command = this._debugGlobeDepthViewportCommand;\n        if (defined(command)) {\n            command.shaderProgram = command.shaderProgram.destroy();\n        }\n\n        return destroyObject(this);\n    };\n\n    return GlobeDepth;\n});\n","//This file is automatically rebuilt by the Cesium build process.\ndefine(function() {\n    'use strict';\n    return \"#define SAMPLES 8\\n\\\n\\n\\\nuniform float delta;\\n\\\nuniform float sigma;\\n\\\nuniform float direction; // 0.0 for x direction, 1.0 for y direction\\n\\\n\\n\\\nuniform sampler2D colorTexture;\\n\\\n\\n\\\n#ifdef USE_STEP_SIZE\\n\\\nuniform float stepSize;\\n\\\n#else\\n\\\nuniform vec2 step;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\n//  Incremental Computation of the Gaussian:\\n\\\n//  https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch40.html\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 st = v_textureCoordinates;\\n\\\n    vec2 dir = vec2(1.0 - direction, direction);\\n\\\n\\n\\\n#ifdef USE_STEP_SIZE\\n\\\n    vec2 step = vec2(stepSize / czm_viewport.zw);\\n\\\n#else\\n\\\n    vec2 step = step;\\n\\\n#endif\\n\\\n\\n\\\n    vec3 g;\\n\\\n    g.x = 1.0 / (sqrt(czm_twoPi) * sigma);\\n\\\n    g.y = exp((-0.5 * delta * delta) / (sigma * sigma));\\n\\\n    g.z = g.y * g.y;\\n\\\n\\n\\\n    vec4 result = texture2D(colorTexture, st) * g.x;\\n\\\n    for (int i = 1; i < SAMPLES; ++i)\\n\\\n    {\\n\\\n        g.xy *= g.yz;\\n\\\n\\n\\\n        vec2 offset = float(i) * dir * step;\\n\\\n        result += texture2D(colorTexture, st - offset) * g.x;\\n\\\n        result += texture2D(colorTexture, st + offset) * g.x;\\n\\\n    }\\n\\\n\\n\\\n    gl_FragColor = result;\\n\\\n}\\n\\\n\";\n});","define([\n        '../Core/BoundingRectangle',\n        '../Core/Check',\n        '../Core/Color',\n        '../Core/combine',\n        '../Core/createGuid',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/Math',\n        '../Core/PixelFormat',\n        '../Core/Resource',\n        '../Renderer/PassState',\n        '../Renderer/PixelDatatype',\n        '../Renderer/RenderState',\n        '../Renderer/Sampler',\n        '../Renderer/ShaderSource',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap',\n        '../ThirdParty/when',\n        './PostProcessStageSampleMode'\n    ], function(\n        BoundingRectangle,\n        Check,\n        Color,\n        combine,\n        createGuid,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        CesiumMath,\n        PixelFormat,\n        Resource,\n        PassState,\n        PixelDatatype,\n        RenderState,\n        Sampler,\n        ShaderSource,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap,\n        when,\n        PostProcessStageSampleMode) {\n    'use strict';\n\n    /**\n     * Runs a post-process stage on either the texture rendered by the scene or the output of a previous post-process stage.\n     *\n     * @alias PostProcessStage\n     * @constructor\n     *\n     * @param {Object} options An object with the following properties:\n     * @param {String} options.fragmentShader The fragment shader to use. The default <code>sampler2D</code> uniforms are <code>colorTexture</code> and <code>depthTexture</code>. The color texture is the output of rendering the scene or the previous stage. The depth texture is the output from rendering the scene. The shader should contain one or both uniforms. There is also a <code>vec2</code> varying named <code>v_textureCoordinates</code> that can be used to sample the textures.\n     * @param {Object} [options.uniforms] An object whose properties will be used to set the shaders uniforms. The properties can be constant values or a function. A constant value can also be a URI, data URI, or HTML element to use as a texture.\n     * @param {Number} [options.textureScale=1.0] A number in the range (0.0, 1.0] used to scale the texture dimensions. A scale of 1.0 will render this post-process stage  to a texture the size of the viewport.\n     * @param {Boolean} [options.forcePowerOfTwo=false] Whether or not to force the texture dimensions to be both equal powers of two. The power of two will be the next power of two of the minimum of the dimensions.\n     * @param {PostProcessStageSampleMode} [options.sampleMode=PostProcessStageSampleMode.NEAREST] How to sample the input color texture.\n     * @param {PixelFormat} [options.pixelFormat=PixelFormat.RGBA] The color pixel format of the output texture.\n     * @param {PixelDatatype} [options.pixelDatatype=PixelDatatype.UNSIGNED_BYTE] The pixel data type of the output texture.\n     * @param {Color} [options.clearColor=Color.BLACK] The color to clear the output texture to.\n     * @param {BoundingRectangle} [options.scissorRectangle] The rectangle to use for the scissor test.\n     * @param {String} [options.name=createGuid()] The unique name of this post-process stage for reference by other stages in a composite. If a name is not supplied, a GUID will be generated.\n     *\n     * @exception {DeveloperError} options.textureScale must be greater than 0.0 and less than or equal to 1.0.\n     * @exception {DeveloperError} options.pixelFormat must be a color format.\n     * @exception {DeveloperError} When options.pixelDatatype is FLOAT, this WebGL implementation must support the OES_texture_float extension.  Check context.floatingPointTexture.\n     *\n     * @see PostProcessStageComposite\n     *\n     * @example\n     * // Simple stage to change the color\n     * var fs =\n     *     'uniform sampler2D colorTexture;\\n' +\n     *     'varying vec2 v_textureCoordinates;\\n' +\n     *     'uniform float scale;\\n' +\n     *     'uniform vec3 offset;\\n' +\n     *     'void main() {\\n' +\n     *     '    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n' +\n     *     '    gl_FragColor = vec4(color.rgb * scale + offset, 1.0);\\n' +\n     *     '}\\n';\n     * scene.postProcessStages.add(new Cesium.PostProcessStage({\n     *     fragmentShader : fs,\n     *     uniforms : {\n     *         scale : 1.1,\n     *         offset : function() {\n     *             return new Cesium.Cartesian3(0.1, 0.2, 0.3);\n     *         }\n     *     }\n     * }));\n     *\n     * @example\n     * // Simple stage to change the color of what is selected.\n     * // If czm_selected returns true, the current fragment belongs to geometry in the selected array.\n     * var fs =\n     *     'uniform sampler2D colorTexture;\\n' +\n     *     'varying vec2 v_textureCoordinates;\\n' +\n     *     'uniform vec4 highlight;\\n' +\n     *     'void main() {\\n' +\n     *     '    vec4 color = texture2D(colorTexture, v_textureCoordinates);\\n' +\n     *     '    if (czm_selected()) {\\n' +\n     *     '        vec3 highlighted = highlight.a * highlight.rgb + (1.0 - highlight.a) * color.rgb;\\n' +\n     *     '        gl_FragColor = vec4(highlighted, 1.0);\\n' +\n     *     '    } else { \\n' +\n     *     '        gl_FragColor = color;\\n' +\n     *     '    }\\n' +\n     *     '}\\n';\n     * var stage = scene.postProcessStages.add(new Cesium.PostProcessStage({\n     *     fragmentShader : fs,\n     *     uniforms : {\n     *         highlight : function() {\n     *             return new Cesium.Color(1.0, 0.0, 0.0, 0.5);\n     *         }\n     *     }\n     * }));\n     * stage.selected = [cesium3DTileFeature];\n     */\n    function PostProcessStage(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        var fragmentShader = options.fragmentShader;\n        var textureScale = defaultValue(options.textureScale, 1.0);\n        var pixelFormat = defaultValue(options.pixelFormat, PixelFormat.RGBA);\n\n        \n\n        this._fragmentShader = fragmentShader;\n        this._uniforms = options.uniforms;\n        this._textureScale = textureScale;\n        this._forcePowerOfTwo = defaultValue(options.forcePowerOfTwo, false);\n        this._sampleMode = defaultValue(options.sampleMode, PostProcessStageSampleMode.NEAREST);\n        this._pixelFormat = pixelFormat;\n        this._pixelDatatype = defaultValue(options.pixelDatatype, PixelDatatype.UNSIGNED_BYTE);\n        this._clearColor = defaultValue(options.clearColor, Color.BLACK);\n\n        this._uniformMap = undefined;\n        this._command = undefined;\n\n        this._colorTexture = undefined;\n        this._depthTexture = undefined;\n        this._idTexture = undefined;\n\n        this._actualUniforms = {};\n        this._dirtyUniforms = [];\n        this._texturesToRelease = [];\n        this._texturesToCreate = [];\n        this._texturePromise = undefined;\n\n        var passState = new PassState();\n        passState.scissorTest = {\n            enabled : true,\n            rectangle : defined(options.scissorRectangle) ? BoundingRectangle.clone(options.scissorRectangle) : new BoundingRectangle()\n        };\n        this._passState = passState;\n\n        this._ready = false;\n\n        var name = options.name;\n        if (!defined(name)) {\n            name = createGuid();\n        }\n        this._name = name;\n\n        this._logDepthChanged = undefined;\n        this._useLogDepth = undefined;\n\n        this._selectedIdTexture = undefined;\n        this._selected = undefined;\n        this._selectedShadow = undefined;\n        this._parentSelected = undefined;\n        this._parentSelectedShadow = undefined;\n        this._combinedSelected = undefined;\n        this._combinedSelectedShadow = undefined;\n        this._selectedLength = 0;\n        this._parentSelectedLength = 0;\n        this._selectedDirty = true;\n\n        // set by PostProcessStageCollection\n        this._textureCache = undefined;\n        this._index = undefined;\n\n        /**\n         * Whether or not to execute this post-process stage when ready.\n         *\n         * @type {Boolean}\n         */\n        this.enabled = true;\n        this._enabled = true;\n    }\n\n    defineProperties(PostProcessStage.prototype, {\n        /**\n         * Determines if this post-process stage is ready to be executed. A stage is only executed when both <code>ready</code>\n         * and {@link PostProcessStage#enabled} are <code>true</code>. A stage will not be ready while it is waiting on textures\n         * to load.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        },\n        /**\n         * The unique name of this post-process stage for reference by other stages in a {@link PostProcessStageComposite}.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n        /**\n         * The fragment shader to use when execute this post-process stage.\n         * <p>\n         * The shader must contain a sampler uniform declaration for <code>colorTexture</code>, <code>depthTexture</code>,\n         * or both.\n         * </p>\n         * <p>\n         * The shader must contain a <code>vec2</code> varying declaration for <code>v_textureCoordinates</code> for sampling\n         * the texture uniforms.\n         * </p>\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {String}\n         * @readonly\n         */\n        fragmentShader : {\n            get : function() {\n                return this._fragmentShader;\n            }\n        },\n        /**\n         * An object whose properties are used to set the uniforms of the fragment shader.\n         * <p>\n         * The object property values can be either a constant or a function. The function will be called\n         * each frame before the post-process stage is executed.\n         * </p>\n         * <p>\n         * A constant value can also be a URI to an image, a data URI, or an HTML element that can be used as a texture, such as HTMLImageElement or HTMLCanvasElement.\n         * </p>\n         * <p>\n         * If this post-process stage is part of a {@link PostProcessStageComposite} that does not execute in series, the constant value can also be\n         * the name of another stage in a composite. This will set the uniform to the output texture the stage with that name.\n         * </p>\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Object}\n         * @readonly\n         */\n        uniforms : {\n            get : function() {\n                return this._uniforms;\n            }\n        },\n        /**\n         * A number in the range (0.0, 1.0] used to scale the output texture dimensions. A scale of 1.0 will render this post-process stage to a texture the size of the viewport.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Number}\n         * @readonly\n         */\n        textureScale : {\n            get : function() {\n                return this._textureScale;\n            }\n        },\n        /**\n         * Whether or not to force the output texture dimensions to be both equal powers of two. The power of two will be the next power of two of the minimum of the dimensions.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Number}\n         * @readonly\n         */\n        forcePowerOfTwo : {\n            get : function() {\n                return this._forcePowerOfTwo;\n            }\n        },\n        /**\n         * How to sample the input color texture.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {PostProcessStageSampleMode}\n         * @readonly\n         */\n        sampleMode : {\n            get : function() {\n                return this._sampleMode;\n            }\n        },\n        /**\n         * The color pixel format of the output texture.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {PixelFormat}\n         * @readonly\n         */\n        pixelFormat : {\n            get : function() {\n                return this._pixelFormat;\n            }\n        },\n        /**\n         * The pixel data type of the output texture.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {PixelDatatype}\n         * @readonly\n         */\n        pixelDatatype : {\n            get : function() {\n                return this._pixelDatatype;\n            }\n        },\n        /**\n         * The color to clear the output texture to.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Color}\n         * @readonly\n         */\n        clearColor : {\n            get : function() {\n                return this._clearColor;\n            }\n        },\n        /**\n         * The {@link BoundingRectangle} to use for the scissor test. A default bounding rectangle will disable the scissor test.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {BoundingRectangle}\n         * @readonly\n         */\n        scissorRectangle : {\n            get : function() {\n                return this._passState.scissorTest.rectangle;\n            }\n        },\n        /**\n         * A reference to the texture written to when executing this post process stage.\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Texture}\n         * @readonly\n         * @private\n         */\n        outputTexture : {\n            get : function() {\n                if (defined(this._textureCache)) {\n                    var framebuffer = this._textureCache.getFramebuffer(this._name);\n                    if (defined(framebuffer)) {\n                        return framebuffer.getColorTexture(0);\n                    }\n                }\n                return undefined;\n            }\n        },\n        /**\n         * The features selected for applying the post-process.\n         * <p>\n         * In the fragment shader, use <code>czm_selected</code> to determine whether or not to apply the post-process\n         * stage to that fragment. For example:\n         * <code>\n         * if (czm_selected(v_textureCoordinates)) {\n         *     // apply post-process stage\n         * } else {\n         *     gl_FragColor = texture2D(colorTexture, v_textureCordinates);\n         * }\n         * </code>\n         * </p>\n         *\n         * @memberof PostProcessStage.prototype\n         * @type {Array}\n         */\n        selected : {\n            get : function() {\n                return this._selected;\n            },\n            set : function(value) {\n                this._selected = value;\n            }\n        },\n        /**\n         * @private\n         */\n        parentSelected : {\n            get : function() {\n                return this._parentSelected;\n            },\n            set : function(value) {\n                this._parentSelected = value;\n            }\n        }\n    });\n\n    var depthTextureRegex = /uniform\\s+sampler2D\\s+depthTexture/g;\n\n    /**\n     * @private\n     */\n    PostProcessStage.prototype._isSupported = function(context) {\n        return !depthTextureRegex.test(this._fragmentShader) || context.depthTexture;\n    };\n\n    function getUniformValueGetterAndSetter(stage, uniforms, name) {\n        var currentValue = uniforms[name];\n        if (typeof currentValue === 'string' || currentValue instanceof HTMLCanvasElement || currentValue instanceof HTMLImageElement ||\n            currentValue instanceof HTMLVideoElement || currentValue instanceof ImageData) {\n            stage._dirtyUniforms.push(name);\n        }\n\n        return {\n            get : function() {\n                return uniforms[name];\n            },\n            set : function(value) {\n                var currentValue = uniforms[name];\n                uniforms[name] = value;\n\n                var actualUniforms = stage._actualUniforms;\n                var actualValue = actualUniforms[name];\n                if (defined(actualValue) && actualValue !== currentValue && actualValue instanceof Texture && !defined(stage._textureCache.getStageByName(name))) {\n                    stage._texturesToRelease.push(actualValue);\n                    delete actualUniforms[name];\n                    delete actualUniforms[name + 'Dimensions'];\n                }\n\n                if (currentValue instanceof Texture) {\n                    stage._texturesToRelease.push(currentValue);\n                }\n\n                if (typeof value === 'string' || value instanceof HTMLCanvasElement || value instanceof HTMLImageElement ||\n                    value instanceof HTMLVideoElement || value instanceof ImageData) {\n                    stage._dirtyUniforms.push(name);\n                } else {\n                    actualUniforms[name] = value;\n                }\n            }\n        };\n    }\n\n    function getUniformMapFunction(stage, name) {\n        return function() {\n            var value = stage._actualUniforms[name];\n            if (typeof value === 'function') {\n                return value();\n            }\n            return value;\n        };\n    }\n\n    function getUniformMapDimensionsFunction(uniformMap, name) {\n        return function() {\n            var texture = uniformMap[name]();\n            if (defined(texture)) {\n                return texture.dimensions;\n            }\n            return undefined;\n        };\n    }\n\n    function createUniformMap(stage) {\n        if (defined(stage._uniformMap)) {\n            return;\n        }\n\n        var uniformMap = {};\n        var newUniforms = {};\n        var uniforms = stage._uniforms;\n        var actualUniforms = stage._actualUniforms;\n        for (var name in uniforms) {\n            if (uniforms.hasOwnProperty(name)) {\n                if (typeof uniforms[name] !== 'function') {\n                    uniformMap[name] = getUniformMapFunction(stage, name);\n                    newUniforms[name] = getUniformValueGetterAndSetter(stage, uniforms, name);\n                } else {\n                    uniformMap[name] = uniforms[name];\n                    newUniforms[name] = uniforms[name];\n                }\n\n                actualUniforms[name] = uniforms[name];\n\n                var value = uniformMap[name]();\n                if (typeof value === 'string' || value instanceof Texture || value instanceof HTMLImageElement ||\n                    value instanceof HTMLCanvasElement || value instanceof HTMLVideoElement) {\n                    uniformMap[name + 'Dimensions'] = getUniformMapDimensionsFunction(uniformMap, name);\n                }\n            }\n        }\n\n        stage._uniforms = {};\n        defineProperties(stage._uniforms, newUniforms);\n\n        stage._uniformMap = combine(uniformMap, {\n            colorTexture : function() {\n                return stage._colorTexture;\n            },\n            colorTextureDimensions : function() {\n                return stage._colorTexture.dimensions;\n            },\n            depthTexture : function() {\n                return stage._depthTexture;\n            },\n            depthTextureDimensions : function() {\n                return stage._depthTexture.dimensions;\n            },\n            czm_idTexture : function() {\n                return stage._idTexture;\n            },\n            czm_selectedIdTexture : function() {\n                return stage._selectedIdTexture;\n            },\n            czm_selectedIdTextureStep : function() {\n                return 1.0 / stage._selectedIdTexture.width;\n            }\n        });\n    }\n\n    function createDrawCommand(stage, context) {\n        if (defined(stage._command) && !stage._logDepthChanged && !stage._selectedDirty) {\n            return;\n        }\n\n        var fs = stage._fragmentShader;\n        if (defined(stage._selectedIdTexture)) {\n            var width = stage._selectedIdTexture.width;\n\n            fs = fs.replace(/varying\\s+vec2\\s+v_textureCoordinates;/g, '');\n            fs =\n                '#define CZM_SELECTED_FEATURE \\n' +\n                'uniform sampler2D czm_idTexture; \\n' +\n                'uniform sampler2D czm_selectedIdTexture; \\n' +\n                'uniform float czm_selectedIdTextureStep; \\n' +\n                'varying vec2 v_textureCoordinates; \\n' +\n                'bool czm_selected(vec2 offset) \\n' +\n                '{ \\n' +\n                '    bool selected = false;\\n' +\n                '    vec4 id = texture2D(czm_idTexture, v_textureCoordinates + offset); \\n' +\n                '    for (int i = 0; i < ' + width + '; ++i) \\n' +\n                '    { \\n' +\n                '        vec4 selectedId = texture2D(czm_selectedIdTexture, vec2(float(i) * czm_selectedIdTextureStep, 0.5)); \\n' +\n                '        if (all(equal(id, selectedId))) \\n' +\n                '        { \\n' +\n                '            return true; \\n' +\n                '        } \\n' +\n                '    } \\n' +\n                '    return false; \\n' +\n                '} \\n\\n' +\n                'bool czm_selected() \\n' +\n                '{ \\n' +\n                '    return czm_selected(vec2(0.0)); \\n' +\n                '} \\n\\n' +\n                fs;\n        }\n\n        var fragmentShader = new ShaderSource({\n            defines : [stage._useLogDepth ? 'LOG_DEPTH' : ''],\n            sources : [fs]\n        });\n        stage._command = context.createViewportQuadCommand(fragmentShader, {\n            uniformMap : stage._uniformMap,\n            owner : stage\n        });\n    }\n\n    function createSampler(stage) {\n        var mode = stage._sampleMode;\n\n        var minFilter;\n        var magFilter;\n\n        if (mode === PostProcessStageSampleMode.LINEAR) {\n            minFilter = TextureMinificationFilter.LINEAR;\n            magFilter = TextureMagnificationFilter.LINEAR;\n        } else {\n            minFilter = TextureMinificationFilter.NEAREST;\n            magFilter = TextureMagnificationFilter.NEAREST;\n        }\n\n        var sampler = stage._sampler;\n        if (!defined(sampler) || sampler.minificationFilter !== minFilter || sampler.magnificationFilter !== magFilter) {\n            stage._sampler = new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : minFilter,\n                magnificationFilter : magFilter\n            });\n        }\n    }\n\n    function createLoadImageFunction(stage, name) {\n        return function(image) {\n            stage._texturesToCreate.push({\n                name : name,\n                source : image\n            });\n        };\n    }\n\n    function createStageOutputTextureFunction(stage, name) {\n        return function() {\n            return stage._textureCache.getOutputTexture(name);\n        };\n    }\n\n    function updateUniformTextures(stage, context) {\n        var i;\n        var texture;\n        var name;\n\n        var texturesToRelease = stage._texturesToRelease;\n        var length = texturesToRelease.length;\n        for (i = 0; i < length; ++i) {\n            texture = texturesToRelease[i];\n            texture = texture && texture.destroy();\n        }\n        texturesToRelease.length = 0;\n\n        var texturesToCreate = stage._texturesToCreate;\n        length = texturesToCreate.length;\n        for (i = 0; i < length; ++i) {\n            var textureToCreate = texturesToCreate[i];\n            name = textureToCreate.name;\n            var source = textureToCreate.source;\n            stage._actualUniforms[name] = new Texture({\n                context : context,\n                source : source\n            });\n        }\n        texturesToCreate.length = 0;\n\n        var dirtyUniforms = stage._dirtyUniforms;\n        if (dirtyUniforms.length === 0 && !defined(stage._texturePromise)) {\n            stage._ready = true;\n            return;\n        }\n\n        if (dirtyUniforms.length === 0 || defined(stage._texturePromise)) {\n            return;\n        }\n\n        length = dirtyUniforms.length;\n        var uniforms = stage._uniforms;\n        var promises = [];\n        for (i = 0; i < length; ++i) {\n            name = dirtyUniforms[i];\n            var stageNameUrlOrImage = uniforms[name];\n            var stageWithName = stage._textureCache.getStageByName(stageNameUrlOrImage);\n            if (defined(stageWithName)) {\n                stage._actualUniforms[name] = createStageOutputTextureFunction(stage, stageNameUrlOrImage);\n            } else if (typeof stageNameUrlOrImage === 'string') {\n                var resource = new Resource({\n                    url : stageNameUrlOrImage\n                });\n\n                promises.push(resource.fetchImage().then(createLoadImageFunction(stage, name)));\n            } else {\n                stage._texturesToCreate.push({\n                    name : name,\n                    source : stageNameUrlOrImage\n                });\n            }\n        }\n\n        dirtyUniforms.length = 0;\n\n        if (promises.length > 0) {\n            stage._ready = false;\n            stage._texturePromise = when.all(promises).then(function() {\n                stage._ready = true;\n                stage._texturePromise = undefined;\n            });\n        } else {\n            stage._ready = true;\n        }\n    }\n\n    function releaseResources(stage) {\n        if (defined(stage._command)) {\n            stage._command.shaderProgram = stage._command.shaderProgram && stage._command.shaderProgram.destroy();\n            stage._command = undefined;\n        }\n\n        stage._selectedIdTexture = stage._selectedIdTexture && stage._selectedIdTexture.destroy();\n\n        var textureCache = stage._textureCache;\n        if (!defined(textureCache)) {\n            return;\n        }\n\n        var uniforms = stage._uniforms;\n        var actualUniforms = stage._actualUniforms;\n        for (var name in actualUniforms) {\n            if (actualUniforms.hasOwnProperty(name)) {\n                if (actualUniforms[name] instanceof Texture) {\n                    if (!defined(textureCache.getStageByName(uniforms[name]))) {\n                        actualUniforms[name].destroy();\n                    }\n                    stage._dirtyUniforms.push(name);\n                }\n            }\n        }\n    }\n\n    function isSelectedTextureDirty(stage) {\n        var length = defined(stage._selected) ? stage._selected.length : 0;\n        var parentLength = defined(stage._parentSelected) ? stage._parentSelected : 0;\n        var dirty = stage._selected !== stage._selectedShadow || length !== stage._selectedLength;\n        dirty = dirty || stage._parentSelected !== stage._parentSelectedShadow || parentLength !== stage._parentSelectedLength;\n\n        if (defined(stage._selected) && defined(stage._parentSelected)) {\n            stage._combinedSelected = stage._selected.concat(stage._parentSelected);\n        } else if (defined(stage._parentSelected)) {\n            stage._combinedSelected = stage._parentSelected;\n        } else {\n            stage._combinedSelected = stage._selected;\n        }\n\n        if (!dirty && defined(stage._combinedSelected)) {\n            if (!defined(stage._combinedSelectedShadow)) {\n                return true;\n            }\n\n            length = stage._combinedSelected.length;\n            for (var i = 0; i < length; ++i) {\n                if (stage._combinedSelected[i] !== stage._combinedSelectedShadow[i]) {\n                    return true;\n                }\n            }\n        }\n        return dirty;\n    }\n\n    function createSelectedTexture(stage, context) {\n        if (!stage._selectedDirty) {\n            return;\n        }\n\n        stage._selectedIdTexture = stage._selectedIdTexture && stage._selectedIdTexture.destroy();\n        stage._selectedIdTexture = undefined;\n\n        var features = stage._combinedSelected;\n        if (!defined(features)) {\n            return;\n        }\n\n        var i;\n        var feature;\n\n        var textureLength = 0;\n        var length = features.length;\n        for (i = 0; i < length; ++i) {\n            feature = features[i];\n            if (defined(feature.pickIds)) {\n                textureLength += feature.pickIds.length;\n            } else if (defined(feature.pickId)) {\n                ++textureLength;\n            }\n        }\n\n        if (length === 0 || textureLength === 0) {\n            // max pick id is reserved\n            var empty = new Uint8Array(4);\n            empty[0] = 255;\n            empty[1] = 255;\n            empty[2] = 255;\n            empty[3] = 255;\n\n            stage._selectedIdTexture = new Texture({\n                context : context,\n                pixelFormat : PixelFormat.RGBA,\n                pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n                source : {\n                    arrayBufferView : empty,\n                    width : 1,\n                    height : 1\n                },\n                sampler : new Sampler({\n                    wrapS : TextureWrap.CLAMP_TO_EDGE,\n                    wrapT : TextureWrap.CLAMP_TO_EDGE,\n                    minificationFilter : TextureMinificationFilter.NEAREST,\n                    magnificationFilter : TextureMagnificationFilter.NEAREST\n                })\n            });\n            return;\n        }\n\n        var pickColor;\n        var offset = 0;\n        var ids = new Uint8Array(textureLength * 4);\n        for (i = 0; i < length; ++i) {\n            feature = features[i];\n            if (defined(feature.pickIds)) {\n                var pickIds = feature.pickIds;\n                var pickIdsLength = pickIds.length;\n                for (var j = 0; j < pickIdsLength; ++j) {\n                    pickColor = pickIds[j].color;\n                    ids[offset] = Color.floatToByte(pickColor.red);\n                    ids[offset + 1] = Color.floatToByte(pickColor.green);\n                    ids[offset + 2] = Color.floatToByte(pickColor.blue);\n                    ids[offset + 3] = Color.floatToByte(pickColor.alpha);\n                    offset += 4;\n                }\n            } else if (defined(feature.pickId)) {\n                pickColor = feature.pickId.color;\n                ids[offset] = Color.floatToByte(pickColor.red);\n                ids[offset + 1] = Color.floatToByte(pickColor.green);\n                ids[offset + 2] = Color.floatToByte(pickColor.blue);\n                ids[offset + 3] = Color.floatToByte(pickColor.alpha);\n                offset += 4;\n            }\n        }\n\n        stage._selectedIdTexture = new Texture({\n            context : context,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            source : {\n                arrayBufferView : ids,\n                width : textureLength,\n                height : 1\n            },\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n    }\n\n    /**\n     * A function that will be called before execute. Used to create WebGL resources and load any textures.\n     * @param {Context} context The context.\n     * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n     * @private\n     */\n    PostProcessStage.prototype.update = function(context, useLogDepth) {\n        if (this.enabled !== this._enabled && !this.enabled) {\n            releaseResources(this);\n        }\n\n        this._enabled = this.enabled;\n        if (!this._enabled) {\n            return;\n        }\n\n        this._logDepthChanged = useLogDepth !== this._useLogDepth;\n        this._useLogDepth = useLogDepth;\n\n        this._selectedDirty = isSelectedTextureDirty(this);\n\n        this._selectedShadow = this._selected;\n        this._parentSelectedShadow = this._parentSelected;\n        this._combinedSelectedShadow = this._combinedSelected;\n        this._selectedLength = defined(this._selected) ? this._selected.length : 0;\n        this._parentSelectedLength = defined(this._parentSelected) ? this._parentSelected.length : 0;\n\n        createSelectedTexture(this, context);\n        createUniformMap(this);\n        updateUniformTextures(this, context);\n        createDrawCommand(this, context);\n        createSampler(this);\n\n        this._selectedDirty = false;\n\n        if (!this._ready) {\n            return;\n        }\n\n        var framebuffer = this._textureCache.getFramebuffer(this._name);\n        this._command.framebuffer = framebuffer;\n\n        if (!defined(framebuffer)) {\n            return;\n        }\n\n        var colorTexture = framebuffer.getColorTexture(0);\n        var renderState;\n        if (colorTexture.width !== context.drawingBufferWidth || colorTexture.height !== context.drawingBufferHeight) {\n            renderState = this._renderState;\n            if (!defined(renderState) || colorTexture.width !== renderState.viewport.width || colorTexture.height !== renderState.viewport.height) {\n                this._renderState = RenderState.fromCache({\n                    viewport : new BoundingRectangle(0, 0, colorTexture.width, colorTexture.height)\n                });\n            }\n        }\n\n        this._command.renderState = renderState;\n    };\n\n    /**\n     * Executes the post-process stage. The color texture is the texture rendered to by the scene or from the previous stage.\n     * @param {Context} context The context.\n     * @param {Texture} colorTexture The input color texture.\n     * @param {Texture} depthTexture The input depth texture.\n     * @param {Texture} idTexture The id texture.\n     * @private\n     */\n    PostProcessStage.prototype.execute = function(context, colorTexture, depthTexture, idTexture) {\n        if (!defined(this._command) || !defined(this._command.framebuffer) || !this._ready || !this._enabled) {\n            return;\n        }\n\n        this._colorTexture = colorTexture;\n        this._depthTexture = depthTexture;\n        this._idTexture = idTexture;\n\n        if (!Sampler.equals(this._colorTexture.sampler, this._sampler)) {\n            this._colorTexture.sampler = this._sampler;\n        }\n\n        var passState = this.scissorRectangle.width > 0 && this.scissorRectangle.height > 0 ? this._passState : undefined;\n        if (defined(passState)) {\n            passState.context = context;\n        }\n\n        this._command.execute(context, passState);\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see PostProcessStage#destroy\n     */\n    PostProcessStage.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PostProcessStage#isDestroyed\n     */\n    PostProcessStage.prototype.destroy = function() {\n        releaseResources(this);\n        return destroyObject(this);\n    };\n\n    return PostProcessStage;\n});\n","define([\n        '../Core/Check',\n        '../Core/createGuid',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject'\n    ], function(\n        Check,\n        createGuid,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject) {\n    'use strict';\n\n    /**\n     * A collection of {@link PostProcessStage}s or other post-process composite stages that execute together logically.\n     * <p>\n     * All stages are executed in the order of the array. The input texture changes based on the value of <code>inputPreviousStageTexture</code>.\n     * If <code>inputPreviousStageTexture</code> is <code>true</code>, the input to each stage is the output texture rendered to by the scene or of the stage that executed before it.\n     * If <code>inputPreviousStageTexture</code> is <code>false</code>, the input texture is the same for each stage in the composite. The input texture is the texture rendered to by the scene\n     * or the output texture of the previous stage.\n     * </p>\n     *\n     * @alias PostProcessStageComposite\n     * @constructor\n     *\n     * @param {Object} options An object with the following properties:\n     * @param {Array} options.stages An array of {@link PostProcessStage}s or composites to be executed in order.\n     * @param {Boolean} [options.inputPreviousStageTexture=true] Whether to execute each post-process stage where the input to one stage is the output of the previous. Otherwise, the input to each contained stage is the output of the stage that executed before the composite.\n     * @param {String} [options.name=createGuid()] The unique name of this post-process stage for reference by other composites. If a name is not supplied, a GUID will be generated.\n     * @param {Object} [options.uniforms] An alias to the uniforms of post-process stages.\n     *\n     * @exception {DeveloperError} options.stages.length must be greater than 0.0.\n     *\n     * @see PostProcessStage\n     *\n     * @example\n     * // Example 1: separable blur filter\n     * // The input to blurXDirection is the texture rendered to by the scene or the output of the previous stage.\n     * // The input to blurYDirection is the texture rendered to by blurXDirection.\n     * scene.postProcessStages.add(new Cesium.PostProcessStageComposite({\n     *     stages : [blurXDirection, blurYDirection]\n     * }));\n     *\n     * @example\n     * // Example 2: referencing the output of another post-process stage\n     * scene.postProcessStages.add(new Cesium.PostProcessStageComposite({\n     *     inputPreviousStageTexture : false,\n     *     stages : [\n     *         // The same as Example 1.\n     *         new Cesium.PostProcessStageComposite({\n     *             inputPreviousStageTexture : true\n     *             stages : [blurXDirection, blurYDirection],\n     *             name : 'blur'\n     *         }),\n     *         // The input texture for this stage is the same input texture to blurXDirection since inputPreviousStageTexture is false\n     *         new Cesium.PostProcessStage({\n     *             fragmentShader : compositeShader,\n     *             uniforms : {\n     *                 blurTexture : 'blur' // The output of the composite with name 'blur' (the texture that blurYDirection rendered to).\n     *             }\n     *         })\n     *     ]\n     * });\n     *\n     * @example\n     * // Example 3: create a uniform alias\n     * var uniforms = {};\n     * Cesium.defineProperties(uniforms, {\n     *     filterSize : {\n     *         get : function() {\n     *             return blurXDirection.uniforms.filterSize;\n     *         },\n     *         set : function(value) {\n     *             blurXDirection.uniforms.filterSize = blurYDirection.uniforms.filterSize = value;\n     *         }\n     *     }\n     * });\n     * scene.postProcessStages.add(new Cesium.PostProcessStageComposite({\n     *     stages : [blurXDirection, blurYDirection],\n     *     uniforms : uniforms\n     * }));\n     */\n    function PostProcessStageComposite(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n        \n\n        this._stages = options.stages;\n        this._inputPreviousStageTexture = defaultValue(options.inputPreviousStageTexture, true);\n\n        var name = options.name;\n        if (!defined(name)) {\n            name = createGuid();\n        }\n        this._name = name;\n\n        this._uniforms = options.uniforms;\n\n        // used by PostProcessStageCollection\n        this._textureCache = undefined;\n        this._index = undefined;\n\n        this._selected = undefined;\n        this._selectedShadow = undefined;\n        this._parentSelected = undefined;\n        this._parentSelectedShadow = undefined;\n        this._combinedSelected = undefined;\n        this._combinedSelectedShadow = undefined;\n        this._selectedLength = 0;\n        this._parentSelectedLength = 0;\n        this._selectedDirty = true;\n    }\n\n    defineProperties(PostProcessStageComposite.prototype, {\n        /**\n         * Determines if this post-process stage is ready to be executed.\n         *\n         * @memberof PostProcessStageComposite.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        ready : {\n            get : function() {\n                var stages = this._stages;\n                var length = stages.length;\n                for (var i = 0; i < length; ++i) {\n                    if (!stages[i].ready) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        },\n        /**\n         * The unique name of this post-process stage for reference by other stages in a PostProcessStageComposite.\n         *\n         * @memberof PostProcessStageComposite.prototype\n         * @type {String}\n         * @readonly\n         */\n        name : {\n            get : function() {\n                return this._name;\n            }\n        },\n        /**\n         * Whether or not to execute this post-process stage when ready.\n         *\n         * @memberof PostProcessStageComposite.prototype\n         * @type {Boolean}\n         */\n        enabled : {\n            get : function() {\n                return this._stages[0].enabled;\n            },\n            set : function(value) {\n                var stages = this._stages;\n                var length = stages.length;\n                for (var i = 0; i < length; ++i) {\n                    stages[i].enabled = value;\n                }\n            }\n        },\n        /**\n         * An alias to the uniform values of the post-process stages. May be <code>undefined</code>; in which case, get each stage to set uniform values.\n         * @memberof PostProcessStageComposite.prototype\n         * @type {Object}\n         */\n        uniforms : {\n            get : function() {\n                return this._uniforms;\n            }\n        },\n        /**\n         * All post-process stages are executed in the order of the array. The input texture changes based on the value of <code>inputPreviousStageTexture</code>.\n         * If <code>inputPreviousStageTexture</code> is <code>true</code>, the input to each stage is the output texture rendered to by the scene or of the stage that executed before it.\n         * If <code>inputPreviousStageTexture</code> is <code>false</code>, the input texture is the same for each stage in the composite. The input texture is the texture rendered to by the scene\n         * or the output texture of the previous stage.\n         *\n         * @memberof PostProcessStageComposite.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        inputPreviousStageTexture : {\n            get : function() {\n                return this._inputPreviousStageTexture;\n            }\n        },\n        /**\n         * The number of post-process stages in this composite.\n         *\n         * @memberof PostProcessStageComposite.prototype\n         * @type {Number}\n         * @readonly\n         */\n        length : {\n            get : function() {\n                return this._stages.length;\n            }\n        },\n        /**\n         * The features selected for applying the post-process.\n         *\n         * @memberof PostProcessStageComposite.prototype\n         * @type {Array}\n         */\n        selected : {\n            get : function() {\n                return this._selected;\n            },\n            set : function(value) {\n                this._selected = value;\n            }\n        },\n        /**\n         * @private\n         */\n        parentSelected : {\n            get : function() {\n                return this._parentSelected;\n            },\n            set : function(value) {\n                this._parentSelected = value;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    PostProcessStageComposite.prototype._isSupported = function(context) {\n        var stages = this._stages;\n        var length = stages.length;\n        for (var i = 0; i < length; ++i) {\n            if (!stages[i]._isSupported(context)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Gets the post-process stage at <code>index</code>\n     *\n     * @param {Number} index The index of the post-process stage or composite.\n     * @return {PostProcessStage|PostProcessStageComposite} The post-process stage or composite at index.\n     *\n     * @exception {DeveloperError} index must be greater than or equal to 0.\n     * @exception {DeveloperError} index must be less than {@link PostProcessStageComposite#length}.\n     */\n    PostProcessStageComposite.prototype.get = function(index) {\n        \n        return this._stages[index];\n    };\n\n    function isSelectedTextureDirty(stage) {\n        var length = defined(stage._selected) ? stage._selected.length : 0;\n        var parentLength = defined(stage._parentSelected) ? stage._parentSelected : 0;\n        var dirty = stage._selected !== stage._selectedShadow || length !== stage._selectedLength;\n        dirty = dirty || stage._parentSelected !== stage._parentSelectedShadow || parentLength !== stage._parentSelectedLength;\n\n        if (defined(stage._selected) && defined(stage._parentSelected)) {\n            stage._combinedSelected = stage._selected.concat(stage._parentSelected);\n        } else if (defined(stage._parentSelected)) {\n            stage._combinedSelected = stage._parentSelected;\n        } else {\n            stage._combinedSelected = stage._selected;\n        }\n\n        if (!dirty && defined(stage._combinedSelected)) {\n            if (!defined(stage._combinedSelectedShadow)) {\n                return true;\n            }\n\n            length = stage._combinedSelected.length;\n            for (var i = 0; i < length; ++i) {\n                if (stage._combinedSelected[i] !== stage._combinedSelectedShadow[i]) {\n                    return true;\n                }\n            }\n        }\n        return dirty;\n    }\n\n    /**\n     * A function that will be called before execute. Updates each post-process stage in the composite.\n     * @param {Context} context The context.\n     * @param {Boolean} useLogDepth Whether the scene uses a logarithmic depth buffer.\n     * @private\n     */\n    PostProcessStageComposite.prototype.update = function(context, useLogDepth) {\n        this._selectedDirty = isSelectedTextureDirty(this);\n\n        this._selectedShadow = this._selected;\n        this._parentSelectedShadow = this._parentSelected;\n        this._combinedSelectedShadow = this._combinedSelected;\n        this._selectedLength = defined(this._selected) ? this._selected.length : 0;\n        this._parentSelectedLength = defined(this._parentSelected) ? this._parentSelected.length : 0;\n\n        var stages = this._stages;\n        var length = stages.length;\n        for (var i = 0; i < length; ++i) {\n            var stage = stages[i];\n            if (this._selectedDirty) {\n                stage.parentSelected = this._combinedSelected;\n            }\n            stage.update(context, useLogDepth);\n        }\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see PostProcessStageComposite#destroy\n     */\n    PostProcessStageComposite.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PostProcessStageComposite#isDestroyed\n     */\n    PostProcessStageComposite.prototype.destroy = function() {\n        var stages = this._stages;\n        var length = stages.length;\n        for (var i = 0; i < length; ++i) {\n            stages[i].destroy();\n        }\n        return destroyObject(this);\n    };\n\n    return PostProcessStageComposite;\n});\n","define([\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/Math',\n        '../Core/destroyObject',\n        '../Renderer/ClearCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/Texture'\n    ], function(\n        Color,\n        defined,\n        CesiumMath,\n        destroyObject,\n        ClearCommand,\n        Framebuffer,\n        Texture) {\n    'use strict';\n\n    /**\n     * Creates a minimal amount of textures and framebuffers.\n     *\n     * @alias PostProcessStageTextureCache\n     * @constructor\n     *\n     * @param {PostProcessStageCollection} postProcessStageCollection The post process collection.\n     *\n     * @private\n     */\n    function PostProcessStageTextureCache(postProcessStageCollection) {\n        this._collection = postProcessStageCollection;\n\n        this._framebuffers = [];\n        this._stageNameToFramebuffer = {};\n\n        this._width = undefined;\n        this._height = undefined;\n        this._updateDependencies = false;\n    }\n\n    function getLastStageName(stage) {\n        while (defined(stage.length)) {\n            stage = stage.get(stage.length - 1);\n        }\n        return stage.name;\n    }\n\n    function getStageDependencies(collection, context, dependencies, stage, previousName) {\n        if (!stage.enabled || !stage._isSupported(context)) {\n            return previousName;\n        }\n\n        var stageDependencies = dependencies[stage.name] = {};\n        if (defined(previousName)) {\n            var previous = collection.getStageByName(previousName);\n            stageDependencies[getLastStageName(previous)] = true;\n        }\n        var uniforms = stage.uniforms;\n        if (defined(uniforms)) {\n            var uniformNames = Object.getOwnPropertyNames(uniforms);\n            var uniformNamesLength = uniformNames.length;\n            for (var i = 0; i < uniformNamesLength; ++i) {\n                var value = uniforms[uniformNames[i]];\n                if (typeof value === 'string') {\n                    var dependent = collection.getStageByName(value);\n                    if (defined(dependent)) {\n                        stageDependencies[getLastStageName(dependent)] = true;\n                    }\n                }\n            }\n        }\n\n        return stage.name;\n    }\n\n    function getCompositeDependencies(collection, context, dependencies, composite, previousName) {\n        if ((defined(composite.enabled) && !composite.enabled) || (defined(composite._isSupported) && !composite._isSupported(context))) {\n            return previousName;\n        }\n\n        var originalDependency = previousName;\n\n        var inSeries = !defined(composite.inputPreviousStageTexture) || composite.inputPreviousStageTexture;\n        var currentName = previousName;\n        var length = composite.length;\n        for (var i = 0; i < length; ++i) {\n            var stage = composite.get(i);\n            if (defined(stage.length)) {\n                currentName = getCompositeDependencies(collection, context, dependencies, stage, previousName);\n            } else {\n                currentName = getStageDependencies(collection, context, dependencies, stage, previousName);\n            }\n            // Stages in a series only depend on the previous stage\n            if (inSeries) {\n                previousName = currentName;\n            }\n        }\n\n        // Stages not in a series depend on every stage executed before it since it could reference it as a uniform.\n        // This prevents looking at the dependencies of each stage in the composite, but might create more framebuffers than necessary.\n        // In practice, there are only 2-3 stages in these composites.\n        var j;\n        var name;\n        if (!inSeries) {\n            for (j = 1; j < length; ++j) {\n                name = getLastStageName(composite.get(j));\n                var currentDependencies = dependencies[name];\n                for (var k = 0; k < j; ++k) {\n                    currentDependencies[getLastStageName(composite.get(k))] = true;\n                }\n            }\n        } else {\n            for (j = 1; j < length; ++j) {\n                name = getLastStageName(composite.get(j));\n                if (!defined(dependencies[name])) {\n                    dependencies[name] = {};\n                }\n                dependencies[name][originalDependency] = true;\n            }\n        }\n\n        return currentName;\n    }\n\n    function getDependencies(collection, context) {\n        var dependencies = {};\n\n        if (defined(collection.ambientOcclusion)) {\n            var ao = collection.ambientOcclusion;\n            var bloom = collection.bloom;\n            var tonemapping = collection._tonemapping;\n            var fxaa = collection.fxaa;\n\n            var previousName = getCompositeDependencies(collection, context, dependencies, ao, undefined);\n            previousName = getCompositeDependencies(collection, context, dependencies, bloom, previousName);\n            previousName = getStageDependencies(collection, context, dependencies, tonemapping, previousName);\n            previousName = getCompositeDependencies(collection, context, dependencies, collection, previousName);\n            getStageDependencies(collection, context, dependencies, fxaa, previousName);\n        } else {\n            getCompositeDependencies(collection, context, dependencies, collection, undefined);\n        }\n\n        return dependencies;\n    }\n\n    function getFramebuffer(cache, stageName, dependencies) {\n        var collection = cache._collection;\n        var stage = collection.getStageByName(stageName);\n\n        var textureScale = stage._textureScale;\n        var forcePowerOfTwo = stage._forcePowerOfTwo;\n        var pixelFormat = stage._pixelFormat;\n        var pixelDatatype = stage._pixelDatatype;\n        var clearColor = stage._clearColor;\n\n        var i;\n        var framebuffer;\n        var framebuffers = cache._framebuffers;\n        var length = framebuffers.length;\n        for (i = 0; i < length; ++i) {\n            framebuffer = framebuffers[i];\n\n            if (textureScale !== framebuffer.textureScale || forcePowerOfTwo !== framebuffer.forcePowerOfTwo ||\n                pixelFormat !== framebuffer.pixelFormat || pixelDatatype !== framebuffer.pixelDatatype ||\n                !Color.equals(clearColor, framebuffer.clearColor)) {\n                continue;\n            }\n\n            var stageNames = framebuffer.stages;\n            var stagesLength = stageNames.length;\n            var foundConflict = false;\n            for (var j = 0; j < stagesLength; ++j) {\n                if (dependencies[stageNames[j]]) {\n                    foundConflict = true;\n                    break;\n                }\n            }\n\n            if (!foundConflict) {\n                break;\n            }\n        }\n\n        if (defined(framebuffer) && i < length) {\n            framebuffer.stages.push(stageName);\n            return framebuffer;\n        }\n\n        framebuffer = {\n            textureScale : textureScale,\n            forcePowerOfTwo : forcePowerOfTwo,\n            pixelFormat : pixelFormat,\n            pixelDatatype : pixelDatatype,\n            clearColor : clearColor,\n            stages : [stageName],\n            buffer : undefined,\n            clear : undefined\n        };\n\n        framebuffers.push(framebuffer);\n        return framebuffer;\n    }\n\n    function createFramebuffers(cache, context) {\n        var dependencies = getDependencies(cache._collection, context);\n        for (var stageName in dependencies) {\n            if (dependencies.hasOwnProperty(stageName)) {\n                cache._stageNameToFramebuffer[stageName] = getFramebuffer(cache, stageName, dependencies[stageName]);\n            }\n        }\n    }\n\n    function releaseResources(cache) {\n        var framebuffers = cache._framebuffers;\n        var length = framebuffers.length;\n        for (var i = 0; i < length; ++i) {\n            var framebuffer = framebuffers[i];\n            framebuffer.buffer = framebuffer.buffer && framebuffer.buffer.destroy();\n            framebuffer.buffer = undefined;\n        }\n    }\n\n    function updateFramebuffers(cache, context) {\n        var width = cache._width;\n        var height = cache._height;\n\n        var framebuffers = cache._framebuffers;\n        var length = framebuffers.length;\n        for (var i = 0; i < length; ++i) {\n            var framebuffer = framebuffers[i];\n\n            var scale = framebuffer.textureScale;\n            var textureWidth = Math.ceil(width * scale);\n            var textureHeight = Math.ceil(height * scale);\n\n            var size = Math.min(textureWidth, textureHeight);\n            if (framebuffer.forcePowerOfTwo) {\n                if (!CesiumMath.isPowerOfTwo(size)) {\n                    size = CesiumMath.nextPowerOfTwo(size);\n                }\n                textureWidth = size;\n                textureHeight = size;\n            }\n\n            framebuffer.buffer = new Framebuffer({\n                context : context,\n                colorTextures : [new Texture({\n                    context : context,\n                    width : textureWidth,\n                    height : textureHeight,\n                    pixelFormat : framebuffer.pixelFormat,\n                    pixelDatatype : framebuffer.pixelDatatype\n                })]\n            });\n            framebuffer.clear = new ClearCommand({\n                color : framebuffer.clearColor,\n                framebuffer : framebuffer.buffer\n            });\n        }\n    }\n\n    PostProcessStageTextureCache.prototype.updateDependencies = function() {\n        this._updateDependencies = true;\n    };\n\n    /**\n     * Called before the stages in the collection are executed. Creates the minimum amount of framebuffers for a post-process collection.\n     *\n     * @param {Context} context The context.\n     */\n    PostProcessStageTextureCache.prototype.update = function(context) {\n        var collection = this._collection;\n        var updateDependencies = this._updateDependencies;\n        var aoEnabled = defined(collection.ambientOcclusion) && collection.ambientOcclusion.enabled && collection.ambientOcclusion._isSupported(context);\n        var bloomEnabled = defined(collection.bloom) && collection.bloom.enabled && collection.bloom._isSupported(context);\n        var tonemappingEnabled = defined(collection._tonemapping) && collection._tonemapping.enabled && collection._tonemapping._isSupported(context);\n        var fxaaEnabled = defined(collection.fxaa) && collection.fxaa.enabled && collection.fxaa._isSupported(context);\n        var needsCheckDimensionsUpdate = !defined(collection._activeStages) || collection._activeStages.length > 0 || aoEnabled || bloomEnabled || tonemappingEnabled || fxaaEnabled;\n        if (updateDependencies || (!needsCheckDimensionsUpdate && this._framebuffers.length > 0)) {\n            releaseResources(this);\n            this._framebuffers.length = 0;\n            this._stageNameToFramebuffer = {};\n            this._width = undefined;\n            this._height = undefined;\n        }\n\n        if (!updateDependencies && !needsCheckDimensionsUpdate) {\n            return;\n        }\n\n        if (this._framebuffers.length === 0) {\n            createFramebuffers(this, context);\n        }\n\n        var width = context.drawingBufferWidth;\n        var height = context.drawingBufferHeight;\n        var dimensionsChanged = this._width !== width || this._height !== height;\n        if (!updateDependencies && !dimensionsChanged) {\n            return;\n        }\n\n        this._width = width;\n        this._height = height;\n        this._updateDependencies = false;\n        releaseResources(this);\n        updateFramebuffers(this, context);\n    };\n\n    /**\n     * Clears all of the framebuffers.\n     *\n     * @param {Context} context The context.\n     */\n    PostProcessStageTextureCache.prototype.clear = function(context) {\n        var framebuffers = this._framebuffers;\n        for (var i = 0; i < framebuffers.length; ++i) {\n            framebuffers[i].clear.execute(context);\n        }\n    };\n\n    /**\n     * Gets the stage with the given name.\n     * @param {String} name The name of the stage.\n     * @return {PostProcessStage|PostProcessStageComposite}\n     */\n    PostProcessStageTextureCache.prototype.getStageByName = function(name) {\n        return this._collection.getStageByName(name);\n    };\n\n    /**\n     * Gets the output texture for a stage with the given name.\n     * @param {String} name The name of the stage.\n     * @return {Texture|undefined} The output texture of the stage with the given name.\n     */\n    PostProcessStageTextureCache.prototype.getOutputTexture = function(name) {\n        return this._collection.getOutputTexture(name);\n    };\n\n    /**\n     * Gets the framebuffer for a stage with the given name.\n     *\n     * @param {String} name The name of the stage.\n     * @return {Framebuffer|undefined} The framebuffer for the stage with the given name.\n     */\n    PostProcessStageTextureCache.prototype.getFramebuffer = function(name) {\n        var framebuffer = this._stageNameToFramebuffer[name];\n        if (!defined(framebuffer)) {\n            return undefined;\n        }\n        return framebuffer.buffer;\n    };\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <p>\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     * </p>\n     *\n     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.\n     *\n     * @see PostProcessStageTextureCache#destroy\n     */\n    PostProcessStageTextureCache.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <p>\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     * </p>\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     * @see PostProcessStageTextureCache#isDestroyed\n     */\n    PostProcessStageTextureCache.prototype.destroy = function() {\n        releaseResources(this);\n        return destroyObject(this);\n    };\n\n    return PostProcessStageTextureCache;\n});\n","define([\n        '../Core/freezeObject'\n    ], function(\n        freezeObject) {\n    'use strict';\n\n    /**\n     * Enumerates the available input for interacting with the camera.\n     *\n     * @exports CameraEventType\n     */\n    var CameraEventType = {\n        /**\n         * A left mouse button press followed by moving the mouse and releasing the button.\n         *\n         * @type {Number}\n         * @constant\n         */\n        LEFT_DRAG : 0,\n\n        /**\n         *  A right mouse button press followed by moving the mouse and releasing the button.\n         *\n         * @type {Number}\n         * @constant\n         */\n        RIGHT_DRAG : 1,\n\n        /**\n         *  A middle mouse button press followed by moving the mouse and releasing the button.\n         *\n         * @type {Number}\n         * @constant\n         */\n        MIDDLE_DRAG : 2,\n\n        /**\n         * Scrolling the middle mouse button.\n         *\n         * @type {Number}\n         * @constant\n         */\n        WHEEL : 3,\n\n        /**\n         * A two-finger touch on a touch surface.\n         *\n         * @type {Number}\n         * @constant\n         */\n        PINCH : 4\n    };\n\n    return freezeObject(CameraEventType);\n});\n","define([\n        '../Core/BoundingRectangle',\n        '../Core/BoundingSphere',\n        '../Core/BoxOutlineGeometry',\n        '../Core/Cartesian2',\n        '../Core/Cartesian3',\n        '../Core/Cartesian4',\n        '../Core/Cartographic',\n        '../Core/clone',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/combine',\n        '../Core/CullingVolume',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/DeveloperError',\n        '../Core/FeatureDetection',\n        '../Core/GeometryInstance',\n        '../Core/Intersect',\n        '../Core/Math',\n        '../Core/Matrix4',\n        '../Core/OrthographicOffCenterFrustum',\n        '../Core/PerspectiveFrustum',\n        '../Core/PixelFormat',\n        '../Core/Quaternion',\n        '../Core/SphereOutlineGeometry',\n        '../Core/WebGLConstants',\n        '../Renderer/ClearCommand',\n        '../Renderer/ContextLimits',\n        '../Renderer/CubeMap',\n        '../Renderer/DrawCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/Pass',\n        '../Renderer/PassState',\n        '../Renderer/PixelDatatype',\n        '../Renderer/Renderbuffer',\n        '../Renderer/RenderbufferFormat',\n        '../Renderer/RenderState',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap',\n        './Camera',\n        './CullFace',\n        './DebugCameraPrimitive',\n        './PerInstanceColorAppearance',\n        './Primitive',\n        './ShadowMapShader'\n    ], function(\n        BoundingRectangle,\n        BoundingSphere,\n        BoxOutlineGeometry,\n        Cartesian2,\n        Cartesian3,\n        Cartesian4,\n        Cartographic,\n        clone,\n        Color,\n        ColorGeometryInstanceAttribute,\n        combine,\n        CullingVolume,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        DeveloperError,\n        FeatureDetection,\n        GeometryInstance,\n        Intersect,\n        CesiumMath,\n        Matrix4,\n        OrthographicOffCenterFrustum,\n        PerspectiveFrustum,\n        PixelFormat,\n        Quaternion,\n        SphereOutlineGeometry,\n        WebGLConstants,\n        ClearCommand,\n        ContextLimits,\n        CubeMap,\n        DrawCommand,\n        Framebuffer,\n        Pass,\n        PassState,\n        PixelDatatype,\n        Renderbuffer,\n        RenderbufferFormat,\n        RenderState,\n        Sampler,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap,\n        Camera,\n        CullFace,\n        DebugCameraPrimitive,\n        PerInstanceColorAppearance,\n        Primitive,\n        ShadowMapShader) {\n    'use strict';\n\n    /**\n     * Use {@link Viewer#shadowMap} to get the scene's shadow map originating from the sun. Do not construct this directly.\n     *\n     * <p>\n     * The normalOffset bias pushes the shadows forward slightly, and may be disabled\n     * for applications that require ultra precise shadows.\n     * </p>\n     *\n     * @alias ShadowMap\n     * @internalConstructor\n     * @class\n     *\n     * @param {Object} options An object containing the following properties:\n     * @param {Camera} options.lightCamera A camera representing the light source.\n     * @param {Boolean} [options.enabled=true] Whether the shadow map is enabled.\n     * @param {Boolean} [options.isPointLight=false] Whether the light source is a point light. Point light shadows do not use cascades.\n     * @param {Boolean} [options.pointLightRadius=100.0] Radius of the point light.\n     * @param {Boolean} [options.cascadesEnabled=true] Use multiple shadow maps to cover different partitions of the view frustum.\n     * @param {Number} [options.numberOfCascades=4] The number of cascades to use for the shadow map. Supported values are one and four.\n     * @param {Number} [options.maximumDistance=5000.0] The maximum distance used for generating cascaded shadows. Lower values improve shadow quality.\n     * @param {Number} [options.size=2048] The width and height, in pixels, of each shadow map.\n     * @param {Boolean} [options.softShadows=false] Whether percentage-closer-filtering is enabled for producing softer shadows.\n     * @param {Number} [options.darkness=0.3] The shadow darkness.\n     * @param {Boolean} [options.normalOffset=true] Whether a normal bias is applied to shadows.\n     *\n     * @exception {DeveloperError} Only one or four cascades are supported.\n     *\n     * @demo {@link https://cesiumjs.org/Cesium/Apps/Sandcastle/index.html?src=Shadows.html|Cesium Sandcastle Shadows Demo}\n     */\n    function ShadowMap(options) {\n        options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n        // options.context is an undocumented option\n        var context = options.context;\n\n        \n\n        this._enabled = defaultValue(options.enabled, true);\n        this._softShadows = defaultValue(options.softShadows, false);\n        this._normalOffset = defaultValue(options.normalOffset, true);\n        this.dirty = true;\n\n        /**\n         * Specifies whether the shadow map originates from a light source. Shadow maps that are used for analytical\n         * purposes should set this to false so as not to affect scene rendering.\n         *\n         * @private\n         */\n        this.fromLightSource = defaultValue(options.fromLightSource, true);\n\n        /**\n         * Determines the darkness of the shadows.\n         *\n         * @type {Number}\n         * @default 0.3\n         */\n        this.darkness = defaultValue(options.darkness, 0.3);\n        this._darkness = this.darkness;\n\n        /**\n         * Determines the maximum distance of the shadow map. Only applicable for cascaded shadows. Larger distances may result in lower quality shadows.\n         *\n         * @type {Number}\n         * @default 5000.0\n         */\n        this.maximumDistance = defaultValue(options.maximumDistance, 5000.0);\n\n        this._outOfView = false;\n        this._outOfViewPrevious = false;\n        this._needsUpdate = true;\n\n        // In IE11 and Edge polygon offset is not functional.\n        // TODO : Also disabled for instances of Firefox and Chrome running ANGLE that do not support depth textures.\n        // Re-enable once https://github.com/AnalyticalGraphicsInc/cesium/issues/4560 is resolved.\n        var polygonOffsetSupported = true;\n        if (FeatureDetection.isInternetExplorer() || FeatureDetection.isEdge() || ((FeatureDetection.isChrome() || FeatureDetection.isFirefox()) && FeatureDetection.isWindows() && !context.depthTexture)) {\n            polygonOffsetSupported = false;\n        }\n        this._polygonOffsetSupported = polygonOffsetSupported;\n\n        this._terrainBias = {\n            polygonOffset : polygonOffsetSupported,\n            polygonOffsetFactor : 1.1,\n            polygonOffsetUnits : 4.0,\n            normalOffset : this._normalOffset,\n            normalOffsetScale : 0.5,\n            normalShading : true,\n            normalShadingSmooth : 0.3,\n            depthBias : 0.0001\n        };\n\n        this._primitiveBias = {\n            polygonOffset : polygonOffsetSupported,\n            polygonOffsetFactor : 1.1,\n            polygonOffsetUnits : 4.0,\n            normalOffset : this._normalOffset,\n            normalOffsetScale : 0.1,\n            normalShading : true,\n            normalShadingSmooth : 0.05,\n            depthBias : 0.00002\n        };\n\n        this._pointBias = {\n            polygonOffset : false,\n            polygonOffsetFactor : 1.1,\n            polygonOffsetUnits : 4.0,\n            normalOffset : this._normalOffset,\n            normalOffsetScale : 0.0,\n            normalShading : true,\n            normalShadingSmooth : 0.1,\n            depthBias : 0.0005\n        };\n\n        // Framebuffer resources\n        this._depthAttachment = undefined;\n        this._colorAttachment = undefined;\n\n        // Uniforms\n        this._shadowMapMatrix = new Matrix4();\n        this._shadowMapTexture = undefined;\n        this._lightDirectionEC = new Cartesian3();\n        this._lightPositionEC = new Cartesian4();\n        this._distance = 0.0;\n\n        this._lightCamera = options.lightCamera;\n        this._shadowMapCamera = new ShadowMapCamera();\n        this._shadowMapCullingVolume = undefined;\n        this._sceneCamera = undefined;\n        this._boundingSphere = new BoundingSphere();\n\n        this._isPointLight = defaultValue(options.isPointLight, false);\n        this._pointLightRadius = defaultValue(options.pointLightRadius, 100.0);\n\n        this._cascadesEnabled = this._isPointLight ? false : defaultValue(options.cascadesEnabled, true);\n        this._numberOfCascades = !this._cascadesEnabled ? 0 : defaultValue(options.numberOfCascades, 4);\n        this._fitNearFar = true;\n        this._maximumCascadeDistances = [25.0, 150.0, 700.0, Number.MAX_VALUE];\n\n        this._textureSize = new Cartesian2();\n\n        this._isSpotLight = false;\n        if (this._cascadesEnabled) {\n            // Cascaded shadows are always orthographic. The frustum dimensions are calculated on the fly.\n            this._shadowMapCamera.frustum = new OrthographicOffCenterFrustum();\n        } else if (defined(this._lightCamera.frustum.fov)) {\n            // If the light camera uses a perspective frustum, then the light source is a spot light\n            this._isSpotLight = true;\n        }\n\n        // Uniforms\n        this._cascadeSplits = [new Cartesian4(), new Cartesian4()];\n        this._cascadeMatrices = [new Matrix4(), new Matrix4(), new Matrix4(), new Matrix4()];\n        this._cascadeDistances = new Cartesian4();\n\n        var numberOfPasses;\n        if (this._isPointLight) {\n            numberOfPasses = 6; // One shadow map for each direction\n        } else if (!this._cascadesEnabled) {\n            numberOfPasses = 1;\n        } else {\n            numberOfPasses = this._numberOfCascades;\n        }\n\n        this._passes = new Array(numberOfPasses);\n        for (var i = 0; i < numberOfPasses; ++i) {\n            this._passes[i] = new ShadowPass(context);\n        }\n\n        this.debugShow = false;\n        this.debugFreezeFrame = false;\n        this._debugFreezeFrame = false;\n        this._debugCascadeColors = false;\n        this._debugLightFrustum = undefined;\n        this._debugCameraFrustum = undefined;\n        this._debugCascadeFrustums = new Array(this._numberOfCascades);\n        this._debugShadowViewCommand = undefined;\n\n        this._usesDepthTexture = context.depthTexture;\n\n        if (this._isPointLight) {\n            this._usesDepthTexture = false;\n        }\n\n        // Create render states for shadow casters\n        this._primitiveRenderState = undefined;\n        this._terrainRenderState = undefined;\n        this._pointRenderState = undefined;\n        createRenderStates(this);\n\n        // For clearing the shadow map texture every frame\n        this._clearCommand = new ClearCommand({\n            depth : 1.0,\n            color : new Color()\n        });\n\n        this._clearPassState = new PassState(context);\n\n        this._size = defaultValue(options.size, 2048);\n        this.size = this._size;\n    }\n\n    /**\n     * Global maximum shadow distance used to prevent far off receivers from extending\n     * the shadow far plane. This helps set a tighter near/far when viewing objects from space.\n     *\n     * @private\n     */\n    ShadowMap.MAXIMUM_DISTANCE = 20000.0;\n\n    function ShadowPass(context) {\n        this.camera = new ShadowMapCamera();\n        this.passState = new PassState(context);\n        this.framebuffer = undefined;\n        this.textureOffsets = undefined;\n        this.commandList = [];\n        this.cullingVolume = undefined;\n    }\n\n    function createRenderState(colorMask, bias) {\n        return RenderState.fromCache({\n            cull : {\n                enabled : true,\n                face : CullFace.BACK\n            },\n            depthTest : {\n                enabled : true\n            },\n            colorMask : {\n                red : colorMask,\n                green : colorMask,\n                blue : colorMask,\n                alpha : colorMask\n            },\n            depthMask : true,\n            polygonOffset : {\n                enabled : bias.polygonOffset,\n                factor : bias.polygonOffsetFactor,\n                units : bias.polygonOffsetUnits\n            }\n        });\n    }\n\n    function createRenderStates(shadowMap) {\n        // Enable the color mask if the shadow map is backed by a color texture, e.g. when depth textures aren't supported\n        var colorMask = !shadowMap._usesDepthTexture;\n        shadowMap._primitiveRenderState = createRenderState(colorMask, shadowMap._primitiveBias);\n        shadowMap._terrainRenderState = createRenderState(colorMask, shadowMap._terrainBias);\n        shadowMap._pointRenderState = createRenderState(colorMask, shadowMap._pointBias);\n    }\n\n    /**\n     * @private\n     */\n    ShadowMap.prototype.debugCreateRenderStates = function() {\n        createRenderStates(this);\n    };\n\n    defineProperties(ShadowMap.prototype, {\n        /**\n         * Determines if the shadow map will be shown.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Boolean}\n         * @default true\n         */\n        enabled : {\n            get : function() {\n                return this._enabled;\n            },\n            set : function(value) {\n                this.dirty = this._enabled !== value;\n                this._enabled = value;\n            }\n        },\n\n        /**\n         * Determines if a normal bias will be applied to shadows.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Boolean}\n         * @default true\n         */\n        normalOffset : {\n            get : function() {\n                return this._normalOffset;\n            },\n            set : function(value) {\n                this.dirty = this._normalOffset !== value;\n                this._normalOffset = value;\n                this._terrainBias.normalOffset = value;\n                this._primitiveBias.normalOffset = value;\n                this._pointBias.normalOffset = value;\n            }\n        },\n\n        /**\n         * Determines if soft shadows are enabled. Uses pcf filtering which requires more texture reads and may hurt performance.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Boolean}\n         * @default false\n         */\n        softShadows : {\n            get : function() {\n                return this._softShadows;\n            },\n            set : function(value) {\n                this.dirty = this._softShadows !== value;\n                this._softShadows = value;\n            }\n        },\n\n        /**\n         * The width and height, in pixels, of each shadow map.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Number}\n         * @default 2048\n         */\n        size : {\n            get : function() {\n                return this._size;\n            },\n            set : function(value) {\n                resize(this, value);\n            }\n        },\n\n        /**\n         * Whether the shadow map is out of view of the scene camera.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Boolean}\n         * @readonly\n         * @private\n         */\n        outOfView : {\n            get : function() {\n                return this._outOfView;\n            }\n        },\n\n        /**\n         * The culling volume of the shadow frustum.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {CullingVolume}\n         * @readonly\n         * @private\n         */\n        shadowMapCullingVolume : {\n            get : function() {\n                return this._shadowMapCullingVolume;\n            }\n        },\n\n        /**\n         * The passes used for rendering shadows. Each face of a point light or each cascade for a cascaded shadow map is a separate pass.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {ShadowPass[]}\n         * @readonly\n         * @private\n         */\n        passes : {\n            get : function() {\n                return this._passes;\n            }\n        },\n\n        /**\n         * Whether the light source is a point light.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Boolean}\n         * @readonly\n         * @private\n         */\n        isPointLight : {\n            get : function() {\n                return this._isPointLight;\n            }\n        },\n\n        /**\n         * Debug option for visualizing the cascades by color.\n         *\n         * @memberof ShadowMap.prototype\n         * @type {Boolean}\n         * @default false\n         * @private\n         */\n        debugCascadeColors : {\n            get : function() {\n                return this._debugCascadeColors;\n            },\n            set : function(value) {\n                this.dirty = this._debugCascadeColors !== value;\n                this._debugCascadeColors = value;\n            }\n        }\n    });\n\n    function destroyFramebuffer(shadowMap) {\n        var length = shadowMap._passes.length;\n        for (var i = 0; i < length; ++i) {\n            var pass = shadowMap._passes[i];\n            var framebuffer = pass.framebuffer;\n            if (defined(framebuffer) && !framebuffer.isDestroyed()) {\n                framebuffer.destroy();\n            }\n            pass.framebuffer = undefined;\n        }\n\n        // Destroy the framebuffer attachments\n        shadowMap._depthAttachment = shadowMap._depthAttachment && shadowMap._depthAttachment.destroy();\n        shadowMap._colorAttachment = shadowMap._colorAttachment && shadowMap._colorAttachment.destroy();\n    }\n\n    function createSampler() {\n        return new Sampler({\n            wrapS : TextureWrap.CLAMP_TO_EDGE,\n            wrapT : TextureWrap.CLAMP_TO_EDGE,\n            minificationFilter : TextureMinificationFilter.NEAREST,\n            magnificationFilter : TextureMagnificationFilter.NEAREST\n        });\n    }\n\n    function createFramebufferColor(shadowMap, context) {\n        var depthRenderbuffer = new Renderbuffer({\n            context : context,\n            width : shadowMap._textureSize.x,\n            height : shadowMap._textureSize.y,\n            format : RenderbufferFormat.DEPTH_COMPONENT16\n        });\n\n        var colorTexture = new Texture({\n            context : context,\n            width : shadowMap._textureSize.x,\n            height : shadowMap._textureSize.y,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : createSampler()\n        });\n\n        var framebuffer = new Framebuffer({\n            context : context,\n            depthRenderbuffer : depthRenderbuffer,\n            colorTextures : [colorTexture],\n            destroyAttachments : false\n        });\n\n        var length = shadowMap._passes.length;\n        for (var i = 0; i < length; ++i) {\n            var pass = shadowMap._passes[i];\n            pass.framebuffer = framebuffer;\n            pass.passState.framebuffer = framebuffer;\n        }\n\n        shadowMap._shadowMapTexture = colorTexture;\n        shadowMap._depthAttachment = depthRenderbuffer;\n        shadowMap._colorAttachment = colorTexture;\n    }\n\n    function createFramebufferDepth(shadowMap, context) {\n        var depthStencilTexture = new Texture({\n            context : context,\n            width : shadowMap._textureSize.x,\n            height : shadowMap._textureSize.y,\n            pixelFormat : PixelFormat.DEPTH_STENCIL,\n            pixelDatatype : PixelDatatype.UNSIGNED_INT_24_8,\n            sampler : createSampler()\n        });\n\n        var framebuffer = new Framebuffer({\n            context : context,\n            depthStencilTexture : depthStencilTexture,\n            destroyAttachments : false\n        });\n\n        var length = shadowMap._passes.length;\n        for (var i = 0; i < length; ++i) {\n            var pass = shadowMap._passes[i];\n            pass.framebuffer = framebuffer;\n            pass.passState.framebuffer = framebuffer;\n        }\n\n        shadowMap._shadowMapTexture = depthStencilTexture;\n        shadowMap._depthAttachment = depthStencilTexture;\n    }\n\n    function createFramebufferCube(shadowMap, context) {\n        var depthRenderbuffer = new Renderbuffer({\n            context : context,\n            width : shadowMap._textureSize.x,\n            height : shadowMap._textureSize.y,\n            format : RenderbufferFormat.DEPTH_COMPONENT16\n        });\n\n        var cubeMap = new CubeMap({\n            context : context,\n            width : shadowMap._textureSize.x,\n            height : shadowMap._textureSize.y,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : createSampler()\n        });\n\n        var faces = [cubeMap.negativeX, cubeMap.negativeY, cubeMap.negativeZ, cubeMap.positiveX, cubeMap.positiveY, cubeMap.positiveZ];\n\n        for (var i = 0; i < 6; ++i) {\n            var framebuffer = new Framebuffer({\n                context : context,\n                depthRenderbuffer : depthRenderbuffer,\n                colorTextures : [faces[i]],\n                destroyAttachments : false\n            });\n            var pass = shadowMap._passes[i];\n            pass.framebuffer = framebuffer;\n            pass.passState.framebuffer = framebuffer;\n        }\n\n        shadowMap._shadowMapTexture = cubeMap;\n        shadowMap._depthAttachment = depthRenderbuffer;\n        shadowMap._colorAttachment = cubeMap;\n    }\n\n    function createFramebuffer(shadowMap, context) {\n        if (shadowMap._isPointLight) {\n            createFramebufferCube(shadowMap, context);\n        } else if (shadowMap._usesDepthTexture) {\n            createFramebufferDepth(shadowMap, context);\n        } else {\n            createFramebufferColor(shadowMap, context);\n        }\n    }\n\n    function checkFramebuffer(shadowMap, context) {\n        // Attempt to make an FBO with only a depth texture. If it fails, fallback to a color texture.\n        if (shadowMap._usesDepthTexture && (shadowMap._passes[0].framebuffer.status !== WebGLConstants.FRAMEBUFFER_COMPLETE)) {\n            shadowMap._usesDepthTexture = false;\n            createRenderStates(shadowMap);\n            destroyFramebuffer(shadowMap);\n            createFramebuffer(shadowMap, context);\n        }\n    }\n\n    function updateFramebuffer(shadowMap, context) {\n        if (!defined(shadowMap._passes[0].framebuffer) || (shadowMap._shadowMapTexture.width !== shadowMap._textureSize.x)) {\n            destroyFramebuffer(shadowMap);\n            createFramebuffer(shadowMap, context);\n            checkFramebuffer(shadowMap, context);\n            clearFramebuffer(shadowMap, context);\n        }\n    }\n\n    function clearFramebuffer(shadowMap, context, shadowPass) {\n        shadowPass = defaultValue(shadowPass, 0);\n        if (shadowMap._isPointLight || (shadowPass === 0)) {\n            shadowMap._clearCommand.framebuffer = shadowMap._passes[shadowPass].framebuffer;\n            shadowMap._clearCommand.execute(context, shadowMap._clearPassState);\n        }\n    }\n\n    function resize(shadowMap, size) {\n        shadowMap._size = size;\n        var passes = shadowMap._passes;\n        var numberOfPasses = passes.length;\n        var textureSize = shadowMap._textureSize;\n\n        if (shadowMap._isPointLight) {\n            size = (ContextLimits.maximumCubeMapSize >= size) ? size : ContextLimits.maximumCubeMapSize;\n            textureSize.x = size;\n            textureSize.y = size;\n            var faceViewport = new BoundingRectangle(0, 0, size, size);\n            passes[0].passState.viewport = faceViewport;\n            passes[1].passState.viewport = faceViewport;\n            passes[2].passState.viewport = faceViewport;\n            passes[3].passState.viewport = faceViewport;\n            passes[4].passState.viewport = faceViewport;\n            passes[5].passState.viewport = faceViewport;\n        } else if (numberOfPasses === 1) {\n            // +----+\n            // |  1 |\n            // +----+\n            size = (ContextLimits.maximumTextureSize >= size) ? size : ContextLimits.maximumTextureSize;\n            textureSize.x = size;\n            textureSize.y = size;\n            passes[0].passState.viewport = new BoundingRectangle(0, 0, size, size);\n        } else if (numberOfPasses === 4) {\n            // +----+----+\n            // |  3 |  4 |\n            // +----+----+\n            // |  1 |  2 |\n            // +----+----+\n            size = (ContextLimits.maximumTextureSize >= size * 2) ? size : ContextLimits.maximumTextureSize / 2;\n            textureSize.x = size * 2;\n            textureSize.y = size * 2;\n            passes[0].passState.viewport = new BoundingRectangle(0, 0, size, size);\n            passes[1].passState.viewport = new BoundingRectangle(size, 0, size, size);\n            passes[2].passState.viewport = new BoundingRectangle(0, size, size, size);\n            passes[3].passState.viewport = new BoundingRectangle(size, size, size, size);\n        }\n\n        // Update clear pass state\n        shadowMap._clearPassState.viewport = new BoundingRectangle(0, 0, textureSize.x, textureSize.y);\n\n        // Transforms shadow coordinates [0, 1] into the pass's region of the texture\n        for (var i = 0; i < numberOfPasses; ++i) {\n            var pass = passes[i];\n            var viewport = pass.passState.viewport;\n            var biasX = viewport.x / textureSize.x;\n            var biasY = viewport.y / textureSize.y;\n            var scaleX = viewport.width / textureSize.x;\n            var scaleY = viewport.height / textureSize.y;\n            pass.textureOffsets = new Matrix4(scaleX, 0.0, 0.0, biasX, 0.0, scaleY, 0.0, biasY, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\n    var scratchViewport = new BoundingRectangle();\n\n    function createDebugShadowViewCommand(shadowMap, context) {\n        var fs;\n        if (shadowMap._isPointLight) {\n            fs = 'uniform samplerCube shadowMap_textureCube; \\n' +\n                 'varying vec2 v_textureCoordinates; \\n' +\n                 'void main() \\n' +\n                 '{ \\n' +\n                 '    vec2 uv = v_textureCoordinates; \\n' +\n                 '    vec3 dir; \\n' +\n                 ' \\n' +\n                 '    if (uv.y < 0.5) \\n' +\n                 '    { \\n' +\n                 '        if (uv.x < 0.333) \\n' +\n                 '        { \\n' +\n                 '            dir.x = -1.0; \\n' +\n                 '            dir.y = uv.x * 6.0 - 1.0; \\n' +\n                 '            dir.z = uv.y * 4.0 - 1.0; \\n' +\n                 '        } \\n' +\n                 '        else if (uv.x < 0.666) \\n' +\n                 '        { \\n' +\n                 '            dir.y = -1.0; \\n' +\n                 '            dir.x = uv.x * 6.0 - 3.0; \\n' +\n                 '            dir.z = uv.y * 4.0 - 1.0; \\n' +\n                 '        } \\n' +\n                 '        else \\n' +\n                 '        { \\n' +\n                 '            dir.z = -1.0; \\n' +\n                 '            dir.x = uv.x * 6.0 - 5.0; \\n' +\n                 '            dir.y = uv.y * 4.0 - 1.0; \\n' +\n                 '        } \\n' +\n                 '    } \\n' +\n                 '    else \\n' +\n                 '    { \\n' +\n                 '        if (uv.x < 0.333) \\n' +\n                 '        { \\n' +\n                 '            dir.x = 1.0; \\n' +\n                 '            dir.y = uv.x * 6.0 - 1.0; \\n' +\n                 '            dir.z = uv.y * 4.0 - 3.0; \\n' +\n                 '        } \\n' +\n                 '        else if (uv.x < 0.666) \\n' +\n                 '        { \\n' +\n                 '            dir.y = 1.0; \\n' +\n                 '            dir.x = uv.x * 6.0 - 3.0; \\n' +\n                 '            dir.z = uv.y * 4.0 - 3.0; \\n' +\n                 '        } \\n' +\n                 '        else \\n' +\n                 '        { \\n' +\n                 '            dir.z = 1.0; \\n' +\n                 '            dir.x = uv.x * 6.0 - 5.0; \\n' +\n                 '            dir.y = uv.y * 4.0 - 3.0; \\n' +\n                 '        } \\n' +\n                 '    } \\n' +\n                 ' \\n' +\n                 '    float shadow = czm_unpackDepth(textureCube(shadowMap_textureCube, dir)); \\n' +\n                 '    gl_FragColor = vec4(vec3(shadow), 1.0); \\n' +\n                 '} \\n';\n        } else {\n            fs = 'uniform sampler2D shadowMap_texture; \\n' +\n                 'varying vec2 v_textureCoordinates; \\n' +\n                 'void main() \\n' +\n                 '{ \\n' +\n\n                 (shadowMap._usesDepthTexture ?\n                 '    float shadow = texture2D(shadowMap_texture, v_textureCoordinates).r; \\n' :\n                 '    float shadow = czm_unpackDepth(texture2D(shadowMap_texture, v_textureCoordinates)); \\n') +\n\n                 '    gl_FragColor = vec4(vec3(shadow), 1.0); \\n' +\n                 '} \\n';\n        }\n\n        var drawCommand = context.createViewportQuadCommand(fs, {\n            uniformMap : {\n                shadowMap_texture : function() {\n                    return shadowMap._shadowMapTexture;\n                },\n                shadowMap_textureCube : function() {\n                    return shadowMap._shadowMapTexture;\n                }\n            }\n        });\n        drawCommand.pass = Pass.OVERLAY;\n        return drawCommand;\n    }\n\n    function updateDebugShadowViewCommand(shadowMap, frameState) {\n        // Draws the shadow map on the bottom-right corner of the screen\n        var context = frameState.context;\n        var screenWidth = frameState.context.drawingBufferWidth;\n        var screenHeight = frameState.context.drawingBufferHeight;\n        var size = Math.min(screenWidth, screenHeight) * 0.3;\n\n        var viewport = scratchViewport;\n        viewport.x = screenWidth - size;\n        viewport.y = 0;\n        viewport.width = size;\n        viewport.height = size;\n\n        var debugCommand = shadowMap._debugShadowViewCommand;\n        if (!defined(debugCommand)) {\n            debugCommand = createDebugShadowViewCommand(shadowMap, context);\n            shadowMap._debugShadowViewCommand = debugCommand;\n        }\n\n        // Get a new RenderState for the updated viewport size\n        if (!defined(debugCommand.renderState) || !BoundingRectangle.equals(debugCommand.renderState.viewport, viewport)) {\n            debugCommand.renderState = RenderState.fromCache({\n                viewport : BoundingRectangle.clone(viewport)\n            });\n        }\n\n        frameState.commandList.push(shadowMap._debugShadowViewCommand);\n    }\n\n    var frustumCornersNDC = new Array(8);\n    frustumCornersNDC[0] = new Cartesian4(-1.0, -1.0, -1.0, 1.0);\n    frustumCornersNDC[1] = new Cartesian4(1.0, -1.0, -1.0, 1.0);\n    frustumCornersNDC[2] = new Cartesian4(1.0, 1.0, -1.0, 1.0);\n    frustumCornersNDC[3] = new Cartesian4(-1.0, 1.0, -1.0, 1.0);\n    frustumCornersNDC[4] = new Cartesian4(-1.0, -1.0, 1.0, 1.0);\n    frustumCornersNDC[5] = new Cartesian4(1.0, -1.0, 1.0, 1.0);\n    frustumCornersNDC[6] = new Cartesian4(1.0, 1.0, 1.0, 1.0);\n    frustumCornersNDC[7] = new Cartesian4(-1.0, 1.0, 1.0, 1.0);\n\n    var scratchMatrix = new Matrix4();\n    var scratchFrustumCorners = new Array(8);\n    for (var i = 0; i < 8; ++i) {\n        scratchFrustumCorners[i] = new Cartesian4();\n    }\n\n    function createDebugPointLight(modelMatrix, color) {\n        var box = new GeometryInstance({\n            geometry : new BoxOutlineGeometry({\n                minimum : new Cartesian3(-0.5, -0.5, -0.5),\n                maximum : new Cartesian3(0.5, 0.5, 0.5)\n            }),\n            attributes : {\n                color : ColorGeometryInstanceAttribute.fromColor(color)\n            }\n        });\n\n        var sphere = new GeometryInstance({\n            geometry : new SphereOutlineGeometry({\n                radius : 0.5\n            }),\n            attributes : {\n                color : ColorGeometryInstanceAttribute.fromColor(color)\n            }\n        });\n\n        return new Primitive({\n            geometryInstances : [box, sphere],\n            appearance : new PerInstanceColorAppearance({\n                translucent : false,\n                flat : true\n            }),\n            asynchronous : false,\n            modelMatrix : modelMatrix\n        });\n    }\n\n    var debugOutlineColors = [Color.RED, Color.GREEN, Color.BLUE, Color.MAGENTA];\n    var scratchScale = new Cartesian3();\n\n    function applyDebugSettings(shadowMap, frameState) {\n        updateDebugShadowViewCommand(shadowMap, frameState);\n\n        var enterFreezeFrame = shadowMap.debugFreezeFrame && !shadowMap._debugFreezeFrame;\n        shadowMap._debugFreezeFrame = shadowMap.debugFreezeFrame;\n\n        // Draw scene camera in freeze frame mode\n        if (shadowMap.debugFreezeFrame) {\n            if (enterFreezeFrame) {\n                // Recreate debug camera when entering freeze frame mode\n                shadowMap._debugCameraFrustum = shadowMap._debugCameraFrustum && shadowMap._debugCameraFrustum.destroy();\n                shadowMap._debugCameraFrustum = new DebugCameraPrimitive({\n                    camera : shadowMap._sceneCamera,\n                    color : Color.CYAN,\n                    updateOnChange : false\n                });\n            }\n            shadowMap._debugCameraFrustum.update(frameState);\n        }\n\n        if (shadowMap._cascadesEnabled) {\n            // Draw cascades only in freeze frame mode\n            if (shadowMap.debugFreezeFrame) {\n                if (enterFreezeFrame) {\n                    // Recreate debug frustum when entering freeze frame mode\n                    shadowMap._debugLightFrustum = shadowMap._debugLightFrustum && shadowMap._debugLightFrustum.destroy();\n                    shadowMap._debugLightFrustum = new DebugCameraPrimitive({\n                        camera : shadowMap._shadowMapCamera,\n                        color : Color.YELLOW,\n                        updateOnChange : false\n                    });\n                }\n                shadowMap._debugLightFrustum.update(frameState);\n\n                for (var i = 0; i < shadowMap._numberOfCascades; ++i) {\n                    if (enterFreezeFrame) {\n                        // Recreate debug frustum when entering freeze frame mode\n                        shadowMap._debugCascadeFrustums[i] = shadowMap._debugCascadeFrustums[i] && shadowMap._debugCascadeFrustums[i].destroy();\n                        shadowMap._debugCascadeFrustums[i] = new DebugCameraPrimitive({\n                            camera : shadowMap._passes[i].camera,\n                            color : debugOutlineColors[i],\n                            updateOnChange : false\n                        });\n                    }\n                    shadowMap._debugCascadeFrustums[i].update(frameState);\n                }\n            }\n        } else if (shadowMap._isPointLight) {\n            if (!defined(shadowMap._debugLightFrustum) || shadowMap._needsUpdate) {\n                var translation = shadowMap._shadowMapCamera.positionWC;\n                var rotation = Quaternion.IDENTITY;\n                var uniformScale = shadowMap._pointLightRadius * 2.0;\n                var scale = Cartesian3.fromElements(uniformScale, uniformScale, uniformScale, scratchScale);\n                var modelMatrix = Matrix4.fromTranslationQuaternionRotationScale(translation, rotation, scale, scratchMatrix);\n\n                shadowMap._debugLightFrustum = shadowMap._debugLightFrustum && shadowMap._debugLightFrustum.destroy();\n                shadowMap._debugLightFrustum = createDebugPointLight(modelMatrix, Color.YELLOW);\n            }\n            shadowMap._debugLightFrustum.update(frameState);\n        } else {\n            if (!defined(shadowMap._debugLightFrustum) || shadowMap._needsUpdate) {\n                shadowMap._debugLightFrustum = new DebugCameraPrimitive({\n                    camera : shadowMap._shadowMapCamera,\n                    color : Color.YELLOW,\n                    updateOnChange : false\n                });\n            }\n            shadowMap._debugLightFrustum.update(frameState);\n        }\n    }\n\n    function ShadowMapCamera() {\n        this.viewMatrix = new Matrix4();\n        this.inverseViewMatrix = new Matrix4();\n        this.frustum = undefined;\n        this.positionCartographic = new Cartographic();\n        this.positionWC = new Cartesian3();\n        this.directionWC = Cartesian3.clone(Cartesian3.UNIT_Z);\n        this.upWC = Cartesian3.clone(Cartesian3.UNIT_Y);\n        this.rightWC = Cartesian3.clone(Cartesian3.UNIT_X);\n        this.viewProjectionMatrix = new Matrix4();\n    }\n\n    ShadowMapCamera.prototype.clone = function(camera) {\n        Matrix4.clone(camera.viewMatrix, this.viewMatrix);\n        Matrix4.clone(camera.inverseViewMatrix, this.inverseViewMatrix);\n        this.frustum = camera.frustum.clone(this.frustum);\n        Cartographic.clone(camera.positionCartographic, this.positionCartographic);\n        Cartesian3.clone(camera.positionWC, this.positionWC);\n        Cartesian3.clone(camera.directionWC, this.directionWC);\n        Cartesian3.clone(camera.upWC, this.upWC);\n        Cartesian3.clone(camera.rightWC, this.rightWC);\n    };\n\n    // Converts from NDC space to texture space\n    var scaleBiasMatrix = new Matrix4(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\n    ShadowMapCamera.prototype.getViewProjection = function() {\n        var view = this.viewMatrix;\n        var projection = this.frustum.projectionMatrix;\n        Matrix4.multiply(projection, view, this.viewProjectionMatrix);\n        Matrix4.multiply(scaleBiasMatrix, this.viewProjectionMatrix, this.viewProjectionMatrix);\n        return this.viewProjectionMatrix;\n    };\n\n    var scratchSplits = new Array(5);\n    var scratchFrustum = new PerspectiveFrustum();\n    var scratchCascadeDistances = new Array(4);\n    var scratchMin = new Cartesian3();\n    var scratchMax = new Cartesian3();\n\n    function computeCascades(shadowMap, frameState) {\n        var shadowMapCamera = shadowMap._shadowMapCamera;\n        var sceneCamera = shadowMap._sceneCamera;\n        var cameraNear = sceneCamera.frustum.near;\n        var cameraFar = sceneCamera.frustum.far;\n        var numberOfCascades = shadowMap._numberOfCascades;\n\n        // Split cascades. Use a mix of linear and log splits.\n        var i;\n        var range = cameraFar - cameraNear;\n        var ratio = cameraFar / cameraNear;\n\n        var lambda = 0.9;\n        var clampCascadeDistances = false;\n\n        // When the camera is close to a relatively small model, provide more detail in the closer cascades.\n        // If the camera is near or inside a large model, such as the root tile of a city, then use the default values.\n        // To get the most accurate cascade splits we would need to find the min and max values from the depth texture.\n        if (frameState.shadowState.closestObjectSize < 200.0) {\n            clampCascadeDistances = true;\n            lambda = 0.9;\n        }\n\n        var cascadeDistances = scratchCascadeDistances;\n        var splits = scratchSplits;\n        splits[0] = cameraNear;\n        splits[numberOfCascades] = cameraFar;\n\n        // Find initial splits\n        for (i = 0; i < numberOfCascades; ++i) {\n            var p = (i + 1) / numberOfCascades;\n            var logScale = cameraNear * Math.pow(ratio, p);\n            var uniformScale = cameraNear + range * p;\n            var split = CesiumMath.lerp(uniformScale, logScale, lambda);\n            splits[i + 1] = split;\n            cascadeDistances[i] = split - splits[i];\n        }\n\n        if (clampCascadeDistances) {\n            // Clamp each cascade to its maximum distance\n            for (i = 0; i < numberOfCascades; ++i) {\n                cascadeDistances[i] = Math.min(cascadeDistances[i], shadowMap._maximumCascadeDistances[i]);\n            }\n\n            // Recompute splits\n            var distance = splits[0];\n            for (i = 0; i < numberOfCascades - 1; ++i) {\n                distance += cascadeDistances[i];\n                splits[i + 1] = distance;\n            }\n        }\n\n        Cartesian4.unpack(splits, 0, shadowMap._cascadeSplits[0]);\n        Cartesian4.unpack(splits, 1, shadowMap._cascadeSplits[1]);\n        Cartesian4.unpack(cascadeDistances, 0, shadowMap._cascadeDistances);\n\n        var shadowFrustum = shadowMapCamera.frustum;\n        var left = shadowFrustum.left;\n        var right = shadowFrustum.right;\n        var bottom = shadowFrustum.bottom;\n        var top = shadowFrustum.top;\n        var near = shadowFrustum.near;\n        var far = shadowFrustum.far;\n\n        var position = shadowMapCamera.positionWC;\n        var direction = shadowMapCamera.directionWC;\n        var up = shadowMapCamera.upWC;\n\n        var cascadeSubFrustum = sceneCamera.frustum.clone(scratchFrustum);\n        var shadowViewProjection = shadowMapCamera.getViewProjection();\n\n        for (i = 0; i < numberOfCascades; ++i) {\n            // Find the bounding box of the camera sub-frustum in shadow map texture space\n            cascadeSubFrustum.near = splits[i];\n            cascadeSubFrustum.far = splits[i + 1];\n            var viewProjection = Matrix4.multiply(cascadeSubFrustum.projectionMatrix, sceneCamera.viewMatrix, scratchMatrix);\n            var inverseViewProjection = Matrix4.inverse(viewProjection, scratchMatrix);\n            var shadowMapMatrix = Matrix4.multiply(shadowViewProjection, inverseViewProjection, scratchMatrix);\n\n            // Project each corner from camera NDC space to shadow map texture space. Min and max will be from 0 to 1.\n            var min = Cartesian3.fromElements(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, scratchMin);\n            var max = Cartesian3.fromElements(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE, scratchMax);\n\n            for (var k = 0; k < 8; ++k) {\n                var corner = Cartesian4.clone(frustumCornersNDC[k], scratchFrustumCorners[k]);\n                Matrix4.multiplyByVector(shadowMapMatrix, corner, corner);\n                Cartesian3.divideByScalar(corner, corner.w, corner); // Handle the perspective divide\n                Cartesian3.minimumByComponent(corner, min, min);\n                Cartesian3.maximumByComponent(corner, max, max);\n            }\n\n            // Limit light-space coordinates to the [0, 1] range\n            min.x = Math.max(min.x, 0.0);\n            min.y = Math.max(min.y, 0.0);\n            min.z = 0.0; // Always start cascade frustum at the top of the light frustum to capture objects in the light's path\n            max.x = Math.min(max.x, 1.0);\n            max.y = Math.min(max.y, 1.0);\n            max.z = Math.min(max.z, 1.0);\n\n            var pass = shadowMap._passes[i];\n            var cascadeCamera = pass.camera;\n            cascadeCamera.clone(shadowMapCamera); // PERFORMANCE_IDEA : could do a shallow clone for all properties except the frustum\n\n            var frustum = cascadeCamera.frustum;\n            frustum.left = left + min.x * (right - left);\n            frustum.right = left + max.x * (right - left);\n            frustum.bottom = bottom + min.y * (top - bottom);\n            frustum.top = bottom + max.y * (top - bottom);\n            frustum.near = near + min.z * (far - near);\n            frustum.far = near + max.z * (far - near);\n\n            pass.cullingVolume = cascadeCamera.frustum.computeCullingVolume(position, direction, up);\n\n            // Transforms from eye space to the cascade's texture space\n            var cascadeMatrix = shadowMap._cascadeMatrices[i];\n            Matrix4.multiply(cascadeCamera.getViewProjection(), sceneCamera.inverseViewMatrix, cascadeMatrix);\n            Matrix4.multiply(pass.textureOffsets, cascadeMatrix, cascadeMatrix);\n        }\n    }\n\n    var scratchLightView = new Matrix4();\n    var scratchRight = new Cartesian3();\n    var scratchUp = new Cartesian3();\n    var scratchTranslation = new Cartesian3();\n\n    function fitShadowMapToScene(shadowMap, frameState) {\n        var shadowMapCamera = shadowMap._shadowMapCamera;\n        var sceneCamera = shadowMap._sceneCamera;\n\n        // 1. First find a tight bounding box in light space that contains the entire camera frustum.\n        var viewProjection = Matrix4.multiply(sceneCamera.frustum.projectionMatrix, sceneCamera.viewMatrix, scratchMatrix);\n        var inverseViewProjection = Matrix4.inverse(viewProjection, scratchMatrix);\n\n        // Start to construct the light view matrix. Set translation later once the bounding box is found.\n        var lightDir = shadowMapCamera.directionWC;\n        var lightUp = sceneCamera.directionWC; // Align shadows to the camera view.\n        var lightRight = Cartesian3.cross(lightDir, lightUp, scratchRight);\n        lightUp = Cartesian3.cross(lightRight, lightDir, scratchUp); // Recalculate up now that right is derived\n        Cartesian3.normalize(lightUp, lightUp);\n        Cartesian3.normalize(lightRight, lightRight);\n        var lightPosition = Cartesian3.fromElements(0.0, 0.0, 0.0, scratchTranslation);\n\n        var lightView = Matrix4.computeView(lightPosition, lightDir, lightUp, lightRight, scratchLightView);\n        var cameraToLight = Matrix4.multiply(lightView, inverseViewProjection, scratchMatrix);\n\n        // Project each corner from NDC space to light view space, and calculate a min and max in light view space\n        var min = Cartesian3.fromElements(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, scratchMin);\n        var max = Cartesian3.fromElements(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE, scratchMax);\n\n        for (var i = 0; i < 8; ++i) {\n            var corner = Cartesian4.clone(frustumCornersNDC[i], scratchFrustumCorners[i]);\n            Matrix4.multiplyByVector(cameraToLight, corner, corner);\n            Cartesian3.divideByScalar(corner, corner.w, corner); // Handle the perspective divide\n            Cartesian3.minimumByComponent(corner, min, min);\n            Cartesian3.maximumByComponent(corner, max, max);\n        }\n\n        // 2. Set bounding box back to include objects in the light's view\n        max.z += 1000.0; // Note: in light space, a positive number is behind the camera\n        min.z -= 10.0; // Extend the shadow volume forward slightly to avoid problems right at the edge\n\n        // 3. Adjust light view matrix so that it is centered on the bounding volume\n        var translation = scratchTranslation;\n        translation.x = -(0.5 * (min.x + max.x));\n        translation.y = -(0.5 * (min.y + max.y));\n        translation.z = -max.z;\n\n        var translationMatrix = Matrix4.fromTranslation(translation, scratchMatrix);\n        lightView = Matrix4.multiply(translationMatrix, lightView, lightView);\n\n        // 4. Create an orthographic frustum that covers the bounding box extents\n        var halfWidth = 0.5 * (max.x - min.x);\n        var halfHeight = 0.5 * (max.y - min.y);\n        var depth = max.z - min.z;\n\n        var frustum = shadowMapCamera.frustum;\n        frustum.left = -halfWidth;\n        frustum.right = halfWidth;\n        frustum.bottom = -halfHeight;\n        frustum.top = halfHeight;\n        frustum.near = 0.01;\n        frustum.far = depth;\n\n        // 5. Update the shadow map camera\n        Matrix4.clone(lightView, shadowMapCamera.viewMatrix);\n        Matrix4.inverse(lightView, shadowMapCamera.inverseViewMatrix);\n        Matrix4.getTranslation(shadowMapCamera.inverseViewMatrix, shadowMapCamera.positionWC);\n        frameState.mapProjection.ellipsoid.cartesianToCartographic(shadowMapCamera.positionWC, shadowMapCamera.positionCartographic);\n        Cartesian3.clone(lightDir, shadowMapCamera.directionWC);\n        Cartesian3.clone(lightUp, shadowMapCamera.upWC);\n        Cartesian3.clone(lightRight, shadowMapCamera.rightWC);\n    }\n\n    var directions = [\n        new Cartesian3(-1.0, 0.0, 0.0),\n        new Cartesian3(0.0, -1.0, 0.0),\n        new Cartesian3(0.0, 0.0, -1.0),\n        new Cartesian3(1.0, 0.0, 0.0),\n        new Cartesian3(0.0, 1.0, 0.0),\n        new Cartesian3(0.0, 0.0, 1.0)\n    ];\n\n    var ups = [\n        new Cartesian3(0.0, -1.0, 0.0),\n        new Cartesian3(0.0, 0.0, -1.0),\n        new Cartesian3(0.0, -1.0, 0.0),\n        new Cartesian3(0.0, -1.0, 0.0),\n        new Cartesian3(0.0, 0.0, 1.0),\n        new Cartesian3(0.0, -1.0, 0.0)\n    ];\n\n    var rights = [\n        new Cartesian3(0.0, 0.0, 1.0),\n        new Cartesian3(1.0, 0.0, 0.0),\n        new Cartesian3(-1.0, 0.0, 0.0),\n        new Cartesian3(0.0, 0.0, -1.0),\n        new Cartesian3(1.0, 0.0, 0.0),\n        new Cartesian3(1.0, 0.0, 0.0)\n    ];\n\n    function computeOmnidirectional(shadowMap, frameState) {\n        // All sides share the same frustum\n        var frustum = new PerspectiveFrustum();\n        frustum.fov = CesiumMath.PI_OVER_TWO;\n        frustum.near = 1.0;\n        frustum.far = shadowMap._pointLightRadius;\n        frustum.aspectRatio = 1.0;\n\n        for (var i = 0; i < 6; ++i) {\n            var camera = shadowMap._passes[i].camera;\n            camera.positionWC = shadowMap._shadowMapCamera.positionWC;\n            camera.positionCartographic = frameState.mapProjection.ellipsoid.cartesianToCartographic(camera.positionWC, camera.positionCartographic);\n            camera.directionWC = directions[i];\n            camera.upWC = ups[i];\n            camera.rightWC = rights[i];\n\n            Matrix4.computeView(camera.positionWC, camera.directionWC, camera.upWC, camera.rightWC, camera.viewMatrix);\n            Matrix4.inverse(camera.viewMatrix, camera.inverseViewMatrix);\n\n            camera.frustum = frustum;\n        }\n    }\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchBoundingSphere = new BoundingSphere();\n    var scratchCenter = scratchBoundingSphere.center;\n\n    function checkVisibility(shadowMap, frameState) {\n        var sceneCamera = shadowMap._sceneCamera;\n        var shadowMapCamera = shadowMap._shadowMapCamera;\n\n        var boundingSphere = scratchBoundingSphere;\n\n        // Check whether the shadow map is in view and needs to be updated\n        if (shadowMap._cascadesEnabled) {\n            // If the nearest shadow receiver is further than the shadow map's maximum distance then the shadow map is out of view.\n            if (sceneCamera.frustum.near >= shadowMap.maximumDistance) {\n                shadowMap._outOfView = true;\n                shadowMap._needsUpdate = false;\n                return;\n            }\n\n            // If the light source is below the horizon then the shadow map is out of view\n            var surfaceNormal = frameState.mapProjection.ellipsoid.geodeticSurfaceNormal(sceneCamera.positionWC, scratchCartesian1);\n            var lightDirection = Cartesian3.negate(shadowMapCamera.directionWC, scratchCartesian2);\n            var dot = Cartesian3.dot(surfaceNormal, lightDirection);\n\n            // Shadows start to fade out once the light gets closer to the horizon.\n            // At this point the globe uses vertex lighting alone to darken the surface.\n            var darknessAmount = CesiumMath.clamp(dot / 0.1, 0.0, 1.0);\n            shadowMap._darkness = CesiumMath.lerp(1.0, shadowMap.darkness, darknessAmount);\n\n            if (dot < 0.0) {\n                shadowMap._outOfView = true;\n                shadowMap._needsUpdate = false;\n                return;\n            }\n\n            // By default cascaded shadows need to update and are always in view\n            shadowMap._needsUpdate = true;\n            shadowMap._outOfView = false;\n        } else if (shadowMap._isPointLight) {\n            // Sphere-frustum intersection test\n            boundingSphere.center = shadowMapCamera.positionWC;\n            boundingSphere.radius = shadowMap._pointLightRadius;\n            shadowMap._outOfView = frameState.cullingVolume.computeVisibility(boundingSphere) === Intersect.OUTSIDE;\n            shadowMap._needsUpdate = !shadowMap._outOfView && !shadowMap._boundingSphere.equals(boundingSphere);\n            BoundingSphere.clone(boundingSphere, shadowMap._boundingSphere);\n        } else {\n            // Simplify frustum-frustum intersection test as a sphere-frustum test\n            var frustumRadius = shadowMapCamera.frustum.far / 2.0;\n            var frustumCenter = Cartesian3.add(shadowMapCamera.positionWC, Cartesian3.multiplyByScalar(shadowMapCamera.directionWC, frustumRadius, scratchCenter), scratchCenter);\n            boundingSphere.center = frustumCenter;\n            boundingSphere.radius = frustumRadius;\n            shadowMap._outOfView = frameState.cullingVolume.computeVisibility(boundingSphere) === Intersect.OUTSIDE;\n            shadowMap._needsUpdate = !shadowMap._outOfView && !shadowMap._boundingSphere.equals(boundingSphere);\n            BoundingSphere.clone(boundingSphere, shadowMap._boundingSphere);\n        }\n    }\n\n    function updateCameras(shadowMap, frameState) {\n        var camera = frameState.camera; // The actual camera in the scene\n        var lightCamera = shadowMap._lightCamera; // The external camera representing the light source\n        var sceneCamera = shadowMap._sceneCamera; // Clone of camera, with clamped near and far planes\n        var shadowMapCamera = shadowMap._shadowMapCamera; // Camera representing the shadow volume, initially cloned from lightCamera\n\n        // Clone light camera into the shadow map camera\n        if (shadowMap._cascadesEnabled) {\n            Cartesian3.clone(lightCamera.directionWC, shadowMapCamera.directionWC);\n        } else if (shadowMap._isPointLight) {\n            Cartesian3.clone(lightCamera.positionWC, shadowMapCamera.positionWC);\n        } else {\n            shadowMapCamera.clone(lightCamera);\n        }\n\n        // Get the light direction in eye coordinates\n        var lightDirection = shadowMap._lightDirectionEC;\n        Matrix4.multiplyByPointAsVector(camera.viewMatrix, shadowMapCamera.directionWC, lightDirection);\n        Cartesian3.normalize(lightDirection, lightDirection);\n        Cartesian3.negate(lightDirection, lightDirection);\n\n        // Get the light position in eye coordinates\n        Matrix4.multiplyByPoint(camera.viewMatrix, shadowMapCamera.positionWC, shadowMap._lightPositionEC);\n        shadowMap._lightPositionEC.w = shadowMap._pointLightRadius;\n\n        // Get the near and far of the scene camera\n        var near;\n        var far;\n        if (shadowMap._fitNearFar) {\n            // shadowFar can be very large, so limit to shadowMap.maximumDistance\n            // Push the far plane slightly further than the near plane to avoid degenerate frustum\n            near = Math.min(frameState.shadowState.nearPlane, shadowMap.maximumDistance);\n            far = Math.min(frameState.shadowState.farPlane, shadowMap.maximumDistance + 1.0);\n        } else {\n            near = camera.frustum.near;\n            far = shadowMap.maximumDistance;\n        }\n\n        shadowMap._sceneCamera = Camera.clone(camera, sceneCamera);\n        camera.frustum.clone(shadowMap._sceneCamera.frustum);\n        shadowMap._sceneCamera.frustum.near = near;\n        shadowMap._sceneCamera.frustum.far = far;\n        shadowMap._distance = far - near;\n\n        checkVisibility(shadowMap, frameState);\n\n        if (!shadowMap._outOfViewPrevious && shadowMap._outOfView) {\n            shadowMap._needsUpdate = true;\n        }\n        shadowMap._outOfViewPrevious = shadowMap._outOfView;\n    }\n\n    /**\n     * @private\n     */\n    ShadowMap.prototype.update = function(frameState) {\n        updateCameras(this, frameState);\n\n        if (this._needsUpdate) {\n            updateFramebuffer(this, frameState.context);\n\n            if (this._isPointLight) {\n                computeOmnidirectional(this, frameState);\n            }\n\n            if (this._cascadesEnabled) {\n                fitShadowMapToScene(this, frameState);\n\n                if (this._numberOfCascades > 1) {\n                    computeCascades(this, frameState);\n                }\n            }\n\n            if (!this._isPointLight) {\n                // Compute the culling volume\n                var shadowMapCamera = this._shadowMapCamera;\n                var position = shadowMapCamera.positionWC;\n                var direction = shadowMapCamera.directionWC;\n                var up = shadowMapCamera.upWC;\n                this._shadowMapCullingVolume = shadowMapCamera.frustum.computeCullingVolume(position, direction, up);\n\n                if (this._passes.length === 1) {\n                    // Since there is only one pass, use the shadow map camera as the pass camera.\n                    this._passes[0].camera.clone(shadowMapCamera);\n                }\n            } else {\n                this._shadowMapCullingVolume = CullingVolume.fromBoundingSphere(this._boundingSphere);\n            }\n        }\n\n        if (this._passes.length === 1) {\n            // Transforms from eye space to shadow texture space.\n            // Always requires an update since the scene camera constantly changes.\n            var inverseView = this._sceneCamera.inverseViewMatrix;\n            Matrix4.multiply(this._shadowMapCamera.getViewProjection(), inverseView, this._shadowMapMatrix);\n        }\n\n        if (this.debugShow) {\n            applyDebugSettings(this, frameState);\n        }\n    };\n\n    /**\n     * @private\n     */\n    ShadowMap.prototype.updatePass = function(context, shadowPass) {\n        clearFramebuffer(this, context, shadowPass);\n    };\n\n    var scratchTexelStepSize = new Cartesian2();\n\n    function combineUniforms(shadowMap, uniforms, isTerrain) {\n        var bias = shadowMap._isPointLight ? shadowMap._pointBias : (isTerrain ? shadowMap._terrainBias : shadowMap._primitiveBias);\n\n        var mapUniforms = {\n            shadowMap_texture :function() {\n                return shadowMap._shadowMapTexture;\n            },\n            shadowMap_textureCube : function() {\n                return shadowMap._shadowMapTexture;\n            },\n            shadowMap_matrix : function() {\n                return shadowMap._shadowMapMatrix;\n            },\n            shadowMap_cascadeSplits : function() {\n                return shadowMap._cascadeSplits;\n            },\n            shadowMap_cascadeMatrices : function() {\n                return shadowMap._cascadeMatrices;\n            },\n            shadowMap_lightDirectionEC : function() {\n                return shadowMap._lightDirectionEC;\n            },\n            shadowMap_lightPositionEC : function() {\n                return shadowMap._lightPositionEC;\n            },\n            shadowMap_cascadeDistances : function() {\n                return shadowMap._cascadeDistances;\n            },\n            shadowMap_texelSizeDepthBiasAndNormalShadingSmooth : function() {\n                var texelStepSize = scratchTexelStepSize;\n                texelStepSize.x = 1.0 / shadowMap._textureSize.x;\n                texelStepSize.y = 1.0 / shadowMap._textureSize.y;\n\n                return Cartesian4.fromElements(texelStepSize.x, texelStepSize.y, bias.depthBias, bias.normalShadingSmooth, this.combinedUniforms1);\n            },\n            shadowMap_normalOffsetScaleDistanceMaxDistanceAndDarkness : function() {\n                return Cartesian4.fromElements(bias.normalOffsetScale, shadowMap._distance, shadowMap.maximumDistance, shadowMap._darkness, this.combinedUniforms2);\n            },\n\n            combinedUniforms1 : new Cartesian4(),\n            combinedUniforms2 : new Cartesian4()\n        };\n\n        return combine(uniforms, mapUniforms, false);\n    }\n\n    function createCastDerivedCommand(shadowMap, shadowsDirty, command, context, oldShaderId, result) {\n        var castShader;\n        var castRenderState;\n        var castUniformMap;\n        if (defined(result)) {\n            castShader = result.shaderProgram;\n            castRenderState = result.renderState;\n            castUniformMap = result.uniformMap;\n        }\n\n        result = DrawCommand.shallowClone(command, result);\n        result.castShadows = true;\n        result.receiveShadows = false;\n\n        if (!defined(castShader) || oldShaderId !== command.shaderProgram.id || shadowsDirty) {\n            var shaderProgram = command.shaderProgram;\n\n            var isTerrain = command.pass === Pass.GLOBE;\n            var isOpaque = command.pass !== Pass.TRANSLUCENT;\n            var isPointLight = shadowMap._isPointLight;\n            var usesDepthTexture= shadowMap._usesDepthTexture;\n\n            var keyword =  ShadowMapShader.getShadowCastShaderKeyword(isPointLight, isTerrain, usesDepthTexture, isOpaque);\n            castShader = context.shaderCache.getDerivedShaderProgram(shaderProgram, keyword);\n            if (!defined(castShader)) {\n                var vertexShaderSource = shaderProgram.vertexShaderSource;\n                var fragmentShaderSource = shaderProgram.fragmentShaderSource;\n\n                var castVS = ShadowMapShader.createShadowCastVertexShader(vertexShaderSource, isPointLight, isTerrain);\n                var castFS = ShadowMapShader.createShadowCastFragmentShader(fragmentShaderSource, isPointLight, usesDepthTexture, isOpaque);\n\n                castShader = context.shaderCache.createDerivedShaderProgram(shaderProgram, keyword, {\n                    vertexShaderSource : castVS,\n                    fragmentShaderSource : castFS,\n                    attributeLocations : shaderProgram._attributeLocations\n                });\n            }\n\n            castRenderState = shadowMap._primitiveRenderState;\n            if (isPointLight) {\n                castRenderState = shadowMap._pointRenderState;\n            } else if (isTerrain) {\n                castRenderState = shadowMap._terrainRenderState;\n            }\n\n            // Modify the render state for commands that do not use back-face culling, e.g. flat textured walls\n            var cullEnabled = command.renderState.cull.enabled;\n            if (!cullEnabled) {\n                castRenderState = clone(castRenderState, false);\n                castRenderState.cull = clone(castRenderState.cull, false);\n                castRenderState.cull.enabled = false;\n                castRenderState = RenderState.fromCache(castRenderState);\n            }\n\n            castUniformMap = combineUniforms(shadowMap, command.uniformMap, isTerrain);\n        }\n\n        result.shaderProgram = castShader;\n        result.renderState = castRenderState;\n        result.uniformMap = castUniformMap;\n\n        return result;\n    }\n\n    ShadowMap.createReceiveDerivedCommand = function(lightShadowMaps, command, shadowsDirty, context, result) {\n        if (!defined(result)) {\n            result = {};\n        }\n\n        var lightShadowMapsEnabled = (lightShadowMaps.length > 0);\n        var shaderProgram = command.shaderProgram;\n        var vertexShaderSource = shaderProgram.vertexShaderSource;\n        var fragmentShaderSource = shaderProgram.fragmentShaderSource;\n        var isTerrain = command.pass === Pass.GLOBE;\n\n        var hasTerrainNormal = false;\n        if (isTerrain) {\n            hasTerrainNormal = command.owner.data.renderedMesh.encoding.hasVertexNormals;\n        }\n\n        if (command.receiveShadows && lightShadowMapsEnabled) {\n            // Only generate a receiveCommand if there is a shadow map originating from a light source.\n            var receiveShader;\n            var receiveUniformMap;\n            if (defined(result.receiveCommand)) {\n                receiveShader = result.receiveCommand.shaderProgram;\n                receiveUniformMap = result.receiveCommand.uniformMap;\n            }\n\n            result.receiveCommand = DrawCommand.shallowClone(command, result.receiveCommand);\n            result.castShadows = false;\n            result.receiveShadows = true;\n\n            // If castShadows changed, recompile the receive shadows shader. The normal shading technique simulates\n            // self-shadowing so it should be turned off if castShadows is false.\n            var castShadowsDirty = result.receiveShaderCastShadows !== command.castShadows;\n            var shaderDirty = result.receiveShaderProgramId !== command.shaderProgram.id;\n\n            if (!defined(receiveShader) || shaderDirty || shadowsDirty || castShadowsDirty) {\n                var keyword = ShadowMapShader.getShadowReceiveShaderKeyword(lightShadowMaps[0], command.castShadows, isTerrain, hasTerrainNormal);\n                receiveShader = context.shaderCache.getDerivedShaderProgram(shaderProgram, keyword);\n                if (!defined(receiveShader)) {\n                    var receiveVS = ShadowMapShader.createShadowReceiveVertexShader(vertexShaderSource, isTerrain, hasTerrainNormal);\n                    var receiveFS = ShadowMapShader.createShadowReceiveFragmentShader(fragmentShaderSource, lightShadowMaps[0], command.castShadows, isTerrain, hasTerrainNormal);\n\n                    receiveShader = context.shaderCache.createDerivedShaderProgram(shaderProgram, keyword, {\n                        vertexShaderSource : receiveVS,\n                        fragmentShaderSource : receiveFS,\n                        attributeLocations : shaderProgram._attributeLocations\n                    });\n                }\n\n                receiveUniformMap = combineUniforms(lightShadowMaps[0], command.uniformMap, isTerrain);\n            }\n\n            result.receiveCommand.shaderProgram = receiveShader;\n            result.receiveCommand.uniformMap = receiveUniformMap;\n            result.receiveShaderProgramId = command.shaderProgram.id;\n            result.receiveShaderCastShadows = command.castShadows;\n        }\n\n        return result;\n    };\n\n    ShadowMap.createCastDerivedCommand = function(shadowMaps, command, shadowsDirty, context, result) {\n        if (!defined(result)) {\n            result = {};\n        }\n\n        if (command.castShadows) {\n            var castCommands = result.castCommands;\n            if (!defined(castCommands)) {\n                castCommands = result.castCommands = [];\n            }\n\n            var oldShaderId = result.castShaderProgramId;\n\n            var shadowMapLength = shadowMaps.length;\n            castCommands.length = shadowMapLength;\n\n            for (var i = 0; i < shadowMapLength; ++i) {\n                castCommands[i] = createCastDerivedCommand(shadowMaps[i], shadowsDirty, command, context, oldShaderId, castCommands[i]);\n            }\n\n            result.castShaderProgramId = command.shaderProgram.id;\n        }\n\n        return result;\n    };\n\n    /**\n     * @private\n     */\n    ShadowMap.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * @private\n     */\n    ShadowMap.prototype.destroy = function() {\n        destroyFramebuffer(this);\n\n        this._debugLightFrustum = this._debugLightFrustum && this._debugLightFrustum.destroy();\n        this._debugCameraFrustum = this._debugCameraFrustum && this._debugCameraFrustum.destroy();\n        this._debugShadowViewCommand = this._debugShadowViewCommand && this._debugShadowViewCommand.shaderProgram && this._debugShadowViewCommand.shaderProgram.destroy();\n\n        for (var i = 0; i < this._numberOfCascades; ++i) {\n            this._debugCascadeFrustums[i] = this._debugCascadeFrustums[i] && this._debugCascadeFrustums[i].destroy();\n        }\n\n        return destroyObject(this);\n    };\n\n    return ShadowMap;\n});\n","define([\n        '../Core/Color',\n        '../Core/defined',\n        '../Core/destroyObject',\n        '../Core/PixelFormat',\n        '../Renderer/ClearCommand',\n        '../Renderer/Framebuffer',\n        '../Renderer/PixelDatatype',\n        '../Renderer/Renderbuffer',\n        '../Renderer/RenderbufferFormat',\n        '../Renderer/RenderState',\n        '../Renderer/Sampler',\n        '../Renderer/Texture',\n        '../Renderer/TextureMagnificationFilter',\n        '../Renderer/TextureMinificationFilter',\n        '../Renderer/TextureWrap'\n    ], function(\n        Color,\n        defined,\n        destroyObject,\n        PixelFormat,\n        ClearCommand,\n        Framebuffer,\n        PixelDatatype,\n        Renderbuffer,\n        RenderbufferFormat,\n        RenderState,\n        Sampler,\n        Texture,\n        TextureMagnificationFilter,\n        TextureMinificationFilter,\n        TextureWrap) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function SceneFramebuffer() {\n        this._colorTexture = undefined;\n        this._idTexture = undefined;\n        this._depthStencilTexture = undefined;\n        this._depthStencilRenderbuffer = undefined;\n        this._framebuffer = undefined;\n        this._idFramebuffer = undefined;\n\n        this._idClearColor = new Color(0.0, 0.0, 0.0, 0.0);\n\n        this._useHdr = undefined;\n\n        this._clearCommand = new ClearCommand({\n            color : new Color(0.0, 0.0, 0.0, 0.0),\n            depth : 1.0,\n            owner : this\n        });\n    }\n\n    function destroyResources(post) {\n        post._framebuffer = post._framebuffer && post._framebuffer.destroy();\n        post._idFramebuffer = post._idFramebuffer && post._idFramebuffer.destroy();\n        post._colorTexture = post._colorTexture && post._colorTexture.destroy();\n        post._idTexture = post._idTexture && post._idTexture.destroy();\n        post._depthStencilTexture = post._depthStencilTexture && post._depthStencilTexture.destroy();\n        post._depthStencilRenderbuffer = post._depthStencilRenderbuffer && post._depthStencilRenderbuffer.destroy();\n        post._depthStencilIdTexture = post._depthStencilIdTexture && post._depthStencilIdTexture.destroy();\n        post._depthStencilIdRenderbuffer = post._depthStencilIdRenderbuffer && post._depthStencilIdRenderbuffer.destroy();\n\n        post._framebuffer = undefined;\n        post._idFramebuffer = undefined;\n        post._colorTexture = undefined;\n        post._idTexture = undefined;\n        post._depthStencilTexture = undefined;\n        post._depthStencilRenderbuffer = undefined;\n        post._depthStencilIdTexture = undefined;\n        post._depthStencilIdRenderbuffer = undefined;\n    }\n\n    SceneFramebuffer.prototype.update = function(context, viewport, hdr) {\n        var width = viewport.width;\n        var height = viewport.height;\n        var colorTexture = this._colorTexture;\n        if (defined(colorTexture) && colorTexture.width === width && colorTexture.height === height && hdr === this._useHdr) {\n            return;\n        }\n\n        destroyResources(this);\n        this._useHdr = hdr;\n\n        var pixelDatatype = hdr ? (context.halfFloatingPointTexture ? PixelDatatype.HALF_FLOAT : PixelDatatype.FLOAT) : PixelDatatype.UNSIGNED_BYTE;\n        this._colorTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : pixelDatatype,\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n\n        this._idTexture = new Texture({\n            context : context,\n            width : width,\n            height : height,\n            pixelFormat : PixelFormat.RGBA,\n            pixelDatatype : PixelDatatype.UNSIGNED_BYTE,\n            sampler : new Sampler({\n                wrapS : TextureWrap.CLAMP_TO_EDGE,\n                wrapT : TextureWrap.CLAMP_TO_EDGE,\n                minificationFilter : TextureMinificationFilter.NEAREST,\n                magnificationFilter : TextureMagnificationFilter.NEAREST\n            })\n        });\n\n        if (context.depthTexture) {\n            this._depthStencilTexture = new Texture({\n                context : context,\n                width : width,\n                height : height,\n                pixelFormat : PixelFormat.DEPTH_STENCIL,\n                pixelDatatype : PixelDatatype.UNSIGNED_INT_24_8,\n                sampler : new Sampler({\n                    wrapS : TextureWrap.CLAMP_TO_EDGE,\n                    wrapT : TextureWrap.CLAMP_TO_EDGE,\n                    minificationFilter : TextureMinificationFilter.NEAREST,\n                    magnificationFilter : TextureMagnificationFilter.NEAREST\n                })\n            });\n            this._depthStencilIdTexture = new Texture({\n                context : context,\n                width : width,\n                height : height,\n                pixelFormat : PixelFormat.DEPTH_STENCIL,\n                pixelDatatype : PixelDatatype.UNSIGNED_INT_24_8,\n                sampler : new Sampler({\n                    wrapS : TextureWrap.CLAMP_TO_EDGE,\n                    wrapT : TextureWrap.CLAMP_TO_EDGE,\n                    minificationFilter : TextureMinificationFilter.NEAREST,\n                    magnificationFilter : TextureMagnificationFilter.NEAREST\n                })\n            });\n        } else {\n            this._depthStencilRenderbuffer = new Renderbuffer({\n                context : context,\n                width : width,\n                height : height,\n                format : RenderbufferFormat.DEPTH_STENCIL\n            });\n            this._depthStencilIdRenderbuffer = new Renderbuffer({\n                context : context,\n                width : width,\n                height : height,\n                format : RenderbufferFormat.DEPTH_STENCIL\n            });\n        }\n\n        this._framebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [this._colorTexture],\n            depthStencilTexture : this._depthStencilTexture,\n            depthStencilRenderbuffer : this._depthStencilRenderbuffer,\n            destroyAttachments : false\n        });\n\n        this._idFramebuffer = new Framebuffer({\n            context : context,\n            colorTextures : [this._idTexture],\n            depthStencilTexture : this._depthStencilIdTexture,\n            depthStencilRenderbuffer : this._depthStencilIdRenderbuffer,\n            destroyAttachments : false\n        });\n    };\n\n    SceneFramebuffer.prototype.clear = function(context, passState, clearColor) {\n        var framebuffer = passState.framebuffer;\n\n        passState.framebuffer = this._framebuffer;\n        Color.clone(clearColor, this._clearCommand.color);\n        this._clearCommand.execute(context, passState);\n\n        passState.framebuffer = this._idFramebuffer;\n        Color.clone(this._idClearColor, this._clearCommand.color);\n        this._clearCommand.execute(context, passState);\n\n        passState.framebuffer = framebuffer;\n    };\n\n    SceneFramebuffer.prototype.getFramebuffer = function() {\n        return this._framebuffer;\n    };\n\n    SceneFramebuffer.prototype.getIdFramebuffer = function() {\n        return this._idFramebuffer;\n    };\n\n    SceneFramebuffer.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    SceneFramebuffer.prototype.destroy = function() {\n        destroyResources(this);\n        return destroyObject(this);\n    };\n\n    return SceneFramebuffer;\n});\n","define([\n        '../Core/ApproximateTerrainHeights',\n        '../Core/BoundingSphere',\n        '../Core/Check',\n        '../Core/createGuid',\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/defineProperties',\n        '../Core/destroyObject',\n        '../Core/EventHelper',\n        '../Scene/GroundPolylinePrimitive',\n        '../Scene/GroundPrimitive',\n        '../Scene/OrderedGroundPrimitiveCollection',\n        '../Scene/PrimitiveCollection',\n        './BillboardVisualizer',\n        './BoundingSphereState',\n        './CustomDataSource',\n        './GeometryVisualizer',\n        './LabelVisualizer',\n        './ModelVisualizer',\n        './PathVisualizer',\n        './PointVisualizer',\n        './PolylineVisualizer'\n    ], function(\n        ApproximateTerrainHeights,\n        BoundingSphere,\n        Check,\n        createGuid,\n        defaultValue,\n        defined,\n        defineProperties,\n        destroyObject,\n        EventHelper,\n        GroundPolylinePrimitive,\n        GroundPrimitive,\n        OrderedGroundPrimitiveCollection,\n        PrimitiveCollection,\n        BillboardVisualizer,\n        BoundingSphereState,\n        CustomDataSource,\n        GeometryVisualizer,\n        LabelVisualizer,\n        ModelVisualizer,\n        PathVisualizer,\n        PointVisualizer,\n        PolylineVisualizer) {\n    'use strict';\n\n    /**\n     * Visualizes a collection of {@link DataSource} instances.\n     * @alias DataSourceDisplay\n     * @constructor\n     *\n     * @param {Object} options Object with the following properties:\n     * @param {Scene} options.scene The scene in which to display the data.\n     * @param {DataSourceCollection} options.dataSourceCollection The data sources to display.\n     * @param {DataSourceDisplay~VisualizersCallback} [options.visualizersCallback=DataSourceDisplay.defaultVisualizersCallback]\n     *        A function which creates an array of visualizers used for visualization.\n     *        If undefined, all standard visualizers are used.\n     */\n    function DataSourceDisplay(options) {\n        \n\n        this._displayID = createGuid();\n\n        GroundPrimitive.initializeTerrainHeights();\n        GroundPolylinePrimitive.initializeTerrainHeights();\n\n        var scene = options.scene;\n        var dataSourceCollection = options.dataSourceCollection;\n\n        this._eventHelper = new EventHelper();\n        this._eventHelper.add(dataSourceCollection.dataSourceAdded, this._onDataSourceAdded, this);\n        this._eventHelper.add(dataSourceCollection.dataSourceRemoved, this._onDataSourceRemoved, this);\n        this._eventHelper.add(dataSourceCollection.dataSourceMoved, this._onDataSourceMoved, this);\n\n        this._dataSourceCollection = dataSourceCollection;\n        this._scene = scene;\n        this._visualizersCallback = defaultValue(options.visualizersCallback, DataSourceDisplay.defaultVisualizersCallback);\n\n        var primitivesAdded = false;\n        var primitives = new PrimitiveCollection();\n        var groundPrimitives = new PrimitiveCollection();\n\n        if (dataSourceCollection.length > 0) {\n            scene.primitives.add(primitives);\n            scene.groundPrimitives.add(groundPrimitives);\n            primitivesAdded = true;\n        }\n\n        this._primitives = primitives;\n        this._groundPrimitives = groundPrimitives;\n\n        for (var i = 0, len = dataSourceCollection.length; i < len; i++) {\n            this._onDataSourceAdded(dataSourceCollection, dataSourceCollection.get(i));\n        }\n\n        var defaultDataSource = new CustomDataSource();\n        this._onDataSourceAdded(undefined, defaultDataSource);\n        this._defaultDataSource = defaultDataSource;\n\n        var removeDefaultDataSoureListener;\n        var removeDataSourceCollectionListener;\n        if (!primitivesAdded) {\n            var that = this;\n            var addPrimitives = function() {\n                scene.primitives.add(primitives);\n                scene.groundPrimitives.add(groundPrimitives);\n                removeDefaultDataSoureListener();\n                removeDataSourceCollectionListener();\n                that._removeDefaultDataSoureListener = undefined;\n                that._removeDataSourceCollectionListener = undefined;\n            };\n            removeDefaultDataSoureListener = defaultDataSource.entities.collectionChanged.addEventListener(addPrimitives);\n            removeDataSourceCollectionListener = dataSourceCollection.dataSourceAdded.addEventListener(addPrimitives);\n        }\n\n        this._removeDefaultDataSoureListener = removeDefaultDataSoureListener;\n        this._removeDataSourceCollectionListener = removeDataSourceCollectionListener;\n\n        this._ready = false;\n    }\n\n    /**\n     * Gets or sets the default function which creates an array of visualizers used for visualization.\n     * By default, this function uses all standard visualizers.\n     *\n     * @type {DataSourceDisplay~VisualizersCallback}\n     */\n    DataSourceDisplay.defaultVisualizersCallback = function(scene, entityCluster, dataSource) {\n        var entities = dataSource.entities;\n        return [new BillboardVisualizer(entityCluster, entities),\n                new GeometryVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives),\n                new LabelVisualizer(entityCluster, entities),\n                new ModelVisualizer(scene, entities),\n                new PointVisualizer(entityCluster, entities),\n                new PathVisualizer(scene, entities),\n                new PolylineVisualizer(scene, entities, dataSource._primitives, dataSource._groundPrimitives)];\n    };\n\n    defineProperties(DataSourceDisplay.prototype, {\n        /**\n         * Gets the scene associated with this display.\n         * @memberof DataSourceDisplay.prototype\n         * @type {Scene}\n         */\n        scene : {\n            get : function() {\n                return this._scene;\n            }\n        },\n        /**\n         * Gets the collection of data sources to display.\n         * @memberof DataSourceDisplay.prototype\n         * @type {DataSourceCollection}\n         */\n        dataSources : {\n            get : function() {\n                return this._dataSourceCollection;\n            }\n        },\n        /**\n         * Gets the default data source instance which can be used to\n         * manually create and visualize entities not tied to\n         * a specific data source. This instance is always available\n         * and does not appear in the list dataSources collection.\n         * @memberof DataSourceDisplay.prototype\n         * @type {CustomDataSource}\n         */\n        defaultDataSource : {\n            get : function() {\n                return this._defaultDataSource;\n            }\n        },\n\n        /**\n         * Gets a value indicating whether or not all entities in the data source are ready\n         * @memberof DataSourceDisplay.prototype\n         * @type {Boolean}\n         * @readonly\n         */\n        ready : {\n            get : function() {\n                return this._ready;\n            }\n        }\n    });\n\n    /**\n     * Returns true if this object was destroyed; otherwise, false.\n     * <br /><br />\n     * If this object was destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.\n     *\n     * @returns {Boolean} True if this object was destroyed; otherwise, false.\n     *\n     * @see DataSourceDisplay#destroy\n     */\n    DataSourceDisplay.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    /**\n     * Destroys the WebGL resources held by this object.  Destroying an object allows for deterministic\n     * release of WebGL resources, instead of relying on the garbage collector to destroy this object.\n     * <br /><br />\n     * Once an object is destroyed, it should not be used; calling any function other than\n     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.  Therefore,\n     * assign the return value (<code>undefined</code>) to the object as done in the example.\n     *\n     * @exception {DeveloperError} This object was destroyed, i.e., destroy() was called.\n     *\n     *\n     * @example\n     * dataSourceDisplay = dataSourceDisplay.destroy();\n     *\n     * @see DataSourceDisplay#isDestroyed\n     */\n    DataSourceDisplay.prototype.destroy = function() {\n        this._eventHelper.removeAll();\n\n        var dataSourceCollection = this._dataSourceCollection;\n        for (var i = 0, length = dataSourceCollection.length; i < length; ++i) {\n            this._onDataSourceRemoved(this._dataSourceCollection, dataSourceCollection.get(i));\n        }\n        this._onDataSourceRemoved(undefined, this._defaultDataSource);\n\n        if (defined(this._removeDefaultDataSoureListener)) {\n            this._removeDefaultDataSoureListener();\n            this._removeDataSourceCollectionListener();\n        } else {\n            this._scene.primitives.remove(this._primitives);\n            this._scene.groundPrimitives.remove(this._groundPrimitives);\n        }\n\n        return destroyObject(this);\n    };\n\n    /**\n     * Updates the display to the provided time.\n     *\n     * @param {JulianDate} time The simulation time.\n     * @returns {Boolean} True if all data sources are ready to be displayed, false otherwise.\n     */\n    DataSourceDisplay.prototype.update = function(time) {\n        \n\n        if (!ApproximateTerrainHeights.initialized) {\n            this._ready = false;\n            return false;\n        }\n\n        var result = true;\n\n        var i;\n        var x;\n        var visualizers;\n        var vLength;\n        var dataSources = this._dataSourceCollection;\n        var length = dataSources.length;\n        for (i = 0; i < length; i++) {\n            var dataSource = dataSources.get(i);\n            if (defined(dataSource.update)) {\n                result = dataSource.update(time) && result;\n            }\n\n            visualizers = dataSource._visualizersByDisplayID[this._displayID];\n            vLength = visualizers.length;\n            for (x = 0; x < vLength; x++) {\n                result = visualizers[x].update(time) && result;\n            }\n        }\n\n        visualizers = this._defaultDataSource._visualizersByDisplayID[this._displayID];\n        vLength = visualizers.length;\n        for (x = 0; x < vLength; x++) {\n            result = visualizers[x].update(time) && result;\n        }\n\n        this._ready = result;\n\n        return result;\n    };\n\n    var getBoundingSphereArrayScratch = [];\n    var getBoundingSphereBoundingSphereScratch = new BoundingSphere();\n\n    /**\n     * Computes a bounding sphere which encloses the visualization produced for the specified entity.\n     * The bounding sphere is in the fixed frame of the scene's globe.\n     *\n     * @param {Entity} entity The entity whose bounding sphere to compute.\n     * @param {Boolean} allowPartial If true, pending bounding spheres are ignored and an answer will be returned from the currently available data.\n     *                               If false, the the function will halt and return pending if any of the bounding spheres are pending.\n     * @param {BoundingSphere} result The bounding sphere onto which to store the result.\n     * @returns {BoundingSphereState} BoundingSphereState.DONE if the result contains the bounding sphere,\n     *                       BoundingSphereState.PENDING if the result is still being computed, or\n     *                       BoundingSphereState.FAILED if the entity has no visualization in the current scene.\n     * @private\n     */\n    DataSourceDisplay.prototype.getBoundingSphere = function(entity, allowPartial, result) {\n        \n\n        if (!this._ready) {\n            return BoundingSphereState.PENDING;\n        }\n\n        var i;\n        var length;\n        var dataSource = this._defaultDataSource;\n        if (!dataSource.entities.contains(entity)) {\n            dataSource = undefined;\n\n            var dataSources = this._dataSourceCollection;\n            length = dataSources.length;\n            for (i = 0; i < length; i++) {\n                var d = dataSources.get(i);\n                if (d.entities.contains(entity)) {\n                    dataSource = d;\n                    break;\n                }\n            }\n        }\n\n        if (!defined(dataSource)) {\n            return BoundingSphereState.FAILED;\n        }\n\n        var boundingSpheres = getBoundingSphereArrayScratch;\n        var tmp = getBoundingSphereBoundingSphereScratch;\n\n        var count = 0;\n        var state = BoundingSphereState.DONE;\n        var visualizers = dataSource._visualizers;\n        var visualizersLength = visualizers.length;\n\n        for (i = 0; i < visualizersLength; i++) {\n            var visualizer = visualizers[i];\n            if (defined(visualizer.getBoundingSphere)) {\n                state = visualizers[i].getBoundingSphere(entity, tmp);\n                if (!allowPartial && state === BoundingSphereState.PENDING) {\n                    return BoundingSphereState.PENDING;\n                } else if (state === BoundingSphereState.DONE) {\n                    boundingSpheres[count] = BoundingSphere.clone(tmp, boundingSpheres[count]);\n                    count++;\n                }\n            }\n        }\n\n        if (count === 0) {\n            return BoundingSphereState.FAILED;\n        }\n\n        boundingSpheres.length = count;\n        BoundingSphere.fromBoundingSpheres(boundingSpheres, result);\n        return BoundingSphereState.DONE;\n    };\n\n    DataSourceDisplay.prototype._onDataSourceAdded = function(dataSourceCollection, dataSource) {\n        var scene = this._scene;\n\n        var displayPrimitives = this._primitives;\n        var displayGroundPrimitives = this._groundPrimitives;\n\n        var primitives = displayPrimitives.add(new PrimitiveCollection());\n        var groundPrimitives = displayGroundPrimitives.add(new OrderedGroundPrimitiveCollection());\n\n        dataSource._primitives = primitives;\n        dataSource._groundPrimitives = groundPrimitives;\n\n        var entityCluster = dataSource.clustering;\n        entityCluster._initialize(scene);\n\n        primitives.add(entityCluster);\n\n        var visualizers = this._visualizersCallback(scene, entityCluster, dataSource);\n\n        dataSource._visualizersByDisplayID = dataSource._visualizersByDisplayID || {};\n        dataSource._visualizersByDisplayID[this._displayID] = visualizers;\n\n        dataSource._visualizers = dataSource._visualizers || [];\n        dataSource._visualizers = dataSource._visualizers.concat(visualizers);\n    };\n\n    DataSourceDisplay.prototype._onDataSourceRemoved = function(dataSourceCollection, dataSource) {\n        var displayPrimitives = this._primitives;\n        var displayGroundPrimitives = this._groundPrimitives;\n\n        var primitives = dataSource._primitives;\n        var groundPrimitives = dataSource._groundPrimitives;\n\n        var entityCluster = dataSource.clustering;\n        primitives.remove(entityCluster);\n\n        var visualizers = dataSource._visualizersByDisplayID[this._displayID];\n        if (!defined(visualizers)) {\n            return;\n        }\n\n        var length = visualizers.length;\n        for (var i = 0; i < length; i++) {\n            var visualizer = visualizers[i];\n            visualizer.destroy();\n\n            var index = dataSource._visualizers.indexOf(visualizer);\n            dataSource._visualizers.splice(index, 1);\n        }\n\n        delete dataSource._visualizersByDisplayID[this._displayID];\n\n        displayPrimitives.remove(primitives);\n        displayGroundPrimitives.remove(groundPrimitives);\n    };\n\n    DataSourceDisplay.prototype._onDataSourceMoved = function(dataSource, newIndex, oldIndex) {\n        var displayPrimitives = this._primitives;\n        var displayGroundPrimitives = this._groundPrimitives;\n\n        var primitives = dataSource._primitives;\n        var groundPrimitives = dataSource._groundPrimitives;\n\n        if (newIndex === oldIndex + 1) {\n            displayPrimitives.raise(primitives);\n            displayGroundPrimitives.raise(groundPrimitives);\n        } else if (newIndex === oldIndex - 1) {\n            displayPrimitives.lower(primitives);\n            displayGroundPrimitives.lower(groundPrimitives);\n        } else if (newIndex === 0) {\n            displayPrimitives.lowerToBottom(primitives);\n            displayGroundPrimitives.lowerToBottom(groundPrimitives);\n            displayPrimitives.raise(primitives); // keep defaultDataSource primitives at index 0 since it's not in the collection\n            displayGroundPrimitives.raise(groundPrimitives);\n        } else {\n            displayPrimitives.raiseToTop(primitives);\n            displayGroundPrimitives.raiseToTop(groundPrimitives);\n        }\n    };\n\n    /**\n     * A function which creates an array of visualizers used for visualization.\n     * @callback DataSourceDisplay~VisualizersCallback\n     *\n     * @param {Scene} scene The scene to create visualizers for.\n     * @param {DataSource} dataSource The data source to create visualizers for.\n     * @returns {Visualizer[]} An array of visualizers used for visualization.\n     *\n     * @example\n     * function createVisualizers(scene, dataSource) {\n     *     return [new Cesium.BillboardVisualizer(scene, dataSource.entities)];\n     * }\n     */\n\n    return DataSourceDisplay;\n});\n","define([\n    '../Core/Cartesian3',\n    '../Core/Cartographic',\n    '../Core/Check',\n    '../Core/defined',\n    '../Core/defineProperties',\n    '../Core/destroyObject',\n    '../Core/Event',\n    '../Core/Iso8601',\n    '../Core/Math',\n    '../Scene/HeightReference',\n    '../Scene/SceneMode',\n    './Property'\n], function(\n    Cartesian3,\n    Cartographic,\n    Check,\n    defined,\n    defineProperties,\n    destroyObject,\n    Event,\n    Iso8601,\n    CesiumMath,\n    HeightReference,\n    SceneMode,\n    Property) {\n    'use strict';\n\n    var scratchPosition = new Cartesian3();\n    var scratchCarto = new Cartographic();\n\n    /**\n     * @private\n     */\n    function TerrainOffsetProperty(scene, positionProperty, heightReferenceProperty, extrudedHeightReferenceProperty) {\n        \n\n        this._scene = scene;\n        this._heightReference = heightReferenceProperty;\n        this._extrudedHeightReference = extrudedHeightReferenceProperty;\n        this._positionProperty = positionProperty;\n\n        this._position = new Cartesian3();\n        this._cartographicPosition = new Cartographic();\n        this._normal = new Cartesian3();\n\n        this._definitionChanged = new Event();\n        this._terrainHeight = 0;\n        this._removeCallbackFunc = undefined;\n        this._removeEventListener = undefined;\n        this._removeModeListener = undefined;\n\n        var that = this;\n        if (defined(scene.globe)) {\n            this._removeEventListener = scene.terrainProviderChanged.addEventListener(function() {\n                that._updateClamping();\n            });\n            this._removeModeListener = scene.morphComplete.addEventListener(function() {\n                that._updateClamping();\n            });\n        }\n\n        if (positionProperty.isConstant) {\n            var position = positionProperty.getValue(Iso8601.MINIMUM_VALUE, scratchPosition);\n            if (!defined(position) || Cartesian3.equals(position, Cartesian3.ZERO) || !defined(scene.globe)) {\n                return;\n            }\n            this._position = Cartesian3.clone(position, this._position);\n\n            this._updateClamping();\n\n            this._normal = scene.globe.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n        }\n    }\n\n    defineProperties(TerrainOffsetProperty.prototype, {\n        /**\n         * Gets a value indicating if this property is constant.\n         * @memberof TerrainOffsetProperty.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         */\n        isConstant : {\n            get : function() {\n                return false;\n            }\n        },\n        /**\n         * Gets the event that is raised whenever the definition of this property changes.\n         * @memberof TerrainOffsetProperty.prototype\n         *\n         * @type {Event}\n         * @readonly\n         */\n        definitionChanged : {\n            get : function() {\n                return this._definitionChanged;\n            }\n        }\n    });\n\n    /**\n     * @private\n     */\n    TerrainOffsetProperty.prototype._updateClamping = function() {\n        if (defined(this._removeCallbackFunc)) {\n            this._removeCallbackFunc();\n        }\n\n        var scene = this._scene;\n        var globe = scene.globe;\n        var position = this._position;\n\n        if (!defined(globe) || Cartesian3.equals(position, Cartesian3.ZERO)) {\n            this._terrainHeight = 0;\n            return;\n        }\n        var ellipsoid = globe.ellipsoid;\n        var surface = globe._surface;\n\n        var that = this;\n        var cartographicPosition = ellipsoid.cartesianToCartographic(position, this._cartographicPosition);\n        var height = globe.getHeight(cartographicPosition);\n        if (defined(height)) {\n            this._terrainHeight = height;\n        } else {\n            this._terrainHeight = 0;\n        }\n\n        function updateFunction(clampedPosition) {\n            if (scene.mode === SceneMode.SCENE3D) {\n                var carto = ellipsoid.cartesianToCartographic(clampedPosition, scratchCarto);\n                that._terrainHeight = carto.height;\n            } else {\n                that._terrainHeight = clampedPosition.x;\n            }\n            that.definitionChanged.raiseEvent();\n        }\n        this._removeCallbackFunc = surface.updateHeight(cartographicPosition, updateFunction);\n    };\n\n    /**\n     * Gets the height relative to the terrain based on the positions.\n     *\n     * @returns {Cartesian3} The offset\n     */\n    TerrainOffsetProperty.prototype.getValue = function(time, result) {\n        var heightReference = Property.getValueOrDefault(this._heightReference, time, HeightReference.NONE);\n        var extrudedHeightReference = Property.getValueOrDefault(this._extrudedHeightReference, time, HeightReference.NONE);\n\n        if (heightReference === HeightReference.NONE && extrudedHeightReference !== HeightReference.RELATIVE_TO_GROUND) {\n            this._position = Cartesian3.clone(Cartesian3.ZERO, this._position);\n            return Cartesian3.clone(Cartesian3.ZERO, result);\n        }\n\n        if (this._positionProperty.isConstant) {\n            return Cartesian3.multiplyByScalar(this._normal, this._terrainHeight, result);\n        }\n\n        var scene = this._scene;\n        var position = this._positionProperty.getValue(time, scratchPosition);\n        if (!defined(position) || Cartesian3.equals(position, Cartesian3.ZERO) || !defined(scene.globe)) {\n            return Cartesian3.clone(Cartesian3.ZERO, result);\n        }\n\n        if (Cartesian3.equalsEpsilon(this._position, position, CesiumMath.EPSILON10)) {\n            return Cartesian3.multiplyByScalar(this._normal, this._terrainHeight, result);\n        }\n\n        this._position = Cartesian3.clone(position, this._position);\n\n        this._updateClamping();\n\n        var normal = scene.globe.ellipsoid.geodeticSurfaceNormal(position, this._normal);\n        return Cartesian3.multiplyByScalar(normal, this._terrainHeight, result);\n    };\n\n    TerrainOffsetProperty.prototype.isDestroyed = function() {\n        return false;\n    };\n\n    TerrainOffsetProperty.prototype.destroy = function() {\n        if (defined(this._removeEventListener)) {\n            this._removeEventListener();\n        }\n        if (defined(this._removeModeListener)) {\n            this._removeModeListener();\n        }\n        if (defined(this._removeCallbackFunc)) {\n            this._removeCallbackFunc();\n        }\n        return destroyObject(this);\n    };\n\n    /**\n     * A function which creates one or more providers.\n     * @callback TerrainOffsetProperty~PositionFunction\n     * @param {JulianDate} time The clock time at which to retrieve the position\n     * @param {Cartesian3} result The result position\n     * @returns {Cartesian3} The position at which to do the terrain height check\n     */\n\n    return TerrainOffsetProperty;\n});\n","define([\n        './Cartesian3',\n        './CornerType',\n        './defined',\n        './Math',\n        './Matrix3',\n        './PolylinePipeline',\n        './PolylineVolumeGeometryLibrary',\n        './Quaternion'\n    ], function(\n        Cartesian3,\n        CornerType,\n        defined,\n        CesiumMath,\n        Matrix3,\n        PolylinePipeline,\n        PolylineVolumeGeometryLibrary,\n        Quaternion) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    var CorridorGeometryLibrary = {};\n\n    var scratch1 = new Cartesian3();\n    var scratch2 = new Cartesian3();\n    var scratch3 = new Cartesian3();\n    var scratch4 = new Cartesian3();\n\n    var scaleArray2 = [new Cartesian3(), new Cartesian3()];\n\n    var cartesian1 = new Cartesian3();\n    var cartesian2 = new Cartesian3();\n    var cartesian3 = new Cartesian3();\n    var cartesian4 = new Cartesian3();\n    var cartesian5 = new Cartesian3();\n    var cartesian6 = new Cartesian3();\n    var cartesian7 = new Cartesian3();\n    var cartesian8 = new Cartesian3();\n    var cartesian9 = new Cartesian3();\n    var cartesian10 = new Cartesian3();\n\n    var quaterion = new Quaternion();\n    var rotMatrix = new Matrix3();\n    function computeRoundCorner(cornerPoint, startPoint, endPoint, cornerType, leftIsOutside) {\n        var angle = Cartesian3.angleBetween(Cartesian3.subtract(startPoint, cornerPoint, scratch1), Cartesian3.subtract(endPoint, cornerPoint, scratch2));\n        var granularity = (cornerType === CornerType.BEVELED) ? 1 : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\n\n        var size = granularity * 3;\n        var array = new Array(size);\n\n        array[size - 3] = endPoint.x;\n        array[size - 2] = endPoint.y;\n        array[size - 1] = endPoint.z;\n\n        var m;\n        if (leftIsOutside) {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(Cartesian3.negate(cornerPoint, scratch1), angle / granularity, quaterion), rotMatrix);\n        } else {\n            m = Matrix3.fromQuaternion(Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion), rotMatrix);\n        }\n\n        var index = 0;\n        startPoint = Cartesian3.clone(startPoint, scratch1);\n        for (var i = 0; i < granularity; i++) {\n            startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\n            array[index++] = startPoint.x;\n            array[index++] = startPoint.y;\n            array[index++] = startPoint.z;\n        }\n\n        return array;\n    }\n\n    function addEndCaps(calculatedPositions) {\n        var cornerPoint = cartesian1;\n        var startPoint = cartesian2;\n        var endPoint = cartesian3;\n\n        var leftEdge = calculatedPositions[1];\n        startPoint = Cartesian3.fromArray(calculatedPositions[1], leftEdge.length - 3, startPoint);\n        endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n        var firstEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\n\n        var length = calculatedPositions.length - 1;\n        var rightEdge = calculatedPositions[length - 1];\n        leftEdge = calculatedPositions[length];\n        startPoint = Cartesian3.fromArray(rightEdge, rightEdge.length - 3, startPoint);\n        endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\n        cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\n        var lastEndCap = computeRoundCorner(cornerPoint, startPoint, endPoint, CornerType.ROUNDED, false);\n\n        return [firstEndCap, lastEndCap];\n    }\n\n    function computeMiteredCorner(position, leftCornerDirection, lastPoint, leftIsOutside) {\n        var cornerPoint = scratch1;\n        if (leftIsOutside) {\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n        } else {\n            leftCornerDirection = Cartesian3.negate(leftCornerDirection, leftCornerDirection);\n            cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\n        }\n        return [cornerPoint.x, cornerPoint.y, cornerPoint.z, lastPoint.x, lastPoint.y, lastPoint.z];\n    }\n\n    function addShiftedPositions(positions, left, scalar, calculatedPositions) {\n        var rightPositions = new Array(positions.length);\n        var leftPositions = new Array(positions.length);\n        var scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\n        var scaledRight = Cartesian3.negate(scaledLeft, scratch2);\n        var rightIndex = 0;\n        var leftIndex = positions.length - 1;\n\n        for (var i = 0; i < positions.length; i += 3) {\n            var pos = Cartesian3.fromArray(positions, i, scratch3);\n            var rightPos = Cartesian3.add(pos, scaledRight, scratch4);\n            rightPositions[rightIndex++] = rightPos.x;\n            rightPositions[rightIndex++] = rightPos.y;\n            rightPositions[rightIndex++] = rightPos.z;\n\n            var leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\n            leftPositions[leftIndex--] = leftPos.z;\n            leftPositions[leftIndex--] = leftPos.y;\n            leftPositions[leftIndex--] = leftPos.x;\n        }\n        calculatedPositions.push(rightPositions, leftPositions);\n\n        return calculatedPositions;\n    }\n\n    /**\n     * @private\n     */\n    CorridorGeometryLibrary.addAttribute = function(attribute, value, front, back) {\n        var x = value.x;\n        var y = value.y;\n        var z = value.z;\n        if (defined(front)) {\n            attribute[front] = x;\n            attribute[front + 1] = y;\n            attribute[front + 2] = z;\n        }\n        if (defined(back)) {\n            attribute[back] = z;\n            attribute[back - 1] = y;\n            attribute[back - 2] = x;\n        }\n    };\n\n    var scratchForwardProjection = new Cartesian3();\n    var scratchBackwardProjection = new Cartesian3();\n\n    /**\n     * @private\n     */\n    CorridorGeometryLibrary.computePositions = function(params) {\n        var granularity = params.granularity;\n        var positions = params.positions;\n        var ellipsoid = params.ellipsoid;\n        var width = params.width / 2;\n        var cornerType = params.cornerType;\n        var saveAttributes = params.saveAttributes;\n        var normal = cartesian1;\n        var forward = cartesian2;\n        var backward = cartesian3;\n        var left = cartesian4;\n        var cornerDirection = cartesian5;\n        var startPoint = cartesian6;\n        var previousPos = cartesian7;\n        var rightPos = cartesian8;\n        var leftPos = cartesian9;\n        var center = cartesian10;\n        var calculatedPositions = [];\n        var calculatedLefts = (saveAttributes) ? [] : undefined;\n        var calculatedNormals = (saveAttributes) ? [] : undefined;\n        var position = positions[0]; //add first point\n        var nextPosition = positions[1];\n\n        forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n        left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n        if (saveAttributes) {\n            calculatedLefts.push(left.x, left.y, left.z);\n            calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n        previousPos = Cartesian3.clone(position, previousPos);\n        position = nextPosition;\n        backward = Cartesian3.negate(forward, backward);\n\n        var subdividedPositions;\n        var corners = [];\n        var i;\n        var length = positions.length;\n        for (i = 1; i < length - 1; i++) { // add middle points and corners\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n            nextPosition = positions[i + 1];\n            forward = Cartesian3.normalize(Cartesian3.subtract(nextPosition, position, forward), forward);\n            cornerDirection = Cartesian3.normalize(Cartesian3.add(forward, backward, cornerDirection), cornerDirection);\n\n            var forwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(forward, normal), scratchForwardProjection);\n            Cartesian3.subtract(forward, forwardProjection, forwardProjection);\n            Cartesian3.normalize(forwardProjection, forwardProjection);\n\n            var backwardProjection = Cartesian3.multiplyByScalar(normal, Cartesian3.dot(backward, normal), scratchBackwardProjection);\n            Cartesian3.subtract(backward, backwardProjection, backwardProjection);\n            Cartesian3.normalize(backwardProjection, backwardProjection);\n\n            var doCorner = !CesiumMath.equalsEpsilon(Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)), 1.0, CesiumMath.EPSILON7);\n\n            if (doCorner) {\n                cornerDirection = Cartesian3.cross(cornerDirection, normal, cornerDirection);\n                cornerDirection = Cartesian3.cross(normal, cornerDirection, cornerDirection);\n                cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\n                var scalar = width / Math.max(0.25, Cartesian3.magnitude(Cartesian3.cross(cornerDirection, backward, scratch1)));\n                var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(forward, backward, position, ellipsoid);\n                cornerDirection = Cartesian3.multiplyByScalar(cornerDirection, scalar, cornerDirection);\n                if (leftIsOutside) {\n                    rightPos = Cartesian3.add(position, cornerDirection, rightPos);\n                    center = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, center), center);\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scaleArray2,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n                    if (saveAttributes) {\n                        calculatedLefts.push(left.x, left.y, left.z);\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\n                    }\n                    startPoint = Cartesian3.clone(leftPos, startPoint);\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n                    leftPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width * 2, leftPos), leftPos);\n                    previousPos = Cartesian3.add(rightPos, Cartesian3.multiplyByScalar(left, width, previousPos), previousPos);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        corners.push({\n                            leftPositions : computeRoundCorner(rightPos, startPoint, leftPos, cornerType, leftIsOutside)\n                        });\n                    } else {\n                        corners.push({\n                            leftPositions : computeMiteredCorner(position, Cartesian3.negate(cornerDirection, cornerDirection), leftPos, leftIsOutside)\n                        });\n                    }\n                } else {\n                    leftPos = Cartesian3.add(position, cornerDirection, leftPos);\n                    center = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, center), center), center);\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\n                    scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n                    scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\n                    subdividedPositions = PolylinePipeline.generateArc({\n                        positions: scaleArray2,\n                        granularity: granularity,\n                        ellipsoid: ellipsoid\n                    });\n                    calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n                    if (saveAttributes) {\n                        calculatedLefts.push(left.x, left.y, left.z);\n                        calculatedNormals.push(normal.x, normal.y, normal.z);\n                    }\n                    startPoint = Cartesian3.clone(rightPos, startPoint);\n                    left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\n                    rightPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width * 2, rightPos), rightPos), rightPos);\n                    previousPos = Cartesian3.add(leftPos, Cartesian3.negate(Cartesian3.multiplyByScalar(left, width, previousPos), previousPos), previousPos);\n                    if (cornerType === CornerType.ROUNDED || cornerType === CornerType.BEVELED) {\n                        corners.push({\n                            rightPositions : computeRoundCorner(leftPos, startPoint, rightPos, cornerType, leftIsOutside)\n                        });\n                    } else {\n                        corners.push({\n                            rightPositions : computeMiteredCorner(position, cornerDirection, rightPos, leftIsOutside)\n                        });\n                    }\n                }\n                backward = Cartesian3.negate(forward, backward);\n            }\n            position = nextPosition;\n        }\n\n        normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\n        scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\n        subdividedPositions = PolylinePipeline.generateArc({\n            positions: scaleArray2,\n            granularity: granularity,\n            ellipsoid: ellipsoid\n        });\n        calculatedPositions = addShiftedPositions(subdividedPositions, left, width, calculatedPositions);\n        if (saveAttributes) {\n            calculatedLefts.push(left.x, left.y, left.z);\n            calculatedNormals.push(normal.x, normal.y, normal.z);\n        }\n\n        var endPositions;\n        if (cornerType === CornerType.ROUNDED) {\n            endPositions = addEndCaps(calculatedPositions);\n        }\n\n        return {\n            positions : calculatedPositions,\n            corners : corners,\n            lefts : calculatedLefts,\n            normals : calculatedNormals,\n            endPositions : endPositions\n        };\n    };\n\n    return CorridorGeometryLibrary;\n});\n","define([\n        './Math'\n    ], function(\n        CesiumMath) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    var CylinderGeometryLibrary = {};\n\n    /**\n     * @private\n     */\n    CylinderGeometryLibrary.computePositions = function(length, topRadius, bottomRadius, slices, fill){\n        var topZ = length * 0.5;\n        var bottomZ = -topZ;\n\n        var twoSlice = slices + slices;\n        var size = (fill) ? 2 * twoSlice : twoSlice;\n        var positions = new Float64Array(size*3);\n        var i;\n        var index = 0;\n        var tbIndex = 0;\n        var bottomOffset = (fill) ? twoSlice*3 : 0;\n        var topOffset = (fill) ? (twoSlice + slices)*3 : slices*3;\n\n        for (i = 0; i < slices; i++) {\n            var angle = i / slices * CesiumMath.TWO_PI;\n            var x = Math.cos(angle);\n            var y = Math.sin(angle);\n            var bottomX = x * bottomRadius;\n            var bottomY = y * bottomRadius;\n            var topX = x * topRadius;\n            var topY = y * topRadius;\n\n            positions[tbIndex + bottomOffset] = bottomX;\n            positions[tbIndex + bottomOffset + 1] = bottomY;\n            positions[tbIndex + bottomOffset + 2] = bottomZ;\n\n            positions[tbIndex + topOffset] = topX;\n            positions[tbIndex + topOffset + 1] = topY;\n            positions[tbIndex + topOffset + 2] = topZ;\n            tbIndex += 3;\n            if (fill) {\n                positions[index++] = bottomX;\n                positions[index++] = bottomY;\n                positions[index++] = bottomZ;\n                positions[index++] = topX;\n                positions[index++] = topY;\n                positions[index++] = topZ;\n            }\n        }\n\n        return positions;\n    };\n\n    return CylinderGeometryLibrary;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/defined',\n        './BoundingSphereState'\n    ], function(\n        AssociativeArray,\n        defined,\n        BoundingSphereState) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    function DynamicGeometryBatch(primitives, orderedGroundPrimitives) {\n        this._primitives = primitives;\n        this._orderedGroundPrimitives = orderedGroundPrimitives;\n        this._dynamicUpdaters = new AssociativeArray();\n    }\n\n    DynamicGeometryBatch.prototype.add = function(time, updater) {\n        this._dynamicUpdaters.set(updater.id, updater.createDynamicUpdater(this._primitives, this._orderedGroundPrimitives));\n    };\n\n    DynamicGeometryBatch.prototype.remove = function(updater) {\n        var id = updater.id;\n        var dynamicUpdater = this._dynamicUpdaters.get(id);\n        if (defined(dynamicUpdater)) {\n            this._dynamicUpdaters.remove(id);\n            dynamicUpdater.destroy();\n        }\n    };\n\n    DynamicGeometryBatch.prototype.update = function(time) {\n        var geometries = this._dynamicUpdaters.values;\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            geometries[i].update(time);\n        }\n        return true;\n    };\n\n    DynamicGeometryBatch.prototype.removeAllPrimitives = function() {\n        var geometries = this._dynamicUpdaters.values;\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            geometries[i].destroy();\n        }\n        this._dynamicUpdaters.removeAll();\n    };\n\n    DynamicGeometryBatch.prototype.getBoundingSphere = function(updater, result) {\n        updater = this._dynamicUpdaters.get(updater.id);\n        if (defined(updater) && defined(updater.getBoundingSphere)) {\n            return updater.getBoundingSphere(result);\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    return DynamicGeometryBatch;\n});\n","define([\n        './Cartesian3',\n        './Math',\n        './Matrix3',\n        './Quaternion'\n    ], function(\n        Cartesian3,\n        CesiumMath,\n        Matrix3,\n        Quaternion) {\n    'use strict';\n\n    var EllipseGeometryLibrary = {};\n\n    var rotAxis = new Cartesian3();\n    var tempVec = new Cartesian3();\n    var unitQuat = new Quaternion();\n    var rotMtx = new Matrix3();\n\n    function pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, result) {\n        var azimuth = theta + rotation;\n\n        Cartesian3.multiplyByScalar(eastVec, Math.cos(azimuth), rotAxis);\n        Cartesian3.multiplyByScalar(northVec, Math.sin(azimuth), tempVec);\n        Cartesian3.add(rotAxis, tempVec, rotAxis);\n\n        var cosThetaSquared = Math.cos(theta);\n        cosThetaSquared = cosThetaSquared * cosThetaSquared;\n\n        var sinThetaSquared = Math.sin(theta);\n        sinThetaSquared = sinThetaSquared * sinThetaSquared;\n\n        var radius = ab / Math.sqrt(bSqr * cosThetaSquared + aSqr * sinThetaSquared);\n        var angle = radius / mag;\n\n        // Create the quaternion to rotate the position vector to the boundary of the ellipse.\n        Quaternion.fromAxisAngle(rotAxis, angle, unitQuat);\n        Matrix3.fromQuaternion(unitQuat, rotMtx);\n\n        Matrix3.multiplyByVector(rotMtx, unitPos, result);\n        Cartesian3.normalize(result, result);\n        Cartesian3.multiplyByScalar(result, mag, result);\n        return result;\n    }\n\n    var scratchCartesian1 = new Cartesian3();\n    var scratchCartesian2 = new Cartesian3();\n    var scratchCartesian3 = new Cartesian3();\n    var scratchNormal = new Cartesian3();\n    /**\n     * Returns the positions raised to the given heights\n     * @private\n     */\n    EllipseGeometryLibrary.raisePositionsToHeight = function(positions, options, extrude) {\n        var ellipsoid = options.ellipsoid;\n        var height = options.height;\n        var extrudedHeight = options.extrudedHeight;\n        var size = (extrude) ? positions.length / 3 * 2 : positions.length / 3;\n\n        var finalPositions = new Float64Array(size * 3);\n\n        var length = positions.length;\n        var bottomOffset = (extrude) ? length : 0;\n        for (var i = 0; i < length; i += 3) {\n            var i1 = i + 1;\n            var i2 = i + 2;\n\n            var position = Cartesian3.fromArray(positions, i, scratchCartesian1);\n            ellipsoid.scaleToGeodeticSurface(position, position);\n\n            var extrudedPosition = Cartesian3.clone(position, scratchCartesian2);\n            var normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\n            var scaledNormal = Cartesian3.multiplyByScalar(normal, height, scratchCartesian3);\n            Cartesian3.add(position, scaledNormal, position);\n\n            if (extrude) {\n                Cartesian3.multiplyByScalar(normal, extrudedHeight, scaledNormal);\n                Cartesian3.add(extrudedPosition, scaledNormal, extrudedPosition);\n\n                finalPositions[i + bottomOffset] = extrudedPosition.x;\n                finalPositions[i1 + bottomOffset] = extrudedPosition.y;\n                finalPositions[i2 + bottomOffset] = extrudedPosition.z;\n            }\n\n            finalPositions[i] = position.x;\n            finalPositions[i1] = position.y;\n            finalPositions[i2] = position.z;\n        }\n\n        return finalPositions;\n    };\n\n    var unitPosScratch = new Cartesian3();\n    var eastVecScratch = new Cartesian3();\n    var northVecScratch = new Cartesian3();\n    /**\n     * Returns an array of positions that make up the ellipse.\n     * @private\n     */\n    EllipseGeometryLibrary.computeEllipsePositions = function(options, addFillPositions, addEdgePositions) {\n        var semiMinorAxis = options.semiMinorAxis;\n        var semiMajorAxis = options.semiMajorAxis;\n        var rotation = options.rotation;\n        var center = options.center;\n\n        // Computing the arc-length of the ellipse is too expensive to be practical. Estimating it using the\n        // arc length of the sphere is too inaccurate and creates sharp edges when either the semi-major or\n        // semi-minor axis is much bigger than the other. Instead, scale the angle delta to make\n        // the distance along the ellipse boundary more closely match the granularity.\n        var granularity = options.granularity * 8.0;\n\n        var aSqr = semiMinorAxis * semiMinorAxis;\n        var bSqr = semiMajorAxis * semiMajorAxis;\n        var ab = semiMajorAxis * semiMinorAxis;\n\n        var mag = Cartesian3.magnitude(center);\n\n        var unitPos = Cartesian3.normalize(center, unitPosScratch);\n        var eastVec = Cartesian3.cross(Cartesian3.UNIT_Z, center, eastVecScratch);\n        eastVec = Cartesian3.normalize(eastVec, eastVec);\n        var northVec = Cartesian3.cross(unitPos, eastVec, northVecScratch);\n\n        // The number of points in the first quadrant\n        var numPts = 1 + Math.ceil(CesiumMath.PI_OVER_TWO / granularity);\n\n        var deltaTheta = CesiumMath.PI_OVER_TWO / (numPts - 1);\n        var theta = CesiumMath.PI_OVER_TWO - numPts * deltaTheta;\n        if (theta < 0.0) {\n            numPts -= Math.ceil(Math.abs(theta) / deltaTheta);\n        }\n\n        // If the number of points were three, the ellipse\n        // would be tessellated like below:\n        //\n        //         *---*\n        //       / | \\ | \\\n        //     *---*---*---*\n        //   / | \\ | \\ | \\ | \\\n        //  / .*---*---*---*. \\\n        // * ` | \\ | \\ | \\ | `*\n        //  \\`.*---*---*---*.`/\n        //   \\ | \\ | \\ | \\ | /\n        //     *---*---*---*\n        //       \\ | \\ | /\n        //         *---*\n        // The first and last column have one position and fan to connect to the adjacent column.\n        // Each other vertical column contains an even number of positions.\n        var size = 2 * (numPts * (numPts + 2));\n        var positions = (addFillPositions) ? new Array(size * 3) : undefined;\n        var positionIndex = 0;\n        var position = scratchCartesian1;\n        var reflectedPosition = scratchCartesian2;\n\n        var outerPositionsLength = (numPts * 4) * 3;\n        var outerRightIndex = outerPositionsLength - 1;\n        var outerLeftIndex = 0;\n        var outerPositions = (addEdgePositions) ? new Array(outerPositionsLength) : undefined;\n\n        var i;\n        var j;\n        var numInterior;\n        var t;\n        var interiorPosition;\n\n        // Compute points in the 'eastern' half of the ellipse\n        theta = CesiumMath.PI_OVER_TWO;\n        position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n        if (addFillPositions) {\n            positions[positionIndex++] = position.x;\n            positions[positionIndex++] = position.y;\n            positions[positionIndex++] = position.z;\n        }\n        if (addEdgePositions) {\n            outerPositions[outerRightIndex--] = position.z;\n            outerPositions[outerRightIndex--] = position.y;\n            outerPositions[outerRightIndex--] = position.x;\n        }\n        theta = CesiumMath.PI_OVER_TWO -  deltaTheta;\n        for (i = 1; i < numPts + 1; ++i) {\n            position = pointOnEllipsoid(theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n            reflectedPosition = pointOnEllipsoid(Math.PI - theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\n\n            if (addFillPositions) {\n                positions[positionIndex++] = position.x;\n                positions[positionIndex++] = position.y;\n                positions[positionIndex++] = position.z;\n\n                numInterior = 2 * i + 2;\n                for (j = 1; j < numInterior - 1; ++j) {\n                    t = j / (numInterior - 1);\n                    interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\n                    positions[positionIndex++] = interiorPosition.x;\n                    positions[positionIndex++] = interiorPosition.y;\n                    positions[positionIndex++] = interiorPosition.z;\n                }\n\n                positions[positionIndex++] = reflectedPosition.x;\n                positions[positionIndex++] = reflectedPosition.y;\n                positions[positionIndex++] = reflectedPosition.z;\n            }\n\n            if (addEdgePositions) {\n                outerPositions[outerRightIndex--] = position.z;\n                outerPositions[outerRightIndex--] = position.y;\n                outerPositions[outerRightIndex--] = position.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.y;\n                outerPositions[outerLeftIndex++] = reflectedPosition.z;\n            }\n\n            theta = CesiumMath.PI_OVER_TWO - (i + 1) * deltaTheta;\n        }\n\n        // Compute points in the 'western' half of the ellipse\n        for (i = numPts; i > 1; --i) {\n            theta = CesiumMath.PI_OVER_TWO - (i - 1) * deltaTheta;\n\n            position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n            reflectedPosition = pointOnEllipsoid(theta + Math.PI, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, reflectedPosition);\n\n            if (addFillPositions) {\n                positions[positionIndex++] = position.x;\n                positions[positionIndex++] = position.y;\n                positions[positionIndex++] = position.z;\n\n                numInterior = 2 * (i - 1) + 2;\n                for (j = 1; j < numInterior - 1; ++j) {\n                    t = j / (numInterior - 1);\n                    interiorPosition = Cartesian3.lerp(position, reflectedPosition, t, scratchCartesian3);\n                    positions[positionIndex++] = interiorPosition.x;\n                    positions[positionIndex++] = interiorPosition.y;\n                    positions[positionIndex++] = interiorPosition.z;\n                }\n\n                positions[positionIndex++] = reflectedPosition.x;\n                positions[positionIndex++] = reflectedPosition.y;\n                positions[positionIndex++] = reflectedPosition.z;\n            }\n\n            if (addEdgePositions) {\n                outerPositions[outerRightIndex--] = position.z;\n                outerPositions[outerRightIndex--] = position.y;\n                outerPositions[outerRightIndex--] = position.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.x;\n                outerPositions[outerLeftIndex++] = reflectedPosition.y;\n                outerPositions[outerLeftIndex++] = reflectedPosition.z;\n            }\n        }\n\n        theta = CesiumMath.PI_OVER_TWO;\n        position = pointOnEllipsoid(-theta, rotation, northVec, eastVec, aSqr, ab, bSqr, mag, unitPos, position);\n\n        var r = {};\n        if (addFillPositions) {\n            positions[positionIndex++] = position.x;\n            positions[positionIndex++] = position.y;\n            positions[positionIndex++] = position.z;\n            r.positions = positions;\n            r.numPts = numPts;\n        }\n        if (addEdgePositions) {\n            outerPositions[outerRightIndex--] = position.z;\n            outerPositions[outerRightIndex--] = position.y;\n            outerPositions[outerRightIndex--] = position.x;\n            r.outerPositions = outerPositions;\n        }\n\n        return r;\n    };\n\n    return EllipseGeometryLibrary;\n});\n","define([\n        './defined',\n        './Cartesian2',\n        './Cartesian3',\n        './Check',\n        './IntersectionTests',\n        './Math',\n        './Matrix3',\n        './OrientedBoundingBox'\n    ], function(\n        defined,\n        Cartesian2,\n        Cartesian3,\n        Check,\n        IntersectionTests,\n        CesiumMath,\n        Matrix3,\n        OrientedBoundingBox\n    ) {\n    'use strict';\n\n    /**\n     * @private\n     */\n    var CoplanarPolygonGeometryLibrary = {};\n\n    var scratchIntersectionPoint = new Cartesian3();\n    var scratchXAxis = new Cartesian3();\n    var scratchYAxis = new Cartesian3();\n    var scratchZAxis = new Cartesian3();\n    var obbScratch = new OrientedBoundingBox();\n\n    CoplanarPolygonGeometryLibrary.validOutline = function(positions) {\n        \n\n        var orientedBoundingBox = OrientedBoundingBox.fromPoints(positions, obbScratch);\n        var halfAxes = orientedBoundingBox.halfAxes;\n        var xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\n        var yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\n        var zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\n\n        var xMag = Cartesian3.magnitude(xAxis);\n        var yMag = Cartesian3.magnitude(yAxis);\n        var zMag = Cartesian3.magnitude(zAxis);\n\n        // If all the points are on a line return undefined because we can't draw a polygon\n        return !((xMag === 0 && (yMag === 0 || zMag === 0)) || (yMag === 0 && zMag === 0));\n    };\n\n    // call after removeDuplicates\n    CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments = function(positions, centerResult, planeAxis1Result, planeAxis2Result) {\n        \n\n        var orientedBoundingBox = OrientedBoundingBox.fromPoints(positions, obbScratch);\n        var halfAxes = orientedBoundingBox.halfAxes;\n        var xAxis = Matrix3.getColumn(halfAxes, 0, scratchXAxis);\n        var yAxis = Matrix3.getColumn(halfAxes, 1, scratchYAxis);\n        var zAxis = Matrix3.getColumn(halfAxes, 2, scratchZAxis);\n\n        var xMag = Cartesian3.magnitude(xAxis);\n        var yMag = Cartesian3.magnitude(yAxis);\n        var zMag = Cartesian3.magnitude(zAxis);\n        var min = Math.min(xMag, yMag, zMag);\n\n        // If all the points are on a line return undefined because we can't draw a polygon\n        if ((xMag === 0 && (yMag === 0 || zMag === 0)) || (yMag === 0 && zMag === 0)) {\n            return false;\n        }\n\n        var planeAxis1;\n        var planeAxis2;\n\n        if (min === yMag || min === zMag) {\n            planeAxis1 = xAxis;\n        }\n        if (min === xMag) {\n            planeAxis1 = yAxis;\n        } else if (min === zMag) {\n            planeAxis2 = yAxis;\n        }\n        if (min === xMag || min === yMag) {\n            planeAxis2 = zAxis;\n        }\n\n        Cartesian3.normalize(planeAxis1, planeAxis1Result);\n        Cartesian3.normalize(planeAxis2, planeAxis2Result);\n        Cartesian3.clone(orientedBoundingBox.center, centerResult);\n        return true;\n    };\n\n    function projectTo2D(position, center, axis1, axis2, result) {\n        var v = Cartesian3.subtract(position, center, scratchIntersectionPoint);\n        var x = Cartesian3.dot(axis1, v);\n        var y = Cartesian3.dot(axis2, v);\n\n        return Cartesian2.fromElements(x, y, result);\n    }\n\n    CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction = function(center, axis1, axis2) {\n        return function(positions) {\n            var positionResults = new Array(positions.length);\n            for (var i = 0; i < positions.length; i++) {\n                positionResults[i] = projectTo2D(positions[i], center, axis1, axis2);\n            }\n\n            return positionResults;\n        };\n    };\n\n    CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction = function(center, axis1, axis2) {\n        return function(position, result) {\n            return projectTo2D(position, center, axis1, axis2, result);\n        };\n    };\n\n    return CoplanarPolygonGeometryLibrary;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/Primitive',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        AssociativeArray,\n        Cartesian3,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        OffsetGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        Primitive,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    var colorScratch = new Color();\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n\n    function Batch(primitives, translucent, appearanceType, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n        this.translucent = translucent;\n        this.appearanceType = appearanceType;\n        this.depthFailAppearanceType = depthFailAppearanceType;\n        this.depthFailMaterialProperty = depthFailMaterialProperty;\n        this.depthFailMaterial = undefined;\n        this.closed = closed;\n        this.shadows = shadows;\n        this.primitives = primitives;\n        this.createPrimitive = false;\n        this.waitingOnCreate = false;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.updaters = new AssociativeArray();\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n        this.itemsToRemove = [];\n        this.invalidated = false;\n\n        var removeMaterialSubscription;\n        if (defined(depthFailMaterialProperty)) {\n            removeMaterialSubscription = depthFailMaterialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        }\n        this.removeMaterialSubscription = removeMaterialSubscription;\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.depthFailMaterialProperty;\n        var updaterMaterial = updater.depthFailMaterialProperty;\n        if (updaterMaterial === material) {\n            return true;\n        }\n        if (defined(material)) {\n            return material.equals(updaterMaterial);\n        }\n        return false;\n    };\n\n    Batch.prototype.add = function(updater, instance) {\n        var id = updater.id;\n        this.createPrimitive = true;\n        this.geometry.set(id, instance);\n        this.updaters.set(id, updater);\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty) || !Property.isConstant(updater.terrainOffsetProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var removedCount = 0;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometries = this.geometry.values;\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                var depthFailAppearance;\n                if (defined(this.depthFailAppearanceType)) {\n                    if (defined(this.depthFailMaterialProperty)) {\n                        this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                    }\n                    depthFailAppearance = new this.depthFailAppearanceType({\n                        material : this.depthFailMaterial,\n                        translucent : this.translucent,\n                        closed : this.closed\n                    });\n                }\n\n                primitive = new Primitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries,\n                    appearance : new this.appearanceType({\n                        translucent : this.translucent,\n                        closed : this.closed\n                    }),\n                    depthFailAppearance : depthFailAppearance,\n                    shadows : this.shadows\n                });\n                primitives.add(primitive);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n            this.waitingOnCreate = true;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n                this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n            }\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            var waitingOnCreate = this.waitingOnCreate;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (!updater.fillMaterialProperty.isConstant || waitingOnCreate) {\n                    var colorProperty = updater.fillMaterialProperty.color;\n                    var resultColor = Property.getValueOrDefault(colorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastColor, resultColor)) {\n                        attributes._lastColor = Color.clone(resultColor, attributes._lastColor);\n                        attributes.color = ColorGeometryInstanceAttribute.toValue(resultColor, attributes.color);\n                        if ((this.translucent && attributes.color[3] === 255) || (!this.translucent && attributes.color[3] !== 255)) {\n                            this.itemsToRemove[removedCount++] = updater;\n                        }\n                    }\n                }\n\n                if (defined(this.depthFailAppearanceType) && updater.depthFailMaterialProperty instanceof ColorMaterialProperty && (!updater.depthFailMaterialProperty.isConstant || waitingOnCreate)) {\n                    var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n                    var depthColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastDepthFailColor, depthColor)) {\n                        attributes._lastDepthFailColor = Color.clone(depthColor, attributes._lastDepthFailColor);\n                        attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthColor, attributes.depthFailColor);\n                    }\n                }\n\n                var show = updater.entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n\n                var offsetProperty = updater.terrainOffsetProperty;\n                if (!Property.isConstant(offsetProperty)) {\n                    var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n                    if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n                        attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n                        attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n            this.waitingOnCreate = false;\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        this.itemsToRemove.length = removedCount;\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = updater.entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||//\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n        }\n        if (defined(this.removeMaterialSubscription)) {\n            this.removeMaterialSubscription();\n        }\n    };\n\n    /**\n     * @private\n     */\n    function StaticGeometryColorBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n        this._solidItems = [];\n        this._translucentItems = [];\n        this._primitives = primitives;\n        this._appearanceType = appearanceType;\n        this._depthFailAppearanceType = depthFailAppearanceType;\n        this._closed = closed;\n        this._shadows = shadows;\n    }\n\n    StaticGeometryColorBatch.prototype.add = function(time, updater) {\n        var items;\n        var translucent;\n        var instance = updater.createFillGeometryInstance(time);\n        if (instance.attributes.color.value[3] === 255) {\n            items = this._solidItems;\n            translucent = false;\n        } else {\n            items = this._translucentItems;\n            translucent = true;\n        }\n\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.isMaterial(updater)) {\n                item.add(updater, instance);\n                return;\n            }\n        }\n        var batch = new Batch(this._primitives, translucent, this._appearanceType, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n        batch.add(updater, instance);\n        items.push(batch);\n    };\n\n    function removeItem(items, updater) {\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    StaticGeometryColorBatch.prototype.remove = function(updater) {\n        if (!removeItem(this._solidItems, updater)) {\n            removeItem(this._translucentItems, updater);\n        }\n    };\n\n    function moveItems(batch, items, time) {\n        var itemsMoved = false;\n        var length = items.length;\n        for (var i = 0; i < length; ++i) {\n            var item = items[i];\n            var itemsToRemove = item.itemsToRemove;\n            var itemsToMoveLength = itemsToRemove.length;\n            if (itemsToMoveLength > 0) {\n                for (i = 0; i < itemsToMoveLength; i++) {\n                    var updater = itemsToRemove[i];\n                    item.remove(updater);\n                    batch.add(time, updater);\n                    itemsMoved = true;\n                }\n            }\n        }\n        return itemsMoved;\n    }\n\n    function updateItems(batch, items, time, isUpdated) {\n        var length = items.length;\n        var i;\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    batch.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        length = items.length;\n        for (i = 0; i < length; ++i) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    }\n\n    StaticGeometryColorBatch.prototype.update = function(time) {\n        //Perform initial update\n        var isUpdated = updateItems(this, this._solidItems, time, true);\n        isUpdated = updateItems(this, this._translucentItems, time, isUpdated) && isUpdated;\n\n        //If any items swapped between solid/translucent, we need to\n        //move them between batches\n        var solidsMoved = moveItems(this, this._solidItems, time);\n        var translucentsMoved = moveItems(this, this._translucentItems, time);\n\n        //If we moved anything around, we need to re-build the primitive\n        if (solidsMoved || translucentsMoved) {\n            isUpdated = updateItems(this, this._solidItems, time, isUpdated) && isUpdated;\n            isUpdated = updateItems(this, this._translucentItems, time, isUpdated)&& isUpdated;\n        }\n\n        return isUpdated;\n    };\n\n    function getBoundingSphere(items, updater, result) {\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    }\n\n    StaticGeometryColorBatch.prototype.getBoundingSphere = function(updater, result) {\n        var boundingSphere = getBoundingSphere(this._solidItems, updater, result);\n        if (boundingSphere === BoundingSphereState.FAILED) {\n            return getBoundingSphere(this._translucentItems, updater, result);\n        }\n        return boundingSphere;\n    };\n\n    function removeAllPrimitives(items) {\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        items.length = 0;\n    }\n\n    StaticGeometryColorBatch.prototype.removeAllPrimitives = function() {\n        removeAllPrimitives(this._solidItems);\n        removeAllPrimitives(this._translucentItems);\n    };\n\n    return StaticGeometryColorBatch;\n});\n","define([\n        '../Core/AssociativeArray',\n        '../Core/Cartesian3',\n        '../Core/Color',\n        '../Core/ColorGeometryInstanceAttribute',\n        '../Core/defined',\n        '../Core/DistanceDisplayCondition',\n        '../Core/DistanceDisplayConditionGeometryInstanceAttribute',\n        '../Core/OffsetGeometryInstanceAttribute',\n        '../Core/ShowGeometryInstanceAttribute',\n        '../Scene/Primitive',\n        './BoundingSphereState',\n        './ColorMaterialProperty',\n        './MaterialProperty',\n        './Property'\n    ], function(\n        AssociativeArray,\n        Cartesian3,\n        Color,\n        ColorGeometryInstanceAttribute,\n        defined,\n        DistanceDisplayCondition,\n        DistanceDisplayConditionGeometryInstanceAttribute,\n        OffsetGeometryInstanceAttribute,\n        ShowGeometryInstanceAttribute,\n        Primitive,\n        BoundingSphereState,\n        ColorMaterialProperty,\n        MaterialProperty,\n        Property) {\n    'use strict';\n\n    var distanceDisplayConditionScratch = new DistanceDisplayCondition();\n    var defaultDistanceDisplayCondition = new DistanceDisplayCondition();\n    var defaultOffset = Cartesian3.ZERO;\n    var offsetScratch = new Cartesian3();\n\n    function Batch(primitives, appearanceType, materialProperty, depthFailAppearanceType, depthFailMaterialProperty, closed, shadows) {\n        this.primitives = primitives;\n        this.appearanceType = appearanceType;\n        this.materialProperty = materialProperty;\n        this.depthFailAppearanceType = depthFailAppearanceType;\n        this.depthFailMaterialProperty = depthFailMaterialProperty;\n        this.closed = closed;\n        this.shadows = shadows;\n        this.updaters = new AssociativeArray();\n        this.createPrimitive = true;\n        this.primitive = undefined;\n        this.oldPrimitive = undefined;\n        this.geometry = new AssociativeArray();\n        this.material = undefined;\n        this.depthFailMaterial = undefined;\n        this.updatersWithAttributes = new AssociativeArray();\n        this.attributes = new AssociativeArray();\n        this.invalidated = false;\n        this.removeMaterialSubscription = materialProperty.definitionChanged.addEventListener(Batch.prototype.onMaterialChanged, this);\n        this.subscriptions = new AssociativeArray();\n        this.showsUpdated = new AssociativeArray();\n    }\n\n    Batch.prototype.onMaterialChanged = function() {\n        this.invalidated = true;\n    };\n\n    Batch.prototype.isMaterial = function(updater) {\n        var material = this.materialProperty;\n        var updaterMaterial = updater.fillMaterialProperty;\n        var depthFailMaterial = this.depthFailMaterialProperty;\n        var updaterDepthFailMaterial = updater.depthFailMaterialProperty;\n\n        if (updaterMaterial === material && updaterDepthFailMaterial === depthFailMaterial) {\n            return true;\n        }\n        var equals = defined(material) && material.equals(updaterMaterial);\n        equals = ((!defined(depthFailMaterial) && !defined(updaterDepthFailMaterial)) || (defined(depthFailMaterial) && depthFailMaterial.equals(updaterDepthFailMaterial))) && equals;\n        return equals;\n    };\n\n    Batch.prototype.add = function(time, updater) {\n        var id = updater.id;\n        this.updaters.set(id, updater);\n        this.geometry.set(id, updater.createFillGeometryInstance(time));\n        if (!updater.hasConstantFill || !updater.fillMaterialProperty.isConstant || !Property.isConstant(updater.distanceDisplayConditionProperty)  || !Property.isConstant(updater.terrainOffsetProperty)) {\n            this.updatersWithAttributes.set(id, updater);\n        } else {\n            var that = this;\n            this.subscriptions.set(id, updater.entity.definitionChanged.addEventListener(function(entity, propertyName, newValue, oldValue) {\n                if (propertyName === 'isShowing') {\n                    that.showsUpdated.set(updater.id, updater);\n                }\n            }));\n        }\n        this.createPrimitive = true;\n    };\n\n    Batch.prototype.remove = function(updater) {\n        var id = updater.id;\n        this.createPrimitive = this.geometry.remove(id) || this.createPrimitive;\n        if (this.updaters.remove(id)) {\n            this.updatersWithAttributes.remove(id);\n            var unsubscribe = this.subscriptions.get(id);\n            if (defined(unsubscribe)) {\n                unsubscribe();\n                this.subscriptions.remove(id);\n                this.showsUpdated.remove(id);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    var colorScratch = new Color();\n\n    Batch.prototype.update = function(time) {\n        var isUpdated = true;\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        var geometries = this.geometry.values;\n        var i;\n\n        if (this.createPrimitive) {\n            var geometriesLength = geometries.length;\n            if (geometriesLength > 0) {\n                if (defined(primitive)) {\n                    if (!defined(this.oldPrimitive)) {\n                        this.oldPrimitive = primitive;\n                    } else {\n                        primitives.remove(primitive);\n                    }\n                }\n\n                this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n\n                var depthFailAppearance;\n                if (defined(this.depthFailMaterialProperty)) {\n                    this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                    depthFailAppearance = new this.depthFailAppearanceType({\n                        material : this.depthFailMaterial,\n                        translucent : this.depthFailMaterial.isTranslucent(),\n                        closed : this.closed\n                    });\n                }\n\n                primitive = new Primitive({\n                    show : false,\n                    asynchronous : true,\n                    geometryInstances : geometries,\n                    appearance : new this.appearanceType({\n                        material : this.material,\n                        translucent : this.material.isTranslucent(),\n                        closed : this.closed\n                    }),\n                    depthFailAppearance : depthFailAppearance,\n                    shadows : this.shadows\n                });\n\n                primitives.add(primitive);\n                isUpdated = false;\n            } else {\n                if (defined(primitive)) {\n                    primitives.remove(primitive);\n                    primitive = undefined;\n                }\n                var oldPrimitive = this.oldPrimitive;\n                if (defined(oldPrimitive)) {\n                    primitives.remove(oldPrimitive);\n                    this.oldPrimitive = undefined;\n                }\n            }\n\n            this.attributes.removeAll();\n            this.primitive = primitive;\n            this.createPrimitive = false;\n        } else if (defined(primitive) && primitive.ready) {\n            primitive.show = true;\n            if (defined(this.oldPrimitive)) {\n                primitives.remove(this.oldPrimitive);\n                this.oldPrimitive = undefined;\n            }\n\n            this.material = MaterialProperty.getValue(time, this.materialProperty, this.material);\n            this.primitive.appearance.material = this.material;\n\n            if (defined(this.depthFailAppearanceType) && !(this.depthFailMaterialProperty instanceof ColorMaterialProperty)) {\n                this.depthFailMaterial = MaterialProperty.getValue(time, this.depthFailMaterialProperty, this.depthFailMaterial);\n                this.primitive.depthFailAppearance.material = this.depthFailMaterial;\n            }\n\n            var updatersWithAttributes = this.updatersWithAttributes.values;\n            var length = updatersWithAttributes.length;\n            for (i = 0; i < length; i++) {\n                var updater = updatersWithAttributes[i];\n                var entity = updater.entity;\n                var instance = this.geometry.get(updater.id);\n\n                var attributes = this.attributes.get(instance.id.id);\n                if (!defined(attributes)) {\n                    attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                    this.attributes.set(instance.id.id, attributes);\n                }\n\n                if (defined(this.depthFailAppearanceType) && this.depthFailMaterialProperty instanceof ColorMaterialProperty && !updater.depthFailMaterialProperty.isConstant) {\n                    var depthFailColorProperty = updater.depthFailMaterialProperty.color;\n                    var depthFailColor = Property.getValueOrDefault(depthFailColorProperty, time, Color.WHITE, colorScratch);\n                    if (!Color.equals(attributes._lastDepthFailColor, depthFailColor)) {\n                        attributes._lastDepthFailColor = Color.clone(depthFailColor, attributes._lastDepthFailColor);\n                        attributes.depthFailColor = ColorGeometryInstanceAttribute.toValue(depthFailColor, attributes.depthFailColor);\n                    }\n                }\n\n                var show = entity.isShowing && (updater.hasConstantFill || updater.isFilled(time));\n                var currentShow = attributes.show[0] === 1;\n                if (show !== currentShow) {\n                    attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                }\n\n                var distanceDisplayConditionProperty = updater.distanceDisplayConditionProperty;\n                if (!Property.isConstant(distanceDisplayConditionProperty)) {\n                    var distanceDisplayCondition = Property.getValueOrDefault(distanceDisplayConditionProperty, time, defaultDistanceDisplayCondition, distanceDisplayConditionScratch);\n                    if (!DistanceDisplayCondition.equals(distanceDisplayCondition, attributes._lastDistanceDisplayCondition)) {\n                        attributes._lastDistanceDisplayCondition = DistanceDisplayCondition.clone(distanceDisplayCondition, attributes._lastDistanceDisplayCondition);\n                        attributes.distanceDisplayCondition = DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n                    }\n                }\n\n                var offsetProperty = updater.terrainOffsetProperty;\n                if (!Property.isConstant(offsetProperty)) {\n                    var offset = Property.getValueOrDefault(offsetProperty, time, defaultOffset, offsetScratch);\n                    if (!Cartesian3.equals(offset, attributes._lastOffset)) {\n                        attributes._lastOffset = Cartesian3.clone(offset, attributes._lastOffset);\n                        attributes.offset = OffsetGeometryInstanceAttribute.toValue(offset, attributes.offset);\n                    }\n                }\n            }\n\n            this.updateShows(primitive);\n        } else if (defined(primitive) && !primitive.ready) {\n            isUpdated = false;\n        }\n        return isUpdated;\n    };\n\n    Batch.prototype.updateShows = function(primitive) {\n        var showsUpdated = this.showsUpdated.values;\n        var length = showsUpdated.length;\n        for (var i = 0; i < length; i++) {\n            var updater = showsUpdated[i];\n            var entity = updater.entity;\n            var instance = this.geometry.get(updater.id);\n\n            var attributes = this.attributes.get(instance.id.id);\n            if (!defined(attributes)) {\n                attributes = primitive.getGeometryInstanceAttributes(instance.id);\n                this.attributes.set(instance.id.id, attributes);\n            }\n\n            var show = entity.isShowing;\n            var currentShow = attributes.show[0] === 1;\n            if (show !== currentShow) {\n                attributes.show = ShowGeometryInstanceAttribute.toValue(show, attributes.show);\n                instance.attributes.show.value[0] = attributes.show[0];\n            }\n        }\n        this.showsUpdated.removeAll();\n    };\n\n    Batch.prototype.contains = function(updater) {\n        return this.updaters.contains(updater.id);\n    };\n\n    Batch.prototype.getBoundingSphere = function(updater, result) {\n        var primitive = this.primitive;\n        if (!primitive.ready) {\n            return BoundingSphereState.PENDING;\n        }\n        var attributes = primitive.getGeometryInstanceAttributes(updater.entity);\n        if (!defined(attributes) || !defined(attributes.boundingSphere) ||\n            (defined(attributes.show) && attributes.show[0] === 0)) {\n            return BoundingSphereState.FAILED;\n        }\n        attributes.boundingSphere.clone(result);\n        return BoundingSphereState.DONE;\n    };\n\n    Batch.prototype.destroy = function() {\n        var primitive = this.primitive;\n        var primitives = this.primitives;\n        if (defined(primitive)) {\n            primitives.remove(primitive);\n        }\n        var oldPrimitive = this.oldPrimitive;\n        if (defined(oldPrimitive)) {\n            primitives.remove(oldPrimitive);\n        }\n        this.removeMaterialSubscription();\n    };\n\n    /**\n     * @private\n     */\n    function StaticGeometryPerMaterialBatch(primitives, appearanceType, depthFailAppearanceType, closed, shadows) {\n        this._items = [];\n        this._primitives = primitives;\n        this._appearanceType = appearanceType;\n        this._depthFailAppearanceType = depthFailAppearanceType;\n        this._closed = closed;\n        this._shadows = shadows;\n    }\n\n    StaticGeometryPerMaterialBatch.prototype.add = function(time, updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.isMaterial(updater)) {\n                item.add(time, updater);\n                return;\n            }\n        }\n        var batch = new Batch(this._primitives, this._appearanceType, updater.fillMaterialProperty, this._depthFailAppearanceType, updater.depthFailMaterialProperty, this._closed, this._shadows);\n        batch.add(time, updater);\n        items.push(batch);\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.remove = function(updater) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.remove(updater)) {\n                if (item.updaters.length === 0) {\n                    items.splice(i, 1);\n                    item.destroy();\n                }\n                break;\n            }\n        }\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.update = function(time) {\n        var i;\n        var items = this._items;\n        var length = items.length;\n\n        for (i = length - 1; i >= 0; i--) {\n            var item = items[i];\n            if (item.invalidated) {\n                items.splice(i, 1);\n                var updaters = item.updaters.values;\n                var updatersLength = updaters.length;\n                for (var h = 0; h < updatersLength; h++) {\n                    this.add(time, updaters[h]);\n                }\n                item.destroy();\n            }\n        }\n\n        var isUpdated = true;\n        for (i = 0; i < items.length; i++) {\n            isUpdated = items[i].update(time) && isUpdated;\n        }\n        return isUpdated;\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.getBoundingSphere = function(updater, result) {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (item.contains(updater)){\n                return item.getBoundingSphere(updater, result);\n            }\n        }\n        return BoundingSphereState.FAILED;\n    };\n\n    StaticGeometryPerMaterialBatch.prototype.removeAllPrimitives = function() {\n        var items = this._items;\n        var length = items.length;\n        for (var i = 0; i < length; i++) {\n            items[i].destroy();\n        }\n        this._items.length = 0;\n    };\n\n    return StaticGeometryPerMaterialBatch;\n});\n","define([\n        './Cartographic',\n        './defined',\n        './EllipsoidTangentPlane',\n        './Math',\n        './PolygonPipeline',\n        './PolylinePipeline',\n        './WindingOrder'\n    ], function(\n        Cartographic,\n        defined,\n        EllipsoidTangentPlane,\n        CesiumMath,\n        PolygonPipeline,\n        PolylinePipeline,\n        WindingOrder) {\n    'use strict';\n\n    /**\n     * private\n     */\n    var WallGeometryLibrary = {};\n\n    function latLonEquals(c0, c1) {\n        return ((CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON14)) && (CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON14)));\n    }\n\n    var scratchCartographic1 = new Cartographic();\n    var scratchCartographic2 = new Cartographic();\n    function removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\n        var length = positions.length;\n        if (length < 2) {\n            return;\n        }\n\n        var hasBottomHeights = defined(bottomHeights);\n        var hasTopHeights = defined(topHeights);\n        var hasAllZeroHeights = true;\n\n        var cleanedPositions = new Array(length);\n        var cleanedTopHeights = new Array(length);\n        var cleanedBottomHeights = new Array(length);\n\n        var v0 = positions[0];\n        cleanedPositions[0] = v0;\n\n        var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\n        if (hasTopHeights) {\n            c0.height = topHeights[0];\n        }\n\n        hasAllZeroHeights = hasAllZeroHeights && c0.height <= 0;\n\n        cleanedTopHeights[0] = c0.height;\n\n        if (hasBottomHeights) {\n            cleanedBottomHeights[0] = bottomHeights[0];\n        } else {\n            cleanedBottomHeights[0] = 0.0;\n        }\n\n        var index = 1;\n        for (var i = 1; i < length; ++i) {\n            var v1 = positions[i];\n            var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\n            if (hasTopHeights) {\n                c1.height = topHeights[i];\n            }\n            hasAllZeroHeights = hasAllZeroHeights && c1.height <= 0;\n\n            if (!latLonEquals(c0, c1)) {\n                cleanedPositions[index] = v1; // Shallow copy!\n                cleanedTopHeights[index] = c1.height;\n\n                if (hasBottomHeights) {\n                    cleanedBottomHeights[index] = bottomHeights[i];\n                } else {\n                    cleanedBottomHeights[index] = 0.0;\n                }\n\n                Cartographic.clone(c1, c0);\n                ++index;\n            } else if (c0.height < c1.height) {\n                cleanedTopHeights[index - 1] = c1.height;\n            }\n        }\n\n        if (hasAllZeroHeights || index < 2) {\n            return;\n        }\n\n        cleanedPositions.length = index;\n        cleanedTopHeights.length = index;\n        cleanedBottomHeights.length = index;\n\n        return {\n            positions: cleanedPositions,\n            topHeights: cleanedTopHeights,\n            bottomHeights: cleanedBottomHeights\n        };\n    }\n\n    var positionsArrayScratch = new Array(2);\n    var heightsArrayScratch = new Array(2);\n    var generateArcOptionsScratch = {\n        positions : undefined,\n        height : undefined,\n        granularity : undefined,\n        ellipsoid : undefined\n    };\n\n    /**\n     * @private\n     */\n    WallGeometryLibrary.computePositions = function(ellipsoid, wallPositions, maximumHeights, minimumHeights, granularity, duplicateCorners) {\n        var o = removeDuplicates(ellipsoid, wallPositions, maximumHeights, minimumHeights);\n\n        if (!defined(o)) {\n            return;\n        }\n\n        wallPositions = o.positions;\n        maximumHeights = o.topHeights;\n        minimumHeights = o.bottomHeights;\n\n        if (wallPositions.length >= 3) {\n            // Order positions counter-clockwise\n            var tangentPlane = EllipsoidTangentPlane.fromPoints(wallPositions, ellipsoid);\n            var positions2D = tangentPlane.projectPointsOntoPlane(wallPositions);\n\n            if (PolygonPipeline.computeWindingOrder2D(positions2D) === WindingOrder.CLOCKWISE) {\n                wallPositions.reverse();\n                maximumHeights.reverse();\n                minimumHeights.reverse();\n            }\n        }\n\n        var length = wallPositions.length;\n        var numCorners = length - 2;\n        var topPositions;\n        var bottomPositions;\n\n        var minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n\n        var generateArcOptions = generateArcOptionsScratch;\n        generateArcOptions.minDistance = minDistance;\n        generateArcOptions.ellipsoid = ellipsoid;\n\n        if (duplicateCorners) {\n            var count = 0;\n            var i;\n\n            for (i = 0; i < length - 1; i++) {\n                count += PolylinePipeline.numberOfPoints(wallPositions[i], wallPositions[i+1], minDistance) + 1;\n            }\n\n            topPositions = new Float64Array(count * 3);\n            bottomPositions = new Float64Array(count * 3);\n\n            var generateArcPositions = positionsArrayScratch;\n            var generateArcHeights = heightsArrayScratch;\n            generateArcOptions.positions = generateArcPositions;\n            generateArcOptions.height = generateArcHeights;\n\n            var offset = 0;\n            for (i = 0; i < length - 1; i++) {\n                generateArcPositions[0] = wallPositions[i];\n                generateArcPositions[1] = wallPositions[i + 1];\n\n                generateArcHeights[0] = maximumHeights[i];\n                generateArcHeights[1] = maximumHeights[i + 1];\n\n                var pos = PolylinePipeline.generateArc(generateArcOptions);\n                topPositions.set(pos, offset);\n\n                generateArcHeights[0] = minimumHeights[i];\n                generateArcHeights[1] = minimumHeights[i + 1];\n\n                bottomPositions.set(PolylinePipeline.generateArc(generateArcOptions), offset);\n\n                offset += pos.length;\n            }\n        } else {\n            generateArcOptions.positions = wallPositions;\n            generateArcOptions.height = maximumHeights;\n            topPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\n\n            generateArcOptions.height = minimumHeights;\n            bottomPositions = new Float64Array(PolylinePipeline.generateArc(generateArcOptions));\n        }\n\n        return {\n            bottomPositions: bottomPositions,\n            topPositions: topPositions,\n            numCorners: numCorners\n        };\n    };\n\n    return WallGeometryLibrary;\n});\n","define([\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './defineProperties',\n        './DeveloperError'\n    ], function(\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError) {\n    'use strict';\n\n    /**\n     * Value and type information for per-instance geometry attribute that determines if the geometry instance will be shown.\n     *\n     * @alias ShowGeometryInstanceAttribute\n     * @constructor\n     *\n     * @param {Boolean} [show=true] Determines if the geometry instance will be shown.\n     *\n     *\n     * @example\n     * var instance = new Cesium.GeometryInstance({\n     *   geometry : new Cesium.BoxGeometry({\n     *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n     *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n     *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n     *   }),\n     *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n     *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n     *   id : 'box',\n     *   attributes : {\n     *     show : new Cesium.ShowGeometryInstanceAttribute(false)\n     *   }\n     * });\n     *\n     * @see GeometryInstance\n     * @see GeometryInstanceAttribute\n     */\n    function ShowGeometryInstanceAttribute(show) {\n        show = defaultValue(show, true);\n\n        /**\n         * The values for the attributes stored in a typed array.\n         *\n         * @type Uint8Array\n         *\n         * @default [1.0]\n         */\n        this.value = ShowGeometryInstanceAttribute.toValue(show);\n    }\n\n    defineProperties(ShowGeometryInstanceAttribute.prototype, {\n        /**\n         * The datatype of each component in the attribute, e.g., individual elements in\n         * {@link ColorGeometryInstanceAttribute#value}.\n         *\n         * @memberof ShowGeometryInstanceAttribute.prototype\n         *\n         * @type {ComponentDatatype}\n         * @readonly\n         *\n         * @default {@link ComponentDatatype.UNSIGNED_BYTE}\n         */\n        componentDatatype : {\n            get : function() {\n                return ComponentDatatype.UNSIGNED_BYTE;\n            }\n        },\n\n        /**\n         * The number of components in the attributes, i.e., {@link ColorGeometryInstanceAttribute#value}.\n         *\n         * @memberof ShowGeometryInstanceAttribute.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @default 1\n         */\n        componentsPerAttribute : {\n            get : function() {\n                return 1;\n            }\n        },\n\n        /**\n         * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n         * indicate that the components should be mapped to the range [0, 1] (unsigned)\n         * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n         *\n         * @memberof ShowGeometryInstanceAttribute.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default true\n         */\n        normalize : {\n            get : function() {\n                return false;\n            }\n        }\n    });\n\n    /**\n     * Converts a boolean show to a typed array that can be used to assign a show attribute.\n     *\n     * @param {Boolean} show The show value.\n     * @param {Uint8Array} [result] The array to store the result in, if undefined a new instance will be created.\n     * @returns {Uint8Array} The modified result parameter or a new instance if result was undefined.\n     *\n     * @example\n     * var attributes = primitive.getGeometryInstanceAttributes('an id');\n     * attributes.show = Cesium.ShowGeometryInstanceAttribute.toValue(true, attributes.show);\n     */\n    ShowGeometryInstanceAttribute.toValue = function(show, result) {\n        \n\n        if (!defined(result)) {\n            return new Uint8Array([show]);\n        }\n        result[0] = show;\n        return result;\n    };\n\n    return ShowGeometryInstanceAttribute;\n});\n","define([\n        './ComponentDatatype',\n        './defaultValue',\n        './defined',\n        './defineProperties',\n        './DeveloperError'\n    ], function(\n        ComponentDatatype,\n        defaultValue,\n        defined,\n        defineProperties,\n        DeveloperError) {\n    'use strict';\n\n    /**\n     * Value and type information for per-instance geometry attribute that determines if the geometry instance has a distance display condition.\n     *\n     * @alias DistanceDisplayConditionGeometryInstanceAttribute\n     * @constructor\n     *\n     * @param {Number} [near=0.0] The near distance.\n     * @param {Number} [far=Number.MAX_VALUE] The far distance.\n     *\n     * @exception {DeveloperError} far must be greater than near.\n     *\n     * @example\n     * var instance = new Cesium.GeometryInstance({\n     *   geometry : new Cesium.BoxGeometry({\n     *     vertexFormat : Cesium.VertexFormat.POSITION_AND_NORMAL,\n     *     minimum : new Cesium.Cartesian3(-250000.0, -250000.0, -250000.0),\n     *     maximum : new Cesium.Cartesian3(250000.0, 250000.0, 250000.0)\n     *   }),\n     *   modelMatrix : Cesium.Matrix4.multiplyByTranslation(Cesium.Transforms.eastNorthUpToFixedFrame(\n     *     Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883)), new Cesium.Cartesian3(0.0, 0.0, 1000000.0), new Cesium.Matrix4()),\n     *   id : 'box',\n     *   attributes : {\n     *     distanceDisplayCondition : new Cesium.DistanceDisplayConditionGeometryInstanceAttribute(100.0, 10000.0)\n     *   }\n     * });\n     *\n     * @see GeometryInstance\n     * @see GeometryInstanceAttribute\n     */\n    function DistanceDisplayConditionGeometryInstanceAttribute(near, far) {\n        near = defaultValue(near, 0.0);\n        far = defaultValue(far, Number.MAX_VALUE);\n\n        \n\n        /**\n         * The values for the attributes stored in a typed array.\n         *\n         * @type Float32Array\n         *\n         * @default [0.0, 0.0, Number.MAX_VALUE]\n         */\n        this.value = new Float32Array([near, far]);\n    }\n\n    defineProperties(DistanceDisplayConditionGeometryInstanceAttribute.prototype, {\n        /**\n         * The datatype of each component in the attribute, e.g., individual elements in\n         * {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n         *\n         * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n         *\n         * @type {ComponentDatatype}\n         * @readonly\n         *\n         * @default {@link ComponentDatatype.FLOAT}\n         */\n        componentDatatype : {\n            get : function() {\n                return ComponentDatatype.FLOAT;\n            }\n        },\n\n        /**\n         * The number of components in the attributes, i.e., {@link DistanceDisplayConditionGeometryInstanceAttribute#value}.\n         *\n         * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n         *\n         * @type {Number}\n         * @readonly\n         *\n         * @default 3\n         */\n        componentsPerAttribute : {\n            get : function() {\n                return 2;\n            }\n        },\n\n        /**\n         * When <code>true</code> and <code>componentDatatype</code> is an integer format,\n         * indicate that the components should be mapped to the range [0, 1] (unsigned)\n         * or [-1, 1] (signed) when they are accessed as floating-point for rendering.\n         *\n         * @memberof DistanceDisplayConditionGeometryInstanceAttribute.prototype\n         *\n         * @type {Boolean}\n         * @readonly\n         *\n         * @default false\n         */\n        normalize : {\n            get : function() {\n                return false;\n            }\n        }\n    });\n\n    /**\n     * Creates a new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance given the provided an enabled flag and {@link DistanceDisplayCondition}.\n     *\n     * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition.\n     * @returns {DistanceDisplayConditionGeometryInstanceAttribute} The new {@link DistanceDisplayConditionGeometryInstanceAttribute} instance.\n     *\n     * @exception {DeveloperError} distanceDisplayCondition.far must be greater than distanceDisplayCondition.near\n     *\n     * @example\n     * var distanceDisplayCondition = new Cesium.DistanceDisplayCondition(100.0, 10000.0);\n     * var instance = new Cesium.GeometryInstance({\n     *   geometry : geometry,\n     *   attributes : {\n     *     distanceDisplayCondition : Cesium.DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition(distanceDisplayCondition)\n     *   }\n     * });\n     */\n    DistanceDisplayConditionGeometryInstanceAttribute.fromDistanceDisplayCondition = function(distanceDisplayCondition) {\n        \n\n        return new DistanceDisplayConditionGeometryInstanceAttribute(distanceDisplayCondition.near, distanceDisplayCondition.far);\n    };\n\n    /**\n     * Converts a distance display condition to a typed array that can be used to assign a distance display condition attribute.\n     *\n     * @param {DistanceDisplayCondition} distanceDisplayCondition The distance display condition value.\n     * @param {Float32Array} [result] The array to store the result in, if undefined a new instance will be created.\n     * @returns {Float32Array} The modified result parameter or a new instance if result was undefined.\n     *\n     * @example\n     * var attributes = primitive.getGeometryInstanceAttributes('an id');\n     * attributes.distanceDisplayCondition = Cesium.DistanceDisplayConditionGeometryInstanceAttribute.toValue(distanceDisplayCondition, attributes.distanceDisplayCondition);\n     */\n    DistanceDisplayConditionGeometryInstanceAttribute.toValue = function(distanceDisplayCondition, result) {\n        \n\n        if (!defined(result)) {\n            return new Float32Array([distanceDisplayCondition.near, distanceDisplayCondition.far]);\n        }\n        result[0] = distanceDisplayCondition.near;\n        result[1] = distanceDisplayCondition.far;\n        return result;\n    };\n\n    return DistanceDisplayConditionGeometryInstanceAttribute;\n});\n"],"sourceRoot":""}